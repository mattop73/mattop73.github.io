if ( window.jQuery ) {

(function( $ ){
	// texthtml : Set the content of each element in the set of matched elements to the specified text, with carriage returns.
	$.fn.texthtml = function( text ) { this.html( escapeHTML( text ) ) ; return this; } ;

	// Pour faire de la recherche en case insensitive;
	$.expr[':'].icontains = function(obj, index, meta, stack){
		return (obj.textContent || obj.innerText || $(obj).text() || '').toLowerCase().indexOf(meta[3].toLowerCase()) >= 0;
	};
})( jQuery );

/*
function -
function RECOUVREMENTS QUOMODO
*/

(function( $ ){
	if ( ! $.__jQueryQuomodo ) {
/*
function $.map
Objet: permettre à .map de prendre un object comme paramètre.
*/
		var defaultMap = $.map ;
		$.map = function () {
			var obj = arguments[ 0 ] ;
			if ( obj.length != undefined ) return defaultMap.apply( this , arguments ) ;
			var z = [] , fn = arguments[ 1 ] , y = arguments[ 2 ] ;
			for ( var x in obj ) z.push( [ obj[ x ] , x ] ) ;
			return defaultMap.apply( this , [ z , function ( v ) { return fn( v[ 0 ] , v[ 1 ] , y ) ; } ] ) ;
		} ;

/*
function $.css background-position
Objet: permettre à .css de fonctionner y compris sur IE où il faut faire background-position-x et background-position-y
*/
		var __defaultCss = $.fn.css ;
		$.fn.css = function () {
			var defaultRes = __defaultCss.apply( this , arguments ) ;
			if ( defaultRes === undefined && arguments.length == 1 && ( typeof arguments[ 0 ] ) == "string" && ( arguments[ 0 ].toLowerCase() == "background-position" || arguments[ 0 ].toLowerCase() == "backgroundposition" ) ) {
				var bpx = __defaultCss.apply( this , [ "background-position-x" ] ) ;
				var bpy = __defaultCss.apply( this , [ "background-position-y" ] ) ;
				if ( bpx !== undefined && bpy !== undefined ) return bpx + " " + bpy ;
			}
			return defaultRes ;
		} ;
		$.__jQueryQuomodo = true ;
	}
})( jQuery );

/*
function -
function CUSTOMVAL, CUSTOMBIND
*/

(function( $ ){
	if ( ! $.__quomodoCustom ) {
		$.__quomodoCustom = true ;
		var __defaultOn = $.fn.on ;
		$.fn.on = function () { var _arguments = arguments ; return this.each( function() { ( $( this ).data( "customon" ) || __defaultOn ).apply( $( this ) , _arguments ) ; } ) ; } ;
		$.fn.$on = function () { return __defaultOn.apply( this , arguments ) ; } ;
		var __defaultVal = $.fn.val ;
		$.fn.val = function () {	
			if ( ! arguments.length || arguments[ 0 ] == undefined ){
				var $first = this.eq( 0 );				
				return ( $first.data( "customval" ) || __defaultVal ).apply( $first, arguments ) ;
			} else {
				var _arguments = arguments ;
				return this.each( function() { var $this = $( this ) ; ( $this.data( "customval" ) || __defaultVal ).apply( $this , _arguments ) ; } ) ; 
			}
		} ;
		$.fn.$val = function () { return __defaultVal.apply( this , arguments ) ; } ;
	}
})( jQuery );

/*
function -
function OPTIONS, HORIZONTAL SELECT
*/

(function( $ ){

/* 
OPTIONS :
Objet: Vide le select puis crée les options.
Usage: $( one element ).options( options )

options : array de au choix
	string : value = display = string
	array : [ value (string) , [ name (string) ] , [ disabled (boolean) ] ]
	object :
		{ name : string , value : string , [ disabled : boolean ] }
		ou { label : string , options : options } => fait un OPTGROUP

ATTENTION :
faire si nécessaire .change pour mettre une fonction de change ou .val pour mettre la (les) valeur(s) par défaut APRÈS le .options

 */
function create_option( option , x, y ){//recopié de q_common.js
	var disabled = false ;
	var selected = false;
	var value , name ;
	if ( ( typeof option ) == "string" ) option = [ option ];
	if ( option.splice ) { 
		// array : [ value , [ name (type string) ] , [ disabled (type boolean) ] ]
		value = option[ 0 ] ;
		name = ( option.length > 0 && ( typeof option[ 1 ] ) == "string" ) ? option[ 1 ] : option[ 0 ] ;
		if ( option.length > 0 && ( typeof option[ 1 ] ) == "boolean" ) disabled = option[ 1 ] ;
		else if ( option.length > 1 ) disabled = option[ 2 ] ;
	} else {
		value = ( option.value != undefined ) ? option.value : option ;
		name = ( option.name != undefined ) ? option.name : value;
		if ( option.disabled ) disabled = option.disabled ;
		if ( option.selected ) selected = option.selected;
	}
	var opt = new Option( name, value );
	if ( x && x.splice && indexOfItem( value , x ) != -1 ) selected = true;
	
	if ( disabled ) opt.disabled = "disabled" ;
	if ( selected ) opt.selected = "selected" ;
	
	var args = ( x && ! x.splice ) ? x : ( ( y ) ? y : null );
	if ( args ) create_attributes( opt, args );
	
	return opt;
};
function indexOfItem( theitem , thelist ) {
	return $.inArray( theitem, thelist );
/*
	var thesep, s, i ;
	thesep = "\n" ;
	s = thesep + thelist.join( thesep ) + thesep ;
	i = s.indexOf( thesep + theitem + thesep ) ;
	if ( i == -1 ) return i ;
	return ( s.substring( 0 , i ).split( thesep ).length ) - 1 ;
*/
}
function create_attributes( e , arg ) {
	var z ;
	for ( var x in arg ) {
		z = arg[ x ] ;
		if ( ( x == "innerHTML" ) && ( ! (/</).test( z ) ) ) q_innerHTML( e , z ) ;
		else {
			if ( typeof z == "string" ) {
				try {//vh : pb sur IE7 et IE8 pour la propriété align d'un td ; try plus souple je pense.
					e[ x ] = z ;
				} catch (err) {
					e.setAttribute( x , z ) ;
				}
//				if ( isie6() || isie7() ) e.setAttribute( x , z ) ; // attention pas ie8 sinon ça buggue sur className il faut mettre class
//				else e[ x ] = z ;
			} else for ( var y in z ) {
				if ( isIE && y == "cursor" && z[ y ] == "pointer" ) z[ y ] = "hand" ;
				try { e[ x ][ y ] = z[ y ] ; } catch (err) {
					var s = "error in create_attributes" ;
					try { s += " " + x + " for " + y + " value : " + z[ y ] ; } catch(err2) { } ;
					try { s += "\r" + ( err.message || err.description || "(no message)" ) ; } catch(err2) { } ;
					try { s += "\rElement's innerHTML is: \r\r" + e.innerHTML ; } catch(err2) { } ;
					debugmail( s ) ;
				} ;
			}
		}
	}
}
function create_elem( t , arg , text ) {
	var e = document.createElement( t ) ;
	if ( arg ) create_attributes( e , arg ) ;
	if ( text ) e.appendChild( document.createTextNode( text ) ) ;
	return e ;
}
	$.fn.options = function( options ) {
		if ( ! this.length ) return this ;
		var select = this.get( 0 ) ;
		if ( select.tagName.toLowerCase() != "select" ) return this ;
		if ( select.options ) select.options.length = 0 ;
		this.empty().unbind( "click" ).bind( "click" , function( event ) { q_stopPropagation( event ) ; } ) ;
		
		if ( options ) {
			for ( var i in options ){
				var opt = options[ i ];
				if ( ( typeof opt ) == "string" ) opt = [ opt ] ;
				if ( ! opt.splice && opt.label ){ // c'est un optgroup
					var optargs = ( opt.args ) ? opt.args : {};
					optargs.label = opt.label;
					var group = create_elem( "OPTGROUP", optargs) ;
					select.appendChild( group );
					for ( var j in opt.options ) select.options[ select.options.length ] = create_option( opt.options[ j ] ) ;
				} else select.options[ select.options.length ] = create_option( opt ) ;
			}
		}
		$( "option[disabled]" , this ).css({'color': '#cccccc'}) ;
		//2013-01-10, vh : pour IE7, on recouvre le comportement du change d'un sélect en cas de sélection d'une option désctivée (disabled). IE7 autorise la sélection de ces options, pas les autres navigateurs
		var currentOnChange = this.data( "selecthandler" ) || select.onchange || ( this.data( "events" ) && this.data( "events" ).change && this.data( "events" ).change[ 0 ].handler ) ;
		this.attr( "onchange" , "" ) ;
		this.data( "customon" , function () {
			var d = arguments[ 0 ] ;
			var e = arguments[ 2 ] ;
			var f = arguments[ 3 ] ;
			if ( typeof d == "string" && d == "change" ) {
				this.unbind( "change" ) ;
				if ( $.isFunction(e) ) f=e ;
				this.data( "selecthandler" , f ) ;
				this.get( 0 ).onchange = function ( event ) {
					if ( this.options[ this.selectedIndex ].disabled ) $( this ).val( $( this ).data( "currentSelectedVal" ) ) ;
					else {
						$( this ).data( "currentSelectedVal" , $( this ).val() ) ;
						if ( f ) f.apply( this , [ event ] ) ;
					}
				} ;
				return this ;
			} else return this.$on.apply( this , arguments ) ;
		} ) ;
		this.data( "customval" , function () {
			var v = this.$val.apply( this , arguments ) ;
			if ( arguments.length ) this.data( "currentSelectedVal" , this.$val() ) ;
			return v ;
		} ) ;
		this.bind( "change" , currentOnChange ) ;
		return this ;
	};

/* 
HORIZONTALSELECT :
Objet: Affiche des images à sélectionner horizontalemement.
Usage: $( one element ).horizontalselect( options )

options : 
	padding?:Integer, marge autour des images, défaut 1
	imgheight?:Integer, largeur des images, défaut 30
	click?:Function, appelée sur le clic sur une image
	values:Array.<value>
	
<value>:
	value:String
	src:String

On peut utiliser $( one element ).val() qui prend lors <value>.value comme valeur

 */
	$.fn.horizontalselect = function( options ) {
		if ( ! this.length ) return this ;
		var div = this.get( 0 ) ;
		if ( div.tagName.toLowerCase() != "div" ) return this ;
		if ( ! options || ! options.values || ! options.values.length ) return this ;
		//this.empty().unbind( "click" ).bind( "click" , function( event ) { q_stopPropagation( event ) ; } ) ;
		
		var table = $( '<table cellspacing="0" cellpadding="0" border="0" class="q_horizontalselect_table"></table>' ) ;
		var tr = $( '<tr></tr>' ).appendTo( table ) ;
		var padding = ( options.padding == undefined ) ? 1 : options.padding ;
		var values = options.values ;
		var srcs = [] ;
		for ( var j = 0 ; j < values.length ; j++ ){
			$( '<td style="padding:' + padding + 'px">' ).
				appendTo( tr ).
				append( '<img style="border:solid 2px transparent" />' ).
					find( "img:last" ).
					attr( "index" , j  ).
					attr( "rel" , values[ j ].value ).
					attr( "src" , values[ j ].src ).
					css( "height", options.imgheight || 30 ).
					hover( function( event ){
						var d = $( this ).parents( ".q_horizontalselect_table:eq(0)" );
						if ( $( this ).attr( "rel" ) == d.data( "selected" ) ) return;
						if ( event.type == "mouseenter" ) $( this ).
							css( "border-color", "" ).
							addClass( "clubbordercolor3" );
						else $( this ).
							css( "border-color", "transparent" ).
							removeClass( "clubbordercolor3" );
					} ).
					click( function( event ){
						var d = $( this ).parents( ".q_horizontalselect_table:eq(0)" );
						if ( $( this ).attr( "rel" ) == d.data( "selected" ) ) return;
						d.data( "selected", $( this ).attr( "rel" ) );
						d.parent().trigger( "change" );

						$( "img", d ).css( "border-color", "transparent" );
						$( this ).css( "border-color", "red" );
						if ( options.click ) options.click( d.data( "selected" ) ) ;
					} ) ;
				srcs.push( values[ j ].src ) ;
		}
		var $this = this ;
		q_waitimgsloaded( srcs , function(){
			$this.data( "complete" , true ) ;
			if ( $this.data( "completeval" ) ) $this.val( $this.data( "completeval" ) ) ;
			if ( isie() ) $this.height( $this.find( ".q_horizontalselect_table:eq(0)" ).height() + 17 ) ;//pour éviter une scrollbar verticale
		} ) ;
		this.data( "customval" , function () {
			if ( ! arguments.length || arguments[ 0 ] == undefined ) return $( ".q_horizontalselect_table:eq(0)" , this ).data( "selected" ) ;
			var v = arguments[ 0 ] ;
			var d = $( this ).find( ".q_horizontalselect_table:eq(0)" ) ;
			$( "img" , this ).each( function( ){
				if ( $( this ).attr( "rel" ) == v ) {
					$( this ).click() ;
					var wdisplay = d.parent().width() ;
					var wcontainer = d.width() ;
					if ( wdisplay < wcontainer ) d.parent().scrollLeft( Math.max( 0 , Math.min( wcontainer - wdisplay , $( this ).position().left + $( this ).width() / 2 - wdisplay / 2 ) ) ) ;
				}
			} ) ;
			if ( ! this.data( "complete" ) ) this.data( "completeval" , v ) ;
			return this ;
		} ) ;
		this.append( table ).unbind( "mousedown" ).mousedown( function( event ){ q_stopPropagation( event ); } ) ;
		return this ;
	};
})( jQuery );

/*
function -
function QIFRAME
*/
/* 
Objet: Charger une iframe avec événements d'auto-resize.
Usage: $( one element ).appendQIframe( src:String , options?:<options> )

<options> :
	- width:Integer, largeur initiale en px
	- height:Integer, hauteur initiale en px
	- percent : boolean, si largeur et hauteur en %
	- withWait?:Boolean, affiche le panneau wait, false par défaut
	- maxwidth?:Integer , largeur max en px
	- maxheight?:Integer , hauteur max en px
	- attach?:Json, éléments à attacher à l'iframe, accessibles via iframe.key. Par exemple :
		- une fonction onresize
		- onIframeLoaded?:Function, appelée sur le onload
 */

(function( $ ){
	$.fn.appendQIframe = function( src , options ) {
		if ( ! this.length ) return this ;
		src = q_forceoldurl( src ) ;
		options = options || {} ;
		var html = '<div class="overflow" onmousedown="q_stopPropagation( event )"' ;
		var style = "width: " + ( options.width || 100 ) + ( options.percent ? "%" : "px" ) + " ; height: " + ( options.height || 100 ) + ( options.percent ? "%" : "px" ) + ";" ;
		var wrapperstyle = options.percent ? ( ' style="width: ' + ( options.width || 100 ) + "% ; height: " + ( options.height || 100 ) + '%"' ) : "" ;
		html += ' style="overflow: hidden ; margin: auto ; padding: 0px ; position: relative ; top: 0px ; left: 0px ; ' + style + '"' ;
		html += ' align="center"><div class="qiframe-wrapper"' + wrapperstyle + '><iframe class="qiframe" scrolling="no" frameborder="0" onload="quomodo.iframe( this ).togglewait( false ) ; if ( this.onIframeLoaded ) this.onIframeLoaded() ;" src="' + escapeattribute( src ) + '"' ;
		if ( style.length ) html += ' style="' + style + '"' ;
		html += '></iframe></div><div class="q_fsm_wait" style="position: absolute ; top: 0px ; left: 0px ; background-color: #DDD"><img src="/old/v1/bundles/qlub/images/waitanim.gif" alt="" /></div></div>' ;
		this.append( html ) ;
		this.find( ".q_fsm_wait" ).toggle( options.withWait == true ) ;
		this.find( "iframe" ).data( "options", options ) ;
		var iframe = quomodo.iframe( this.find( "iframe" ).get( 0 ) ) ;
		if ( options.maxwidth ) iframe.maxWidth = options.maxwidth ;
		if ( options.maxheight ) iframe.maxHeight = options.maxheight ;
		if ( options.attach ) {
			for ( var k in options.attach ) iframe[ k ] = options.attach[ k ] ;
		}
		iframe[ "trigger" ] = function() {
			this.contentWindow.onTrigger.apply( this, arguments ) ;
		} ;
		if ( iframe.onresize ) iframe.onresize( options.width, options.height ) ;
		iframe.attachTrigger = function( callback ){
			iframe.trigger = function () {
				callback.apply( this, arguments ) ;
			} ;
		} ;
		return this ;
	};
})( jQuery );

/*
function -
function GMAP
*/
/* 
Objet: Charger une iframe pour GMap.
Usage: $( one element ).QGMap( options?:<options> )

<options> :
	- width:Integer, largeur initiale en px
	- height:Integer, hauteur initiale en px
 */

(function( $ ){
	$.fn.QGMap = function( options ) {
		if ( ! this.length ) return this ;
		options = $.extend( {} , options ) ;
		var html = '<iframe scrolling="no" frameborder="0" class="gm_mapframe" style="border:0px ; width:' + ( options.width || '100%' ) + ';height:' + ( options.height || '100%' ) + ';overflow:hidden;" src="/old/v1/services/gmap/iframe_gmapv3.html"></iframe>' ;
		this.append( html ) ;
		options.frame = this.find( "iframe" ).get( 0 ) ;
		quomodo.gmap.addmap( options ) ;
		return this ;
	};
})( jQuery );

/*
function -
function CSV
*/

/* Usage:
 *  jQuery.csv()(csvtext)               returns an array of arrays representing the CSV text.
 *  jQuery.csv("\t")(tsvtext)           uses Tab as a delimiter (comma is the default)
 *  jQuery.csv("\t", "'")(tsvtext)      uses single quotes as the quote character (double quotes is the default)
 *  jQuery.csv("\t", "'\"")(tsvtext)    uses single & double quotes as the quote character
 *  Note: Use jQuery.csv(delim, 0) to speed up loading, if there are no quotes. Use with care: there might be quotes
 *
 *  jQuery.csv2json()(csvtext)          returns an array of hashes, whose keys are from the header row.
 *                                      Otherwise, syntax identical to jQuery.csv()
 */

(function($) {
function parseExcelString(s , delim , quote ){
	var undef = 'undefined';
	delim = typeof delim == undef ? ','    : delim;         // delimiter is comma by default
	quote = typeof quote == undef ? '"'    : quote;         // quotes mark is "double quotes" by default
	var doublequotere = new RegExp( quote + quote , "g" ) ;
	s=s.replace( /(\r\n)|(\n\r)/g, "\n");
	var regexsimple = new RegExp( '[^' + delim + '\n\r]+' , 'g' );
	var regexquote = new RegExp( quote + '((([^' + delim + '\r\n' + quote + ']|' + quote + quote + ')*[\r\n' + delim + ']+)*([^' + delim + '\r\n' + quote + ']|' + quote + quote + ')*)' + quote + '' , 'g' );
	var lastIndex=0;
	var ar=new Array();
	ar[0]=new Array();
	var res, k=0,l=0, maxk=0;
	while(1){
		var useregexpquote=false;
		if(s.charAt(lastIndex)==quote){
			regexquote.lastIndex=lastIndex;
			res=regexquote.exec(s);
			if(res!=null && lastIndex+res[0].length==regexquote.lastIndex){//match depuis lastIndex
				lastIndex=regexquote.lastIndex;
				useregexpquote=true;
			}else{
				regexsimple.lastIndex=lastIndex;
				res=regexsimple.exec(s);
				lastIndex=regexsimple.lastIndex;
			}
		}else if(s.charAt(lastIndex)== delim ){//case vide
			lastIndex++;
			ar[l][k]="" ;
			k++;
			if(lastIndex==s.length)break;
			continue;
		}else if((s.charAt(lastIndex)=='\n') || (s.charAt(lastIndex)=='\r')){//case vide
			lastIndex++;
			ar[l][k]="" ;
			l++;
			ar[l]=new Array();
			if(maxk<k)maxk=k;
			k=0;
			if(lastIndex==s.length)break;
			continue;
		}else{
			regexsimple.lastIndex=lastIndex;
			res=regexsimple.exec(s);
			lastIndex=regexsimple.lastIndex;
		}
		if(res==null)break;
		if(useregexpquote){
			ar[l][k]=res[1].replace( doublequotere , quote ) ;
		}else{
			ar[l][k]=res[0];
		}
		if(lastIndex==s.length)break;
		var c=s.charAt(lastIndex);
		lastIndex++;
		if(c==delim){
			k++;
		}else if((c=='\r') || (c=='\n')){
			l++;
			ar[l]=new Array();
			if(maxk<k)maxk=k;
			k=0;
		}
	}
	if(l==0)maxk=k;
	while(1){//on vire les lignes vides de la fin
		if(l>0 && ((ar[l].length==0) || (ar[l].length==1 && ar[l][0].length==0))){
			l--;
		}else{
			break;
		}
	}
	//nb lignes : l+1, nb colonnes : maxk+1
	ar.ncols = maxk+1 ;
	ar.nrows = l+1 ;
	return ar ;
	ar = ( new Array(ar, maxk+1, l+1) )[ 0 ] ;
	var lines = [] ;
	for ( var i = 0 ; i < l+1 ; i++ ) {
		var line = [] ;
		for ( var j = 0 ; j < maxk+1 ; j++ ) line.push( ar[ i ][ j ] ) ;
		lines.push( line ) ;
	}
	return lines ;
}
$.extend({
	csv: function(delim, quote) {
		return function ( text ) { return parseExcelString( text , delim , quote ) ; } ;
	}
});

})(jQuery);

/*
function -
function ellipse
*/

/* Usage: Ellipse pour les textes trop long  ( http://plugins.jquery.com/ellipsis/ )

	rows : nombre de ligne
	char : caractère qui marque la fin du teste


 */

(function($) {
    $.fn.ellipsis = function(options) {

/*
	 'row' : 1, // on a le choix d'imposer le nombre de lignes ou la hauteur
	'height' : 120, // en spécifiant row ou height
*/
        var defaults = {
            'char' : '...' 
        };

        options = $.extend(defaults, options);
	if ( ! options.row && ! options.height ) options.row = 1 ;

        this.each(function() {

            var $this = $(this);
            var text = $this.text();
            var origHeight = $this.height();

            $this.text('a');
            var rowHeight = $this.height();
		var targetHeight ;
		if ( options.row )
			targetHeight = rowHeight * options.row;
		else {
			var rows = Math.floor( options.height / rowHeight ) ;
			targetHeight = rowHeight * rows; 
		}

            if (origHeight <= targetHeight) {
                $this.text(text);
                return;
            }

            // Binary search for max length
            var start = 1;
            var end = text.length;
          
            while (start < end) {
                var length = Math.ceil((start + end) / 2);

                $this.text(text.slice(0, length) + options['char']);

                if ($this.height () <= targetHeight) {
                    start = length;
                } else {
                    end = length - 1;
                }
            }
            $this.text(text.slice(0, start) + options['char']);
        });

        return this;
    };
}) (jQuery);

}

if ( window.jQuery ) {

/*
function -
function qGUI
*/
/* 
*/

(function( $ ){
	function realVal( $elem ){
		var tagName = $elem.get( 0 ).tagName.toLowerCase() ;
		if ( tagName != "option" && tagName != "select" ) return $elem.val() ;
		var values = [] ;
		$elem.find( "option" ).andSelf().filter( "option" ).each( function(){
			if ( ! this.selected ) return ;
			var v = this.value ;
			var realV = this.getAttribute( "real-value" ) ;
			if ( realV != undefined ) return values.push( realV ) ;
			if ( v != undefined ) values.push( v ) ;
		} ) ;
		if ( tagName == "select" && $elem.attr( "multiple" ) == "multiple" ) return values ;
		if ( ! values.length ) return null ;
		return values[ 0 ] ;
	}
	$.fn.jsonVal = function() {
		var isGet = false ;
		if ( ! arguments.length || arguments[ 0 ] == undefined || typeof arguments[ 0 ] == "boolean" ) {
			isGet = true ;
			var booleanToString = arguments[ 0 ] ;
			var o = {} ;
		} else {
			var o = arguments[ 0 ] ;
		}
		this.find( ":input, ul[gui]" ).andSelf().filter( ":input, ul[gui]" ).each( function(){
			if ( this.tagName.toLowerCase() == "ul" ) {
				var $this = $( this ).prev() ;
				var _this = $this.get( 0 ) ;
			} else {
				var $this = $( this ) ;
				var _this = this ;
			}
			
			if ( _this.name ) {
				if ( isGet ) o[ _this.name ] = realVal( $this ) ;
				else {
					if ( o[ _this.name ] != undefined ) $this.val( o[ _this.name ] ) ;
				}
			} else {
				var values = [] ;
				$this.find( "option" ).each( function(){
					if ( ! this.value ) return ;
					if ( isGet ) {
						var v = this.selected ;
						if ( booleanToString ) v = String( v ) ;
						o[ this.value ] = v ;
					} else {
						if ( eval( o[ this.value ] ) == true ) values.push( this.value ) ;
					}
				} ) ;
				if ( ! isGet ) $this.val( values ) ;
			}
		} ) ;
		if ( isGet ) return o ;
		return this ;
	} ;
	var __guiGetHTML = {} ;
	__guiGetHTML[ "buttons" ] = function( value ) {
		return null ;
	} ;
	var __guiRender = {} ;
	__guiRender[ "chooselist" ] = function() {
		var behavior = this.data( "guiBehavior" ).apply( this, [ this.attr( "gui-behavior" ) ] ) ;
		this.prev().html( behavior.getHTML.apply( this, [ realVal( this ) ] ) ) ;
	} ;
	__guiRender[ "buttons" ] = function() {
		var _this = this ;
		var selectBehaviorAttr = this.attr( "gui-behavior" ) ;
		var $prev = this.prev() ;
		$prev.find( ".gui-selectbutton" ).removeClass( "gui-selected" ) ;
		this.find( "option" ).each( function(){
			var behavior = _this.data( "guiBehavior" ).apply( _this, [ this.getAttribute( "gui-behavior" ) || selectBehaviorAttr ] ) ;
			var $option = $prev.find( ".gui-selectbutton[rel='" + this.value + "']" ) ;
			if ( this.selected ) $option.addClass( "gui-selected" ) ;
			var html = behavior.getHTML.apply( _this, [ this.getAttribute( "real-value" ) || this.getAttribute( "default-value" ) || this.value, this.selected ] ) ;
			if ( html != null ) $option.html( html ) ;
		} ) ;
	} ;
	$.fn.qGUI = function( options ) {
		if ( ! this.length ) return this ;
		function getItems( $each ){
			var tagName = $each.get( 0 ).tagName.toLowerCase() ;
			return $each.find( ( tagName == "select" ) ? "option" : "li" ).map( function(){
				var $this = $( this ) ;
				var value = this.getAttribute( "value" ) ;
				if ( this.getAttribute( "disabled" ) == "disabled" ) return null ;
				return { value: value, html: $this.html(), selected: ! ( $this.attr( "selected" ) == undefined || $this.attr( "selected" ) == "false" ), "default-value": $this.attr( "default-value" ), "gui-behavior": $this.attr( "gui-behavior" ) } ;
			} ).get();
		}
		function guiBehavior( guiBehaviorAttribute ){
			var behavior = guiBehaviorAttribute && options.behaviors && options.behaviors[ guiBehaviorAttribute ] ;
			return {
				setValue: ( behavior && behavior.setValue ) || function( value ){ return value ; },
				getHTML: ( behavior && behavior.getHTML ) || function( value ){
					if ( __guiGetHTML[ this.attr( "gui" ) ] ) return __guiGetHTML[ this.attr( "gui" ) ].apply( this, [ value ] ) ;
					if ( realValue != undefined ) return realValue ;
					return value ;
				}
			} ;
		} ;
		this.each( function(){
			var $each = $( this ) ;
			var gui = $each.attr( "gui" ) ;
			if ( $.inArray( gui, [ "chooselist", "buttons", "slider" ] ) == -1 ) return ;
			var tagName = this.tagName.toLowerCase() ;
			if ( $.inArray( tagName, [ "select", "ul", "input" ] ) == -1 ) return ;
			var $select ;
			if ( $.inArray( tagName, [ "select", "ul" ] ) != -1 ) var items = getItems( $each ) ;
			if ( tagName == "ul" ) {
				$each.prev().filter( "*[__gui]" ).remove() ;
				$select = $( '<select __gui="gui" style="display:none"></select>' ).
					insertBefore( this ) ;
				if ( $each.attr( "multiple" ) == "multiple" ) $select.attr( "multiple", "multiple" ) ;
				if ( $( this ).attr( "name" ) ) $select.attr( "name", $( this ).attr( "name" ) ) ;
				if ( $( this ).attr( "gui-behavior" ) ) $select.attr( "gui-behavior", $( this ).attr( "gui-behavior" ) ) ;
				if ( $( this ).attr( "gui" ) ) $select.attr( "gui", $( this ).attr( "gui" ) ) ;
				for ( var i = 0 ; i < items.length ; i++ ) {
					var $option = $( '<option></option>' ).
						appendTo( $select ).
						attr( "value", items[ i ].value ) ;
					if ( items[ i ].selected ) $option.get( 0 ).selected = true ;
					if ( items[ i ][ "default-value" ] ) $option.attr( "default-value", items[ i ][ "default-value" ] ) ;
					if ( items[ i ][ "gui-behavior" ] ) $option.attr( "gui-behavior", items[ i ][ "gui-behavior" ] ) ;
				}
				$each.hide().
					data( "customval" , function () {
						return this.prev().val.apply( this.prev(), arguments ) ;
					} ) ;
			} else $select = $( this ) ;
			$select.data( "guiBehavior" , guiBehavior ) ;
			$select.data( "customval" , function () {
				if ( ! arguments.length || arguments[ 0 ] == undefined ) return this.$val.apply( this , arguments ) ;
				var selectBehaviorAttr = this.attr( "gui-behavior" ) ;
				function setValue( values, i ){
					var _this = this ;
					i = i || 0 ;
					var value = ( typeof values == "object" && values.splice ) ? values[ i ] : values ;
					if ( typeof value != "object" ) {
						var $option = this.find( "option[value='" + value + "']" ) ;
						if ( ! $option.length ) $option = this.find( "option[gui-behavior]" ) ;
						var behavior = guiBehavior.apply( _this, [ $option.attr( "gui-behavior" ) || selectBehaviorAttr ] ) ;
						value = behavior.setValue.apply( this, [ value, $option.attr( "default-value" ) ] ) ;
					}
					if ( typeof value == "function" ) return value.apply( this, [ function( value ) {
						if ( typeof values == "object" && values.splice ) {
							values[ i ] = value ;
							setValue.apply( _this, [ values, i ] ) ;
						} else setValue.apply( _this, [ value ] ) ;
					} ] ) ;
					if ( typeof value == "object" ) {
						this.find( "option[value='" + value[ "value" ] + "']" ).get( 0 ).setAttribute( "real-value", value[ "real-value" ] ) ;
						if ( typeof values == "object" && values.splice ) values[ i ] = value[ "value" ] ;
						else values = value[ "value" ] ;
					}
					i++ ;
					if ( typeof values == "object" && values.splice && i < values.length ) return setValue.apply( this, [ values, i ] ) ;
					this.$val.apply( this , [ values ] ) ;
					__guiRender[ this.attr( "gui" ) ].apply( this, [] ) ;
				}
				//var value = behavior.setValue.apply( this, [ arguments[ 0 ] ] ) ;
				setValue.apply( this, [ arguments[ 0 ] ] ) ;
				return this ;
			} ) ;
			$select.prev().filter( "*[__gui]" ).remove() ;
			if ( gui == "chooselist" ) {
				var $pseudoselect = $( '<span __gui="gui" class="gui-value"></span>' ).
					insertBefore( $select ).
					unbind( "click" ).click( function() {
						$pseudoselect = $( this ) ;
						var src = $( '<table cellspacing="0" cellpadding="0" border="0" style="background-color : white; border : solid 1px #333;"></table>' ) ;
						for ( var i = 0 ; i < items.length ; i++ ) {
							var selected = ( items[ i ].value == $select.val() ) ;
							src.
								append( '<tr valign="middle"><td valign="middle" align="center" width="20" style="cursor: pointer; padding-left: 3px; height : 22px"><img class="png" width="16" alt=""/></td><td class="gui-chooselist" valign="middle" align="left" style="text-align:left; padding-left : 15px;"></td></tr>' ).
								find( "tr:last td:eq(0) img" ).
									attr( "src", ( selected ) ? "/bundles/qlub/images/check.png" : "/images/blank.gif" ).
								end().
								find( "tr:last td:eq(1)" ).
									html( items[ i ].html ).
								end().
								find( "tr:last" ).
									attr( "rel", items[ i ].value ).
									css( { "color" : ( selected ) ? "#F00" : "#333" ,"cursor" : "pointer", "background-color" : ( i % 2 == 0 ) ? "#DDD" : "#FFF", "border-top" : ( i % 2 == 0 )  ? "solid 1px #333" : "none", "border-bottom" : ( i % 2 == 0 )  ? "solid 1px #333" : "none" } ).
									hover( function( event ){
										if ( event.type == "mouseenter" ){
											this.altbgcolor = this.style.backgroundColor;
											this.altcolor = this.style.color;
										}
										this.style.backgroundColor = ( event.type == "mouseenter" ) ? "#666" : this.altbgcolor;
										this.style.color =  ( event.type == "mouseenter" ) ? "#FFF" : this.altcolor ;
									} ).
									unbind( "click" ).click( function(){
										var selectedValue = $( this ).attr( "rel" ) ;
										q_fsm_delete( selectedValue ) ;
									} ) ;
						}
						q_fsm_reveal( {
							src : src.get( 0 ),
							title : $select.attr( "title" ),
							delete_callback: function( v ){
								$select.val( v ) ;
							}
						} );
					} ) ;
			} else if ( gui == "buttons" ) {
				var $pseudoselect = $( '<span __gui="gui" class="gui-value gui-buttons"></span>' ).insertBefore( $select ) ;
				for ( var i = 0 ; i < items.length ; i++ ) {
					var selected = ( items[ i ].value == $select.val() ) ;
					$pseudoselect.
						append( '<span class="gui-selectbutton"></span>' ).
						find( "span:last" ).
							html( items[ i ].html ).
							attr( "rel", items[ i ].value ).
							hover( function( event ){
								if ( event.type == "mouseenter" ) $( this ).addClass( "gui-over" ) ;
								else $( this ).removeClass( "gui-over" ) ;
							} ).
							unbind( "click" ).click( function(){
								var option = $select.find( "option[value='" + $( this ).attr( "rel" ) + "']" ).get( 0 ) ;
								if ( option.getAttribute( "real-value" ) ) option.setAttribute( "default-value", option.getAttribute( "real-value" ) ) ;
								option.removeAttribute( "real-value" ) ;
								if ( $select.attr( "multiple" ) == "multiple" ) option.selected = ! option.selected ;
								else option.selected = true ;
								$select.val( realVal( $select ) ) ;
							} ) ;
				}
			}
			$select.hide() ;
			var behavior = guiBehavior.apply( $select, [ $select.attr( "gui-behavior" ) ] ) ;
			__guiRender[ $select.attr( "gui" ) ].apply( $select, [] ) ;

		} ) ;
		return this ;
	};
})( jQuery );
}

var common_message = {
	"kmap-title": "clé API Google Maps",
	"kmap-watermark": "clé API",
	"kmap-message": 'Indiquez votre clé API Google. Si vous ne voyez pas de quoi il s\'agit, <a href="http://www.quomodo.com/faq/le-contenu-des-pages/integrer-une-carte-google.html" target="_blank">cliquez pour en savoir plus</a>.',
	":" : " : ",
	"search": "Rechercher",
	"tmaccessdenied_qdefault" : "Vous ne pouvez pas \"Retrouver une note\" pour le moment.\n\nSi le problème persiste veuillez vous déconnecter puis reconnectez-vous." ,
	"tmaccessdeniededit" : "Vous ne pouvez pas \"Retrouver une note\" pour le moment.\n\nVous devez d'abord annuler ou valider les modifications de la note accuellement éditée." ,
	"tmoneselected" : "Ramener la note sélectionnée" ,
	"tmseveralselected" : "Ramener les notes sélectionnées" ,
	"tminit" : "Pour retrouver une note supprimée, cliquez sur la flèche de gauche." ,
	"tminstructions" : "Quand vous avez retrouvé la note, cliquez sur la note puis sur <b>Ramener</b>." ,
	"authaskid" : "SVP veuillez d'abord fournir un identifiant Quomodo." ,
	"authaskpassw" : "SVP veuillez d'abord fournir un mot de passe." ,
	"serverbusy" : "Opération en cours, veuillez réessayer dans quelques instants." ,
	"unexperror" : "Unexpected error: a new session id could not be found." ,
	"badrequest" : "Vos modifications n'ont pas été enregistrées, et cette page est maintenant déconnectée du serveur. \n\nFermez cette fenêtre puis reconnectez-vous, ou bien changez maintenant d'espace puis revenez sur celui-ci uniquement au moyen des onglets de vos espaces : ceci reconnectera cette page." ,
	"safaribugarrow" : "En raison d'un bug de Safari, vous ne pouvez pas utiliser les flèches Précédent - Suivant de votre navigateur : utilisez plutôt les liens et les onglets présents sur votre page." ,
	"sigbug" :  "Si vous n'utilisez pas Safari, n'hésitez pas à signaler ce bug à l'équipe Quomodo." ,
	"alertdoyoureally" : "Vos modifications seront définitivement perdues." ,
	"today" : "aujourd'hui" ,
	"yesterday" : "hier" ,
	"tomorrow" : "demain" ,
	"availablesoon" : "Bientôt disponible..." ,
	"currlanguage" : "fr" ,
	"msgfoldleftcol" : "Cliquez pour passer en mode plein écran",
	"msgunfoldleftcol" : "Cliquez pour quitter le mode plein écran",
	"emptyrecentcol" : "Au fur et à mesure que vous constituerez votre site, cette zone affichera des liens vers chacune de vos pages." ,
	"promptpages" : "Pages récentes" ,
	"allservices" : "Ajouter une page" ,
	"promptservices" : "Services récents" ,
	"on" : "sur" ,
	"newspacetabname" : "nouvel espace..." ,
	"declineinvite" : "Votre invitation sera conservée pendant 1 semaine, vous pourrez y donner suite ultérieurement si vous le souhaitez. Vous allez maintenant être redirigé(e) vers la page d'accueil de Quomodo" ,
	"membersonly" : "Cette fonction est réservée aux membres Quomodo. \n\nVeuillez vous inscrire d'abord. L'inscription sur Quomodo est gratuite et rapide, aucune information personnelle ne vous sera demandée." ,
	"not enough rights" : "Vous n'avez pas les droits nécessaires pour faire un nouveau %s." ,
	"newpageprompt" : "Nouvelle page %s :" ,
	"newnameprompt" : "Indiquez un nom pour la nouvelle page %s :" ,
	"taken" : "Le nom \"%s\" est déjà pris, vous pouvez en choisir un autre :" ,
	"decsep" : "," ,
	"bytesondisk" : " octets" ,
	"kbondisk" : " ko" ,
	"mbondisk" : " Mo" ,
	"gbondisk" : " Go" ,
	"maxsizereached" : "Téléchargement impossible : votre site dépasse l'espace disque alloué (%maxmb). Pour ré-autoriser les téléchargements, supprimez les fichiers inutiles dans votre panneau <b>Fichiers chargés sur le site</b>, ou souscrivez à un Pack Giga dans votre panneau <b>Offre, services et options</b>." ,
	"overspace" : "Téléchargement de ce fichier impossible. Le fichier dépasse de %overspace l'espace disque alloué (%maxmb). Pour autoriser le téléchargement, supprimez les fichiers inutiles dans votre panneau <b>Fichiers chargés sur le site</b>, ou souscrivez à un Pack Giga dans votre panneau <b>Offre, services et options</b>." ,
	"firstmaxsizereached" : "Attention, vous venez de dépasser l'espace disque alloué (%maxmb). Pour augmenter l'espace disque alloué, souscrivez à un Pack Giga dans votre panneau <b>Offre, services et options</b>." ,
	"pagesmenuname" : "les pages de l'espace" ,
	"pagescreatenew" : "Ajouter une page" ,
	"undefineduser" : "membre inconnu" ,
	"ajaxerror": "Toutes nos excuses, une erreur est survenue." ,
	"serviceerror": "Toutes nos excuses, une erreur de type S est survenue.<br/><br/>Info complémentaire : %s.<br/><br/>Merci d'indiquer ce message au support." ,
	"noservice": "Toutes nos excuses, une erreur de type ND est survenue.<br/><br/>Info complémentaire : %s.<br/><br/>Merci d'indiquer ce message au support." ,
	"tryagain": "Toutes nos excuses, une erreur est survenue. Veuillez ré-essayer ultérieurement." ,
	"createfailed": "La nouvelle note n'a peut-être pas été enregistrée. Merci de recommencer l'opération." ,
	"changefailed": "Les modifications n'ont peut-être pas été enregistrées. Merci de recommencer l'opération." ,
	"suppressfailed": "La suppression n'a peut-être pas été enregistrée. Merci de recommencer l'opération." ,
	"filelocked" : "fichier en cours d'utilisation" ,
	"filenotfound" : "fichier introuvable" ,
	"flashPuzzleMsg" : "&legende_vert=laisser<br>des<br>messages&legende_orange=partager<br>photos,<br>vidéos...&legende_rouge=planifier<br>les activités<br>des<br>enfants&legende_bleu=organiser<br>ensemble<br>anniversaires,<br>vacances..." ,
	"smartnotename" : "Smartnote %" ,
	"svcaccessdenied" : "Vous n'avez pas accès à cette page." ,
	"svcaccessdeniedbutweb" : "Vous n'avez pas accès à cette page en mode connecté.<br/><br/>La page va donc ouvrir une nouvelle fenêtre de site. Le mode connecté reste ouvert au second plan, vous le retrouverez en fermant la nouvelle page." ,
	"svcaccessdeniedbutweb_visitbtn" : "ouvrir" ,
	"forcehomepage" : "Vous n'avez plus accès à cette page." , 
	"alerterror" : "Toutes nos excuses, une erreur est survenue. \nSi ce problème persiste, merci de transmettre les informations suivantes au support : \n\n " , 
	"alertenderror" : " \n\nD'avance, merci pour votre contribution." ,
	"quittingeditmode" : "Une note de la page est en cours de modification. Si vous cliquez OK, vous allez maintenant quitter cette page et les modifications seront perdues. Pour d'abord terminer les modifications de la note, cliquez maintenant sur Annuler." ,
	"rubric" : "Rubrique" ,
	"clicktoaccesstopage" : "Cliquez pour accéder à la page" ,
	"noemptyemail" : "Le champ mail est obligatoire." ,
	"invalidemail" : "Adresse mail invalide." ,
	"onlyoneemail" : "Vérifiez que vous n'avez indiqué qu'une seule adresse mail." ,
	"leadingspace" : "Vérifiez que vous n'avez pas laissé un espace au début de l'adresse mail." ,
	"trailingspace" : "Vérifiez que vous n'avez pas laissé un espace à la fin de l'adresse mail." ,
	"nospaceinemail" : "Vérifiez que vous n'avez pas laissé un espace dans l'adresse mail." ,
	"noaccentinemail" : "L'adresse mail que vous avez indiquée comporte une lette accentuée (%). Veuillez la remplacer par la lettre non accentuée correspondante." ,
	"nocedillainemail" : "L'adresse mail que vous avez indiquée comporte une cédille (Ç ou ç). Ce caractère est invalide." ,
	"invalidcharinemail" : "L'adresse mail que vous avez indiquée comporte un caractère invalide (%)." ,
	"loginmsg" :  "" ,
	"whitespaceinIDs" :  "Un caractère blanc (\"espace\") supplémentaire parasite a été détecté au début ou à la fin de l'identifiant ou du mot de passe. Ceci peut arriver notamment si vous utilisez le copier-coller.<br/><br/>Vérifiez que l'identifiant que vous indiquez ne comporte pas de caractère blanc parasite." ,
	"close" : "fermer" ,
	"entry_missing" : "Les champs marqués d'une astérisque sont obligatoires." ,
	"entry_invalidemail" :  "L'adresse mail est invalide." ,
	"defaultwait" :  "Veuillez patienter...",
	"emptymsgs" : "Veuillez remplir ce champ avant de valider." ,
	"badformattedmsgs" : "La valeur indiquée n'a pas le bon format. Veuillez modifier cette valeur avant de valider." ,
	"cancel" : "annuler" ,
	"others" : "autres...",
	"ok" : "ok",
	"edit" : "modifier",
	"delete" : "supprimer",

	//Q_DATEPICKER 
	"datepicker_title" : "Choisir une date",

	// Q_COLORS
	"colorpicker_title" : "Sélecteur de couleurs" ,
	"colorpicker_delete_title" : "Cliquez pour fermer le sélecteur" ,

	// Q_LINK
	"q_link_title" : "Ajouter un lien",
	"q_link_none" : "Aucun", 
	"q_link_webpage" : "Lien à une <br/> page web", 
	"q_link_sitepage" : "Lien à une <br/>page du site", 
	"q_link_popup" : "Popup d'une <br/>page du site", 
	"q_link_pagenote" : "Lien à une <br/>note de la page", 
	"q_link_file" : "Télécharger/afficher <br/>un fichier", 
	"q_link_mail" : "Lien à <br/>un mail",
	"q_link_js" : "Lien javascript <br/>(expert)",
	"q_link_special": "Lien spécial",
	"q_link_ical": "Lien calendrier",
	"unablesamepagepopup_title" : "Choix de la page à ouvrir en popup",
	"unablesamepagepopup" : "<span style=\"white-space:nowrap\">Veuillez choisir une page différente de la page courante,</span><br/> sans quoi le contenu de la page s'affichera en double.",
	
	"linkDisplay-ical-team": "Calendrier %s",
	"linkDisplay-ical-all": "Calendrier tous événements",
	"linkDisplay-ical-match": "Calendrier matchs",
	"linkDisplay-ical-birthday": "Calendrier anniversaires",
	"linkDisplay-ical-general": "Calendrier événements généraux",
	
	"q_link_webpage_prompt" : "Veuillez entrer l'adresse web de destination :", 
	"q_link_pagenote_prompt" : "Veuillez sélectionner une note de la page", 
	"q_link_file_prompt" : "Veuillez choisir un fichier sur votre ordinateur :", 
	"q_link_mail_prompt" : "Veuillez entrer l'adresse mail de destination : ",
	"q_link_js_prompt" : "Veuillez entrer le code javascript à exécuter : ",
	
	// Q_PRINTTHIS & Q_MAILTHIS
	"q_printthis_title" : "Quomodo - Fenêtre d'impression",
	"q_printthis_header" : "Pour imprimer, allez dans le menu \"Fichier\" de votre navigateur, et cliquez sur \"Imprimer\"",
	"q_printthis_sign" : "Document imprimé avec Quomodo (<a href=\"http://www.quomodo.com\" target=\"_blank\">http://www.quomodo.com</a>),<br/> plateforme de création de sites Internet",
	"q_mailthis_title" : "Envoyer à un ami",
	"q_mailthis_object" : "Un ami a souhaité partager un article avec vous.",
	"q_mailthis_from" : "<b>De</b> (adresse e-mail) : ",
	"q_mailthis_to" : "<b>À</b> (adresses e-mail, séparées par des virgules) : ",
	"q_mailthis_message" : "<b>Votre message</b> (facultatif) : ",
	"q_mailthis_send" : "envoyer",
	"q_mailthis_invalidfrom" : "L'adresse e-mail de l'expéditeur n'est pas valide.",
	"q_mailthis_invalidto" : "Destinataire(s) non valide(s). Merci d'indiquer une ou plusieurs adresses valides, séparées par des virgules.",
	"q_mailthis_sent" :  "E-mail envoyé à %nb% destinataires.",
	"q_mailthis_Qsignature" :  "<br/><br/>--<br/>Ce message est envoyé par Quomodo, votre club sur le net<br/><a href=\"http://www.quomodo.com\">http://www.quomodo.com</a>",
	"q_mailthis_notsent" : "Problème durant l'envoi de l'e-mail. Merci de réessayer dans quelques instants ou de contacter le support (contact@quomodo.com).",
	
	"q_link_nolink" : "Aucun",
	"linkpagetitle" : "Cliquez pour accéder à la page",
	"popuppagetitle" : "Cliquez pour voir",
	"linkfiletitle" : "Cliquez pour télécharger le fichier",
	"linkbroken" : "La page vers laquelle pointait ce lien a été supprimée.",
	
	"prev": "< Page précédente",
	"next": "Page suivante >",
	"home": "Page d'accueil",
	"sitemap": "Plan du site",
	"top": "Haut de la page",
	"login": "Connexion",
	"search": "Recherche",
	"webmodeclick" : "Ce lien est désactivé en mode connecté.",
	"nodatatoexport" : "Il n'y a aucune donnée à exporter.",
	"importInProgress": "L'importation de cette page est toujours en cours.<br/>Elle n'est pas accessible pour le moment.<br/></br>Veuillez réessayer utlérieurement.",
	"light_maxpage" : "Attention !<br/><br/>Votre site est sur la formule Light.<br/><br/>Nous vous remercions d'avoir choisi cette formule, cependant elle impose un maximum de 12 pages à votre site, or celui-ci en comporte actuellement %s.<br/><br/>Merci de bien vouloir supprimer les pages en excès.",
	"light_newpage_error" : "Attention ! Opération impossible.<br/><br/>Votre site est sur la formule Light.<br/><br/>Nous vous remercions d'avoir choisi cette formule, cependant elle impose un maximum de 12 pages à votre site, or celui-ci en comporte actuellement %s.",
	"light_smartnote_error" : "Attention !<br/><br/>Votre site est sur la formule Light.<br/><br/>Nous vous remercions d'avoir choisi cette formule, cependant elle ne permet l'usage de la %s.",
	"sendmailbyone-confirm": "L'envoi de votre message nécessite une validation.\n\nVous allez recevoir un mail à l'adresse %s.\nCliquez le lien de validation pour lancer l’envoi.",

	"broadcast": "diffusé par %s"
};

//Q_EVENTS
var q_events_msgs = {
	"edit" : "Modifier", 
	"duplicate" : "Dupliquer", 
	"merge" : "Fusionner",
	"delete" : "Supprimer",
	
	"searchEventTitle" : "Choix des événements",
	"selectPeriod" : "Choix de la période",
	
	"confirmdelete" : "Voulez-vous vraiment supprimer %s ?<br/><br/>Ceci supprimera définitivement %s de la base des événements du site !" ,
	"confirmduplicate" : "Voulez-vous vraiment dupliquer %s ? ",
	"confirmmerge" : "Voulez-vous vraiment fusionner %s ? (cet élément disparaitra après la fusion)",
	"mergeopenselect" : "Fusionner deux éléments ensemble", 
	"mergeopenselect_select" : "Sélectionnez l'élément \"%s\" vers lequel vous voulez fusionner l'élément suivant : ",
	"mandatoryfield" : "La réponse au champ \"%s\" est obligatoire !" ,
	"onlyonescore" : "Vous n'avez indiqué le score que d'une seule des deux équipes : le match ne sera pas considéré comme joué. Souhaitez-vous quand même continuer ?",
	"matchscoreerror": "Le score ne doit comporter que des chiffres.",
	"addevents_noevents" : "Aucun événement à ajouter.",
	"addoneevent_confirm" : "Souhaitez-vous réellement ajouter l'événement suivant :",
	"addevents_confirm" : "Souhaitez-vous réellement ajouter les %s événements suivants :",
	"addevents_done" : "Les événements ont bien été ajoutés",
	
	"deleteevents_noevents" : "Aucun événement à supprimer.",
	"deleteoneevent_confirm" : "Souhaitez-vous réellement supprimer l'événement suivant :",
	"deleteevents_confirm" : "Souhaitez-vous réellement supprimer les %s événements suivants :",
	"deleteevents_done" : "Les événements ont bien été supprimés",
	
	"print" : "imprimer",
	"print_title" : "Imprimer des événements",
	"print_noevents" : "Aucun événement à imprimer",
	
	"export_noevents" : "Aucun événement à exporter",
	
	"allinselect" : "(tout)" ,
	"chooseinselect" : "(tout)" ,
	"selecteventtype" : "Sélectionner un type d'événement",

	"future" : "A venir",
	"current" : "Actuel",
	"past" : "Passé",
	"last" : " derniers jours",
	"next" : "aujourd'hui et les %s prochains jours",
	
	"yesterday" : "Hier",
	"today" : "Aujourd'hui",
	"tomorrow" : "Demain" ,
	"currentyear" : "Cette année ( du 1er janvier au 31 décembre )",
	"currentseason" : "Cette saison" , 
	"currentmonth" : "Ce mois-ci ( du 1er au 30/31 )",
	"currentweek" : "Cette semaine ( de lundi à dimanche )", 
	"nextweek" : "La semaine prochaine ( de lundi à dimanche )",
	"nextmonth" : "Le mois prochain ( du 1er au 30/31 )", 
	"lastyear" : "L'année dernière ( du 1er janvier au 31 décembre )", 
	"lastmonth" : "Le mois dernier ( du 1er au 30/31 )", 
	"lastweek" : "La semaine dernière ( de lundi à dimanche )",
	"period" : "Du %1 au %2" ,
	"day" : "Jour" ,
	"year" : "Année" ,
	"filterPeriod" : "Période de sélection" ,
	"date_change" : "Changer la date", 
	"fromDate" : "Du ",
	"toDate" : "au ",
	"fromPeriod" : "Début",
	"toPeriod" : "Fin",
	"startingDate" : "Date de début",
	"endingDate" : "Date de fin",
	"startingPeriod" : "Depuis",
	"endingPeriod" : "Jusqu'à",
	"date" : "Date",
	
	"period_beg" : "Le début des temps",
	"period_30daysp" : "Il y a 30 jours",
	"period_15daysp" : "Il y a 15 jours",
	"period_7daysp" : "Il y a 7 jours",
	"period_yd" : "Hier",
	"period_td" : "Aujourd'hui",
	"period_tm" : "Demain" ,
	"period_lwbeg" : "Le lundi de la semaine dernière",
	"period_wbeg" : "Le lundi de cette semaine",
	"period_nwbeg" : "Le lundi de la semaine prochaine",
	"period_lmbeg" : "Le 1er du mois précédent",
	"period_mbeg" : "Le 1er de ce mois-ci",
	"period_nmbeg" : "Le 1er du mois prochain",
	"period_ybeg" : "Le 1er janvier de cette année",
	
	"period_7daysf" : "Dans 7 jours",
	"period_15daysf" : "Dans 15 jours",
	"period_30daysf" : "Dans 30 jours",
	"period_lwend" : "Le dimanche de la semaine dernière",
	"period_wend" : "Le dimanche de cette semaine",
	"period_nwend" : "Le dimanche de la semaine prochaine",
	"period_lmend" : "Le dernier jour du mois précédent",
	"period_mend" : "Le dernier jour de ce mois-ci",
	"period_nmend" : "Le dernier jour du mois prochain",
	"period_yend" : "Le 31 décembre de cette année",
	"period_end" : "La fin des temps",
	
	"matchselector" : "Sélecteur de matchs",
	"lastmatch" : "Dernier résultat",
	"nextmatch" : "Prochain match", 
	"last&nextmatchs" : "Dernier résultat + Prochain match",
	"playedmatchs" : "Tous les résultats",
	"matchstoplay" : "Tous les matchs à jouer",
	
	"birthdate" : "Date de naissance",
	"localteam" : "Equipe" ,
	"vsteam" : "Adversaire" ,
	"location" : "Lieu" ,
	"comment" : "Commentaire" ,
	"time" : "Horaire" ,
	"homescore" : "Notre score" ,
	"vsscore" : "Score adverse" ,
	"home" : "Emplacement" ,
	"competition" : "Compétition" ,
	"step" : "N° de match" ,
	"name" : "Nom" ,
	"firstname" : "Prénom", 
	"lastname" : "Nom",
	"nb" : "Nombre" ,
	"gender" : "Sexe" ,
	"city" : "Ville" ,
	"member" : "Nom" ,
	"description" : "Description" ,
	"category" : "Catégorie" ,
	"title" : "Titre" ,
	"color" : "Couleur",
	"logo" : "Logo",
	"logourl" : "Logo",

	"filter_vsteam" : "Adversaire" ,
	"filter_member" : "Filtre sur le nom" ,
	"filter_firstname" : "Filtre sur le prénom", 
	"filter_title" : "... contenant dans leur titre" ,
	
	"icon" : "Icône" ,
	"icon_none" : "aucune icône",
	"icon_add" : "ajouter ou modifier l'icône",

	"image" : "Image" ,
	"image_add" : "Ajouter une image" , 
	"image_change" : "Changer d'image" , 
	"image_delete" : "Supprimer l'image" , 
	
	"homeY" : "à domicile" ,
	"homeY_matches" : [ "domicil" , "domicile" , "ici" ] ,
	"homeN" : "à l'extérieur" ,
	"homeN_matches" : [ "exterieur" , "exterieure" , "la-bas" , "la bas" ] ,
	
	"genderF" : "féminin" ,
	"genderM" : "masculin" ,
	"genderMF" : "mixte" ,
	
	"events_match" : "Les matchs" ,
	"events_birthday" : "Les anniversaires" ,
	"events_general" : "Les événements généraux" ,
	"events_edittitle_list" : "Edition des événements" ,
	"event_edit" : "Modifier",
	"events_all" : "Tout" ,
	"events_fixed" : "Période fixe" ,
	"events_slipping" : "Période glissante" ,

	"match" : "Match" ,
	"match_this" : "ce match" ,
	"match_editlink" : "Modifier les matchs" ,
	"match_newlink" : "Ajouter un nouveau match" ,
	"match_edittitle_item" : "Modifier le match" ,
	"match_newtitle_item" : "Ajout d'un nouveau match" ,
	"match_edittitle_list" : "Edition des matchs" ,
	"match_edittitle_choose" : "Sélection de matchs" ,
	"match_editname" : "%date% : %localteam% vs %vsteam% (%home%)" ,

	"birthday" : "Anniversaire" ,
	"birthday_this" : "cet anniversaire" ,
	"birthday_editlink" : "Modifier les anniversaires" ,
	"birthday_newlink" : "Ajouter un nouvel anniversaire" ,
	"birthday_edittitle_item" : "Edition d'un anniversaire" ,
	"birthday_newtitle_item" : "Ajout d'un nouvel anniversaire" ,
	"birthday_edittitle_list" : "Edition des anniversaires" ,
	"birthday_editname" : "%member% : %day%" ,
	"birthday_title" : "Anniversaire de : ",

	"general" : "Événement" ,
	"general_this" : "cet événement" ,
	"general_editlink" : "Modifier les événements généraux" ,
	"general_newlink" : "Ajouter un nouvel événement" ,
	"general_edittitle_item" : "Edition d'un événement" ,
	"general_newtitle_item" : "Ajout d'un nouvel événement" ,
	"general_edittitle_list" : "Edition des événements" ,
	"general_editname" : "%date% : %title%" ,

	"category_this" : "cette catégorie" ,
	"category_editlink" : "Modifier les catégories" ,
	"category_newlink" : "Ajouter une nouvelle catégorie" ,
	"category_edittitle_item" : "Edition d'une catégorie" ,
	"category_newtitle_item" : "Ajout d'une nouvelle catégorie" ,
	"category_edittitle_list" : "Edition des catégories" ,
	"category_editname" : "%name%" ,

	"localteam_this" : "cette équipe" ,
	"localteam_editlink" : "Modifier le menu des équipes" ,
	"localteam_newlink" : "Ajouter une nouvelle équipe" ,
	"localteam_edittitle_item" : "Edition d'une équipe" ,
	"localteam_newtitle_item" : "Ajout d'une nouvelle équipe" ,
	"localteam_edittitle_list" : "Edition des équipes" ,
	"localteam_editname" : "%name% (%gender%)" ,

	"vsteam_this" : "cet adversaire" ,
	"vsteam_editlink" : "Modifier le menu des adversaires" ,
	"vsteam_newlink" : "Ajouter un nouvel adversaire" ,
	"vsteam_edittitle_item" : "Edition d'un adversaire" ,
	"vsteam_newtitle_item" : "Ajout d'un nouvel adversaire" ,
	"vsteam_edittitle_list" : "Edition des adversaires" ,
	"vsteam_editname" : "%name%" ,

	"location_this" : "ce lieu" ,
	"location_editlink" : "Modifier les lieux" ,
	"location_newlink" : "Ajouter un nouveau lieu" ,
	"location_edittitle_item" : "Edition d'un lieu" ,
	"location_newtitle_item" : "Ajout d'un nouveau lieu" ,
	"location_edittitle_list" : "Edition des lieux" ,
	"localtion_editname" : "%name% (%city%)",
	
	"logo_this" : "ce logo" ,
	"logo_editlink" : "Modifier le menu des logos" ,
	"logo_newlink" : "Ajouter un nouveau logo" ,
	"logo_edittitle_item" : "Edition d'un logo" ,
	"logo_newtitle_item" : "Ajout d'un nouveau logo" ,
	"logo_edittitle_list" : "Edition des logos" ,
	"logo_editname" : "%name%" ,

	"undefineditem" : "-" ,
	":" : " : "
} ;

var q_lang = common_message[ "currlanguage" ] ;

var mname = {
	"0" : "janvier", 
	"1" : "février", 
	"2" : "mars", 
	"3" : "avril", 
	"4" : "mai", 
	"5" : "juin", 
	"6" : "juillet", 
	"7" : "août", 
	"8" : "septembre", 
	"9" : "octobre", 
	"10" : "novembre", 
	"11" : "décembre"
} ;

var mshortname = {
	"0" : "jan", 
	"1" : "fév", 
	"2" : "mars", 
	"3" : "avr", 
	"4" : "mai", 
	"5" : "juin", 
	"6" : "juil", 
	"7" : "août", 
	"8" : "sept", 
	"9" : "oct", 
	"10" : "nov", 
	"11" : "déc"
} ;

var dname = {
	"0" : "dimanche", 
	"1" : "lundi", 
	"2" : "mardi", 
	"3" : "mercredi", 
	"4" : "jeudi", 
	"5" : "vendredi", 
	"6" : "samedi"
} ;

var dshortname = {
	"0" : "dim", 
	"1" : "lun", 
	"2" : "mar", 
	"3" : "mer", 
	"4" : "jeu", 
	"5" : "ven", 
	"6" : "sam"
} ;

var dlettername = {
	"0" : "Di", 
	"1" : "Lun", 
	"2" : "Ma", 
	"3" : "Me", 
	"4" : "Je", 
	"5" : "Ve", 
	"6" : "Sa"
} ;

if ( ! window.qdyn_queue ) var qdyn_queue = [ ] ;
if ( ! window.rights_record ) var rights_record = {};
if ( ! window.spacexml ) var spacexml = {};

/*
function -
function _quomodo : PROTOTYPE, EVENTS
*/

if ( ! window.quomodo ) {
	var quomodo = {} ;
	quomodo.extend = function( objectName , fnInit ){
		if ( ! this.__q ) this.__q = {} ;
		if ( ! this.__q[ objectName ] ) this.__q[ objectName ] = {} ;
		if ( ! this[ objectName ] ) this[ objectName ] = {} ;
		if ( fnInit ) fnInit.apply( this.__q[ objectName ] , [ this ] ) ;
		this.__q[ objectName ].__kind = "default" ;
		this.__q[ objectName ].__id = objectName ;
		for ( var k in this.__q[ objectName ] ) {
			/* if ( typeof this.__q[ objectName ][ k ] == "function" )*/ this[ objectName ][ k ] = this.__q[ objectName ][ k ] ;
		}
		this[ objectName ].__kind = "self" ;
		if ( ! this.__client || ! this.__client[ objectName ] ) return ;
		var _obj = ( objectName == "global" ) ? window : this[ objectName ] ;
		function extendFn( q , k ){
			var fn = q.__q[ objectName ][ k ] ;				
			var clientfn = q.__client[ objectName ][ k ] ;
			_obj[ k ] = function() {
				_obj.inherited = fn ;
				var res = clientfn.apply( _obj , arguments ) ;
				delete _obj.inherited ;
				return res ;
			}
		}
		for ( var k in this.__client[ objectName ] ) {
			if ( ! this.__q[ objectName ][ k ] ) _obj[ k ] = this.__client[ objectName ][ k ] ;
			else if ( typeof this.__q[ objectName ][ k ] == "function" && typeof this.__client[ objectName ][ k ] == "function" ) extendFn( this , k ) ;
			else _obj[ k ] = this.__client[ objectName ][ k ] ;
		}
	} ;
	quomodo.client = {
		extend: function( objectName , fnInit ){
			if ( ! quomodo.__client ) quomodo.__client = {} ;
			if ( ! quomodo.__client[ objectName ] ) quomodo.__client[ objectName ] = {} ;
			fnInit.apply( quomodo.__client[ objectName ] , [ quomodo ] ) ;
			quomodo.extend( objectName ) ;
		},
		global: function( fnName , fn ){
			var objectName = "global" ;
			if ( ! quomodo.__client ) quomodo.__client = {} ;
			if ( ! quomodo.__client[ objectName ] ) quomodo.__client[ objectName ] = {} ;
			if ( ! quomodo.__q ) quomodo.__q = {} ;
			if ( ! quomodo.__q[ objectName ] ) quomodo.__q[ objectName ] = {} ;
			if ( ! quomodo.__q[ objectName ][ fnName ] ) quomodo.__q[ objectName ][ fnName ] = window[ fnName ] ;
			quomodo.__client[ objectName ][ fnName ] = fn ;
			quomodo.extend( objectName ) ;
		}
	} ;
	quomodo.val = function( any ){
		if ( typeof any == "function" ) return any() ;
		return any ;
	} ;

	quomodo.iframe = function( x ){// x: iframe ou window
		var iframe = ( function(){
			if ( x.tagName && x.tagName.toLowerCase() == "iframe" ) return x ;
			var iframes = document.getElementsByTagName( "iframe" ) ;
			for ( var i = 0 ; i < iframes.length ; i++ ) {
				if ( ( iframes[ i ] && iframes[ i ].contentWindow == x ) ) return iframes[ i ] ;
			}
			return null ;
		} )() ;
		if ( ! iframe ) return null ;
		if ( ! iframe._scrollTo ) iframe._scrollTo = function( l, t, wrapper ){
			var $div = ( wrapper ) ? $( this ).parent() : $( this ).parent().parent() ;
			$div.scrollLeft( l ) ; 
			$div.scrollTop( t ) ;
		}
		if ( ! iframe.resize ) iframe.resize = function( w, h, l, t ){
			var wslide = 18 ;
			var bScroll = l != undefined && t != undefined ;
			if ( bScroll ){
				this._l =  l ;
				this._t = t ;
				this._scrollTo( l, t, true ) ;
			} else {
				l = this._l ;
				t = this._t ;
				bScroll = l != undefined && t != undefined ;
				if ( bScroll ) this._scrollTo( l, t, true ) ;
			}
			if ( w && h ) {
				this._w =  w ;
				this._h = h ;
			} else {
				w = this._w ;
				h = this._h ;
			}
			var $iframe = $( this ) ;
			var maxw = w ;
			var maxh = h ;
			var options = $iframe.data( "options" ) || {} ;
			
			if ( options.percent ) {
				if ( this.onresize ) this.onresize() ;
				return this ;
			}
			var options_maxwidth = options.maxwidth ;
			if ( typeof options_maxwidth == "function" ) options_maxwidth = options_maxwidth() ;
			var options_maxheight = options.maxheight ;
			if ( typeof options_maxheight == "function" ) options_maxheight = options_maxheight() ;
			var omaxh = ( options_maxheight ) ? ( options_maxheight - ( this._hh || 0 ) - ( this._fh || 0 ) ) : null ;
			if ( options_maxwidth ) maxw = Math.min( w , options_maxwidth ) ;
			if ( omaxh ) maxh = Math.min( h , omaxh ) ;
			var finalw = ( h == maxh ) ? maxw : ( options_maxwidth ) ? Math.min( maxw + wslide , options_maxwidth ) : ( maxw + wslide ) ;
			var finalh = ( w == maxw ) ? maxh : ( omaxh ) ? Math.min( maxh + wslide , omaxh ) : ( maxh + wslide ) ;
			$iframe.parent().parent().width( finalw ).height( finalh ).css( "overflow" , ( w == maxw && h == maxh ) ? "hidden" : "auto" ) ;
			if ( bScroll ) {
				$iframe.parent().width( w ).height( h ) ;
				$iframe.width( w + l ).height( h + t ) ;
			} else $iframe.width( w ).height( h ) ;
			if ( this.onresize ) this.onresize( finalw, finalh ) ;
			return this ;
		} ;
		iframe.getOffsets = function() {
			var $iframe = $( this ) ;
			return { "width": $iframe.parent().parent().width(), "height": $iframe.parent().parent().height() } ;
		} ;
		if ( ! iframe.togglewait ) iframe.togglewait = function( b ){
			$( this ).parent().parent().find( ".q_fsm_wait" ).toggle( b == true ) ;
			return this ;
		} ;
		return iframe ;
	} ;

	quomodo.extend( "events" , function ( q ){
		var _this = this ;
		this.triggerOne = function( listener, eventName, obj ){
			var target = listener.target ;
			if ( target != undefined && this.__timers && this.__timers[ eventName ] && isremoved( target ) ) var removeListener = true ;
			else if ( target ) {
				if ( target.__kind && target.__kind == "default" ) target = quomodo[ target.__id ] ;
				var removeListener = listener.fn.apply( target , [ obj , eventName ] ) ;
			} else var removeListener = listener.fn( obj , eventName ) ;
			return removeListener ;
		}
		this.trigger = function( eventName, obj, listenerID, withoutDelayedTrigger ){
			if ( ! withoutDelayedTrigger || ! this.__listeners || ! this.__listeners[ eventName ] ) {
				if ( ! this.__triggerDelayed ) this.__triggerDelayed = {} ;
				if ( ! this.__triggerDelayed[ eventName ] ) this.__triggerDelayed[ eventName ] = [] ;
				this.__triggerDelayed[ eventName ].push( obj ) ;
			}
			if ( ! this.__listeners || ! this.__listeners[ eventName ] ) return ;
			/*if ( ! this.__listeners || ! this.__listeners[ eventName ] ) {
				if ( ! this.__triggerDelayed ) this.__triggerDelayed = {} ;
				if ( ! this.__triggerDelayed[ eventName ] ) this.__triggerDelayed[ eventName ] = [] ;
				this.__triggerDelayed[ eventName ].push( obj ) ;
				return ;
			}*/
			var _listeners = this.__listeners[ eventName ] ;
			var listenersToRemove = [] ;
			for ( var i = 0 ; i < _listeners.length ; i++ ) {
				if ( listenerID != undefined && _listeners[ i ].id != listenerID ) continue ;
				var removeListener = this.triggerOne( _listeners[ i ], eventName, obj, listenerID ) ;
				if ( removeListener == true ) listenersToRemove.push( _listeners[ i ].id ) ;
			}
			for ( var i = 0 ; i < listenersToRemove.length ; i++ ) this.removeListener( listenersToRemove[ i ] ) ;
		}
		this.stopTimers = function(){
			this.__timerssuspended = true ;
			for ( var eventName in this.__timers ) {
				if ( this.__timers[ eventName ].timer ) clearTimeout( this.__timers[ eventName ].timer ) ;
				this.__timers[ eventName ].timer = "suspended" ;
			}
		}
		this.resumeTimers = function(){
			this.__timerssuspended = false ;
			for ( var eventName in this.__timers ) launchTimer( this , eventName , this.__timers[ eventName ].intervall ) ;
		}
		function launchTimer( _this , eventName , millisecondsIntervall ){
			if ( ! _this.__timers ) _this.__timers = {} ;
			if ( ! _this.__timers[ eventName ] || _this.__timers[ eventName ].timer == "suspended" ) {
				function loopTimer( _this, n ) {
					if ( _this.__timerssuspended ) return ;
					var now = new Date() ;
					_this.trigger( eventName , { now: now, count: n || 0 }, null, true ) ;
					_this.__timers[ eventName ] = { timer : setTimeout( function(){ loopTimer( _this, (n||0) + 1 ) } , millisecondsIntervall ) , intervall : millisecondsIntervall } ;
				}
				loopTimer( _this ) ;
			}
			q_addwindowblurhandlers( "quomodoTimersBlur" ) ;
			q_addwindowfocushandlers( "quomodoTimersFocus" ) ;
		}
		this.addTimerListener = function( eventName , fn , elem ){
			if ( eventName != "clocktimer" ) return ;
			var eventId = this.addListener( eventName , fn , elem ) ;
			launchTimer( this , eventName , 1000 ) ;
			return eventId ;
		}
		this.addListener = function( eventName , fn , elem ){
			if ( ! this.__n ) this.__n = 0 ;
			if ( ! this.__listeners ) this.__listeners = {} ;
			if ( ! this.__listeners[ eventName ] ) this.__listeners[ eventName ] = [] ;
			var i = this.__n ++ ;
			var listener = { id: i , fn: fn, target: elem } ;
			this.__listeners[ eventName ].push( listener ) ;
			this.__listeners[ "__" + i ] = eventName ;
			if ( this.__triggerDelayed && this.__triggerDelayed[ eventName ] ) {
				for ( var j = 0 ; j < this.__triggerDelayed[ eventName ].length ; j++ ) {
					var removeListener = this.triggerOne( listener, eventName, this.__triggerDelayed[ eventName ][ i ] ) ;
					if ( removeListener == true ) this.removeListener( listener.id ) ;
				}
			}
			return i ;
		}
		this.removeListener = function( eventId ){
			if ( ! this.__listeners ) return ;
			var eventName = this.__listeners[ "__" + eventId ] ;
			if ( ! eventName ) return ;
			var _listeners = this.__listeners[ eventName ] ;
			if ( ! _listeners ) return ;
			for ( var i = 0 ; i < _listeners.length ; i++ ) {
				if ( _listeners[ i ].id != eventId ) continue ;
				_listeners.splice( i , 1 ) ;
				delete this.__listeners[ "__" + eventId ] ;
				if ( _listeners.length == 0 && this.__timers && this.__timers[ eventName ] ) {
					clearTimeout( this.__timers[ eventName ] ) ;
					delete this.__timers[ eventName ] ;
				}
				return ;
			}
		}
	} ) ;
}

//timers
function quomodoTimersBlur(){
	quomodo.events.stopTimers() ;
}
function quomodoTimersFocus(){
	quomodo.events.resumeTimers() ;
}

/*
function -
function BROWSERS
*/

// Trouvé sur quirksmode.org
var BrowserDetect = {
	init: function () {
		this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
		this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
		this.OS = this.searchString(this.dataOS) || "an unknown OS";
		this.supportRGBA = ( function() {
			var elem = document.createElement( "DIV" ) ;
			try { elem.style.backgroundColor = "rgba(128,128,128,0.5)" ; return true ; } catch ( err ) {}
			return false ;
		} )() ;
	},
	searchString: function (data) {
		for (var i=0;i<data.length;i++)	{
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) { if (dataString.indexOf(data[i].subString) != -1) return data[i].identity; }
			else if (dataProp) return data[i].identity;
		}
	},
	searchVersion: function (dataString) {
		if ( typeof this.versionSearchString == "function" ) return this.versionSearchString( dataString ) ;
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return;
		return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
	},
	dataBrowser: [
		{ string: navigator.userAgent, subString: "Chrome", identity: "Chrome" },
		{ string: navigator.userAgent, subString: "OmniWeb", versionSearch: "OmniWeb/", identity: "OmniWeb" },
		{ string: navigator.vendor, subString: "Apple", identity: "Safari", versionSearch: "Version" },
		{ prop: window.opera, identity: "Opera" },
		{ string: navigator.vendor, subString: "iCab", identity: "iCab" },
		{ string: navigator.vendor, subString: "KDE", identity: "Konqueror" },
		{ string: navigator.userAgent, subString: "Firefox", identity: "Firefox" },
		{ string: navigator.vendor, subString: "Camino", identity: "Camino" },
		{ string: navigator.userAgent, subString: "Netscape", identity: "Netscape" }, // for newer Netscapes (6+)
		{ string: navigator.userAgent, subString: "MSIE", identity: "Explorer", versionSearch: "MSIE" },
		{ string: navigator.userAgent, subString: "Trident", identity: "Explorer", versionSearch: function( dataString ) {
			var index = dataString.indexOf( "Trident" );
			return 4 + parseFloat(dataString.substring( index + "Trident".length + 1 ) ) ;
		} },
		{ string: navigator.userAgent, subString: "Gecko", identity: "Mozilla", versionSearch: "rv" },
		{ string: navigator.userAgent, subString: "Mozilla", identity: "Netscape", versionSearch: "Mozilla" } // for older Netscapes (4-)
	],
	dataOS : [
		{ string: navigator.platform, subString: "Win", identity: "Windows" },
		{ string: navigator.platform, subString: "Mac",	identity: "Mac" },
		{ string: navigator.userAgent, subString: "iPhone", identity: "iPhone" },
		{ string: navigator.userAgent, subString: "iPod", identity: "iPod" },
		{ string: navigator.userAgent, subString: "iPad", identity: "iPad" },
		{ string: navigator.userAgent, subString: "Android", identity: "Android" },
		{ string: navigator.platform, subString: "Linux", identity: "Linux" }
	]

};
BrowserDetect.init();

var isWin = ( BrowserDetect.OS == "Windows"  );
var isMac = ( BrowserDetect.OS == "Mac" ) ;

var isInternetExplorer = ( BrowserDetect.browser == "Explorer"  );
var isIE  = isInternetExplorer;
var isIE_6 = ( isIE && parseInt( BrowserDetect.version ) <= 6 );
var isIE_7 = ( isIE && parseInt( BrowserDetect.version ) == 7 );
var isIE_8 = ( isIE && parseInt( BrowserDetect.version ) == 8 );
var isIE_9 = ( isIE && parseInt( BrowserDetect.version ) == 9 );
var isIE_10 = ( isIE && parseInt( BrowserDetect.version ) == 10 );
var isIE_11 = ( isIE && parseInt( BrowserDetect.version ) == 11 );
var isMsieMac = ( isIE && BrowserDetect.OS == "Mac" );
var isOpera = ( BrowserDetect.browser == "Opera"  );
var isFirefox = ( BrowserDetect.browser == "Firefox"  );
var isSafari = ( BrowserDetect.browser == "Safari"  );
var isSafari_3 = ( isSafari &&  BrowserDetect.version  == "3"  );
var isSafari_4 = ( isSafari &&  BrowserDetect.version  == "4"  );
var isSafari_5 = ( isSafari &&  BrowserDetect.version  == "5"  );
var isiPhone = ( BrowserDetect.OS == "iPhone" );
var isiPod = ( BrowserDetect.OS == "iPod" );
var isiPad = ( BrowserDetect.OS == "iPad" );
var isAppleMobile = ( isiPhone || isiPod || isiPad );
var isAndroid = ( BrowserDetect.OS == "Android" ); 
var isMobile = isAppleMobile || isAndroid;

function isie55() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE 5\.5/.test( navigator.userAgent ) ) ; }
function isie6() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE (5\.5|6\.)/.test( navigator.userAgent ) ) ; }
function isie7() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE 7/.test( navigator.userAgent ) ) ; }
function isie8() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE 8/.test( navigator.userAgent ) ) ; }
function isie9() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE 9/.test( navigator.userAgent ) ) ; }
function isie78() { return ( isie7() || isie8() ) ; }
function isie(){ return ( navigator ) && ( navigator.userAgent ) && ( /MSIE/.test( navigator.userAgent ) ) ; }
function isfirefox() { return ( navigator ) && ( navigator.userAgent ) && ( /FireFox/i.test( navigator.userAgent ) ) ; }
function issafari() { return ( navigator ) && ( navigator.appVersion ) && ( /AppleWebKit/.test( navigator.appVersion ) ) ; }

/*
function -
function MOUSE EVENTS
*/

function qsn_beginDrag( elem , ee , wantdefault ) {
	return false ;
}
function qsn_beginDragOnly( elem , ee , wantdefault ) {
	return false ;
}
function qsn_mouseover( elem , ee , wantdefault ) {
	return false ;
}
function qsn_mouseout( elem , ee , wantdefault ) {
	return false ;
}
function q_mouseoverbutton( x , v ) {
	return false ;
}
function q_mouseoutbutton( x , v ) {
	return false ;
}

if ( ! window.pimg_mouseoverimg ) window.pimg_mouseoverimg = function () { return false ; }
if ( ! window.pimg_mouseoutimg ) window.pimg_mouseoutimg = function () { return false ; }
if ( ! window.nws_mouseovermainnews ) window.nws_mouseovermainnews = function () { return false ; }

/*
function -
function TRAVAIL SUR LES OBJETS
*/

function q_cloneObject( o , oldobj ){
	return xq_cloneObject( o , true , oldobj ) ;
}
function cloneObject(){
	var res = undefined ;
	for ( var i = 0 ; i < arguments.length ; i++ ) {
		res = xq_cloneObject( arguments[ i ], false, res ) ;
	}
	return res ;
}

function xq_cloneObject( o , appendArray , oldobj, debug ){
	var no ;
	if ( oldobj !== undefined ) no = oldobj ;
	else  {
		if ( o && o.splice ) no = new Array() ;
		else no = {} ;
	}
	if ( debug ) alert( q_tostring( no ) ) ;
	if ( o && o.splice ) { // i = 0
		for ( var i = 0 ; i < o.length ; i++ ) {
			if ( o[ i ] != null ) {
				if ( typeof o[ i ] == "object" && ! o[ i ].nodeType ) no[ no.length ] = xq_cloneObject( o[ i ] , appendArray ) ;
				else no[ ( appendArray ) ? no.length : i ] = o[ i ] ;
			}
		}
		return no ;
	}
	for ( var x in o ) {
		if ( debug ) alert( x + " - typeof =" + ( typeof o[ x ] ) + " - " + q_tostring( o[ x ] ) ) ;
		if ( o[ x ] != null ) {
			if ( typeof o[ x ] == "object" && ! o[ x ].nodeType ) no[ x ] = xq_cloneObject( o[ x ] , appendArray , ( ( oldobj ) && ( oldobj[ x ] != undefined ) ) ? oldobj[ x ] : undefined ) ;
			else no[ x ] = o[ x ] ;
		}
		if ( debug ) alert( x + " - " + q_tostring( no ) ) ;
	}
	if ( debug ) alert( "done - " + q_tostring( no ) ) ;
	return no ;
}

/*
function -
function GET
*/

/*
function ge( x, y ) {
	return getelement ( x , y ) ;
}
function getelement( x , basehtml ) {
	if ( ! x ) return null ;
	if ( x.splice || ( ( ! x.tagName ) && x[0] && x[0].tagName) ) {
		var res = [ ] ;
		for ( var i = 0 ; i < x.length ; i++ ) res.push( getelement ( x[ i ] , basehtml ) ) ;
		return res ;
	}
	if ( x.tagName ) return x ;
	if ( basehtml != undefined ) return gebcn( getelement( basehtml ) , x ) ;
	var y = null ;
	y = document.getElementById( x ) ;
	if ( y ) return y ;
	if ( q_idalias [ x ] ) y = document.getElementById( q_idalias [ x ] ) ;
	if ( y ) return y ;
	y = document.getElementsByName( x ) ;
	if ( y.length ) return y[ 0 ] ;
	return null ;
}
function gebcn( x, y ) {
	return getElementByClassName ( x , y ) ;
}
function getElementByClassName( elem , classname ) {
	var x = getElementsByClassName( elem , classname , true ) ;
	if ( x.length ) return x[ 0 ] ;
	return null ;
}
function getElementsByClassName( elem , classname , stopWhenFound ) {
	elem = ge( elem ) ;
	if ( ! elem || elem.nodeType != 1 ) {
		if ( getElementsByClassName.caller ) debug_msg( "getElementsByClassName called by " + q_fname( getElementsByClassName.caller ) ) ;
		return [] ;
	}
	if ( ! stopWhenFound ) stopWhenFound = false ;
	var listres = new Array();
	var nfound = 0 ;
	var re = new RegExp ( "\\b" + classname + "\\b" ) ;
	function find( x ) {
		if ( x.nodeType == 1 ) {
			if ( x.className && re.test ( x.className ) ) {
				listres [ nfound++ ] = x ;
				if ( stopWhenFound ) return ;
			}
			for ( var i = 0 ; i < x.childNodes.length ; i++ ) find ( x.childNodes[ i ] );
		}
	}
	for ( var i = 0 ; i < elem.childNodes.length ; i++ ) find ( elem.childNodes[ i ] ) ;
	return listres ;
}
*/

/*
function -
function STRINGS & HTML
*/

function escapeattribute( xx ) {
	var x = "" + ( xx || "" ) ;
	if ( ! isIE ) return x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ).replace( /"/g , "&quot;" ).replace( /'/g , "&apos;" ) ;
	return x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ).replace( /"/g , "&quot;" ).replace( /'/g , "‘" ) ;
}

function escapeHTML( xx ) {
	var x = "" + ( xx || "" ) ;
	return x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ).replace( /(\r\n|\r|\n)/g , "<br/>" ) ;
}

/*
function -
function URLS, PATHS, WINDOWS
*/

function q_getabsolutebaseurl() {
	return ( window.location.href.replace( /(http(s?):\/\/[^\/]+\/).*/ , "$1" ) ) ;
}

function isrealserver() {
	var burl = q_getabsolutebaseurl() ;
	return ! ( burl == "http://beta2.quomodo.com/" || burl == "http://localhost/" || burl == "http://10.0.1.22/" || burl == "http://club2.quomodo.com/" || burl == "http://club1.quomodo.com/" || ( /\.local\/$/.test( burl ) )  || ( /^http:\/\/(10|192)\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/.test( burl ) ) ) ;
}

function web_baseurl() {
	var h = window.location.host ;
	if ( ! (/localhost/).test( h ) && spacexml && spacexml.infos && spacexml.infos.host ) return window.location.protocol + "//" + spacexml.infos.host + "/" ;
	var p = window.location.pathname ;
	if ( (/^[0-9.]+$/).test( h ) && ( /^\/club\// ).test( p ) ) return window.location.protocol + "//" + h + p.replace( /(\/(club\/)?[^\/]+\/).*/ , "$1" ) ;
	if ( (/^(club[0-9]*\.quomodo\.com|[0-9.]+)$/).test( h ) ) return window.location.protocol + "//" + h + p.replace( /^(\/[^\/]+)\/?.*/ , "$1/" ) ;
	if ( (/localhost/).test( h ) ) return "http://" + h + p.replace( /(\/(club\/)?[^\/]+\/).*/ , "$1" ) ;
	return window.location.protocol + "//" + h + "/" ;
}
function q_spacebaseurl( ownerid ) {
	if ( q_pagemode() == "web" ) return web_baseurl() ;
	if ( ownerid == "quomodo" ) return "/services/" + document.mainform.service.value.replace( /^#[0-9]+#/ , "" ).replace( /@intl/ , "@" + q_lang ) + "/" ;
	return "/symspaces/" + ( document.mainform && document.mainform.sessionid.value || q_spaceparam( "sessionid" ) ).replace( /^(.)(.)(.)/ , "$1/$2/$3/$1$2$3" ) + "/" ;
}

function q_spaceabsoluteurl( ownerid , relativeurl ) {
	if ( spacexml && spacexml.fileserver && ( /^uploads(\/shared|\/images|\/videos)?\/[0-9]+\// ).test( relativeurl ) ) return q_fsbaseurl( ownerid ) + encodeURI( relativeurl.replace( /\/(images|videos)\//, "/" ) ) ;
	return q_spacebaseurl( ownerid ) + encodeURI( relativeurl ) ;
}
function q_fsbaseurl( ownerid, withhttp ) {
	if ( ownerid == "quomodo" || ! spacexml || ! spacexml.fileserver ) {
		if ( q_pagemode() == "web" ) return q_spacebaseurl( ownerid ) ;
		return ( ( withhttp ) ? ( window.location.protocol + "//" + window.location.host ) : "" ) + q_spacebaseurl( ownerid ) ;
	}
	var url = window.location.protocol + "//" + spacexml.fileserver + "/" + spacexml.id.replace( /-.*/, "" ) + "/" ;
	if ( q_pagemode() != "web" ) url += ( document.mainform && document.mainform.sessionid.value || q_spaceparam( "sessionid" ) ) + "/" ;
	return url ;
}
function q_fsabsoluteurl( ownerid , relativeurl ) {
	if ( ownerid == "quomodo" || ! spacexml || ! spacexml.fileserver ) return q_spaceabsoluteurl( ownerid , relativeurl ) ;
	return q_fsbaseurl( ownerid ) + encodeURI( relativeurl.replace( /\/(images|videos)\//, "/" ) ) ;
}

/*
function -
function COOKIES
*/

function cookiesEnabled() {
	setcookie( "test-cookies-enabled", "1", 1, true ) ;
	var res = getcookie( "test-cookies-enabled" ) == "1" ;
	deletecookie( "test-cookies-enabled", true ) ;
	return res ;
}
function getcookie( name ) {
	if ( ! document.cookie ) return null ;
	var start = document.cookie.indexOf( name + "=" ) ;
	var len = start + name.length + 1 ;
	if ( ( !start ) && ( name != document.cookie.substring( 0, name.length ) ) ) return null ;
	if ( start == -1 ) return null ;
	var end = document.cookie.indexOf( ";", len ) ;
	if ( end == -1 ) end = document.cookie.length ;
	return unescape( document.cookie.substring( len, end ) ) ;
}

function setcookie( name, value, expires, fullDomain ) { // expires: days ;
	var today = new Date();
	today.setTime( today.getTime() );
	if ( expires ) {
		expires = expires * 1000 * 60 * 60 * 24;
		var expires_date = new Date( today.getTime() + (expires) );
	}
	document.cookie = name + "=" +escape( value ) + ";path=/" + ( fullDomain ? ( ";domain=" + window.location.host.replace( /(^|.*[.])([^.]+[.][^.]+)$/, "$2" ) ) : "" ) + ( ( expires ) ? ";expires=" + expires_date.toGMTString() : "" );
}

function deletecookie( name, fullDomain ) {
	if ( getcookie( name ) ) document.cookie = name + "=" + ";expires=Thu, 01-Jan-1970 00:00:01 GMT" + ( fullDomain ? ( ";domain=" + window.location.host.replace( /(^|.*[.])([^.]+[.][^.]+)$/, "$2" ) ) : "" ) + ";path=/" ;
}

/*
function -
function DIVERS
*/

function q_spaceparam( key , emptyresult ) {
	var x = ( emptyresult == undefined ) ? null : emptyresult ;
	if ( window.spacexml ) return ( spacexml[ key ] == undefined ) ? x : spacexml[ key ] ; // pour respecter la chaîne vide
	return x ;
}

function q_addspaceparams( json ) {
	if ( ! window.spacexml ) spacexml = {} ;
	for ( var x in json ) spacexml[ x ] = json[ x ] ;
}

function q_pagemode( membermode ) {
	if ( membermode ) {
		var pagemode = q_pagemode() ;
		if ( q_getuserlevel( memberid ) == "admin" || ( /#artemapage@/ ).test( currsvcid ) ) return pagemode ;
		return ( pagemode == "edit" ) ? "view" : pagemode ;
	}
	if ( window.web_js_loaded ) return "web" ;
	if ( window.q_makeweb ) return "makeweb" ;
	try { return document.mainform.pagemode.value ; } catch( err ) { } ;
	if ( window.q_loggedpagemode ) return q_loggedpagemode ;
	return null ;
}

function relaunchupdates() {
	return false ;
}
function spacetabalert() {
	return false ;
}

if ( ! window.qsn_notestyles ) var qsn_notestyles = {};
function qsn_addnotestyle( notekind , styleref , thestyle ) {//thestyle = un json
	if ( ! qsn_notestyles[ notekind ] ) qsn_notestyles[ notekind ] = {} ;
	qsn_notestyles[ notekind ][ styleref ] = thestyle ;
}
function q_args( args ) {
	if ( args == undefined || args == null ) return [];
	else if ( typeof args == "object" && args.splice ) return args ;
	return [ args ] ;
}
function q_apply( h , args , obj ) {
	if ( ! h ) return ;
	if ( ( typeof h ) == "string" ) h = eval( h ) ;
	return h.apply( obj || this , q_args( args ) ) ;
}


function q_upgrade_to_newversion() {
	q_fsm_wait() ;
	q_ajaxsetppty( { "askv2" : "" }, function() {
		openservice( currsvcid ) ;
	} ) ;
}

function q_forceoldurl( url ) {
	var re0 = new RegExp( "^/(symspaces|cgi-bin|membre|admin|login)/" ) ;
	if ( re0.test( url ) ) return url ;
	var re1 = new RegExp( "^/old/v1/" ) ;
	var re2 = new RegExp( "^/" ) ;
	if ( ! re1.test( url ) && re2.test( url ) ) url = "/old/v1" + url ;
	return url ;
}

var currfocus ;
if ( ! window.rights_record ) var rights_record = {};
if ( ! window.spacexml ) var spacexml = {};
var q_blue = "#4A88AB" ;
var q_idalias = {} ;
if ( ! window.q_elems ) q_elems = {} ;
var qdyn_load_trace = false;

/*
function -
function FIXES jQUERY
*/

/*
if ( window.jQuery ) {
(function( $ ){
	if ( !$.support.opacity ) {
		var ralpha = /alpha\([^)]*\)/i,
		ropacity = /opacity=([^)]*)/;
		$.cssHooks.opacity = {
			get: function( elem, computed ) {
				// IE uses filters for opacity
				return ropacity.test((computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "") ?
					(parseFloat(RegExp.$1) / 100) + "" :
					computed ? "1" : "";
			},

			set: function( elem, value ) {
				var style = elem.style;

				// IE has trouble with opacity if it does not have layout
				// Force it by setting the zoom level
				style.zoom = 1;

				// Set the alpha filter to set the opacity
				var opacity = ( $.isNaN(value) || value == 1 ) ?
					"" :
					"alpha(opacity=" + value * 100 + ")",
					filter = style.filter || "";

				style.filter = ralpha.test(filter) ?
					filter.replace(ralpha, opacity) :
					style.filter + ' ' + opacity;
			}
		};
	}
	$.ajaxSettings.converters["text json"] = function( data ) {
		var rvalidchars = /^[\],:{}\s]*$/,
		rvalidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
		rvalidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
		rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g ;
		if ( typeof data !== "string" || !data ) {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = $.trim( data );

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test(data.replace(rvalidescape, "@")
			.replace(rvalidtokens, "]")
			.replace(rvalidbraces, "")) ) {

			// Try to use the native JSON parser first
			if ( window.JSON && window.JSON.parse ) {
				try { return window.JSON.parse( data ); } catch( err ) {}
			}
			return (new Function("return " + data))();

		} else {
			$.error( "Invalid JSON: " + data );
		}
	} ;
})( jQuery );
}
*/

/*
2013-01-25, frame redirection
Objet : éviter que les clients n'intègrent leur site dans un frame.
On regarde donc :
	- si on est dans un frame
	- si on a une url en club.quomodo.com
	- si parent.quomodo ne fonctionne pas
Dans ce cas, on force la redirection à l'url du frame

2014-04-28, finalement on applique la règle à tout le monde, domaine ou pas
*/
//if ( /^club1?\.quomodo\.com/.test( window.location.host ) && window.parent && parent.window != window ) {
if ( window.parent && parent.window != window ) {
	try { if ( parent.quomodo == undefined ) throw { message : "parent.quomodo is undefined" } ; } catch( err ){ if ( ! ( window.quomodoclient && quomodoclient.allowIframe ) ) parent.location.href = window.location.href ; }
}

/*
function -
function BROWSERS
*/

// Trouvé sur quirksmode.org
var BrowserDetect = {
	init: function () {
		this.browser = this.searchString(this.dataBrowser) || "An unknown browser";
		this.version = this.searchVersion(navigator.userAgent) || this.searchVersion(navigator.appVersion) || "an unknown version";
		this.OS = this.searchString(this.dataOS) || "an unknown OS";
		this.supportRGBA = ( function() {
			var elem = document.createElement( "DIV" ) ;
			try { elem.style.backgroundColor = "rgba(128,128,128,0.5)" ; return true ; } catch ( err ) {}
			return false ;
		} )() ;
	},
	searchString: function (data) {
		for (var i=0;i<data.length;i++)	{
			var dataString = data[i].string;
			var dataProp = data[i].prop;
			this.versionSearchString = data[i].versionSearch || data[i].identity;
			if (dataString) { if (dataString.indexOf(data[i].subString) != -1) return data[i].identity; }
			else if (dataProp) return data[i].identity;
		}
	},
	searchVersion: function (dataString) {
		if ( typeof this.versionSearchString == "function" ) return this.versionSearchString( dataString ) ;
		var index = dataString.indexOf(this.versionSearchString);
		if (index == -1) return;
		return parseFloat(dataString.substring(index+this.versionSearchString.length+1));
	},
	dataBrowser: [
		{ string: navigator.userAgent, subString: "Chrome", identity: "Chrome" },
		{ string: navigator.userAgent, subString: "OmniWeb", versionSearch: "OmniWeb/", identity: "OmniWeb" },
		{ string: navigator.vendor, subString: "Apple", identity: "Safari", versionSearch: "Version" },
		{ prop: window.opera, identity: "Opera" },
		{ string: navigator.vendor, subString: "iCab", identity: "iCab" },
		{ string: navigator.vendor, subString: "KDE", identity: "Konqueror" },
		{ string: navigator.userAgent, subString: "Firefox", identity: "Firefox" },
		{ string: navigator.vendor, subString: "Camino", identity: "Camino" },
		{ string: navigator.userAgent, subString: "Netscape", identity: "Netscape" }, // for newer Netscapes (6+)
		{ string: navigator.userAgent, subString: "MSIE", identity: "Explorer", versionSearch: "MSIE" },
		{ string: navigator.userAgent, subString: "Trident", identity: "Explorer", versionSearch: function( dataString ) {
			var index = dataString.indexOf( "Trident" );
			return 4 + parseFloat(dataString.substring( index + "Trident".length + 1 ) ) ;
		} },
		{ string: navigator.userAgent, subString: "Gecko", identity: "Mozilla", versionSearch: "rv" },
		{ string: navigator.userAgent, subString: "Mozilla", identity: "Netscape", versionSearch: "Mozilla" } // for older Netscapes (4-)
	],
	dataOS : [
		{ string: navigator.platform, subString: "Win", identity: "Windows" },
		{ string: navigator.platform, subString: "Mac",	identity: "Mac" },
		{ string: navigator.userAgent, subString: "iPhone", identity: "iPhone" },
		{ string: navigator.userAgent, subString: "iPod", identity: "iPod" },
		{ string: navigator.userAgent, subString: "iPad", identity: "iPad" },
		{ string: navigator.userAgent, subString: "Android", identity: "Android" },
		{ string: navigator.platform, subString: "Linux", identity: "Linux" }
	]

};
BrowserDetect.init();

var isWin = ( BrowserDetect.OS == "Windows"  );
var isMac = ( BrowserDetect.OS == "Mac" ) ;

var isInternetExplorer = ( BrowserDetect.browser == "Explorer"  );
var isIE  = isInternetExplorer;
var isIE_6 = ( isIE && parseInt( BrowserDetect.version ) <= 6 );
var isIE_7 = ( isIE && parseInt( BrowserDetect.version ) == 7 );
var isIE_8 = ( isIE && parseInt( BrowserDetect.version ) == 8 );
var isIE_9 = ( isIE && parseInt( BrowserDetect.version ) == 9 );
var isIE_10 = ( isIE && parseInt( BrowserDetect.version ) == 10 );
var isIE_11 = ( isIE && parseInt( BrowserDetect.version ) == 11 );
var isMsieMac = ( isIE && BrowserDetect.OS == "Mac" );
var isOpera = ( BrowserDetect.browser == "Opera"  );
var isFirefox = ( BrowserDetect.browser == "Firefox"  );
var isSafari = ( BrowserDetect.browser == "Safari"  );
var isSafari_3 = ( isSafari &&  BrowserDetect.version  == "3"  );
var isSafari_4 = ( isSafari &&  BrowserDetect.version  == "4"  );
var isSafari_5 = ( isSafari &&  BrowserDetect.version  == "5"  );
var isiPhone = ( BrowserDetect.OS == "iPhone" );
var isiPod = ( BrowserDetect.OS == "iPod" );
var isiPad = ( BrowserDetect.OS == "iPad" );
var isAppleMobile = ( isiPhone || isiPod || isiPad );
var isAndroid = ( BrowserDetect.OS == "Android" ); 
var isMobile = isAppleMobile || isAndroid;

function isie55() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE 5\.5/.test( navigator.userAgent ) ) ; }
function isie6() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE (5\.5|6\.)/.test( navigator.userAgent ) ) ; }
function isie7() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE 7/.test( navigator.userAgent ) ) ; }
function isie8() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE 8/.test( navigator.userAgent ) ) ; }
function isie9() { return ( navigator ) && ( navigator.userAgent ) && ( /MSIE 9/.test( navigator.userAgent ) ) ; }
function isie78() { return ( isie7() || isie8() ) ; }
function isie(){ return ( navigator ) && ( navigator.userAgent ) && ( /MSIE/.test( navigator.userAgent ) ) ; }
function isfirefox() { return ( navigator ) && ( navigator.userAgent ) && ( /FireFox/i.test( navigator.userAgent ) ) ; }
function issafari() { return ( navigator ) && ( navigator.appVersion ) && ( /AppleWebKit/.test( navigator.appVersion ) ) ; }

function q_navigatorlanguage() {
	var lang = ( navigator.language ) ? navigator.language : ( ( navigator.userLanguage ) ? navigator.userLanguage : "fr" ) ;
	lang = lang.split("-")[ 0 ] ;
	if ( lang != "fr" ) lang = "en" ;
	return lang ;
}

function q_check_map( callback ) {
	if ( callback != "edit" && spacexml.map ) return callback() ;
	q_prompt( common_message[ "kmap-message" ], { "title": common_message[ "kmap-title" ], "default": spacexml.map, "callback" : function( x ) {
		if ( ! x ) return ;
		q_ajaxsetppty( { "map": $.trim( x ) }, function() {
			if ( callback != "edit" ) return callback() ;
		} ) ;
	} } );
}
/*
function -
function QUOMODO object : quomodo.gmap
*/

if ( window.quomodo ) {
	quomodo.extend( "gmap" , function(){
		this.__maps = [] ;
		this.addmap = function( options ){
			this.__maps.push( options ) ;
		} ;
		this.getmap = function( w ){
			for ( var i = 0 ; i < this.__maps.length ; i++ ){
				if ( this.__maps[ i ].frame.contentWindow == w ) return this.__maps[ i ] ;
			}
			return null ;
		} ;
	} ) ;
}
/*
function -
function GET
*/

function ge( x, y ) {
	return getelement ( x , y ) ;
}

function gebcn( x, y ) {
	return getElementByClassName ( x , y ) ;
}

function gebtn( x, y ) {
	x = ge( x ) ;
	if ( ! x ) return null ;
	var e = x.getElementsByTagName( y ) ;
	if ( e.length > 0 ) return e.item( 0 ) ;
	else return null ;
}

function getelement( x , basehtml ) {
	if ( ! x ) return null ;
	if ( x.splice || ( ( ! x.tagName ) && x[0] && x[0].tagName) ) {
		var res = [ ] ;
		for ( var i = 0 ; i < x.length ; i++ ) res.push( getelement ( x[ i ] , basehtml ) ) ;
		return res ;
	}
	if ( x.tagName ) return x ;
	if ( basehtml != undefined ) return gebcn( getelement( basehtml ) , x ) ;
	var y = null ;
	y = document.getElementById( x ) ;
	if ( y ) return y ;
	if ( q_idalias [ x ] ) y = document.getElementById( q_idalias [ x ] ) ;
	if ( y ) return y ;
	y = document.getElementsByName( x ) ;
	if ( y.length ) return y[ 0 ] ;
	return null ;
}

function getElementFromEvent( ee ){
	var e = ee ||  window.event ;
	return e.target || e.srcElement ;
}

function getRelatedElementFromEvent( ee ){
	var e = ee ||  window.event ;
	if(e.relatedTarget) return e.relatedTarget ;
	if(e.type=="mouseover" && e.fromElement) return e.fromElement ;
	if(e.type=="mouseout" && e.toElement) return e.toElement ;
	return null ;
}

function getElementByClassName( elem , classname ) {
	var x = getElementsByClassName( elem , classname , true ) ;
	if ( x.length ) return x[ 0 ] ;
	return null ;
}

function getElementsByClassName( elem , classname , stopWhenFound ) {
	return $( "." + classname + ( ( stopWhenFound ) ? ":eq(0)" : "" ) , ge( elem ) ).get() ;
}

function getContainer ( x, cc ) {
	if ( ! x ) return null ;
	x = ge( x ) ;
	if ( isremoved( x ) || x.nodeType != 1 ) return null ;
	cc =  cc || "container" ;
	if ( $( x ).hasClass( cc ) ) return x ;
	var y = $( ge( x ) ).parents( "." + cc + ":eq(0)" ).filter( "." + cc ) ;
	if ( ! y.length ) return null ;
	return y.get( 0 ) ;
}

function getContainerOrSelf ( x, cc ) {//identique à getContainer
	return getContainer ( x, cc ) ;
}

function q_coreRelevantTargetCatcher( target , relevantTargetCatcher ) {
	return getContainerOrSelf( target , relevantTargetCatcher ) ;
}

function q_nodelevel( elem ) {// compte le nombre de parentNode jusqu'au body
	try {
		if( ! elem ) return 0 ;
		var nb = 0 ;
		while ( elem.nodeType == 1  && elem.parentNode && elem.tagName.toLowerCase() != "body" ) {
			nb ++ ; 
			elem = elem.parentNode ;
		}
		return nb ; 
	} catch( err ) {
		return 0 ;
	}
}

function q_ascendingnodelevel( elem1 , elem2 ) {
	return q_nodelevel( elem1 ) - q_nodelevel( elem2 ) ;
}

/*
function -
function CREATE ELEMS
*/

function create_elem( t , arg , text ) {
	var e = document.createElement( t ) ;
	if ( arg ) create_attributes( e , arg ) ;
	if ( text ) e.appendChild( document.createTextNode( text ) ) ;
	return e ;
}

function create_table( e, arg ) {
	var t = create_elem( "TABLE", { cellSpacing : "0", cellPadding : "0", border: "0" } ) ;
	if ( arg ) create_attributes( t , arg ) ;
	return e.appendChild( t ) ;
}

function create_tr( table, x, y ){
	var rownb = ( x && typeof x == "number" ) ? x : -1;
	var arg = ( x && typeof x == "object" ) ? x : ( ( y && typeof y == "object" ) ? y : null ) ;
	
	var tr = table.insertRow( rownb );
	if ( arg ) create_attributes( tr , arg ) ;
	return tr ;
}

function create_td( tr , arg ) {
	var td = tr.insertCell( -1 ) ;
	if ( arg ) create_attributes( td , arg ) ;
	return td ;
}

function create_attributes( e , arg ) {
	var z ;
	for ( var x in arg ) {
		z = arg[ x ] ;
		if ( ( x == "innerHTML" ) && ( ! (/</).test( z ) ) ) q_innerHTML( e , z ) ;
		else {
			if ( typeof z == "string" ) {
				try {//vh : pb sur IE7 et IE8 pour la propriété align d'un td ; try plus souple je pense.
					e[ x ] = z ;
				} catch (err) {
					e.setAttribute( x , z ) ;
				}
//				if ( isie6() || isie7() ) e.setAttribute( x , z ) ; // attention pas ie8 sinon ça buggue sur className il faut mettre class
//				else e[ x ] = z ;
			} else for ( var y in z ) {
				if ( isIE && y == "cursor" && z[ y ] == "pointer" ) z[ y ] = "hand" ;
				try { e[ x ][ y ] = z[ y ] ; } catch (err) {
					var s = "error in create_attributes" ;
					try { s += " " + x + " for " + y + " value : " + z[ y ] ; } catch(err2) { } ;
					try { s += "\r" + ( err.message || err.description || "(no message)" ) ; } catch(err2) { } ;
					try { s += "\rElement's innerHTML is: \r\r" + e.innerHTML ; } catch(err2) { } ;
					debugmail( s ) ;
				} ;
			}
		}
	}
}

/*
var desc = {
	options :  (type array)
		(type string) "toto"
		(type array) [ value (type string), [ display (type string) ] , [ disabled (type boolean) ] ]	
		(type objet) { label : "titi", options : [ 
			(type string) "toto"
			(type array) [ value (type string), [ display (type string) ] , [ disabled (type boolean) ] ]		
			(type object) { value : (type string), [ display : (type string) ] , [ disabled : (type boolean) ] }	
		] } 
	]  	
	[ id : (type string ou HTMLElement) // id du select si il existe ]
	[ selected : (type string ou array) // éléments sélectionnés ]
	[ multiple : (type boolean) , // plusieurs choix autorisés ]
	[ size : (type number), // nb de lignes affichées ]
}
*/

function createradio( s , xx ) {
	var x ;
	x = ( xx ) ? xx : { className : "radio on" } ;
	if ( ! x.className ) x.className = "radio on" ;
	var a = create_elem( "A" , x ) ;
	var img = a.appendChild( create_elem( "IMG", { src : "/images/blank.gif" } ) ) ;
	a.appendChild( document.createTextNode( s ) ) ;
	return a ;
}

function create_select( desc, args ){
	if ( desc.id ) {
		var select = ge( desc.id );
		if ( ! select || ! select.tagName || select.tagName.toLowerCase() != "select" ) return ;
	} else var select = create_elem( "SELECT" ) ;

	create_attributes( select, args );
	if ( desc.multiple ) {
		select.multiple = "multiple";
		select.size = ( desc.size || 3 ) ;
	}
	select.onclick = function( event ) { q_stopPropagation( event );};
	if ( desc.onChange ) select.onchange = desc.onChange;
	
	if ( desc.selected && ( typeof desc.selected ) == "string" ) desc.selected = [ desc.selected ] ;
	if ( desc.options ) {
		for ( var i = 0 ; i < desc.options.length ; i++ ){
			var opt = desc.options[ i ];
			if ( ( typeof opt ) == "string" ) opt = [ opt ] ;
			if ( ! opt.splice && opt.label ){ // c'est un optgroup
				var optargs = ( opt.args ) ? opt.args : {};
				optargs.label = opt.label;
				var group = create_elem( "OPTGROUP", optargs) ;
				select.appendChild( group );
				for ( var j = 0 ; j < opt.options.length ; j++ ) select.options[ select.options.length ] = create_option( opt.options[ j ] , desc.selected ) ;
				//for ( var j = 0 ; j < opt.options.length ; j++ ) group.appendChild( create_option( opt.options[ j ] , desc.selected ) );
				//select.appendChild( group );
			} else {
				select.options[ select.options.length ] = create_option( opt , desc.selected ) ;
			}
		}
	}
	$( "option[disabled]" , $( select ) ).css({'color': '#cccccc'}) ;
	$( select ).data( "currentSelectedVal" , desc.selected ) ;
	var currentOnChange = select.onchange ;
	select.onchange = function ( event ) {
		if ( this.options[ this.selectedIndex ].disabled ) $( this ).val( $( this ).data( "currentSelectedVal" ) ) ;
		else {
			$( this ).data( "currentSelectedVal" , $( this ).val() ) ;
			if ( currentOnChange ) currentOnChange.apply( this , [ event ] ) ;
		}
	} ;
	return select;
};

function create_option( option , x, y ){
	var disabled = false ;
	var selected = false;
	var value , name ;
	if ( ( typeof option ) == "string" ) option = [ option ];
	if ( option.splice ) { 
		// array : [ value , [ name (type string) ] , [ disabled (type boolean) ] ]
		value = option[ 0 ] ;
		name = option[ 0 ] ;
		if ( typeof option[ 1 ] == "string" ) name = option[ 1 ] ;
		else if ( typeof option[ 1 ] == "function" ) name = option[ 1 ]() ;

		if ( option.length > 0 && ( typeof option[ 1 ] ) == "boolean" ) disabled = option[ 1 ] ;
		else if ( option.length > 1 ) disabled = option[ 2 ] ;
	} else {
		value = ( option.value != undefined ) ? option.value : option ;

		name = value ;
		if ( typeof option.name == "string" ) name = option.name ;
		else if ( typeof option.name == "function" ) name = option.name() ;

		if ( option.disabled ) disabled = option.disabled ;
		if ( option.selected ) selected = option.selected;
	}
	var opt = new Option( name, value );
	if ( x && x.splice && indexOfItem( value , x ) != -1 ) selected = true;
	
	if ( disabled ) opt.disabled = "disabled" ;
	if ( selected ) opt.selected = "selected" ;
	
	var args = ( x && ! x.splice ) ? x : ( ( y ) ? y : null );
	if ( args ) create_attributes( opt, args );
	
	return opt;
};

function create_radios( desc, args ){
	if ( desc.id ) {
		var radios = ge( desc.id );
		if ( ! radios ) return ;
	} else var radios = create_elem( "DIV" ) ;

	create_attributes( radios, args );
	
	var radiosname = "radios_" + new Date().getTime();
	radios.setAttribute( "radiosname", radiosname ) ;
	
	if ( ! desc.radios ) return; 
	var onlyonechecked = false;
	for ( var i = 0 ; i < desc.radios.length ; i++ ) {
		var checked = false;
		var disabled = false;

		if ( ( typeof desc.radios[ i ] ) == "string" ) desc.radios[ i ] = [ desc.radios[ i ] ] ;
			if ( desc.radios[ i ].splice ) {
			var value = desc.radios[ i ][ 0 ];
			var name = ( desc.radios[ i ].length > 0 && ( typeof desc.radios[ i ][ 1 ] ) == "string" ) ? desc.radios[ i ][ 1 ] : desc.radios[ i ][ 0 ];
			if ( desc.radios[ i ].length > 0 && ( typeof desc.radios[ i ][ 1 ] ) == "boolean" ) disabled = desc.radios[ i ][ 1 ] ;
			else if ( desc.radios[ i ].length > 1 ) disabled = desc.radios[ i ][ 2 ] ;
			
		} else{
			var value = desc.radios[ i ].value;
			var name = ( desc.radios[ i ].name || desc.radios[ i ].value );
			if ( desc.radios[ i ].disabled ) disabled = desc.radios[ i ].disabled ;
			if ( desc.radios[ i ].checked ) checked = desc.radios[ i ].checked;
		}
		if ( desc.checked && desc.checked == name ) checked = true;
		if ( checked && ! onlyonechecked ) {
			checked = true;
			onlyonechecked = true;
		} else checked = false;
		
		radios.appendChild( create_elem( "INPUT", { type : "radio", name : radiosname, value : value, checked : ( checked ) ? "checked" : "", disabled : ( disabled ) ? "disabled" : "" } ) );
		radios.appendChild( document.createTextNode( name ) );
		radios.appendChild( create_elem( "BR" ) );
	}
	return radios;
}

function create_checkboxes( desc, args ){
	if ( desc.id ) {
		var checkboxes = ge( desc.id );
		if ( ! checkboxes ) return ;
	} else var checkboxes = create_elem( "DIV" ) ;

	create_attributes( checkboxes, args );
	
	var checkboxesname = "checkboxes_" + new Date().getTime();
	checkboxes.setAttribute( "checkboxesname", checkboxesname ) ;
	
	if ( desc.selected && ( typeof desc.selected ) == "string" ) desc.selected = [ desc.selected ] ;
	
	if ( ! desc.checkboxes ) return; 
	for ( var i = 0 ; i < desc.checkboxes.length ; i++ ) {
		var checked = false;
		var disabled = false;
		
		if ( ( typeof desc.checkboxes[ i ] ) == "string" ) desc.checkboxes[ i ] = [ desc.checkboxes[ i ] ] ;
		if ( desc.checkboxes[ i ].splice ) {
			var value = desc.checkboxes[ i ][ 0 ];
			var name = ( desc.checkboxes[ i ].length > 0 && ( typeof desc.checkboxes[ i ][ 1 ] ) == "string" ) ? desc.checkboxes[ i ][ 1 ] : desc.checkboxes[ i ][ 0 ];
			if ( desc.checkboxes[ i ].length > 0 && ( typeof desc.checkboxes[ i ][ 1 ] ) == "boolean" ) disabled = desc.checkboxes[ i ][ 1 ] ;
			else if ( desc.checkboxes[ i ].length > 1 ) disabled = desc.checkboxes[ i ][ 2 ] ;
			
		} else{
			var value = desc.checkboxes[ i ].value;
			var name = ( desc.checkboxes[ i ].name || desc.checkboxes[ i ].value );
			if ( desc.checkboxes[ i ].disabled ) disabled = desc.checkboxes[ i ].disabled ;
			if ( desc.checkboxes[ i ].checked ) checked = desc.checkboxes[ i ].checked;
		}
		if ( desc.selected && desc.selected.splice && indexOfItem( value , desc.selected ) != -1 ) selected = true;
		
		checkboxes.appendChild( create_elem( "INPUT", { type : "checkbox", name : checkboxesname, value : value, checked : ( checked ) ? "checked" : "", disabled : ( disabled ) ? "disabled" : "" } ) );
		checkboxes.appendChild( document.createTextNode( name ) );
		checkboxes.appendChild( create_elem( "BR" ) );
	}
	return checkboxes;
}

function create_button( desc ){
/*	desc = { 
		id : id du bouton, class : class du bouton, icon : classe de l'icone à gauche, small : (booleen) petit bouton , iconright : (boolean) bouton à droite (défault false)
		label ou html : contenu à afficher en texte ou html ( ou dom ou jquery )
		onclick : fonction à appeler sur le click
	}
*/
	if ( ! desc ) return;
	var button, tr, td1 , td2 ;
	button = $( '<table cellspacing="0" cellpadding="5" border="0">' )
		.addClass( "clubcolor3" )
		.hover(
			function(){ q_button_mouseover( this ); },
			function(){ q_button_mouseout( this ); } 
		)
		.mousedown( function( event ){ q_stopPropagation( event ); });
	if ( desc.id ) button.attr( "id", desc.id );
	if ( desc[ "class" ] ) button.addClass( desc[ "class" ] );
	if ( desc.small ) button.addClass( "q_toolbar" );
	var visibilty = desc.visibility ;
	if ( typeof visibilty == "function" ) visibilty = visibilty() ;
	if ( visibilty != undefined ) button.css( "visibility" , ( visibilty ) ? "visible" : "hidden" );
	
	var descicon ="" , desccontent = ""  ;
	if ( desc.icon ) descicon = $( '<div>', { "class" : "q_button_icon " + desc.icon } ) ;
	if ( desc.label && ! desc.notext ) desccontent = $( '<div>', { "class" : "q_button_content", text : desc.label } ) ;
	else if ( desc.html && ! desc.notext ) desccontent = $( '<div>', { "class" : "q_button_content", html : desc.html } ) ;
	
	tr = $( '<tr>', { "class" : "q_button_tr"} ).css( "cursor", "pointer" ).appendTo( button );
		td1 = $( '<td>', { "class" : "q_button_td_icon", align : "right", vAlign : "middle" } ).appendTo( tr )
			.append( ( desc.iconright ) ? desccontent : descicon ) ;
		td2 = $( '<td>', { "class" : "q_button_td_content", align : "left", vAlign : "middle" } ).appendTo( tr )
			.append( ( desc.iconright ) ? descicon : desccontent ) ;
	if ( desc.notext ) {
		td1.css( "padding" , "5px 0px 5px 7px" ) ;
		td2.css( "padding" , "5px 3px" ) ;
	}
	if ( desc.onclick && typeof desc.onclick == "function" ) button.click( desc.onclick );
	else if ( desc.onclick && typeof desc.onclick == "string" ) button.click( eval( desc.onclick )  );
	return button.get( 0 );
}

function q_button_mouseover( elem ){ $( ".q_button_tr", $( elem ) ).addClass( "over" ); } 
function q_button_mouseout( elem ){ $( ".q_button_tr", $( elem ) ).removeClass( "over" ); }

/*
function -
function TRAVAIL SUR LES OBJETS
*/

function q_deleteRow( tr ) {
	var table = tr.parentNode ; 
	if ( table.tagName != "TABLE" ) table = table.parentNode ; 
	var rows = table.rows ; 
	for ( var i = 0 ; i < rows.length ; i++ ) if ( rows[ i ] == tr ) { 
		table.deleteRow( i ) ; 
		return ;
	}
}

function q_deleteCell( td ) {
	var tr = td.parentNode ; 
	var cells = tr.cells ; 
	for ( var i = 0 ; i < cells.length ; i++ ) if ( cells[ i ] == td ) { 
		tr.deleteCell( i ) ; 
		return ;
	}
}

function q_deleteCells( tr ) {
	var cells = tr.cells ;
	var n = cells.length ;
	for ( var i = 0 ; i < n ; i++ ) tr.deleteCell( 0 ) ; 
}

function q_removeChildren( x ) {
	$( x ).children().remove();
/*
	if ( ! x ) return false ;
	if ( typeof x == 'string' ) x = getelement( x ) ;
	if ( ! x ) return false ;
	if ( x.tagName == "TR" ) return q_deleteCells( x ) ;
	while ( x.childNodes.length > 0 ) x.removeChild( x.firstChild ) ;
*/
}
function q_removeChilds( x ) { return q_removeChildren( x ) ; }

function rm( x ) {
	if ( ! x ) return false ;
	if ( typeof x == 'string' ) x = getelement( x ) ;
	if ( ! x ) return false ;
	var debugnoteid ;
	try { debugnoteid = x.id ; } catch( err ) { }
	try { x.removed = true ; } catch( err ) { } ;
	try { x.setAttribute( "removed" , true ) ; } catch( err ) { } ;
	if ( x.parentNode ) {
		switch( x.tagName ) {
			case "TR" : q_deleteRow( x ) ; break ;
			case "TD" : q_deleteCell( x ) ; break ;
			default : x.parentNode.removeChild( x ) ;
		}
	} else if ( x.splice || ( x[ 0 ] && x[ 0 ].parentNode ) ) {
		for ( var i = 0 ; i < x.length ; i++ ) rm( x [ i ] ) ;
	} else if ( debugnoteid ) debugmail( "rm was called for orphan child, id " + debugnoteid ) ;
	return false ;
}

function isremoved( elem ) {
	return ( ! elem || ! elem.parentNode || elem.removed || ( elem.getAttribute && elem.getAttribute( "removed" ) ) || ( window.$ && $( elem ).parents( "body" ).length == 0 ) || false ) ;
}

function indexOfItem( theitem , thelist ) {
	return $.inArray( theitem, thelist );
/*
	var thesep, s, i ;
	thesep = "\n" ;
	s = thesep + thelist.join( thesep ) + thesep ;
	i = s.indexOf( thesep + theitem + thesep ) ;
	if ( i == -1 ) return i ;
	return ( s.substring( 0 , i ).split( thesep ).length ) - 1 ;
*/
}

function q_sortjson( json ) {
	var sortedkeys = [] ;
	for ( var key in json ) sortedkeys.push( key ) ;
	sortedkeys.sort() ;
	return sortedkeys ;
}

function q_emptyjson( x ) {
	for ( var xx in x ) return false ;
	return true ;
}

function q_getkeys( obj ) {
	var t = [] ;
	if ( typeof obj == "object" ) for ( var k in obj ) t.push( k ) ;
	return t ;
}

function suppressitem( theitem , thelist ) {
	for ( var i = thelist.length - 1 ; i >= 0 ; i-- ) {
		if ( thelist[ i ] == theitem ) thelist[ i ] = null ;
	}
	return thelist ;
}

function testIsValidObject( objToTest ) {
 	if ( null == objToTest ) return false ;
 	if ( "undefined" == typeof( objToTest ) ) return false ;
 	return true ;
}

var cloneNumber = 0 ;

function changeProp( t , s ) {
	if ( t.id ) t.id = t.id.replace( /template$/ , "") + s ;
	if ( t.name ) t.name = t.name.replace( /template$/ , "") + s ;
	var children = t.childNodes ;
	for( var i = 0 ; i < children.length ; i++ ) changeProp( children[ i ] , s ) ;
}

function q_CloneFromNode( t ){
	var aclone = t.cloneNode( true ) ;
	changeProp( aclone , "_clone" + cloneNumber++ ) ;
	return aclone ;
}

function changeProp2( t , s ) {
	if ( t.id ) t.id = t.id.replace( /template$/ , "") + s ;
	var children = t.childNodes ;
	for( var i = 0 ; i < children.length ; i++ ) changeProp2( children[ i ] , s ) ;
}

function q_CloneFromNode2( t ){
	var aclone = t.cloneNode( true ) ;
	changeProp2( aclone , "_clone" + cloneNumber++ ) ;
	return aclone ;
}

function q_CloneFromID( s ){
	var t = getelement( s ) ;
	return q_CloneFromNode( t ) ;
}

/*
function -
function DISPLAY
*/

function showblock( x , base ) {
	x = getelement( x , base ) ;
	if ( ! x ) return false ;
	if ( x.tagName ) {
		if ( x.style[ 'visibility' ] ) x.style[ 'visibility' ] = 'visible' ;
		else {
			if ( x.tagName == "TR" ) x.style[ 'display' ] = ( ( navigator.appVersion ) && ( /MSIE/.test( navigator.appVersion ) ) ) ? 'block' : 'table-row' ;
			else if ( x.tagName == "TD" ) try {
				if( isie8() || isie7() ) x.style[ 'display' ] = "inline" ;
				else x.style[ 'display' ] = 'table-cell' ;
			} catch( err ) {
				x.style[ 'display' ] = 'inline' ;
			}
			else if ( x.tagName == "LI" ) x.style[ 'display' ] = 'list-item' ;
			else if ( x.tagName == "A" ) x.style[ 'display' ] = 'inline' ;
			else if ( x.tagName == "SPAN" ) x.style[ 'display' ] = 'inline' ;
			else if ( x.tagName == "TABLE" ) x.style[ 'display' ] = ( ( navigator.appVersion ) && ( /MSIE/.test( navigator.appVersion ) ) ) ? 'block' : 'table' ; // non vérifié sur IE
			else x.style[ 'display' ] = 'block' ;
		}
	} else {
		var y = [] ;
		for ( var i = 0 ; i < x.length ; i++ ) y.push( x[ i ] ) ;
		y.sort( q_ascendingnodelevel ) ;
		for ( var i = 0 ; i < y.length ; i++ ) showblock( y [ i ] , base ) ;
	}
	return false ;
}

function hideblock( x , base ) {
	x = getelement( x , base ) ;
	if ( ! x ) return false ;
	if ( x.tagName ) {
		if ( x.style[ 'visibility' ] ) x.style[ 'visibility' ] = 'hidden' ;
		else x.style[ 'display' ] = 'none' ;
	} else {
		var y = [] ;
		for ( var i = 0 ; i < x.length ; i++ ) y.push( x[ i ] ) ;
		y.sort( q_ascendingnodelevel ).reverse() ;
		for ( var i = 0 ; i < y.length ; i++ ) hideblock( y [ i ] , base ) ;
	}
	return false ;
}

function hideshowblock( x , y , base ) {
	hideblock( x , base ) ; 
	showblock( y , base ) ; 
	return false  ;
}

function toggledisplay( x , base ) {
	x = getelement( x , base ) ;
	if ( ! x ) return false ;
	var b ;
	if ( x.tagName ) {
		if ( x.style[ 'visibility' ] ) b = ( x.style[ 'visibility' ] == 'visible' ) ;
		else b = ( x.style[ 'display' ] != 'none' ) && ( gcs( x , "display" ) != 'none' ) ;
		visibleblock( x , ! b , base ) ;
	} else for ( var i = 0 ; i < x.length ; i++ ) toggledisplay( x [ i ] , base ) ;
	return false ;
}

function visibleblock( x , b , base ) {
	if ( b ) showblock( x , base ) ;
	else hideblock( x , base ) ;
}

/*
function -
function COLORS
*/

function q_makecolortable( elem, cellsize, callback ) {
	var table_colors = [[[50,0,0],[50,50,0],[0,50,0],[0,50,50],[0,0,50],[50,0,50],[50,50,50]],[[50,25,0],[25,50,0],[0,50,25],[0,25,50],[25,0,50],[50,0,25],[25,25,25]],[[100,0,0],[100,100,0],[0,100,0],[0,100,100],[0,0,100],[100,0,100],[100,100,100]],[[100,50,0],[50,100,0],[0,100,50],[0,50,100],[50,0,100],[100,0,50],[80,80,80]],[[100,40,40],[100,100,40],[40,100,40],[40,100,100],[40,40,100],[100,40,100],[40,40,40]],[[100,80,40],[80,100,40],[40,100,80],[40,80,100],[80,40,100],[100,40,80],[0,0,0]]] ;
	var table = document.createElement( "TABLE" ) ;
	for( var i = 0 ; i < 6 ; i++ ) {
		var tr = table.insertRow( -1 ) ;
		var tc = table_colors[ i ] ;
		for( var j = 0 ; j < 7 ; j++ ) {
			var td = tr.insertCell( -1 ) ;
			td.style.width = td.style.height = cellsize + "px" ;
			td.style.cursor = "pointer" ;
			td.style.backgroundColor = "rgb(" + tc[ j ][0] + "%," + tc[ j ][1] + "%," + tc[ j ][2] + "%)" ;
			td.onclick =  function( ) { callback( this ) ; } ;
		}
	}
	if ( ! elem.tagName ) elem = ge( elem ) ;
	elem.appendChild( table ) ;
}

function rgb2brightness( rgb ) {
	var c = rgbvalues( rgb, 255 ) ;
	return 100 * ( 0.2125*c[ 0 ] + 0.7154*c[ 1 ] + 0.0721*c[ 2 ] ) ;
}
function rgb2insetcolor( rgb ) {
	rgb = rgb.replace( / /g, "" ) ;
	var n = rgb2brightness( rgb ) ;
	var rgb2 = "rgb(" + rgb2givenlevel( ( n < 50 ) ? ( n + 33 ) : ( n - 33 ), rgb ).join( "," ) + ")" ;
	return ( ( n < 50 ) ? [ rgb, rgb2, rgb2, rgb ] : [ rgb2, rgb, rgb, rgb2 ] ).join( " " ) ;
}

function rgbcomplement( rgb ) {
	var c = rgbvalues( rgb, 1 ) ;
	return "rgb(" + ( 255 - c[ 0 ] ) + "," + ( 255 - c[ 1 ] ) + "," + ( 255 - c[ 2 ] ) + ")" ;
}

function rgb2hsv( rgb ) {
	var c = rgbvalues( rgb, 255 ) ;
	var r = c[ 0 ] ;
	var g = c[ 1 ] ;
	var b = c[ 2 ] ;
	var minval = Math.min( r, g, b ) ;
	var maxval = Math.max( r, g, b ) ;
	var delta = maxval - minval ;
	var v = maxval ;
	var h, s ;
	if ( delta == 0 ) h = s = 0 ;
	else {
		s = delta / maxval ;
		var del_r = ( ( ( maxval - r ) / 6 ) + ( delta / 2 ) ) / delta ;
		var del_g = ( ( ( maxval - g ) / 6 ) + ( delta / 2 ) ) / delta ;
		var del_b = ( ( ( maxval - b ) / 6 ) + ( delta / 2 ) ) / delta ;		
		if ( r == maxval ) h = del_b - del_g ;
		else if ( g == maxval ) h = ( 1/3 ) + del_r - del_b ;
		else if ( b == maxval ) h = ( 2/3) + del_g - del_r ;
		if ( h < 0 ) h = h + 1 ;
		if ( h > 1 ) h = h - 1 ;
	}
	h = Math.max( 0 , Math.min( 360 , Math.round( h * 360 ) ) ) ;
	s = Math.max( 0 , Math.min( 100 , Math.round( s * 100 ) ) ) ;
	v = Math.max( 0 , Math.min( 100 , Math.round( v * 100 ) ) ) ;
	return [ h, s, v ] ;
}

function hsv2rgb( hsv ) { // h [0-360], s [0-100], v [0-100]
	return Xhsv2rgb( hsv , 255 ) ;
}
function chsv2rgb( hsv ) { // h [0-360], s [0-100], v [0-100]
	return Xhsv2rgb( hsv , 100 ) ;
}
function Xhsv2rgb( hsv , base ) { // h [0-360], s [0-100], v [0-100]
	var h = hsv[ 0 ] ;
	var s = hsv[ 1 ] ;
	var v = hsv[ 2 ] ;
	if ( h == 360 ) h = 0 ;
	s /= 100 ;
	v /= 100 ;
	var r = null ;
	var g = null ;
	var b = null ;
	if ( s == 0 ) r = g = b = v ;
	else {
		var hTemp = h / 60 ;
		var i = Math.floor( hTemp ) ;
		var f = hTemp - i ;
		var p = v * ( 1 - s ) ;
		var q = v * ( 1 - ( s * f ) ) ;
		var t = v * ( 1 - ( s * ( 1 - f ) ) ) ;
		switch( i ) {
			case 0 : r = v ; g = t ; b = p ; break ;
			case 1 : r = q ; g = v ; b = p ; break ;
			case 2 : r = p ; g = v ; b = t ; break ;
			case 3 : r = p ; g = q ; b = v ; break ;
			case 4 : r = t ; g = p ; b = v ; break ;
			case 5 : r = v ; g = p ; b = q ; break ;
		}
	}
	r = Math.round( r * base ) ;
	g = Math.round( g * base ) ;
	b = Math.round( b * base ) ;
	return [ r, g, b ] ;
}

function rgb2hex( val ){//préciser ce que peut être val
	if ( typeof( val ) == "string" && val.indexOf("rgb") >= 0) {
		if ( /%/.test( val ) ) val = rgb255( val ) ;
		var rgb_val = val.slice(val.indexOf('(') + 1,val.indexOf(')')).split(",");
	} else var rgb_val = val;
	val = "#";
	var hexChars = "0123456789ABCDEF";
	for ( var i = 0 ; i < 3 ; i++ ) {
		var v = Math.max( 0 , Math.min( 255 , rgb_val[i] ) ) ;
		val += hexChars.charAt(v/16) + hexChars.charAt(v%16);
	}
	return val;
}

function hex2rgb( val ) { 
	val = ( val && val.charAt( 0 ) =="#" ) ? val.substring( 1 , val.length ) : val ;
	if ( val.length == 3 ) {
		var h = "" ;
		for ( var i = 0 ; i < 3 ; i++ ) h+= val.charAt( i ) + val.charAt( i ) ;
	} else h = val ;
	var r = parseInt( h.substring( 0 , 2 ) ,16 ) ;
	var g = parseInt( h.substring( 2 , 4 ) , 16 ) ;
	var b = parseInt( h.substring( 4 , 6 ) , 16 ) ;
	return [ r , g , b ] ; 
}

function rgbcontrastcolor( rgb, v ) {
	if ( ! v ) v = 20 ;
	if ( v == 9 ) v = 5 ;
	var hsv = rgb2hsv( rgb ) ;
	var c = ( hsv[ 2 ] > 50 ) ? hsv[ 2 ] - v : hsv[ 2 ] + v ;
	if ( c < 20 ) c = 20 ;
	if ( c > 100 ) c = 100 ;
	rgb = hsv2rgb( [ hsv[ 0 ], hsv[ 1 ], c ] ) ;
	return ( "rgb(" + rgb[ 0 ] + ", " + rgb[ 1 ] + ", " + rgb[ 2 ] + ")" ) ;
}

function rgbcontrastcolor150( rgb ) { // provisoire, faire fnct delta variable
	if ( /%/.test( rgb ) ) rgb = rgb255( rgb ) ;
	var b = rgb2brightness( rgb ) ;
	return "rgb(" + rgb2givenlevel( ( b > 50 ) ? Math.max( 0, b-75 ) : Math.min( 100, b+75 ), rgb ).join( "," ) + ")" ;

	if ( /%/.test( rgb ) ) rgb = rgb255( rgb ) ;
	var c = rgb.replace( /rgb\((.*)\)/, "$1" ).split( "," ) ;
	var delta = ( rgb2brightness( c ) > 50 ) ? -150 : 150 ;
	for ( var i=0; i<3; i++ ) {
		c[ i ] = parseInt( c[ i ], 10 ) + delta ;
		if ( c[ i ] < 0 ) c[ i ] = 0 ;
		if ( c[ i ] > 255 ) c[ i ] = 255 ;
	}
	return ( "rgb(" + c[ 0 ] + ", " + c[ 1 ] + ", " + c[ 2 ] + ")" ) ;
}

function bwcontrastcolor( rgb, v ) { // couleur de contraste noir/blanc + teinte rgb fonction de v
	if ( ! v ) v = 0 ;
	var h = rgb2hsv( rgb )[ 0 ] ;
	rgb = ( rgb2brightness( rgb ) < 50 ) ? hsv2rgb( [ h, v, 100 ] ) : hsv2rgb( [ h, 100, v ] ) ;
	return ( "rgb(" + rgb[ 0 ] + ", " + rgb[ 1 ] + ", " + rgb[ 2 ] + ")" ) ;
}

function bwcolor( rgb ) { // couleur de contraste noir/blanc
	return ( rgb2brightness( rgb ) < 50 ) ? "rgb(255, 255, 255)" : "rgb(0, 0, 0)" ;
}

function rgb2givenlevel( thelevel, thergb ){
	var a , b ;
	var desat = 0.4;
	thelevel = thelevel / 100 ;
	var thehsv = rgb2hsv( thergb );
	var h = thehsv[ 0 ];
	var s = thehsv[ 1 ];
	var v = thehsv[ 2 ];
	var l = Math.round( thelevel * 255 );
	if ( s == 0 ) return [ l, l, l ];
	var hlevel = rgb2brightness( hsv2rgb( [ h , 100, 100 ] ) ) / 100;
	if ( thelevel <= hlevel) {
		a = thelevel / hlevel;
		b = 0;
	} else {
		a = (1 - thelevel) / (1 - hlevel);
		b = 1 - a;
	}
	a = a * (1 - desat);
	b = b * (1 - desat) + thelevel * desat;
	if ( ( a+b ) == 0 ) return hsv2rgb( [ h , 0 , 0 ] );
	return hsv2rgb( [ h , 100 * a / (a + b) , 100 * ( a + b ) ] );
}

function rgb2levelcolor( colorvalue, thelevel ){
	var levels = [ 17, 33, 50, 67, 83, 96 ];
	if ( thelevel == 1 ) return colorvalue;
	
	var c = rgb2givenlevel( levels[ parseInt( thelevel , 10 ) - 2  ], colorvalue );
	return "rgb(" + c.join( "," ) + ")" ;
}

function rgbvalues( rgb, base ) {  // tableau [ r, g, b ] ou string css "rbg( r255, g255, b255 )" ou "rbg( r%, g%, b% )"
	if ( typeof( rgb ) == "string" && (/rgb/).test( rgb ) ) {
		rgb = rgb.replace( /rgba?\((.*)\)/, "$1" ).split( "," ) ;
		if ( /%/.test( rgb[ 0 ] ) ) var r = Math.round( ( parseInt ( rgb[ 0 ] , 10 )/100 ) * 255 ) ;
		else var r = parseInt ( rgb[ 0 ] , 10 ) ;
		if ( /%/.test( rgb[ 1 ] ) ) var g = Math.round( ( parseInt ( rgb[ 1 ] , 10 )/100 ) * 255 ) ;
		else var g = parseInt ( rgb[ 1 ] , 10 ) ;
		if ( /%/.test( rgb[ 2 ] ) ) var b = Math.round( ( parseInt ( rgb[ 2 ] , 10 )/100 ) * 255 ) ;
		else var b = parseInt ( rgb[ 2 ] , 10 ) ;
	} else if ( typeof( rgb ) == "string" && (/#/).test( rgb ) ) {
		rgb = rgb.replace( "#" , "" ) ;
		// if ( rgb.length == 3 ) rgb = rgb.split( "" ).join( "0" ) + "0" ;
		if ( rgb.length == 3 ) rgb = rgb.replace( /(.)(.)(.)/ , "$1$1$2$2$3$3" ) ;
		// var r = parseInt( rgb.slice( 0 , 2 ) , 16 ) ;
		// var g = parseInt( rgb.slice( 2 , 4 ) , 16 ) ;
		// var b = parseInt( rgb.slice( 4 , 6 ) , 16 ) ;
		var r = parseInt( rgb.substring( 0 , 2 ) , 16 ) ;
		var g = parseInt( rgb.substring( 2 , 4 ) , 16 ) ;
		var b = parseInt( rgb.substring( 4 , 6 ) , 16 ) ;
	} else {
		var r = rgb[ 0 ] ;
		var g = rgb[ 1 ] ;
		var b = rgb[ 2 ] ;
	}
	if ( base == 1 ) return [ Math.round( r ) , Math.round( g ) , Math.round( b ) ] ;
	return [ r/base , g/base , b/base ] ;
}

function rgb100(rgb255) {
	rgb255 = rgb255.replace( /(rgba?\(|\)| )/g , "" ) ;
	var rgb = rgb255.split( "," ) ;
	for ( var i = 0 ; i < 3 ; i++ ) rgb[ i ] = Math.round( rgb[ i ] / 2.55 ) ;
	return "rgb(" + rgb.join( "%," ) + "%)" ;
}

function rgb255(rgb100) {
	rgb100 = rgb100.replace( /(rgba?\(|\)| )/g , "" ) ;
	var rgb = rgb100.split( "," ) ;
	for ( var i = 0 ; i < 3 ; i++ ) rgb[ i ] = Math.round( 2.55 * parseInt( rgb[ i ] , 10 ) ) ;
	return "rgb(" + rgb.join( "," ) + ")" ;
}

function getrealcolor( colorvalue, withtransparent ){
	if ( colorvalue == undefined ) return;
	var c = parseInt( colorvalue, 10 );
	if ( c == -1 || colorvalue == "transparent") return ( withtransparent ) ? "transparent" : getpagebackgroundcolor() ;
	else if ( c < 10 ) return getsncontextualbackgroundcolors( 7 )[ c - 1 ] ;
	else if ( colorvalue == "black" ) return "rgb(0,0,0)";
	else if ( colorvalue == "white" ) return "rgb(255,255,255)";
	else if ( (/^(c1|c2|cm|cmo|cfs|cfp|cb|ctb|ctm)$/).test( colorvalue ) ) return club_siteelemscolor[ colorvalue ] ;
	return colorvalue;
}

function getleftcolbackgroundcolor( ) {
	switch( q_spacebundle() ) {
		case "fede" :
			return "rgb(102,102,102)" ;
		case "qlub" :
		case "qorp" :
			return club_menucolorpalette[ 0 ] ;
		case "family" :
			return "rgb(255,255,255)" ;
		default :
			return "rgb(255,255,255)" ;
	}
}

function getpagecolor( ) {
	return getsncontextualbackgroundcolors( 7 )[ ( rgb2brightness( getpagebackgroundcolor() ) < 50 ) ? 5 : 1 ] ;
}

function getpagebackgroundcolor( ) {
	switch( q_spacebundle() ) {
		case "fede" :
			return "rgb(255,255,255)" ;
		case "qlub" :
		case "qorp" :
			return club_sitecolorpalette[ 7 ] ;
		case "family" :
			if ( /homepage/.test( currsvcid ) ) return "rgb(234,255,225)" ;
			else if ( /schooltt/.test( currsvcid ) ) return "rgb(250,230,237)" ;
			else if ( /pm/.test( currsvcid ) ) return "rgb(253, 244, 236)" ;
			else if ( /artemadisq/.test( currsvcid ) ) return "rgb(234,223,236)" ;
			// pb avec homepage projet et autres pages
			break;
		default :
			return "rgb(255,255,255)" ;
	}
}

function q_contextualcolor( c , n ) {
	return ( /^[0-9]+$/.test( c ) ) ? getsncontextualbackgroundcolors( n )[ parseInt( c, 10 ) - 1 ] : c ;
}

function getsncontextualbackgroundcolors( n , wantclass ) {
	if ( ! n ) n = 4 ;
	var def4 = [ "rgb(191,227,249)" , "rgb(219, 236, 53)" , "rgb(255, 255, 255)" , "rgb(231, 51, 82)" ] ;
	var def7 = [ "rgb(191,227,249)" , "rgb(219, 236, 53)" , "rgb(255, 255, 255)" , "rgb(231, 51, 82)" ,  "rgb(0, 0, 0)", "rgb(190, 190, 190)" , "rgb(255, 255, 0)" ] ;
	switch( q_spacebundle() ) {
		case "qlub" :
		case "qorp" :
			var c = club_sitecolorpalette ;
			if ( n == 4 ) {
				if ( wantclass ) return [ "1" , "7" , "4" , "comp1" ] ;
				return [ c[ 0 ] , c[ 6 ] , c[ 4 ] , rgbcomplement( c[ 0 ] ) ] ;
			} else if ( n == 7 ) {
				if ( wantclass ) return [ "1" , "2" , "3" , "4" , "5" , "6" , "comp1" ] ;
				return [ c[ 0 ] , c[ 1 ] , c[ 2 ] ,  c[ 3 ] , c[ 4 ] , c[ 5 ] , rgbcomplement( c[ 0 ] ) ] ;
			}
			break;
		default :
			return ( n == 4 ) ? def4 : def7 ;
			break;
	}
}

/*
function -
function URLS, PATHS, WINDOWS
*/

function q_getrelativebaseurl() {
	return "../../.." ;
}

function q_getabsolutebaseurl() {
	return ( window.location.href.replace( /(http(s?):\/\/[^\/]+\/).*/ , "$1" ) ) ;
}

function isrealserver() {
	var burl = q_getabsolutebaseurl().replace( /^https?:\/\//, "" ) ;
	return ! ( burl == "beta2.quomodo.com/" || burl == "localhost/" || burl == "10.0.1.22/" || burl == "club2.quomodo.com/" || burl == "club1.quomodo.com/" || burl == "www1.quomodo.com/" || ( /\.local\/$/.test( burl ) )  || ( /^(10|192)\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/.test( burl ) ) ) ;
}

function showstaticfile( x ) {
	var url= q_getrelativebaseurl() + "/services/" + document.mainform.service.value + "/" + x ;
	window.open( url , 'help pane' , 'directories=no, location=no, menubar=no, status=no, width=600, height=450, scrollbars=yes' ) ;
	return false ;
}

function q_fsbasehref( relativeurl ) {
	var re = new RegExp( "uploads/(shared/|images/|videos/)?[0-9]+/", "i" ) ;
	if ( ( relativeurl && ! re.test( relativeurl ) ) || ! spacexml || ! spacexml.fileserver ) return "" ;
	var res = window.location.protocol + "//" + spacexml.fileserver + "/" + spacexml.id.replace( /-.*/, "" ) + "/" ;
	return res ;// on met préférentiellement un lien de fichier public pour permettre le copier de lien en mode logué
	if ( q_pagemode() == "makeweb" || q_pagemode() == "web" ) return res ;
	return res + ( document.mainform && document.mainform.sessionid.value || q_spaceparam( "sessionid" ) ) + "/" ;
}

function q_fsbaseurl( ownerid, withhttp, relativeurl ) {
	var re = new RegExp( "uploads/(shared/|images/|videos/)?[0-9]+/", "i" ) ;
	//var protocol = ( window.spacexml && spacexml.https ) ? "https:" : window.location.protocol ;
	var protocol = window.location.protocol ;
	if ( ownerid == "quomodo" || ( relativeurl && ! re.test( relativeurl ) ) || ! window.spacexml || ! spacexml.fileserver ) return ( ( withhttp ) ? ( protocol + "//" + window.location.host ) : "" ) + q_spacebaseurl( ownerid ) ;
	return window.location.protocol + "//" + spacexml.fileserver + "/" + spacexml.id.replace( /-.*/, "" ) + "/" + ( document.mainform && document.mainform.sessionid.value || q_spaceparam( "sessionid" ) ) + "/" ;
	//return "https://" + spacexml.fileserver + "/" + spacexml.id.replace( /-.*/, "" ) + "/" + ( document.mainform && document.mainform.sessionid.value || q_spaceparam( "sessionid" ) ) + "/" ; // problème de makeweb
}
function q_fsabsoluteurl( ownerid, relativeurl ) {
	var re = new RegExp( "uploads/(shared/|images/|videos/)?[0-9]+/", "i" ) ;
	if ( ownerid == "quomodo" || ( relativeurl && ! re.test( relativeurl ) ) || ! spacexml || ! spacexml.fileserver ) return q_spaceabsoluteurl( ownerid , relativeurl ) ;
	return q_fsbaseurl( ownerid, null, relativeurl ) + encodeURI( relativeurl.replace( /\/(images|videos)\//, "/" ) ) ;
}

function q_spacebaseurl( ownerid ) {
	if ( ownerid == "quomodo" ) return "/services/" + document.mainform.service.value.replace( /^#[0-9]+#/ , "" ).replace( /@intl/ , "@" + q_lang ) + "/" ;
	return "/symspaces/" + ( document.mainform && document.mainform.sessionid && document.mainform.sessionid.value || q_spaceparam( "sessionid" ) ).replace( /^(.)(.)(.)/ , "$1/$2/$3/$1$2$3" ) + "/" ;
}

function q_spaceabsoluteurl( ownerid , relativeurl ) {
	if ( spacexml && spacexml.fileserver && ( /^uploads(\/shared|\/images|\/videos)?\/[0-9]+\// ).test( relativeurl ) ) return q_fsbaseurl( ownerid, null, relativeurl ) + encodeURI( relativeurl.replace( /\/(images|videos)\//, "/" ) ) ;
	return q_spacebaseurl( ownerid ) + encodeURI( relativeurl ) ;
}

function q_selfbaseurl() {
	return "/symspaces/" + ( document.mainform && document.mainform.sessionid.value || q_spaceparam( "sessionid" ) ).replace( /^(.)(.)(.)/ , "$1/$2/$3/$1$2$3" ) + "_self/" ;
}

function q_geturlparams( url ) {
	var params = {} ;
	var x = ( url ) ? url.replace( /^[^?]*\??/ , "" ) : window.location.search.replace( /^\?/ , "" ) ;
	var t = x.split( "&" ) ;
	var tt ;
	for ( var i = 0 ; i<t.length ; i++ ) {
		tt = t[ i ].split( "=" ) ;
		params[ tt[ 0 ] ] = decodeURIComponent( tt[ 1 ] ) ;
	}
	return params ;
}

function openhelpwindow ( url , w_width , w_height ) {
	if ( ! w_width ) w_width = 700 ;
	if ( ! w_height ) w_height = 500 ;
	window.open ( url ,"helpwindow","location=1, status=1, scrollbars=1, toolbar=0, resizable=1, menubar=0, width=" + w_width + ", height=" + w_height ) ;
	return false ;
}

function q_openfile( elem ) {
	var file ;
	if ( elem.tagName == "A" ) {
		if ( isie6() ) file = elem.outerHTML.replace( /^.*href="([^"]+)".*$/ , "$1" ) ;
		else file = elem.href ;
	} else if ( elem.tagName ) file = elem.getAttribute( "fileref" ) ;
	else file = elem.fileref ;
	file = file.replace( /.*\/(uploads\/.*)/g , '$1' ) ;
	window.open( q_fsbaseurl( memberid, null, file ) + file ) ; // q_fsbaseurl recouvert dans web.js donc pas de pb, fourni la base url courante
	return false ;// force à ne pas suivre le lien en href dans le cas d'un <a>
}

function q_locationhrefwithsearch( url , x ) { //x json { key1 : value1 , key2 : value2 , etc }
	var params = q_geturlparams() ;
	if ( x ) params = q_cloneObject( x , params ) ;
	var s = [] ;
	for ( var k in params ) if ( k ) s.push( encodeURIComponent( k ) + "=" + encodeURIComponent( params[ k ] ) ) ;
	window.location.href = url + ( ( s.length ) ? ( "?" + s.join( "&" ) ) : "" );
}

/*
function -
function IMAGES
*/

function q_renderimgie6() {
	if ( ! q_imgtofix ) return ;
	for ( var i = q_imgtofix.length -1 ; i >= 0 ; i -- ) {
		var img = q_imgtofix[ i ][ 0 ] ;
		if ( ! img || ! img.parentNode ) {// si jamais l'image a disparu
			q_imgtofix.splice( i , 1 ) ;
			continue ;
		}
		if ( ! img.complete ) continue ;
		var s = img.src.replace ( /%23/g , "%2523" ) ;
		var imgSize = q_imgtofix[ i ][ 3 ] ;
		var imgw = ( imgSize ) ? imgSize.width : img.offsetWidth ;
		var imgh = ( imgSize ) ? imgSize.height : img.offsetHeight ;

		if ( imgw ) img.style.width = imgw + "px" ;
		if ( imgh ) img.style.height = imgh + "px" ;
		img.src = "/images/blank.gif" ;
		img.style.visibility = "visible" ;
		img.style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(src="'+s+'",sizingMethod="scale")';
		if ( q_imgtofix[ i ][ 1 ] ) q_imgtofix[ i ][ 1 ].apply( this , ( q_imgtofix[ i ][ 2 ] ) ? q_imgtofix[ i ][ 2 ] : [] ) ;
		q_imgtofix.splice( i , 1 ) ;
	}
	if ( q_imgtofix.length ) q_imgtimer = setTimeout( q_renderimgie6 , 100 ) ;
	else q_imgtimer = null ;
}

function q_himgcheckloaded() {
	for ( var i = q_imgtoload.length -1 ; i >= 0 ; i -- ) {
		if ( ! q_imgtoload[ i ][ 0 ].complete ) continue ;
		var args = q_args( q_imgtoload[ i ][ 2 ] ) ;
		if ( q_imgtoload[ i ][ 3 ] ) args = [ { width : q_imgtoload[ i ][ 0 ].width , height : q_imgtoload[ i ][ 0 ].height } ].concat( args ) ;
		q_apply( q_imgtoload[ i ][ 1 ] , args ) ;
		q_imgtoload.splice( i , 1 ) ;
	}
	if ( q_imgtoload.length ) q_imgtoloadtimer = setTimeout( q_himgcheckloaded , 100 ) ;
	else q_imgtoloadtimer = null ;
}

function q_imgcheckloaded() {
	q_himgcheckloaded() ;
}

function q_waitimgsloaded( srcs , callback ) {
	var srcsloaded = [].concat( srcs ) ;
	if ( srcsloaded.length == 0 ) return callback() ;
	function waitsrc( src ){
		q_waitimgloaded( src , function(){
			srcsloaded.splice( $.inArray( src , srcsloaded ) , 1 ) ;
			if ( srcsloaded.length == 0 ) return callback() ;
		} ) ;
	}
	for ( var i = 0 ; i < srcs.length ; i++ ) waitsrc( srcs[ i ] ) ;
}
function q_waitimgloaded( src , h , p , getSize ) {
	var test = new Image( ) ;
	test.src = src ;
// #1509
/*
	if ( test.complete ) {
		if ( h ) h.apply( this , p ) ;
		return true ;
	}
*/
	q_imgtoload.push( [ test , h , p , getSize ] ) ;
	if ( ! q_imgtoloadtimer ) q_imgtoloadtimer = setTimeout( q_himgcheckloaded , 100 ) ;
	return false ;
}

var q_imgtimer = null ;
var q_imgtofix = [] ;

var q_imgtoloadtimer = null ;
var q_imgtoload = [] ;

function q_hsetimgsrc( imgobj , h , p , getSize ) { // imgobj = [ img , src , sizes ] 
//	if ( ! issafari() ) return q_hdosetimgsrc( imgobj , h , p ) ;
	imgobj[ 0 ].src = imgobj[ 1 ] ;
	return q_waitimgloaded( imgobj[ 1 ] , function( imgSize ){ q_hdosetimgsrc( imgobj , h , p , imgSize ) } , [] , getSize ) ;

	var test = new Image( ) ;
	test.src = imgobj[ 1 ] ;
	if ( test.complete ) return q_hdosetimgsrc( imgobj , h , p ) ;
	q_imgtoload.push( [ test , imgobj , h , p ] ) ;
	if ( ! q_imgtoloadtimer ) q_imgtoloadtimer = setTimeout( q_imgcheckloaded , 100 ) ;	
}

function q_setimgsrc( img , src , sizes ) {
	q_hsetimgsrc( [ img , src , sizes ] ) ;
}

function q_hdosetimgsrc( imgobj , h , p , imgSize ) { // imgobj = [ img , src , sizes ]
	var img = ge( imgobj[ 0 ] ) ;
	if ( ! img || ! img.parentNode ) return ; // si jamais l'image a disparu
	var re = new RegExp( "\\.png($|\\?)" , "i" ) ;
	var src = imgobj[ 1 ] ;
	img.src = src ;
	var args = q_args( p ) ;
	if ( imgSize ) args = [ imgSize ].concat( args ) ;
	if ( ! re.test( img.src ) || ! isie6() ) {
		if ( re.test( img.src ) && ( ! (/\bpng/).test( img.className ) ) ) img.className += " png" ;
		if ( h ) h.apply( this , args ) ;
		return ;
	}
	img.className = img.className.replace( /\bpng[^ ]*\b/ , "" ) ;
	var sizes = imgobj[ 2 ] ; 
	if ( sizes ) {// on pourrait supprimer le test et du coup faire un reset de la taille lorsqu'elle n'est pas passée
		img.style.width = ( sizes ) ? sizes[ 0 ] : "" ;
		img.style.height = ( sizes ) ? sizes[ 1 ] : "" ;
	}
	img.style.visibility = "hidden" ;
	img.style.filter = "" ;
	q_imgtofix.push( [ img , h , args , imgSize ] ) ;
	if ( ! q_imgtimer ) q_imgtimer = setTimeout( q_renderimgie6 , 100 ) ;
}

function q_dosetimgsrc( img , src , sizes ) {
	q_hdosetimgsrc( [ img , src , sizes ] ) ;
}

function q_pngbgimagename( x ) {
	if ( /(pngbtn|btnbtn)/.test( x.parentNode.className ) ) x = x.parentNode ;
	if ( /pngbtn/.test( x.className ) && isie6() ) {
		var ref = x.getElementsByTagName( "DIV" )[0].style.filter ;
	} else if ( /btnbtn/.test( x.className ) ) {
		var ref = ( isie6() ) ? gebcn( x , "divimg" ).style.filter : gebcn( x , "divimg" ).style.backgroundImage ;
	} else var ref = x.style.backgroundImage ;
//	var ref = ( isie6() && /pngbtn/.test( x.className ) ) ? x.getElementsByTagName( "DIV" )[0].style.filter : x.style.backgroundImage ;
	var re = new RegExp( ".*/([^/]*).png.*$" ) ;
	return ref.replace( re , "$1" ) ;
}

/*
function -
function CSS
*/

function q_getCSS( selector, key ) {
	var r = getCSSRule( selector ) ;
	if ( ! r ) return "" ;
	return ( eval( "r.style." + key ) ) ;
}

function q_setCSS( selector, key, value ) {
	var r = addCSSRule( selector ) ;
	eval( "r.style." + key + " = '" + value + "'" ) ;
}

function q_killCSS( selector ) {
	getCSSRule( selector, true ) ;
}

//http://www.hunlock.com/blogs/Totally_Pwn_CSS_with_Javascript

function getCSSRule( ruleName, toDelete ) {
	ruleName = ruleName.toLowerCase() ;
	if ( document.styleSheets ) {
		for ( var i=0; i<document.styleSheets.length; i++ ) {
			var styleSheet = document.styleSheets[ i ] ;
			var j = 0 ;
			var cssRule = false ;
			do {
				if ( styleSheet.cssRules ) cssRule = styleSheet.cssRules[ j ] ;
				else cssRule = styleSheet.rules[ j ] ;
				if ( cssRule ) {
					if ( cssRule.selectorText.toLowerCase() == ruleName ) {
						if ( toDelete ) {
							if ( styleSheet.cssRules ) styleSheet.deleteRule( j ) ;
							else styleSheet.removeRule( j ) ;
							return true ;
						} else return cssRule ;
					}
				}
				j++ ;
			} while ( cssRule ) ;
		}
	}
	return false ;
}

function addCSSRule( ruleName ) {
	if ( document.styleSheets ) {
		if ( ! getCSSRule( ruleName ) ) {
			if ( document.styleSheets[ 0 ].addRule ) document.styleSheets[ 0 ].addRule( ruleName, null, 0 ) ;
			else document.styleSheets[ 0 ].insertRule( ruleName + " { }", 0 ) ;
		}
	}
	return getCSSRule( ruleName ) ;
}

function gcs( e , jsKey ) { // jsKey = "top" , "backgroundColor" , etc
	e = ge( e ) ;
	if ( window.getComputedStyle ) return window.getComputedStyle( e , "" ).getPropertyValue( jsKey.replace(/([A-Z])/g, "-$1").toLowerCase() ) ;
	if ( e.currentStyle ) return e.currentStyle[ jsKey ] ;
	return e.style[ jsKey ] ;
}

/*
function -
function EVENTS
*/

function q_stdmouseover( ee ) {
	var e = ee ||  window.event ;
	var x = e.target || e.srcElement ;
	var button = getContainerOrSelf( x , "btnbtn" ) ;
	if ( button ) return q_mouseoverbutton( button ) ;
}

function q_stdmouseout( ee ) {
	var e = ee ||  window.event ;
	var x = e.target || e.srcElement ;
	var button = getContainerOrSelf( x , "btnbtn" ) ;
	if ( button ) return q_mouseoutbutton( button ) ;
}

function q_coremouseio ( ee , relevantTargetCatcher , mouseioFunction ) {
	var target = getElementFromEvent( ee ) ;
	var relevantTarget = getContainerOrSelf( target , relevantTargetCatcher ) ;
	if ( ! relevantTarget ) return null;
	var relatedTarget = getRelatedElementFromEvent( ee ) ;
//	if ( ! relatedTarget ) return null ;
	var relevantRelatedTarget = getContainerOrSelf( relatedTarget , relevantTargetCatcher ) ;
	if( relevantRelatedTarget == relevantTarget ) return null;
	return mouseioFunction( relevantTarget , ee ) ;
}

function q_coremouseonclick ( ee , relevantTargetCatcher , mouseonclickFunction ) {
	var target = getElementFromEvent( ee ) ;
	var relevantTarget = getContainerOrSelf( target , relevantTargetCatcher ) ;
	if(!relevantTarget) return null;
	return mouseonclickFunction( relevantTarget , ee ) ;
}

function q_coremouseclick ( ee , relevantTargetCatcher , mouseonclickFunction ) { return q_coremouseonclick ( ee , relevantTargetCatcher , mouseonclickFunction ) ; }

function q_containermover( x , v ) {
	var div = getElementsByClassName( x , "qbtn" ) ;
	for ( var i = 0 ; i<div.length ; i++ ) q_mouseoverbutton( div[ i ] , v ) ;
}

function q_mouseoverbutton( x , v ) {// recopié dans homepage@fr/scripts/fo_homepage.js
try{
	x = ge( x );
	if ( /(pngbtn|btnbtn)/.test( x.parentNode.className ) ) x = x.parentNode ;
	if ( /locked/.test( x.className ) ) return ;
	if ( /btncontainer/.test( x.className ) ) {
		var d = getElementsByClassName( x, "btnbtn" ) ;
		for ( var i=0; i<d.length; i++ ) q_mouseoverbutton( d[ i ] ) ;
		return ;
	}
	var b = /pngbtn/.test( x.className ) ;
	if ( b && isie6() ) {
		x = x.getElementsByTagName( "DIV" )[ 0 ] ;
		x.style.top = ( ( v ) && ( /top/.test ( v ) ) ) ? "0px" : "" ;
		x.style.bottom = ( ( v ) && ( /top/.test ( v ) ) ) ? "" : "0px" ;
	} else if ( /btnbtn/.test( x.className ) ) {
		x = gebcn( x , "divimg" ) ;
		x.style.top = ( ( v ) && ( /top/.test ( v ) ) ) ? ( $( x ).attr( "btntop" ) || "0px" ) : "" ;
		x.style.bottom = ( ( v ) && ( /top/.test ( v ) ) ) ? "" : ( $( x ).attr( "btnbottom" ) || "0px" ) ;
	} else{
		if ( isfirefox())  x.style.backgroundPosition = v ? v : "bottom" ;
		else  x.style.backgroundPositionY = v ? v : "bottom" ;
	}
}
catch(e){}
}

function q_containermout( x , v ) {
	var div = getElementsByClassName( x , "qbtn" ) ;
	for ( var i = 0 ; i<div.length ; i++ ) q_mouseoutbutton( div[ i ] , v ) ;
}

function q_mouseoutbutton ( x , v ) {// recopié dans homepage@fr/scripts/fo_homepage.js
try{
	x = ge( x );
	if ( /(pngbtn|btnbtn)/.test( x.parentNode.className ) ) x = x.parentNode ;
	if ( /locked/.test( x.className ) ) return ;
	if ( /btncontainer/.test( x.className ) ) {
		var d = getElementsByClassName( x, "btnbtn" ) ;
		for ( var i=0; i<d.length; i++ ) q_mouseoutbutton( d[ i ] ) ;
		return ;
	}
	var b = /pngbtn/.test( x.className ) ;
	if ( b && isie6() ) {
		x = x.getElementsByTagName( "DIV" )[ 0 ] ;
		x.style.bottom = ( ( v ) && ( /bottom/.test ( v ) ) ) ? "0px" : "" ;
		x.style.top = ( ( v ) && ( /bottom/.test ( v ) ) ) ? "" : "0px" ;
	} else if ( /btnbtn/.test( x.className ) ) {
		x = gebcn( x , "divimg" ) ;
		x.style.bottom = ( ( v ) && ( /bottom/.test ( v ) ) ) ? ( $( x ).attr( "btnbottom" ) || "0px" ) : "" ;
		x.style.top = ( ( v ) && ( /bottom/.test ( v ) ) ) ? "" : ( $( x ).attr( "btntop" ) || "0px" ) ;
	} else {
		if (isfirefox()) x.style.backgroundPosition = v ? v : "top" ;
		else x.style.backgroundPositionY = v ? v : "top" ;
	}
}
catch(e){}
}

function q_mob( x, v ) {
	if ( v ) {
		x.className = x.className.replace( /newbtnoff\b/, "newbtnon" ) ;
		q_mouseoverbutton( x ) ;
	} else {
		x.className = x.className.replace( /newbtnon\b/, "newbtnoff" ) ;
		q_mouseoutbutton( x ) ;
	}
}

function autowbtn_cmout( t , args ) {
	var td = t.getElementsByTagName( "TD" ) ;
	var x0 = td[ 0 ].getElementsByTagName( "DIV" )[ 0 ] ;
	var x1 = td[ 1 ].getElementsByTagName( "DIV" )[ 0 ] ;
	q_mouseoutbutton( x0 , "left top"  ) ;
	q_mouseoutbutton( x1 , "right top"  ) ;
	if ( /\b.*_mover\b/.test( t.className ) ) t.className = t.className.replace( /\b(.*)_mover\b/, "$1_mout" ) ;
}

function autowbtn_mout( t , args ) {
	var td = t.getElementsByTagName( "TD" ) ;
	var x0 = td[ 0 ].getElementsByTagName( "DIV" )[ 0 ] ;
	var x1 = td[ 1 ].getElementsByTagName( "DIV" )[ 0 ] ;
	q_mouseoutbutton( x0 , "left top"  ) ;
	q_mouseoutbutton( x1 , "right top"  ) ;
	var b = /pngbtn/.test( x0.className ) ;
	if ( b && isie6() ) x0 = x0.getElementsByTagName( "DIV" )[ 1 ] ;
	x0.style.lineHeight = '22px' ;
	if ( ! args ) return ;
	for ( var x in args ) {
		if ( ( x == "ie6" ) && ( b ) && ( isie6() ) ) {
			for ( var y in args[ x ] ) x0.style[ y ] = args[ x ][ y ] ;
		} else x0.style[ x ] = args[ x ] ;
	}
}

function autowbtn_cmover( t , args ) {
	var td = t.getElementsByTagName( "TD" ) ;
	var x0 = td[ 0 ].getElementsByTagName( "DIV" )[ 0 ] ;
	var x1 = td[ 1 ].getElementsByTagName( "DIV" )[ 0 ] ;
	q_mouseoverbutton( x0 , "left bottom" ) ;
	q_mouseoverbutton( x1 , "right bottom" ) ;
	if ( /\b.*_mout\b/.test( t.className ) ) t.className = t.className.replace( /\b(.*)_mout\b/, "$1_mover" ) ;
}

function autowbtn_mover( t , args ) {
	var td = t.getElementsByTagName( "TD" ) ;
	var x0 = td[ 0 ].getElementsByTagName( "DIV" )[ 0 ] ;
	var x1 = td[ 1 ].getElementsByTagName( "DIV" )[ 0 ] ;
	q_mouseoverbutton( x0 , "left bottom" ) ;
	q_mouseoverbutton( x1 , "right bottom" ) ;
	var b = /pngbtn/.test( x0.className ) ;
	if ( b && isie6() ) x0 = x0.getElementsByTagName( "DIV" )[ 1 ] ;
	x0.style.lineHeight = '26px' ;
	if ( ! args ) return ;
	for ( var x in args ) {
		if ( ( x == "ie6" ) && ( b ) && ( isie6() ) ) {
			for ( var y in args[ x ] ) x0.style[ y ] = args[ x ][ y ] ;
		} else x0.style[ x ] = args[ x ] ;
	}
}

function blurdefault( x , thegraytext , thegraycolor , theplaincolor ) {
	if ( theplaincolor === undefined ) theplaincolor = "#000000" ;
	if ( typeof x == 'string' ) x = getelement ( x ) ;
	if ( x == null ) return ;
	if ( ( x.value == "" ) || ( x.value == thegraytext ) ) {
		x.value = thegraytext ;
		x.style.color = thegraycolor ;
	} else x.style.color = theplaincolor ;
}

function focusdefault( x , thegraytext , theplaincolor ) {
	if ( typeof x == 'string' ) x = getelement ( x ) ;
	if ( x == null ) return ;
	if ( x.value == thegraytext ) x.value="" ;
	x.style.color = theplaincolor ;
}

function focusoptional( x , thegraytext ) {
	focusdefault ( x , thegraytext , "#000" ) ;
}

function bluroptional( x , thegraytext ) {
	blurdefault( x , thegraytext , "#AAA" , "#000" ) ;
}

function mouseover_tabtitle( x ) {
	if ( /_open/.test( x.className ) ) return ;
	x.className = x.className.replace( "_closed", "_mouseover" ) ;
}

function mouseout_tabtitle( x ) {
	if ( /_open/.test( x.className ) ) return ;
	x.className = x.className.replace( "_mouseover", "_closed" ) ;
}

var q_windowblurhandlers = [] ;
var q_windowfocushandlers = [] ;

function q_addwindowblurhandlers( h ) { //h = string
	window.onblur = window.onblur || q_windowblur ;
	if ( indexOfItem( h , q_windowblurhandlers ) == -1 ) q_windowblurhandlers.push( h ) ;
}
function q_addwindowfocushandlers( h ) { //h = string
	window.onfocus = window.onfocus || q_windowfocus ;
	if ( indexOfItem( h , q_windowfocushandlers ) == -1 ) q_windowfocushandlers.push( h ) ;
}
function q_windowblur(ee) {
	var target = getElementFromEvent( ee ) ;
	if ( target != window && target != window.document ) return ;
	for ( var i = 0 ; i < q_windowblurhandlers.length ; i++ ) {
		try { eval ( q_windowblurhandlers[ i ] ).apply ( this , [] ) ; } catch(err) {}
	}
}
function q_windowfocus(ee) {
	var target = getElementFromEvent( ee ) ;
	if ( target != window && target != window.document ) return ;
	for ( var i = 0 ; i < q_windowfocushandlers.length ; i++ ) {
		try { eval ( q_windowfocushandlers[ i ] ).apply ( this , [] ) ; } catch(err) {}
	}
}

function setcurrfocus( x ) {
	currfocus = x ;
}

function setfocus( x ) {
	var y = getelement( x ) ;
	if ( y != null ) {
		y.focus() ;
		return true ;
	}
	return false ;
}

function setselection( x ) {
	var y = getelement( x ) ;
	if ( y != null ) {
		y.focus() ;
		y.select() ;
		return true ;
	}
	return false ;
}

function focusandselect ( x ) {
	if ( typeof x == 'string' ) x = getelement ( x ) ;
	if ( x == null ) return false ;
	try { x.focus() ; } catch ( err ) {  } ; // if (x.focus) ne suffit pas
	try { x.select() ; } catch ( err ) {  } ;
	return false ;
}

/*
function -
function FULL SCREEN MASK
*/

if ( window.quomodo ) quomodo.extend( "fsm" , function() {
	this.__popupCount = 0 ;
	this.__startupPopups = [] ;
	this.addStartupPopup = function( svc ) {
		if ( isiniframe() ) return parent.quomodo.fsm.addStartupPopup( svc ) ;
		if ( $.inArray( svc, this.__startupPopups ) != -1 ) return false ;
		this.__startupPopups.push( svc ) ;
		return true ;
	}
	this.popup = function( src , options ) {
		if ( isiniframe() ) return parent.quomodo.fsm.popup( src , options ) ;
		var _obj = this ;
		var popuid = this.__popupCount++ ;
		var searchRe = new RegExp( "\\?" ) ;
		var searchsrc = ( ( searchRe.test( src ) ) ? '&' : '?' ) + 'popup=true&popupid=' + popuid ;
		q_fsm_reveal( { 
			src : '<div class="popupcontainer" style="position: relative ; top: 0px ; left: 0px"></div>' , 
			closeonly : true ,
			delete_callback : function( div ) {
				window.quomodo.events.removeListener( $( div ).data( "resizeEvent" ) ) ;
			},
			reveal_callback : function( div, json ) {
				var $div = $( div ) ;
				$div.find( ".q_fsmblockcontainer_delete" ).unbind( "click" ) ;
				$div.find( ".q_fsmblockcontainer_screenmask, .q_fsmblockcontainer_header, .q_fsmblockcontainer_container" ).click( function(){ q_fsm_delete() ; return false ; } ) ;
				var wslide = 18 ;
				$div.find( ".popupcontainer" ).appendQIframe( src + searchsrc, {
					width: 260,
					height: 126,
					withWait: true,
					/*maxwidth: function() { return ( window.innerWidth || q_windowInnerWidth() ) - 40 - wslide ; },
					maxheight: function() { return ( window.innerHeight || q_windowInnerHeight() ) - 40 - wslide ; },*/
					maxwidth: function() { return q_windowInnerWidth() - 40 - wslide ; },
					maxheight: function() { return q_windowInnerHeight() - 40 - 2*wslide ; },
					"attach": {
						"onresize": function( w, h ) {
							$div.find( ".q_fsmblockcontainer_block" ).css( "left" , Math.round( ( q_windowInnerWidth() - w - 20 ) / 2 ) + "px" ).css( "top" , Math.round( ( q_windowInnerHeight() - h - 20 - 27 ) / 4 ) + "px" ) ;
						},
						"close": function() {
							q_fsm_delete() ;
						}
					}
				} ) ;
				$div.data( "popuid" , popuid ) ;
			}
		 } ) ;
	} ;
	
	this.loadDialog = function ( src, options ) {
	
		if( isiniframe() ) return parent.quomodo.fsm.loadDialog( src, options ) ;

		q_fsm_reveal( {
			src : '<div class="loadDialogcontainer" style="position: relative; top: 0px; left: 0px"></div>',
			title: "...",
			slideLeft: options && options.slideLeft,
			closehidden: true,
			delete_callback: function () {
				if ( options.callback ) options.callback.apply( this, arguments ) ;
			},
			reveal_callback: function ( div, json ) {
				var $div = $( div ) ;
				$div.addClass( "flat-design" ) ;
				var wslide = 18 ;
				
				var styles = options.styles || [] ; 
				var s = $( "link[href*=\"custom/style/qlub0\"]", document.head ).attr( "href" ) ;
				if ( s ) {
					if ( q_pagemode() == "web" ) s = web_baseurl( ) + s ;
					styles.push( s ) ;
				}
				
				$div.find( ".loadDialogcontainer" ).appendQIframe( src, {
					width: 260,
					height: 126,
					withWait: true,
					maxwidth: Math.min( 990 , q_windowInnerWidth() - 40 - wslide ),
					maxheight: q_windowInnerHeight() - 40 - wslide,
					"attach": {
						"memberid" : window.memberid || "quomodo",
						"sessionid" :q_spaceparam( "sessionid" ),
						"onresize": function( w, h ) {
							if ( w == undefined || h == undefined ) return ;
							$div.find( ".q_fsmblockcontainer_block" ).css( "left" , Math.round( ( q_windowInnerWidth() - w - 20 ) / 2 ) + "px" ).css( "top" , Math.round( ( q_windowInnerHeight() - h - 20 - 27 ) / 4 ) + "px" ) ;
						},
						"close": function( ) {
							q_fsm_delete( ) ;
						},
						"json": options.json,
						"callback": function () {
							q_fsm_delete.apply( this, arguments ) ;
						},
						"styles": styles,
						"scripts": options.scripts,
						"onIframeLoaded": function() {
							var doc = framedocument( this ) ;
							$div.find( ".q_fsmblockcontainer_title" ).text( doc.title ) ;
							$div.find( ".q_fsmblockcontainer_header table td:first" ).toggle( ! Boolean( doc.fsmNotClosable ) ) ;
							if ( doc.fsmClass && doc.fsmClass != "flat-design" ) $div.addClass( doc.fsmClass );
							else if ( ! doc.fsmClass ) $div.removeClass( "flat-design" ) ;
						},
						"trigger": function() {
							this.contentWindow.onTrigger.apply( this, arguments ) ;
						},
						"headerHTML": function( htmlString ){
							this._html( "header", htmlString ) ;
						},
						"footerHTML": function( htmlString ){
							this._html( "footer", htmlString ) ;
						},
						"_html": function( target, htmlString ){
							var doc = framedocument( this ) ;
							if ( doc.fsmClass && doc.fsmClass == "flat-design" ) {
								var linkID = "__quomodofonts-lato" ;
								if ( ! document.getElementById( linkID ) ) {
									var s = document.createElement( "link" ) ;
									s.setAttribute ( "type", "text/css" ) ;
									s.setAttribute ( "rel", "stylesheet" ) ;
									s.setAttribute ( "href", "https://fonts.googleapis.com/css?family=Lato:300,400,700" ) ;
									document.getElementsByTagName("head")[ 0 ].appendChild( s ) ;
									s.id = linkID ;
								}
							}
							var iframe = this ;
							var $t = $div.find( "td." + target ) ;
							if ( ! $t.length ) {
								$div.find( "td.q_fsmblockcontainer_content" ).parent()[ ( { "header": "before", "footer": "after" } )[ target ] ]( '<tr><td class="' + target + '"></td></tr>' ) ;
								$t = $div.find( "td." + target ) ;
							}
							$t.empty().html( htmlString ) ;
							
							// Ajout de caractères dans le header suite au passage aux glyphicons
							$t.find( ".icon" ).each( function() {
								if ( $( this ).html() == "" ) {
									if ( $( this ).hasClass( "validate" ) || $( this ).hasClass( "back" ) ) $( this ).html("") ;
									if ( $( this ).hasClass( "cancel" ) || $( this ).hasClass( "clone" ) ) $( this ).html("") ;
									if ( $( this ).hasClass( "add" ) ) $( this ).html("") ;
								}
							} ) ;
							
							$t.find( "[q_trigger]" ).unbind( "click" ).click( function() {
								iframe.trigger( $( this ).attr( "q_trigger" ) ) ; 
							} ).css( "cursor", "pointer" ) ;
							iframe[ ( { "header": "_hh", "footer": "_fh" } )[ target ] ] = $t.height() ;
							//$( iframe ).data( "options" ).maxheight -= iframe.headerheight ;
							iframe.resize() ;
						},
						"switchDialog": function( callback ){
							var b = true ;
							$div.find( "td.header, td.q_fsmblockcontainer_content, td.footer" ).fadeTo( 400, 0.01, function() {
								if ( b ) {
									callback() ;
									b = false ;
								}
								$( this ).fadeTo( 400, 1 ) ;
							} ) ;
						}
					}
				} ) ;
			}
		} ) ;
	} ;
	
	
	
	this.gui = function( guiKey, callback, defaultValue, options ){
		q_fsm_reveal( { 
			src : { id: "quomodo_gui", target: "q_fullscreenmask", urls: [ "/services/qorg/scripts/gui.js", "/services/qorg/scripts/gui_msgs_" + q_lang + ".js", "/services/qorg/gui_" + q_lang + ".html" ] }, 
			fsmsrc : guiKey,
			buttons: function(){ return gui_fsm_buttons( guiKey, options ) ; },
			title : function () { return gui_message[ guiKey ] ; }, 
			reveal_callback : function( div ){ gui_fsm_reveal( guiKey, div, defaultValue, options ) ; }, 
			delete_callback : function() { if ( callback ) callback.apply( this, arguments ) ; }
		}) ;
	} ;
	this.slider = function( options, callback ){
/*
options : JSON

title:String? : ""
min:Integer? : default = 0
max:Integer? : default = 100
step:Integer? : default = 1
displayValue:Boolean? : default = true
unit:String? : default = ""
value:Integer? : default value, default = 0
width:Integer? : default = 100 pixels
*/
		options = $.extend( { min: 0, max: 100, step: 1, displayValue: true, unit: "", value: 0, width: 100 }, options ) ;
		options.min = parseInt( options.min, 10 ) ;
		options.max = parseInt( options.max, 10 ) ;
		options.width = Math.max( options.width, options.max - options.min ) ;
		var $src = $( '<div onmousedown="q_stopPropagation( event )"></div>' ) ;
		$src.
			append( '<div></div>' ).
			find( "div:last" ).
				append( '<div class="fsm_slider" style="float: left ; width: ' + ( options.width ) + 'px"></div>' ).
				find( "div:last" ).
					slider( { 
						min : options.min,
						max : options.max,
						step : options.step,
						slide : function( event, ui ){
							$( this ).next().html( ui.value + options.unit );
						},
						change : function( event, ui ){
							$( this ).next().html( ui.value + options.unit );
						}
					} ).
				end().
				append( '<div style="font-weight: bold ; color: darkRed ; float: left; padding-left: 10px"></div>' ) ;
		q_fsm_reveal( {
			src : $src.get( 0 ),
			title : options.title || "",
			reveal_callback: function( div ){
				$( ".fsm_slider", div ).slider( "value" , parseInt( options.value || 0, 10 ) ) ;
			},
			delete_callback : function() { if ( callback ) callback.apply( this, arguments ) ; },
			buttons : [ 
				{ icon : "adminmenu sprite_cancel_32", label : common_message[ "cancel" ], onclick : function(){ q_fsm_delete(); } },
				{ icon : "adminmenu sprite_validate_32", label : common_message[ "ok" ], onclick : function(){
					var div = q_fsm_currentblock() ;
					var v = $( ".fsm_slider", div ).slider( "value" ) ;
					if ( options.unit ) v += options.unit ;
					q_fsm_delete( v ) ;
				} }
			]
		} );
	} ;
} ) ;

var q_fsmzindex = 0 ; 

function q_incrementfsmindex() {
	q_fsmzindex++ ;
	q_fsmzindex = Math.max( Math.max( ( window.zindexmax || 0 ) + 1 , q_fsmzindex ) , 10 ) ;
	return q_fsmzindex ;
}

function fsm_displayoption( displayoption ) {
	if ( ! displayoption ) return null ;
	var s = displayoption.split( " " ) ;
	if ( s.length == 1 ) s = s.concat( s ) ;
	for ( var i = 0 ; i < 2 ; i++ ) {
		if ( /[0-9]+%/.test( s[ i ] ) ) s[ i ] = parseInt( s[ i ] , 10 ) / 100 ;
		else if ( /^[0-9.]+$/.test( s[ i ] ) ) s[ i ] = parseFloat( s[ i ] , 10 ) ;
		else if ( s[ i ] == "center" ) s[ i ] = 0.5 ;
		else if ( s[ i ] == "top" ) s[ i ] = 0 ;
		else if ( s[ i ] == "bottom" ) s[ i ] = 1 ;
		else if ( s[ i ] == "left" ) s[ i ] = 0 ;
		else if ( s[ i ] == "right" ) s[ i ] = 1 ;
		else if ( s[ i ] == "none" ) s[ i ] = null ;
	}
	return s ;
}

function q_fsm_updateWaitMessage( s ) {
	$( ".q_fsm_wait div:first", q_fsm_currentblock() ).html( s ) ;
}
function q_fsm_wait( s ) {
	q_fsm_reveal( { 
		src : '<div class="q_fsm_wait"><img src="/bundles/qlub/images/waitanim.gif" alt="" /><div></div></div>' , 
		hideheader : true , 
		reveal_callback : function( div, json ){
			$( ".q_fsmblockcontainer_content", div ).css( { "padding" : "0px", "border" : "solid 1px #003FB4"} );
			$( ".q_fsmblockcontainer_block", div ).css( { "border" : "none" } );
			$( ".q_fsm_wait div:first", div ).html( s || common_message[ "defaultwait" ] ) ;
		}
	 } ) ;
}

function q_bubble( msg, options ){
	// options = { css : {}, delay : number, callback : function };
	$( '<div class="q_bubble fixed" align="center"></div>' )
		.append( $( '<div class="q_bubble_content"></div>' )
			.css( $.extend( { "border-color" : "darkGreen", "font-weight" : "bold" } , ( options && options.css ) ? options.css : {} ) )
			.html( msg ) 
		)
		.prependTo( document.body )
		.slideDown( "slow" )
		.delay( options && options.delay || 1000 )
		.slideUp( "slow", function(){ 
			$( this ).remove(); 
			if ( options && options.callback && typeof options.callback == "function" ) q_apply( options.callback, this );
		} );
}

function xq_bubble( ele, msg, options ) {
	// options = { css : {}, delay : number, callback : function };
	ele.find( ".q_bubble" ).remove(); 
	var container = $( '<div class="q_bubble" style="position:absolute" align="center"></div>' ) ;	
	$( container ).data( "alreadytargeted", false ) ;
	
	ele.hover( function () {
		container.slideUp( "slow", function() { 
			if ( ! $( container ).data( "alreadytargeted" )  && options && options.callback && typeof options.callback == "function" ) q_apply( options.callback, this );
			$( container ).data( "alreadytargeted", true ) ;
			container.remove() ;
		} ) ;
	} ) ;	
	container.append( $( '<div class="q_bubble_content"></div>' )
		.css( $.extend( { "border-color" : "darkGreen", "font-weight" : "bold" } , ( options && options.css ) ? options.css : {} ) )
		.html( msg ) )
		.prependTo( ele )
		.slideDown( "slow" );	
		
		setTimeout( function( ){ 	
			container.slideUp( "slow", function() { 
				if ( ! $( container ).data( "alreadytargeted" ) && options && options.callback && typeof options.callback == "function" ) q_apply( options.callback, this );
				$( container ).data( "alreadytargeted", true ) ;
				container.remove(); 
			} ) ;
		}, options && options.delay || 6000 ) ;
}

function q_fsm_extend_buttons( defaultbuttons , extendbuttons ) {
	if ( ! extendbuttons ) return defaultbuttons ;
	if ( ! extendbuttons.splice || extendbuttons.length != defaultbuttons.length ) return q_alert( "q_fsm_extend_buttons was called with bad arguments for buttons." ) ;
	var buttons = [] ;
	for ( var i = 0 ; i < defaultbuttons.length ; i++ ) buttons.push( $.extend( defaultbuttons[ i ] , extendbuttons[ i ] ) ) ;
	return buttons ;
}

function q_alert( msg, options ){
	if ( ! options ) options = {};
	options.buttons = q_fsm_extend_buttons( [ { label : common_message[ "ok" ], onclick : function(){ q_fsm_delete(); } } ] , options.buttons ) ;
	if ( ! options.title ) options.closeonly = true ;
	var opt = $.extend( { 
		title : "Quomodo", 
		icon : "", 
		closeOnReturn : true, 
		width : "300"
	 } , options );
	
	var thesrc = $( '<table cellspacing="0" cellpadding="10" border="0" class="q_fsm_alert">' ).css( "width", opt.width + "px" );
	var tr = $( '<tr></tr>' ).appendTo( thesrc );
	if ( opt.icon ) tr.append( '<td width="1"><img class="png ' + opt.icon + '" src="/images/blank.gif" alt=""/></td>' );
	tr.append( $( '<td valign="middle" align="left">' ).append( msg ) );

	var json = { 
		src : thesrc.get( 0 ), 
		title : opt.title, 
		buttons : opt.buttons,
		closeonly : opt.closeonly
	};
	if ( opt.closeOnReturn ) json.reveal_callback = function( div, json ){
		div.keypress = function( event ){ 
			if ( q_keycode( event ) == "13" ) q_fsm_delete(); 
		} ;
	} ;
	if ( opt.callback ) json.delete_callback = opt.callback;
	if ( opt.callback_args || opt.args ) json.delete_args = q_args( opt.callback_args || opt.args ) ;
	q_fsm_reveal( json ) ;
	return false ;
}

function q_confirm( msg, options, args ){
	if ( ! options ) options = {};
	if ( typeof options == "function" ) options  = { callback : options, callback_args : args };
	else if ( typeof options == "string" ) options = { callback : eval( options ), callback_args : args }; 

	options.buttons = q_fsm_extend_buttons( [
		{ icon : "adminmenu sprite_cancel_32", label : common_message[ "cancel" ], onclick : function(){ q_fsm_delete(); } } ,
		{ icon : "adminmenu sprite_validate_32", label : common_message[ "ok" ], onclick : function(){ q_fsm_delete( [ true ] ); } }
	] , options.buttons ) ;
	if ( ! options.title ) options.closeonly = true ;
	options = $.extend( {
		title : "Quomodo", 
		width : "300", 
		icon : "q_alert_warning"
	}, options );
	
	var thesrc = $( '<table cellspacing="0" cellpadding="10" border="0" class="q_fsm_alert">' ).css( "width", options.width + "px" )
		.append( $( '<tr>' )
			.append( '<td width="1"><img class="png " + options.icon + " src="/images/blank.gif" alt=""/></td>' )
			.append( $( '<td valign="middle" align="left">' ).append( msg ) )
		);
	var json = { 
		src : thesrc.get( 0 ), 
		title : options.title , 
		buttons : options.buttons,
		position : options.position,
		closeonly : options.closeonly ,
		delete_callback : function( value ){
			if ( value && options.callback ) q_apply( options.callback , options.callback_args ) ;
			else {
				if ( value == undefined && options.close ) return options.close() ;
				if ( options.cancel ) q_apply( options.cancel, options.cancel_args );
				else return;
			}
		}
	};
	q_fsm_reveal( json ) ;
}

function q_prompt( msg, options, args ){
	if ( ! options ) options = {};
	if ( typeof options == "function" || typeof options == "string" ) {
		var callback = ( typeof options == "string" ) ? eval( options ) : options;
		options = ( args && typeof args == "object" && !args.splice ) ? args : {};
		options.callback = callback;
	}
	
	if ( typeof msg == "string" ) options.prompt = msg ;
	else if ( typeof msg == "object"  &&  ! msg.splice ) try{ msg = msg.innerHTML; } catch(e){}
	else {
		if ( msg.length == 1 ) options.prompt = msg[ 0 ] ;
		else {
			options.title = msg[ 0 ] ;
			options.prompt = msg[ 1 ] ;
		}
	}
	
	var callback = options.callback || "" ;
	var callback_args = q_args( options.args || options.callback_args );
	var emptyvalue = ( options.emptyvalue != undefined ) ? options.emptyvalue : true;
	var multiple = ( options.multiple != undefined ) ? options.multiple : false;
	var bHTML = ( options.html != undefined ) ? options.html : false;
	var bIE = Boolean( document.body.currentStyle ) ;
	var bGecko = ( navigator.userAgent.toLowerCase().indexOf('gecko') != -1) ;
	if ( bHTML && ! ( document.getElementById && document.createElement && document.designMode && ( bIE || bGecko ) ) ) {
		bHTML = false ;
		multiple = true ;
	}
	if ( ! options.title ) options.closeonly = true ;
	options = $.extend( { 
		title : "Quomodo", 
		width : "300", 
		"default" : "",
		maxlength : 15000,
		rows : 3,
		buttons : [ 
			{ icon : "adminmenu sprite_cancel_32", label : common_message[ "cancel" ], onclick : function(){ q_prompt_validate( this, "false" ); } },
			{ icon : "adminmenu sprite_validate_32", label : common_message[ "ok" ], onclick : function(){ q_prompt_validate( this, "true" ); } }
		]
	}, options );
		
	var thesrc = $( '<form>', { "class" : "q_prompt_form" } )
		.append( $( '<table cellspacing="0" cellpadding="5" border="0" class="q_fsm_alert">' ).css( "width", options.width + "px" )
			.append( $( '<tr>' ).append( $( '<td valign="middle" align="left" class="qprompt_prompt">' ).html( options.prompt ) ) )
			.append( '<tr><td align="center" class="q_prompt_response_block"></td></tr>' )
		);

	if ( multiple ) $( ".q_prompt_response_block", thesrc ).append( $( '<textarea class="q_prompt_response">' ).attr( "rows", options.rows ) ) ;
	else if ( bHTML ) {
		$( ".q_prompt_response_block", thesrc ).append( $( '<iframe class="q_prompt_response" id="q_prompt-frame" style="border-style: solid 1px; overflow: auto; padding: 4px ; margin: 0; height:' + ( options.fieldheight || 100 ) + 'px; width:95%"></iframe>' ) ) ;
	} else $( ".q_prompt_response_block", thesrc ).append( $( '<input type="text" class="q_prompt_response">' ).attr( "maxLength", options.maxlength ));
	
	$( ".q_prompt_response", thesrc )
		.val( options[ "default"] )
		.attr( "withempty", ( emptyvalue ) ? "true" : "false" )
		.data( options ) ;
	if ( options.validinput ) $( ".q_prompt_response", thesrc ).bind( 'change keypress blur paste keyup oninput ',  function(){ q_filterinput( this, options.validinput ) ; } ) ;
		
	var json = {
		src : thesrc.get( 0 ), 
		title : options.title , 
		position : options.position, 
		buttons : options.buttons,
		closeonly : options.closeonly ,
		delete_callback : q_prompt_callback,
		delete_args : [ { 
			propagate_cancel : options.propagate_cancel , 
			callback : callback, 
			callback_args : callback_args, 
			cancel_callback : options.cancel_callback, 
			cancel_args : options.cancel_args 
		} ],
		reveal_callback : function( div, json ){ 
			$( ".q_prompt_form", div ).submit( function(){ q_prompt_validate( this, "true" ); return false; } );
			$( ".q_prompt_response", div ).focus().select();
			if ( bHTML ) {
				var html = '';
				html += '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />' ;
				html += '<style type="text/css">';
				html += 'html, body { cursor: text; font-size: 12px; font-family: Arial, sans-serif; border-style: none }' ; 
				html += 'p { margin : 0px ; padding: 0px }';
				html += '</style>';
				html += '</head><body style="margin: 0; padding: 0;"></body></html>' ;
				if ( bIE ) var promptframe = frames[ "q_prompt-frame" ] ;
				else if ( bGecko ) var promptframe = document.getElementById( "q_prompt-frame" ).contentWindow ;
				promptframe.document.designMode = 'on' ;
				promptframe.document.open() ;
				promptframe.document.write( html ) ;
				promptframe.document.close() ;
				$( div ).data( "promptframe" , promptframe ) ;
			}
		}
	 };
	q_fsm_reveal( json ) ;
}

function q_prompt_validate( elem, value ){
	var div = $( elem ).parents( ".q_fsmblockcontainer_content:first" );
	if ( $( q_fsm_currentblock() ).data( "promptframe" ) ) var val = $( q_fsm_currentblock() ).data( "promptframe" ).document.body.innerHTML ;
	else var val = $( ".q_prompt_response", div ).val();
	if ( value == "true" ) {
		var options = $( ".q_prompt_response", div ).data() ;
		var empty = $( ".q_prompt_response", div ).attr( "withempty" );
		if ( empty == "false" &&  val.replace( /[ | ]/gi, "" ).length == 0 ) return q_alert( common_message[ "emptymsgs" ] );
		if ( options.format ) val = q_apply( options.format , val ) ;
		if ( options.checkvalue ) {
			function managecheck ( checkmsg ) {
				if ( ( typeof checkmsg ) == "function" ) return checkmsg( val , function ( realcheckmsg ) { managecheck( realcheckmsg ); } ) ;
				if ( checkmsg != true ) return ( checkmsg == false ) ? false : q_alert( ( checkmsg || common_message[ "badformattedmsgs" ] ).replace( /(\n|\r)/g , "<br/>" ) );
				q_fsm_delete( [ value , val ] );
			}
			return managecheck( q_apply( options.checkvalue , val ) ) ;
		}
	}
	q_fsm_delete( [ value , val ] );
}

function q_prompt_callback( value, response, callbacks ){
	if ( arguments.length == 1 ) {
		callbacks = value;
		response = null ;
		value = "false";
	}
	if ( value == "false" ) {
		if ( callbacks.cancel_callback ) q_apply( callbacks.cancel_callback, callbacks.cancel_args ) ;
		else if ( ! callbacks.propagate_cancel ) return ;
		response = null ;
	}
	var newargs = [ response ].concat( q_args( callbacks.callback_args ) ) ;
	if ( callbacks.callback ) q_apply( callbacks.callback , newargs ) ;
}

function q_link( options ){
	options = $.extend( {
		title : common_message[ "q_link_title" ],
		linktypes : [ "none", "webpage", "sitepage", "popup", "pagenote", "file", "mail", "js", "special", "ical" ]
	}, options || {} );

	var callback = options.callback ;
	var callback_args = options.callback_args || options.args;
	
	var thesrc  = $( '<table cellspacing="0" cellpadding="5" border="0" width="100%" class="q_link_content">' );
	
	var thetr = $( '<tr>' ).appendTo( thesrc ) ;
	for ( var i = 0; i < options.linktypes.length; i++ ) {
		if ( i%4 == 0 ) thetr = $( '<tr>' ).appendTo( thesrc ) ;
		thetr.append( '<td align="center"><div rel="' + options.linktypes[ i ] + '" class="q_link q_link_' + options.linktypes[ i ] + '"></div><p>' +  common_message[ "q_link_" + options.linktypes[ i ] ] + '</p></td>' );
	}
	var lefttofill = 4 - ( options.linktypes.length % 4 );
	for ( var i = 0 ; i < lefttofill ; i++ ) thetr.append( '<td align="center"></td>' );
		
	$( ".q_link", thesrc )
		.hover( function(){ $( this ).addClass( "over" ); }, function(){ $( this ).removeClass( "over" ); } )
		.click( function(){ q_link_click( $( this ).attr( "rel" ), options ); } );
	
	var json = { 
		src : thesrc.get( 0 ), 
		title : options.title,
		buttons : [ { label : common_message[ "close" ], onclick : function(){ q_fsm_delete(); } } ]
	};
	json.reveal_callback = function( div ){
		if ( options[ "linktypes" ].length == 1 ) $( ".q_link", div ).click() ;
	};
	
	json.delete_callback = function( v ) {
		if ( v == undefined && options.cancel_callback ) options.cancel_callback() ;
		else if ( v && options.callback ) q_apply( callback , [ v ].concat( q_args( options.callback_args || options.args ) ) ) ;
	} ; 
	q_fsm_reveal( json ) ;
}

function q_link_click( type, options ){
	switch( type ){
		case "none" ://0
			q_link_selectdone( "none" , type , options );
			break;
		case "webpage" ://1 
			q_prompt( common_message[ "q_link_webpage_prompt" ], { "default" : ( ( options.defaultvalue && options.defaultvalue.address ) || "" ) , callback : q_link_selectdone, callback_args : [ type , options ] } );
			break;
		case "sitepage" ://2
			q_select( "page", { withspaces: true, nolink: true, selected : ( ( options.defaultvalue && options.defaultvalue.pagelink ) || "" ), callback : q_link_selectdone, callback_args : [ type , options ] } );
			break; 
		case "popup" ://7
			q_select( "page", { withspaces: true, nolink: true, nodisq: true, noshareboard: true, noemptymenu : true, selected : ( ( options.defaultvalue && options.defaultvalue.pagepopup ) || "" ), callback : q_link_selectdone, callback_args : [ type , options ] } );
			break; 
		case "pagenote" ://6
			hideblock( q_fsm_div() ) ;
			qsn_undimall();
			$( qsn_edittarget ).hide();
			$("#q_fullscreenmask").hide();
			$( qsn_edittarget ).data( "scrollTop", $( window ).scrollTop() );
			$( window ).scrollTop( $( "#q_author_stuff" ).offset().top - $( "#qlub_adminbar" ).height() - 38 ) ; //2012-08-01, vh : on afffiche à peine au dessus du début de q_author_stuff, après qlub_adminbar
			q_selectnote( function( noteid ){
				$( window ).scrollTop( $( qsn_edittarget ).data( "scrollTop" ) ) ;
				qsn_dimothers( qsn_edittarget.id ) ;
				$( qsn_edittarget ).show() ;
				$("#q_fullscreenmask").show() ;
				q_link_selectdone( noteid , type , options ) ;
			} , { atomic : true } ) ;
			break; 
		case "file" ://3
			qsn_launch_upload( "file" , q_link_selectdone , [ type , options ] ) ;
			break;
		case "mail" ://5
			q_prompt( common_message[ "q_link_mail_prompt" ], { checkvalue : verbosevalidemail , "default" : ( ( options.defaultvalue && options.defaultvalue.mailto ) || "" ), callback : q_link_selectdone, callback_args : [ type , options ] } );
			break;
		case "js" ://4
			q_prompt( common_message[ "q_link_js_prompt" ], { "default" : ( ( options.defaultvalue && options.defaultvalue.js ) || "" ), callback : q_link_selectdone, callback_args : [ type , options ] } );
			break;
		case "special":
			var path = "/services/dialogs/speciallinks/index_"+ q_lang +".html";
			var opt = { 
				json: { value : options.defaultvalue && options.defaultvalue.special } ,
				callback: function( v ) {
					q_link_selectdone( v, type, options ) ;
				}
			}
			quomodo.fsm.loadDialog( path, opt );
			break;
		case "ical":
			var path = "/services/calendar/ical/dialog_qlink/index_" + q_lang + ".html" ;
			var opt = {
				json : { },
				callback: function( x ) {
					if ( ! x ) return ;
					q_link_selectdone( x, type, options ) ;
				}
			} ;
			quomodo.fsm.loadDialog( path, opt ) ;
			break;
	}
}

function q_link_selectdone( x, type , options ){
	if ( ! x || ! options ) return q_fsm_delete() ;
	var r = {} ;
	switch( type ) {
		case "none" ://0
			r = { kind : 0 } ;
			break;
		case "webpage" ://1 
			r = { kind : 1 , address : q_validlink( x ) } ;
			break;
		case "sitepage" ://2
			r = { kind : 2 , pagelink : x[ 0 ]  } ;
			break; 
		case "popup" ://7
			if ( x[ 0 ] == currsvcid ) {  
				q_select( "page", { withspaces: true, nolink: true, nodisq: true, noshareboard: true, noemptymenu : true, selected : ( ( options.defaultvalue && options.defaultvalue.pagepopup ) || "" ), callback : q_link_selectdone, callback_args : [ type , options ] } );  
				return q_alert( common_message[ "unablesamepagepopup" ], { title : common_message[ "unablesamepagepopup_title" ] }  ) ;
			 } 
			r = { kind : 7 , pagepopup : "popup:" + x[ 0 ]  } ;
			break; 
		case "pagenote" ://6
			showblock( q_fsm_div() ) ;
			if ( ! x ) return ;
			r = { kind : 6 , note : x  } ;
			break; 
		case "file" ://3
			r = { kind : 3 , filename : x.files[ 0 ].filename , linkname : x.files[ 0 ].linkname } ;
			break;
		case "mail" ://5
			r = { kind : 5 , mailto : x  } ;
			break;
		case "js" ://4
			r = { kind : 4 , js : x  } ;
			break;
		case "special"://8
			r = { kind : 8, special: x } ;
			break;
		case "ical"://9
			r = { kind : 9, ical: x.ical } ;
			break;
	}
	if ( options.withProperties ) r = { link : r, properties :  q_link_getproperties( r )  } ; 
	
	q_fsm_delete( r ) ;
}

var __qpromise = { defs: {}, promises: {} } ;
function qpromiseAdd( promisetype , fn ){
	__qpromise.defs[ promisetype ] = function( callback ){
		var params = []
		for ( var i = 1 ; i < arguments.length ; i++ ) params.push( arguments[ i ] ) ;
		var fnPromise = fn.apply( this, params ) ;
		if ( ! __qpromise.promises[ fnPromise.id ] ) __qpromise.promises[ fnPromise.id ] = { callbacks: [], loading: false } ;
		for ( var k in fnPromise ) __qpromise.promises[ fnPromise.id ][ k ] = fnPromise[ k ] ;
		__qpromise.promises[ fnPromise.id ].callbacks.push( callback ) ;
		return __qpromise.promises[ fnPromise.id ] ;
	} ;
}
function qpromise( promisetype ){
	var params = []
	for ( var i = 1 ; i < arguments.length ; i++ ) params.push( arguments[ i ] ) ;
	if ( ! __qpromise.defs[ promisetype ] ) return null ;
	function applyPromise( promise, params, callback ){
		//si on passe l'id, on commence par résoudre la promesse
		if ( typeof promise == "string" ) {
			return applyPromise( __qpromise.defs[ promise ].apply( this, [ callback ].concat( params ) ) ) ;
		}
		var __promise = __qpromise.promises[ promise.id ]
		if ( ! promise.ready ) {
			if ( __promise.loading ) return promise ;
			if ( window.ASresumepause_inc ) ASresumepause_inc() ;
			__promise.loading = true ;
			promise.promise( function( v ){
				return applyPromise( v ) ;
			} ) ;
			return promise ;
		}
		var callbacks = __promise.callbacks ;
		var n = callbacks.length ;
		var lastResult ;
		for ( var j = 0 ; j < n ; j++ ) {
			var lastResult = ( callbacks[ 0 ] ) ? callbacks[ 0 ]( promise.promise ) : promise.promise ;
			callbacks.splice( 0 , 1 ) ;
		}
		if ( __promise.loading ) {
			if ( window.ASresumepause_dec ) ASresumepause_dec() ;
			__promise.loading = false ;
		}
		return lastResult ;
	}
	return { __promise: true, callback: function( callback ){
		return applyPromise( promisetype, params, callback ) ;
	} } ;
}
qpromiseAdd( "otherspaceright", function( spaceid, noWait ){
	var space = q_spacefromid( spaceid ) ;
	if ( ! space ) return { id: promiseid, ready: true, promise: null } ;
	var promiseid = "otherspaceright-" + spaceid ;
	if ( space.spacexml ) return { id: promiseid, ready: true, promise: space.spacexml } ;
	return { id: promiseid, ready: false, promise: function( callback ){
		if ( ! noWait ) q_fsm_wait() ;
		q_ajaxgetppty( "otherspaceright?id=" + spaceid, function(){
			if ( ! noWait ) q_fsm_delete() ;
			var space = q_spacefromid( spaceid ) ;
			if ( ! space ) callback( { id: promiseid, ready: true, promise: null } ) ;
			else callback( { id: promiseid, ready: true, promise: space.spacexml } ) ;
		} ) ;
	} } ;
} ) ;
qpromiseAdd( "localteams", function( noWait ){
	var promiseid = "localteams" ;
	if ( spacexml.localteams ) return { id: promiseid, ready: true, promise: spacexml.localteams } ;
	return { id: promiseid, ready: false, promise: function( callback ){
		if ( ! noWait ) q_fsm_wait() ;
		q_events_request( function( x ) {
			if ( ! noWait ) q_fsm_delete() ;
			spacexml.localteams = $.extend( {}, x.__openselects.localteam ) ;
			callback( { id: promiseid, ready: true, promise: spacexml.localteams } ) ;
		}, { openselects: "all" } ) ;
	} } ;
} ) ;
function qpromise_svcfromid( svcid, withWait ) {
	var splittedsvc = svcid.split( "/" ) ;
	return { callback: function( callback ){
		if ( splittedsvc.length == 1 ) return callback( q_svcfromid( svcid ) ) ;
		return qpromise( "otherspaceright", splittedsvc[ 0 ], ! withWait ).callback( function( promise ){
			callback( q_svcfromid( svcid ) ) ;
		} ) ;
	} } ;
}

function qpromise_linkproperties( link ){
	if ( q_pagemode() == "web" ) var v = q_link_getproperties( link, false ) ;
	else var v = q_link_getproperties( link, true ) ;
	if ( typeof v == "function" ) return { callback: v } ;
	return { callback: function( callback ){ callback( v ) ; } } ;
}

function q_link_getvalue( link ) {
	var v = q_link_getproperties( link ) ;
	return v.displayValue ;
}
function q_linkDoClick( jslink ) {
	q_link_getproperties( jslink ).onclick() ;
	//return false ; //2012-11-15, vh : dans IE si on exécute un lien javascript:mafunction() où mafunction() retourne autre chose que undefined, IE affiche le résultat sur la page
}
function q_link_getproperties( link, bPromise ) {
	if ( ! link ) return { displayValue: "" } ;
	if ( typeof link == "string" ) {
		function toJson(){
			var splitLink = link.split( ":" ) ;
			var dict = {
				"web": { kind: 1, key: "address" },
				"page": { kind: 2, key: "pagelink" },
				"popup": { kind: 7, key: "pagepopup" },
				"file": { kind: 3, key: "filename" },
				"javascript": { kind: 4, key: "js" },
				"mailto": { kind: 5, key: "mailto" },
				"note": { kind: 6, key: "note" },
				"special": { kind: 8, key: "special" },
				"ical": { kind: 9, key: "ical" }
			}
			var key = splitLink[ 0 ] ;
			splitLink.shift() ;
			var value = splitLink.join( ":" ) ;
			var o = { kind: dict[ key ].kind };
			if ( key == "popup" ) o[ dict[ key ].key ] = "popup:" + value ;
			else o[ dict[ key ].key ] = value ;
			return o ;
		}
		link = toJson() ;
	}
	if ( link.kind == undefined ) {
		if ( link.address ) link.kind = 1;
		else if ( link.pagelink ) link.kind = 2;
		else if ( link.pagepopup ) link.kind = 7;
		else if ( link.filename ) link.kind = 3;
		else if ( link.js ) link.kind = 4;
		else if ( link.mailto ) link.kind = 5;
		else if ( link.note ) link.kind = 6;
		else link.kind = 0;
	}
	var v = { kind: link.kind, target: [ null, "_blank", "_self", "_blank", "_self", "_blank", "_self", "_self", "_self" ][ link.kind ] } ;
	function jsProtocol( jslink ){
		return "javascript:q_linkDoClick('" + jslink.replace( /\\/g , "\\\\" ).replace( /'/g, "\\'" ) + "')";
	}
	switch( parseInt( link.kind, 10 ) ){
		case( 0 ) : 
			v.displayValue = "";
			break;
		case( 1 ) :
			var addr = link.address ;
			v.displayValue = addr ;
			if ( ! addr ) v.onclick = function() { return false; } ;
			else {
				v.title = addr ;
				if ( ! ( /^(javascript:|rel:|[a-zA-Z]+:\/\/)/.test( addr ) ) ) addr = "http://" + addr ;
				if ( /rel:/.test( addr ) ) {
					v.href = addr.replace( /http:\/\//g, "").replace( /rel:/ , "" );
					v.qhref = "web:" + addr.replace( /http:\/\//g, "").replace( /rel:/ , "" );
					v.title = "";
					v.target = "_self" ;
				} else {
					v.href = addr ; 
					v.qhref = "web:" + addr ; 
					v.title = addr ;
					v.target = "_blank" ;
				}
				var url = v.href ;
				v.onclick = function() { window.open( url ); return false; } ;
				v.clickAttribute = "window.open( '" + url.replace( /'/g , "\\'" ) + "' , '' ) ; return false" ;
			}
			break;
		case( 2 ) : 
		case( 7 ) : 
			var svclink = link[ ( link.kind == 2 ) ? "pagelink" : "pagepopup" ] ;
			if ( svclink ) {
				var svcid = ( link.kind == 2 ) ? svclink : svclink.replace( "popup:" , "" ) ;
				v.jsProtocol = jsProtocol( ( ( link.kind == 2 ) ? "page" : "popup" ) + ":" + svcid ) ;
				function getv( svcinfo ){
					if ( svcinfo ) {
						if ( svcinfo.id ) {
							v.href = ( q_svcisweb( svcinfo ) ) ? svcinfo.weblink : q_privateurl( svcid ) ;
						} else {// on a un id de site de portail
							var homesvc = q_homesvc( q_spacefromid( svcid ).spacexml ) ;
							v.href = ( homesvc ) ? svcinfo.weblink : q_privateurl( svcid ) ;
						}
						v.clickAttribute = "openservice( '" + svclink + "' ) ; return false ;" ;
						v.onclick = function() { openservice( svclink ) ; return false ; } ;
						v.displayValue = svcinfo.name ;
						v.title = common_message[ ( ( link.kind == 2 ) ? "link" : "popup" ) + "pagetitle" ] + " '" + svcinfo.name + "'";
					} else {
						v.title = "" ; // 2014-04-25 : en fait on ne sait pas si la page est privée ou n'existe plus. common_message[ "linkbroken" ] ;
						v.href = "#" ;
						//if ( ! bPromise && q_pagemode() == "web" ) v.onclick = function() { openservice( svclink ) ; return false ; } ;
						v.clickAttribute = "openservice( '" + svclink + "' ) ; return false ;" ;
						v.onclick = function() { openservice( svclink ) ; return false ; } ;
					}
					v.qhref = ( ( link.kind == 2 ) ? "page" : "popup" ) + ":" + svcid ;
					return v ;
				}
				if ( bPromise ) return function( callback ){
					qpromise_svcfromid( svcid ).callback( function( svcinfo ){
						callback( getv( svcinfo ) ) ;
					} ) ;
				} ;
				if ( q_pagemode() == "web" ) v = getv( q_web_svcfromid( svcid ) ) ;
				else v = getv( q_svcfromid( svcid ) ) ;
			} else v.href = null ;
			break;
		case( 3 ) : 
			v.displayValue = link.filename.replace( /.*\/([^\/]*$)/g, "$1");
			v.href = q_fsbasehref( link.filename ) + link.filename ;
			v.qhref =  "file:" + link.filename ;
			v.fileref = link.filename ;
			v.clickAttribute = "return q_openfile( this );" ;
			v.onclick = function() { return q_openfile( this ) ; } ;
			v.title = common_message[ "linkfiletitle" ] ;
			break;
		case( 4 ) : 
			v.displayValue = "Javascript";
			v.jsProtocol = jsProtocol( "javascript:" + link.js + "; return false;" ) ;
			v.href = "#" ;
			v.qhref =  "javascript:" + link.js ;
			v.clickAttribute = link.js + "; return false;" ;
			v.onclick = function() { eval( link.js ) ; return false ; } ;
			break;
		case( 5 ) : 
			v.displayValue = link.mailto;
			v.href = "mailto:" + link.mailto ;
			v.qhref = "mailto:" + link.mailto ;
			v.clickAttribute = "location.href='mailto:" + link.mailto + "' ; return false ;" ;
			v.onclick = function() { location.href = "mailto:" + link.mailto ; return false ; } ;
			break;	
		case( 6 ): 
			v.jsProtocol = jsProtocol( "note:" + link.note ) ;
			v.displayValue = link.note;
			v.href = "#" + link.note ;
			v.qhref = "note:" + link.note ;
			v.clickAttribute = "$( 'html,body' ).animate( { scrollTop : $( '#" + link.note + "' ).offset().top } ) ; return false ;" ;
			v.onclick = function() { $( "html,body" ).animate( { scrollTop : $( "#" + link.note ).offset().top } ) ; return false ; } ;
			break;
		case( 8 ):
			v.displayValue =  common_message[ link.special ] ;
			v.qhref = "special:" + link.special ;
			v.jsProtocol = jsProtocol( "special:" + link.special ) ;
			switch( link.special ) {
				case "prev": 
				case "next":
					v.href = "#" ;
					v.clickAttribute = "speciallink_prevnext( null, \'" +link.special + "\' ); return false ;" ;
					v.onclick = function() {  return speciallink_prevnext( null, link.special ) ; return false ; } ;
				break;
				case "home":
					v.href = q_homesvcid();
					v.clickAttribute = " speciallink_home( ) ; return false ;" ;
					v.onclick = function() { speciallink_home() ; return false ; } ;
				break;
				case "top":
					v.href = "#" ;
					v.clickAttribute = " $( 'html,body' ).animate( { scrollTop : 0 } ); return false;";
					v.onclick = function() {  $( 'html,body' ).animate( { scrollTop : 0 } ); return false ; } ;
				break;
				case "sitemap":
					v.href = "#" ;
					v.clickAttribute = " speciallink_sitemap() ; return false; " ;
					v.onclick = function() {	speciallink_sitemap() ; return false; } ;
				break;
				case "login":
					v.href = "local/loginpage.html?lang=" + q_lang + "&url=" + encodeURIComponent( document.location.href ) + "&svc=" + encodeURIComponent( currsvcid ) ;
					v.clickAttribute = 'speciallink_login() ; return false;';
					v.onclick = function() { speciallink_login() ; return false; } ;
				break;
				case "search":
					v.href = "search.html" ;	
					v.displayValue = "Rechercher" ;
					v.clickAttribute = "speciallink_search() ; return false;" ;
					v.onclick = function() { speciallink_search(); return false; } ;
				break;
			}
			break;
		case ( 9 ) :
			function geticalv( icalLink ){
				if ( ( /^team-/ ).test( icalLink ) ) {
					var t = spacexml.localteams && spacexml.localteams[ icalLink.replace( /^team-/, "" ) ];
					v.displayValue = common_message[ "linkDisplay-ical-team" ].replace( /%s/, ( t ) ? t.name : icalLink ) ;
				} else v.displayValue = common_message[ "linkDisplay-ical-" + icalLink ] ;
				var url = "webcal://"+ q_httpsiteurl( true ) + "/local/ical/" + icalLink + ".ics";
				v.href = url;
				v.qhref = "ical:" + icalLink ;
				v.onclick = function() { window.open( url ); return false; } ;
				v.clickAttribute = "window.open( '" + url.replace( /'/g , "\\'" ) + "' , '' ) ; return false" ;
				return v ;
			}
			if ( bPromise ) return function( callback ){
				qpromise( "localteams" ).callback( function(){
					callback( geticalv( link.ical ) ) ;
				} ) ;
			} ;
			v = geticalv( link.ical ) ;
			break ;			
		default : 
			v.displayValue = "";
			break;	
	}
	return v ;
}

function q_httpsiteurl( withouthttp ) {
	var h = window.location.host ;
	if ( q_pagemode() == "makeweb" ) h = q_makeweb_baseroot.replace( /^(http:\/\/)?www/, "club" ) ;
	if ( h == "localhost" ) h = "localhost/club"
	var url = ( spacexml.infos.host ) ? spacexml.infos.host : ( h + "/" + spacexml.infos.privatedomain ) ;
	if ( withouthttp ) return url;
	return "http://" + url ;	
}

function speciallink_prevnext( id , direction ) {
	//if ( qsn_currstate == "edit" ) return q_alert( navig_message[ "linksdisabled" ] );
	if ( ! id ) id = currsvcid;
	var pages = q_getpagesbyorder( [] );
	var pos = $.inArray( id, pages );
	if ( pos == -1 ) return ;
	function donavig(){
		pos = pos + ( ( direction == "next" ) ? 1 : -1 ) ;
		var newid = pages[ pos ];
		if ( ! newid ) return ;
		if ( q_pagemode() == "web" ){
			if ( window.web_svctopages ) {
				for ( var i in web_svctopages ) {
					if ( newid == web_svctopages[ i ].id ) {
						if ( web_svctopages[ i ].name == undefined ) return donavig() ;
						return openservice ( newid );
					}
				}
				if ( id != newid ) return q_navig( newid , direction );
			} 
		} else return openservice( newid ) ;
	}
	donavig() ;
}

function speciallink_home() {
	if ( q_pagemode() == "web" ) window.open( q_httpsiteurl() + "/" , ( isiniframe() ) ? "_blank" : "_self" ) ;
	else {
		var svcid = q_homesvcid() ;
		if ( ! svcid ) svcid = spacexml.services[ 0 ].id ;
		openservice( svcid ) ;
	}
}

function speciallink_sitemap() {
	if ( q_pagemode() == "web" ) {
		if ( qsn_currstate == "edit" ) return q_alert( common_message[ "webmodeclick" ] );
		var targetLinkValue = "_blank" ;
		if ( q_pagemode() == "web" && ! isiniframe() ) targetLinkValue = "_self" ;
		window.open( "clubmap.html", targetLinkValue ) ;
	} else {
		q_alert( common_message[ "webmodeclick"] );
	}
}

function speciallink_login() {
	( q_pagemode() == "web" ) ? club_login_block() : q_alert( common_message[ "webmodeclick"] );
}

function speciallink_search() {
	( q_pagemode() == "web" ) ? ( window.location.href = web_baseurl() + "search.html" ) : q_alert( common_message[ "webmodeclick"] );
}

function q_getpagesbyorder( t, sm ){
	if ( ! sm ) sm = spacexml.sitemap;
	for ( var i in sm ){
		if ( ! sm[ i ].items ){ if ( sm[ i ].id ) t.push( sm[ i ].id ); }
		else q_getpagesbyorder( t, sm[ i ].items );
	}
	return t;	
}

function q_privateurl( options, withroot ) {
	if ( typeof options == "string" ) {
		options = { lang: q_lang, wantedsvc: options } ;
	}
	var long2short = { "svc": "s", "lang": "l", "url": "u", "wantedsvc": "ws" } ;
	var url = "local/login?" ;
	var query = [] ;
	for ( var k in options ) {
		var v = options[ k ] ;
		if ( k == "svc" || k == "wantedsvc" ) v = q_shortsvcid( v ) ;
		query.push( ( long2short[ k ] || k ) + "=" + encodeURIComponent( v ) ) ;
	}
	url += query.join( "&" ) ;
	if ( withroot ) return q_httpsiteurl() + "/" + url ;
	return url ;
}

function q_shortsvcid( anySvcid ) { 
	function parse( svcid ) {
		return  svcid.replace( /#([0-9]+)#artemapage@intl/, "p$1" ).
			replace( /#([0-9]+)#artemadisq@intl/, "d$1" ).
			replace( /#([0-9]+)#homepage@intl/, "s$1" ) ;
	}
	
	return ( typeof anySvcid == "object" ) ? parse( anySvcid.id ) : parse( anySvcid ) ;
}

function q_longsvcid( anySvcid ) {
	function parse( svcid ) {
		return  svcid.replace( /p([0-9]+)/g, "#$1#artemapage@intl" ).
			replace( /d([0-9]+)/g, "#$1#artemadisq@intl" ).
			replace( /s([0-9]+)/g, "#$1#homepage@intl" ) ;
	}
	
	return ( typeof anySvcid == "object" ) ? parse( anySvcid.id ) : parse( anySvcid ) ;
}

function q_fsm_chooselist( options , callback ) {
/*
options : JSON
{
title : ""
what : [
	{ value : "auto" , icon : { type : "image" , value : url [ , style : { "border" : "none" } ] } , msg : html , click : function( event ){} } ,
	{ value : "auto" , icon : { type : "image" , value : url } , msg : html , click : function( event ){} }
]
value : selected value, comparée à what[i].value

*/
	var what = options.what ;
	var t = $( '<table cellspacing="0" cellpadding="0" border="0" width="100%" style="background-color : white; border : solid 1px #333;"></table>' );
	
	function setclick( $x , o ){
		$x.click( ( o.click ) ? o.click( callback ) : function( event ) {
				q_fsm_delete();
				callback( o.value ) ;
			} );
	}
	for ( var i = 0 ; i < what.length ; i++ ) {
		var selected = what[ i ].value == options.value ;
		var tr = $( '<tr valign="middle"></tr>' )
			.appendTo( t )
			.css( {
				"color" : ( selected ) ? "#F00" : "#333" ,
				"cursor" : "pointer" 
			} )
			.hover( function( event ){
				if ( event.type == "mouseenter" ){
					this.altbgcolor = this.style.backgroundColor;
					this.altcolor = this.style.color;
				}
				this.style.backgroundColor = ( event.type == "mouseenter" ) ? "#666" : this.altbgcolor;
				this.style.color =  ( event.type == "mouseenter" ) ? "#FFF" : this.altcolor ;

			} ) ;
		setclick( tr , what[ i ] ) ;
		$( '<td valign="middle" align="center" width="20" style="cursor: pointer; padding-left: 3px; height : 22px"></td>' )
			.appendTo( tr )
			.append( $( '<img class="png" width="16" alt=""/>' )
				.attr( "src", ( selected ) ? "/bundles/qlub/images/check.png" : "/images/blank.gif" )
			);
		
		$( '<td valign="middle" align="center" width="40" style="cursor:pointer"></td>' )
			.appendTo( tr )
			.append( $( '<div class="q_chooselist_icon"> </div>' )
				.each( function(){
					var iconvalue = ( typeof what[ i ].icon.value == "function" ) ? what[ i ].icon.value() : what[ i ].icon.value ;
					var icontype = what[ i ].icon.type ;
					switch( icontype ){
						case "image" : 
							$( this ).css( "background-image" , "url('" + iconvalue + "')" ).attr( "title", "auto" );
							break;
						case "color" :
							$( this ).css( "background-color", iconvalue );
							break;
						case "html" : 
							$( this ).css( "border" , "none" ).html( iconvalue );
							break;
					}
					if ( what[ i ].icon.style ) $( this ).css( what[ i ].icon.style ) ;
				} )
			);
		
		$( '<td valign="middle" align="left" width="40" style="text-align:left; padding-left : 15px;"></td>' )
			.html( what[ i ].msg )
			.appendTo( tr );
	}
	$( "tr", t ).each( function( i ){
		$( this ).css( {
			"background-color" : ( i % 2 == 0 ) ? "#DDD" : "#FFF",
			"border-top" : ( i % 2 == 0 )  ? "solid 1px #333" : "none",
			"border-bottom" : ( i % 2 == 0 )  ? "solid 1px #333" : "none"
		} );
	} );
	
	q_fsm_reveal( {
		src : t.get( 0 ),
		title : options.title
	} );
}

function q_fsm_revealid( json ) {
	return json.fsmsrc || json.revealid || ( ! json.src.tagName && json.src.id ) ;
}
function q_fsm_reveal( json ) {
/*
src : string (HTML), oject HTML ou json (pour q_include)
fsmsrc : id d'un élément à déplacer dans le container (forcé à revealid)
title : string
hideheader : boolean, default false
delete_title : string ("vrai" attribut title)
padding : integer, default 5
draggable : boolean
hideclose : boolean, default false
position : comme fsm_displayoption
revealid : id target du bloc pour tester son existance
reveal_callback, reveal_args, delete_callback, delete_args
buttons : les boutons à ajouter en bas
*/
	if ( isiniframe() && ( quomodo.page.isPopup || window.iframeInParent ) && parent.q_fsm_reveal ) {
		q_fsm_revealed.push( { parent : true } ) ;
		return parent.q_fsm_reveal( json ) ;
	}
	if ( $( "#q_fullscreenmask" ).length == 0 ) return ;
	if ( $( "#q_fullscreenmask_mobile" ).length == 0 ) $( "body" ).prepend( '<div id="q_fullscreenmask_mobile"></div>' ) ;
	var revealid = q_fsm_revealid( json ) ;
	if ( revealid && ge( revealid ) ) {
		var div = $( "#" + revealid ).parents( ".q_fsmblockcontainer" ) ;
		if ( div.length ) return q_fsm_finishreveal( div.get( 0 ) , json ) ;
	}
	var div = create_elem( "DIV" , { className : "q_fsmblockcontainer" , style : { position : "absolute" , left : "0px" , top : "0px" } } ) ;
	var divBtnClose = ( json.hideclose ) ? '<div style="width:16px;"></div>' : ( '<div class="q_fsmblockcontainer_delete" onmousedown="q_stopPropagation( event )" style="width:16px;"><div class="q_fsmblockcontainer_deletebtn" style="width:16px ;"/></div>' ) ;
	var thehtml = '<div class="' + ( ( json.slideLeft ) ? "q_fsmblockcontainer_slidescreenmask" : "q_fsmblockcontainer_screenmask" ) + '"></div><div class="q_fsmblockcontainer_container"><table class="q_fsmblockcontainer_block' + ( ( ! json.closeonly ) ? ' border' : '' ) + '" cellspacing="0" cellpadding="0" border="0"><tbody>' ;
	if ( json.closeonly ) thehtml += '<tr class="q_fsmblockcontainer_header"><td align="right"><div class="clubbackgroundcolor2" style="padding: 5px 0px ; width: 30px ; height: 16px ; border: solid 1px white; border-bottom-width: 0px">' + divBtnClose + '</div></td></tr>' ;
	else thehtml += '<tr class="q_fsmblockcontainer_header clubbackgroundcolor2"><td><table cellspacing="0" cellpadding="0" border="0"><tbody><tr><td align="left" style="height:27px ; width:30px; border-right: solid 1px ; ' + ( ( json.closehidden ) ? "display: none ; " : "" ) + '">' + divBtnClose + '</td><td align="left" style="height:27px;"><div class="q_fsmblockcontainer_title"></div></td></tr></tbody></table></td></tr>' ;
	thehtml += '<tr><td class="q_fsmblockcontainer_content" style="background-color:white;' + ( ( json.padding != undefined ) ? ( 'padding: ' + json.padding + 'px' ) : '' ) + '" align="center" colspan="2"></td></tr></tbody></table></div>' ;
	div.innerHTML = thehtml ;
	div = ge( "q_fullscreenmask" ).appendChild( div ) ;
	if ( json.slideLeft ) div.style.left = "100%" ;
	$( ".q_fsmblockcontainer_delete" , div ).click( function () { q_fsm_delete() ; return false ; } ) ;
	if ( ! json.src && json.fsmsrc ) q_fsm_finishinclude( div , json ) ;
	else if ( ( typeof json.src ) == "string" ) {
		gebcn( div , "q_fsmblockcontainer_content" ).innerHTML = json.src ;
		q_fsm_finishreveal( div , json ) ;
	} else {
		if ( json.src.tagName ) {
			gebcn( div , "q_fsmblockcontainer_content" ).appendChild( json.src );
			q_fsm_finishreveal( div , json ) ;
		} else {
			if ( ! json.src.target ) json.src.target = gebcn( div , "q_fsmblockcontainer_content" ) ;
			q_fsm_showfullscreenmask( div , json ) ;
			q_include( [ json.src ] , ( json.fsmsrc ) ? "q_fsm_finishinclude" : "q_fsm_finishreveal" , [ div , json , true ] ) ;
		}
	}
}

function q_fsm_finishinclude( div , json , withoutfullscreenmask ) {
	$( ".q_fsmblockcontainer_content" , div ).empty().append( $( "#" + json.fsmsrc ).show() ) ;
	q_fsm_finishreveal( div , json , withoutfullscreenmask ) ;
}

function q_fsm_finishreveal( div , json , withoutfullscreenmask ) {
	var buttons = json.buttons ;
	if ( buttons && typeof buttons == "function" ) buttons = buttons() ;
	if ( buttons ) {
		if ( ! $( div ).data( "buttonsprepared" ) ) {
			$( ".q_fsmblockcontainer_content", div ).append( '<table cellspacing="0" cellpadding="0" border="0" align="center"><tr class="q_fsm_buttons"></tr></table>' );
			$( div ).data( "buttonsprepared" , "true" ) ;
		}
		$( ".q_fsm_buttons", div ).empty() ;
		for ( var i = 0 ; i < buttons.length ; i++ ) $( ".q_fsm_buttons", div ).append( $( '<td>' ).append( create_button( buttons[ i ] ) ) );
	}
	if ( json.src && json.src.onload ) q_apply( json.src.onload , [ div , json ] ) ;
	if ( ! json.position ) json.position = "50% 25%" ;
	var revealid = q_fsm_revealid( json ) ;
	if ( revealid && ge( revealid ) ) div.revealid = revealid ;
	if ( json.draggable != false ) gebcn( div , "q_fsmblockcontainer_block" ).onmousedown = function( event ) { beginFreeDrag( this, event ) ; } ;
	$( ".q_fsmblockcontainer_delete" , div ).attr( "title" , json.delete_title || common_message[ "close" ] ) ;
	if ( json.title ) q_innerHTML( gebcn( div , "q_fsmblockcontainer_title" ) , q_sorf( json.title ) ) ;
	if ( json.hideheader ) hideblock( gebcn( div , "q_fsmblockcontainer_header" ) ) ;
	q_fsm_showblock( gebcn( div , "q_fsmblockcontainer_block" ) , json , null , withoutfullscreenmask ) ;
	if ( ! q_fsm_revealed.length ) $( "body" ).keypress( function( event ){ if ( q_fsm_currentblock().keypress ) q_fsm_currentblock().keypress( event ) ; } ) ;

	if ( json.slideLeft ) {
		div.slideLeft = true ;
		$( q_fsm_currentblock() ).animate( { left: "-100%" }, 400 ) ;
		$( div ).animate( { left: "0%" }, 400 ) ;
	}
	q_fsm_revealed.push( div ) ;
	q_apply( json.reveal_callback , [ div , json ].concat( json.reveal_args || [] ) ) ;
	
	// Ajoute stopPropagation à tous les éléments input, select, textarea
	$( ":input", div ).mousedown( q_stopPropagation );
	
	div.delete_callback = json.delete_callback ;
	div.delete_args = json.delete_args ;
}

var q_fsm_revealed = [] ;
function q_fsm_revealedids() {
	var x = [] ;
	for ( var i = 0 ; i < q_fsm_revealed.length ; i++ ) x.push( q_fsm_revealed[ i ].revealid || "no revealid" ) ;
	return x ;
}
function q_fsm_currentblock( removing ) {
	var div = q_fsm_revealed[ q_fsm_revealed.length - 1 ] ;
	if ( removing ) {
		q_fsm_revealed.splice( q_fsm_revealed.length - 1 , 1 ) ;
		if ( ! q_fsm_revealed.length ) $( "body" ).unbind( "keypress" );
	}
	return div ;
}
function q_fsm_toggleclose( status ) {
	var div = q_fsm_currentblock() ;
	if ( status == null || status == undefined ) status = ( ! $( ".q_fsmblockcontainer_deletebtn" , div ).length ) ;
	if ( status ) {
		$( ".q_fsmblockcontainer_delete" , div ).click( function () { q_fsm_delete() ; return false ; } ) ;
		$( ".q_fsmblockcontainer_delete div" , div ).removeClass( "q_fsmblockcontainer_deletebtn" ).addClass( "q_fsmblockcontainer_deletebtn" ) ;
	} else {
		$( ".q_fsmblockcontainer_delete" , div ).click( function () { return false ; } ) ;
		$( ".q_fsmblockcontainer_delete div" , div ).removeClass( "q_fsmblockcontainer_deletebtn" ) ;
	}
}
function q_fsm_div( wantblock ) {
	var div = q_fsm_currentblock() ;
	if ( ! wantblock ) return div ;
	return gebcn( div , "q_fsmblockcontainer_block" ) ;
}
function q_fsm_delete( args ) {
	var div = q_fsm_currentblock( true ) ;
	if ( div.parent ) return parent.q_fsm_delete( args ) ;
	if ( arguments.length > 1 ) {
		var delargs = [] ;
		for ( var i = 0 ; i < arguments.length ; i++ ) delargs.push( arguments[ i ] ) ;
	} else var delargs = q_args( args ) ;
	var b = ( div && div.fsmpresent ) ? div.fsmpresent : false ;
		
	function finishDelete( div ){
		if ( ! div.revealid ) rm( div ) ;
		else hideblock( div ) ;
	}
	if ( div ) {
		if ( div.slideLeft ) $( div ).animate( { left: "100%" }, 400, function() { finishDelete( div ) ; } ) ;
		else finishDelete( div ) ;
	}
	if ( div.slideLeft ) $( q_fsm_currentblock() ).animate( { left: "0%" }, 400 ) ;
	visibleblock( "q_fullscreenmask" , b ) ;
	visibleblock( "q_fullscreenmask_mobile" , b ) ;
	if ( ! div ) return ; 
	delargs = delargs.concat( q_args( div.delete_args ) ) ;
	try {
		q_apply( div.delete_callback , delargs , div ) ;
	} catch( err ) {
		adminalert( "Une erreur est survenue. \nMerci de contacter le service technique avec les informations suivantes : \n\n" + err );
	}
}

function fsm_showblock( elem , displayoption , base ) {
	q_fsm_showblock( elem , { position : displayoption } , base ) ;
}

function q_fsm_showblock( elem , json , base , withoutfullscreenmask ) {
	elem = ge( elem , base ) ;
	if ( elem.splice ) {
		for ( var i = 0 ; i < elem.length ; i++ ) q_fsm_showblock( elem[ i ] , json , base , withoutfullscreenmask ) ;
		return ;
	}
	var formateddisplay = fsm_displayoption( json.position ) ;
	var ww = q_windowInnerWidth() ;
	var wh = q_windowInnerHeight() ;
	if ( formateddisplay && formateddisplay[ 0 ] != null ) elem.style.left = 2*ww ;
	if ( formateddisplay && formateddisplay[ 1 ] != null ) elem.style.top = 2*wh ;
	if ( ! withoutfullscreenmask ) q_fsm_showfullscreenmask( elem , json ) ;
	showblock( [ getContainer( elem , "q_fsmblockcontainer" ) , elem ] ) ;
	var revealid = q_fsm_revealid( json ) ;
	var welem = 0 , helem = 0 ;
	if ( revealid && ge( revealid ) && ge( revealid ).style ) {
		welem = parseInt( ge( revealid ).style.width || 0 , 10 ) ;
		helem = parseInt( ge( revealid ).style.height || 0 , 10 ) ;
	}
	welem = Math.max( ( isNaN( welem ) ) ? 0 : welem , elem.offsetWidth ) ;
	helem = Math.max( ( isNaN( helem ) ) ? 0 : helem , elem.offsetHeight ) ;
	if ( formateddisplay && formateddisplay[ 0 ] != null ) {
		elem.style.left = ( ( typeof formateddisplay[ 0 ] ) == "string" ) ? formateddisplay[ 0 ] : Math.round( ( ww - welem ) * formateddisplay[ 0 ] ) + "px" ;
	}
	if ( formateddisplay && formateddisplay[ 1 ] != null ) elem.style.top = ( ( typeof formateddisplay[ 1 ] ) == "string" ) ? formateddisplay[ 1 ] : Math.round( ( wh - helem ) * formateddisplay[ 1 ] ) + "px" ;
}

function q_fsm_showfullscreenmask( elem , json ) {
	var div = getContainer( elem , "q_fsmblockcontainer" ) ;
	if ( div ) {
		div.fsmpresent = ( ge("q_fullscreenmask").style.display != "none" ) ;
		div.style.zIndex = q_incrementfsmindex() ;
		var maskopacity = ( div.fsmpresent ) ? 0.2 : 0.2 ;
		var mask = gebcn( div , "q_fsmblockcontainer_screenmask" ) ;
		if ( mask ) {// en mode slideLeft, il n'y a pas de q_fsmblockcontainer_screenmask
			mask.style.opacity = "" + maskopacity ;
			mask.style.filter = "alpha(opacity=" + ( 5 * Math.round( 20 * maskopacity ) ) + ")" ;
		}
	}
	displayfullscreenmask( json.color , json.opacity ) ;
}

function displayfullscreenmask( color, opacity ) {
	var fsm = gebcn( ge( "q_fullscreenmask" ), "q_fullscreenmask" ) ;
	if ( ! color ) {
		fsm.style.backgroundColor = "#777" ;
		fsm.style.opacity = "0.25" ;
		fsm.style.filter = "alpha(opacity=25)" ;
	} else {
		fsm.style.backgroundColor = color ;
		if ( ! opacity ) {
			fsm.style.opacity = "0.25" ;
			fsm.style.filter = "alpha(opacity=25)" ;
		} else {
			fsm.style.opacity = opacity ;
			fsm.style.filter = "alpha(opacity=" + opacity*100 + ")" ;
		}
	}
	showblock( "q_fullscreenmask" ) ;
	showblock( "q_fullscreenmask_mobile" ) ;
}

function q_fsmpresent() {
	return ge( "q_fullscreenmask" ) && ge( "q_fullscreenmask" ).style.display == 'block' ;
}

function q_datepicker( div, options ){
	// div contient 2 input : un pour la valeur affichée, l'autre pour la valeur stockée
	if ( ! options ) options = {};
	if ( typeof div == "object" && ! $( div ).get( 0 ).tagName ) {
		options = $.extend( {}, div );
		div = undefined;
	}
	
	var callback = options.callback;
	var callback_args = options.callback_args || options.args;

	var thesrc = $( '<div class="q_datepicker_div"></div>' ).get( 0 ) ;
	
	var $window = ( isiniframe() && quomodo.page.isPopup && parent.$ ) ? parent.$ : $ ;
	var buttons = ( ( options.hideheader ) ? [ { icon : "adminmenu sprite_cancel_32", label : common_message[ "cancel" ], onclick : function(){ q_fsm_delete(); } } ] : [] ).concat( [ { 
		icon : "adminmenu sprite_validate_32", 
		label : common_message[ "ok" ], 
		onclick : function(){ 
			var currentblock = q_fsm_currentblock() ;
			if ( currentblock.parent ) currentblock = parent.q_fsm_currentblock() ;
			var value = $window( ".q_datepicker", currentblock ).datepicker( "getDate" );
			if ( options.displayField ) $( options.displayField ).html( ( options.displayFormat ) ? $.datepicker.formatDate( options.displayFormat, value ) : $.datepicker.formatDate( $.datepicker.regional[ q_lang ][ "dateFormat" ], value ) );
			var val = $.datepicker.formatDate( ( options.datePicker && options.datePicker.dateFormat ) ? options.datePicker.dateFormat : ( options.dateFormat ||  "yy_mm_dd" ), value );
			if ( div ){ 
				if ( $.inArray( $( div ).get( 0 ).tagName.toLowerCase(), [ "input", "select" ] ) != -1 ) $( div ).val( val );
				else  $( div ).html( val );
				q_fsm_delete();
			} else q_fsm_delete( val );
		} 
	} ] ) ;
	var json = $.extend( {
		src : thesrc, 
		revealid : "q_datepicker_div" , 
		title : common_message[ "datepicker_title" ],
		buttons : buttons,
		reveal_callback : function( div , json ){
			$window( ".q_datepicker_div" , div ).append( $window( '<div class="q_datepicker"></div>' )
				.mousedown( function( event ){ q_stopPropagation( event ); } )
				.datepicker( options.datePicker )
			) ;
		}
	} , options ) ;
	if ( callback ) json.delete_callback = callback;
	if ( callback_args ) json.delete_args = [ callback_args ];
	q_fsm_reveal( json );
}

function q_core_choosefile( blockid , options ) {
	var src = {
		id : "qu_" + blockid , 
		urls : [ 
			"/services/swfs/style/swfupload.css" ,
			"/services/qorg/qu_" + q_lang + ".html" ,
			"/services/qorg/scripts/qu.js" ,
			"/services/qorg/scripts/qu_msgs_" + q_lang + ".js" ,
			"/services/swfs/scripts/swfupload.js" ,
			"/services/swfs/scripts/swfupload_queue.js" ,
			"/services/swfs/scripts/swfupload_swfobject.js" ,
			"/services/swfs/scripts/swfupload_functions.js" ,
			"/scripts/q_uploads_msgs_" + q_lang + ".js",
			"/scripts/q_uploads.js"
		] ,
		target : "q_fullscreenmask"
	} ;

	q_fsm_reveal( $.extend( {
		position : "50% 22px" ,
		fsmsrc : blockid ,
		src : src ,
		title : function () { return qu_message [ "notetitle" ] ; }
	} , options ) ) ;
}

function q_choosefile( data ) {
	return q_core_choosefile( "qu_choose_type" , { 
		reveal_callback : "qu_reveal" , 
		reveal_args : [ data ] , 
		delete_callback : "qu_onclose",
		title : data.title
	 } ) ;
}

function q_colors( options ){
	var opt = $.extend( { 
		selected : "rgb(255,255,255)",
		transparent : false,
		c1c2 : true, 
		c1decline : true,
		bw : true,
		favorite : true,
		hsv : true,
		forcecolor : false,
		title : common_message[ "colorpicker_title" ],
		delete_title : common_message[ "colorpicker_delete_title" ],
		callback : function( x ){ q_alert( x ); },
		callback_args : []
	}, options );
	
	var path = "/services/qorg/colorpicker_dialog/index_" + q_lang + ".html" ;
	var options = {
		json : opt,
		callback: function( x ) {
			if ( ! x ) return ;
			if ( spacexml.theme.customcolors && spacexml.theme.customcolors == x.customcolors )
				q_apply( opt.callback, [ x.selected , opt.callback_args ] );
			else 
				q_ajaxobjsetppty( "theme?id=qlub0", "t0", x , function(){ q_apply( opt.callback, [ x.selected, opt.callback_args ] ); } );
		}
	} ;
	
	quomodo.fsm.loadDialog( path, options ) ;
}

function q_importcsv( option ) {
	q_include( { id : "q_importcsv_dynload" , urls : [ "/scripts/q_importcsv_msgs_" + q_lang + ".js", "/scripts/q_importcsv.js" ] } , function() { $.importCSV( option ) ; } ) ;
}

function q_exportcsv( data, options ) {
	document.mainform.mission.value = "exportxls" ;
	q_fsm_wait() ;
	var json = { "array" : data } ;
	if ( options && options.exportname ) json.exportname = options.exportname ;
	q_ajaxsubmitwithservice( "common@" + q_lang, json, function( x ) {
		q_fsm_delete() ;
		if ( ! x.downloadsrc ) return q_alert( ( options && options.nodatamessage ) || common_message[ "nodatatoexport" ] ) ;
		quomodo.fsm.loadDialog( "/services/dialogs/waitforfilecsvxlsx/index_"+ q_lang +".html", {
     			json : { downloadsrc:  x.downloadsrc, xlsxsrc: x.xlsxsrc, type: ( options && options.type ) || "" }
		} ) ;
	} ) ;
}

/*
function -
function MOVE & EFFECTS
*/

function applymoveid( id , left , top , width ) {
	$( ge( id ) ).animate( { left : left , top : top , width : width } , 500 ) ;
}

/*
function -
function DIMENSIONS
*/

function q_trueXY( y ) {
	var xy = $( ge( y ) ).offset() ;
	return [ Math.round( xy.left ) , Math.round( xy.top ) ] ;
}

function q_parentwindowInnerWidth() {
	if ( parent.window.innerWidth ) return parseInt( parent.window.innerWidth , 10 ) ;
	else return parseInt( parent.document.documentElement.clientWidth , 10 ) ;
}

function q_windowInnerWidth() {
	if ( isiniframe() ) return q_parentwindowInnerWidth() ;
	return $( window ).width() ;
}

function q_parentwindowInnerHeight() {
	if ( parent.window.innerHeight ) return parseInt( parent.window.innerHeight , 10 ) ;
	else return parseInt( parent.document.documentElement.clientHeight , 10 ) ;
}

function q_windowInnerHeight() {
	if ( isiniframe() ) return q_parentwindowInnerHeight() ;
	return $( window ).height() ;
}

function getscroll() {
	return [ $( window ).scrollLeft(), $( window ).scrollTop() ];
}

function q_parentwindowscrollX(){
	if ( parent.window.scrollX ) return parent.window.scrollX ; // Safari , FF
	return parent.document.documentElement.scrollLeft ; // IE
}

function q_windowscrollX(){
	if ( isiniframe() ) return q_parentwindowscrollX() ;
	return $( window ).scrollLeft() ;
}

function q_parentwindowscrollY(){
	if ( parent.window.scrollY ) return parent.window.scrollY ; // Safari , FF
	return parent.document.documentElement.scrollTop ; // IE
}

function q_windowscrollY(){
	if ( isiniframe() ) return q_parentwindowscrollY() ;
	return $( window ).scrollTop() ;
}

function q_deltacontentwidth( elem ) {
	var div = ge( elem ) ;
	if ( ! div ) return 0 ;
	var csskey = [ "paddingLeft" , "paddingRight" , "borderLeftWidth" , "borderRightWidth" ] ;
	var x = 0 ;
	for ( var i = 0 ; i < csskey.length ; i++ ) {
		var y = parseInt( gcs( div , csskey[ i ] ) || "0" , 10 ) ;
		if ( y.toString() != "NaN" ) x += parseInt( gcs( div , csskey[ i ] ) || "0" , 10 ) ;
	}
	return x ;
}

function q_deltawidth( elem ) {
	var div = ge( elem ) ;
	if ( ! div ) return 0 ;
	if ( div.tagName == "TABLE" ) return 0 ;
	return q_deltacontentwidth( elem ) ;
}

function q_deltacontentheight( elem ) {
	var div = ge( elem ) ;
	if ( ! div ) return 0 ;
	var csskey = [ "paddingTop" , "paddingBottom" , "borderTopWidth" , "borderBottomWidth" ] ;
	var x = 0 ;
	for ( var i = 0 ; i < csskey.length ; i++ ) {
		var y = parseInt( gcs( div , csskey[ i ] ) || "0" , 10 ) ;
		if ( y.toString() != "NaN" ) x += parseInt( gcs( div , csskey[ i ] ) || "0" , 10 ) ;
	}
	return x ;
}

function q_deltaheight( elem ) {
	var div = ge( elem ) ;
	if ( ! div ) return 0 ;
	if ( div.tagName == "TABLE" ) return 0 ;
	return q_deltacontentheight( elem ) ;
}

function q_changedwidth( elem , targetoffsetwidth ) {
	var w = targetoffsetwidth || elem.offsetWidth ;
	var wstyle = w - q_deltawidth( elem ) ;
	elem.style.width = Math.max( 1 , Math.round( wstyle ) ) + "px" ; // mais parfois ça ne marche pas
	if ( elem.dragratio ) elem.style.height = Math.max( 1 , Math.round( wstyle * elem.dragratio ) ) + "px" ;
	if ( elem.resized ) elem.resized( elem , w ) ;
	if ( ! elem.toresize ) return ( elem.offsetWidth == w ) ;
	var x = elem.toresize() ;
	var contentwidth = w - q_deltacontentwidth( elem ) ;
	for ( var i = 0 ; i < x.length ; i++ ) {
		var targetelem = x[ i ] ;
		q_changedwidth( targetelem , ( targetelem.widthrule ) ? targetelem.widthrule( contentwidth ) : contentwidth ) ;
	}
	return ( elem.offsetWidth == w ) ;
}

/*
function -
function FORMULAIRES
*/

function containsradioon( s ) {
	return ( /\bon\b/.test ( s ) ) ;
}

function radiobutton( s ) {
	return ( /\bradio\b/.test ( s ) ) ;
}

function radiohbutton( s ) {
	return ( /\bradioh\b/.test ( s ) ) ;
}

function toggleradio ( x ) {
	return switchradio ( x , ( /\boff\b/.test( x.className ) ) ) ;
}

function switchradio ( x , checked ) {
	var s = x.className ;
	x.className = ( checked ? s.replace ( /\boff\b/ , "on" ) : s.replace ( /\bon\b/ , "off" ) ) ;
	return x ;
	var id = x.id ;
	var onclick = x.onclick ;
	var y = x.cloneNode( true ) ;
	if ( id ) y.id = id + "tmp" ;
	y = x.parentNode.insertBefore( y , x ) ;
	if ( onclick ) y.onclick = onclick ;
	rm( x ) ;
	if ( id ) y.id = id ;
	return y ;
}

function q_handleradio( groupelem , x ) {
	if ( x == undefined ) return;
	if ( x.tagName ) x = x.target ;
	var radios = ge( groupelem ).getElementsByTagName( "A" ) ;
	for ( var i=0; i<radios.length; i++ ) radios[ i ].className = ( radios[ i ].target == x ) ? "radio on" : "radio off" ;
	return x ;
}

function q_targetradio( groupelem , value ) {
	var radios = ge( groupelem ).getElementsByTagName( "A" ) ;
	for ( var i=0; i<radios.length; i++ ) if ( radios[ i ].target == value ) return radios[ i ] ;
	return null ;
}

function getchecked( x , basehtml ) {
	x = getelement ( x , basehtml ) ;
	if ( x.tagName == 'INPUT' ) return x.checked ;
	return containsradioon ( x.className ) ;
}

function setchecked( x , checked , basehtml ) {
	x = getelement ( x , basehtml ) ;
	if ( ! x ) return ;
	if ( x.tagName == 'INPUT' ) { x.checked = checked ; return x ; }
	var s = x.className ;
	if ( radiobutton( s ) ) {
		var xs = ( x.name ) ? document.getElementsByName( x.name ) : [] ;
		if ( ( xs.length > 1 ) && ( ! checked ) ) return x ;
		var y = switchradio ( x , checked ) ;
		if ( ! checked ) return y ;
		var xs = ( y.name ) ? document.getElementsByName( y.name ) : [] ;
		for ( var i = 0 ; i < xs.length ; i++ ) {
			if ( ( xs[i].id != y.id ) && containsradioon ( xs[i].className ) ) {
				switchradio ( xs[i] , false ) ;
				xs = document.getElementsByName( y.name ) ;
			}
		}
		return y ;
	}
	if ( radiohbutton( s ) && ( ! checked ) ) return x ;
	var y = switchradio ( x , checked ) ;
	if ( ! radiohbutton( s ) ) return y ;
// 	if ( ! checked ) return y ;
	var radioname = y.name ;
	var yc = getContainer( y ) ;
	var xs = getElementsByClassName( yc , "radioh" ) ;
	var e ;
	for ( var i = 0 ; i < xs.length ; i++ ) {
		e = xs[ i ] ;
		if ( ( e.name ) && ( e.name == radioname ) &&  ( e != y ) && containsradioon ( e.className ) ) {
			switchradio ( e , false ) ;
			xs = getElementsByClassName( yc , "radioh" ) ;
		}
	}
	return y ;
}

/*
function -
function STRINGS & HTML
*/

function escapeattribute( xx ) {
	var x = "" + ( xx || "" ) ;
	if ( ! isIE ) return x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ).replace( /"/g , "&quot;" ).replace( /'/g , "&apos;" ) ;
	return x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ).replace( /"/g , "&quot;" ).replace( /'/g , "‘" ) ;
}

function escapeHTML( xx ) {
	var x = "" + ( xx || "" ) ;
	return x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ).replace( /(\r\n|\r|\n)/g , "<br/>" ) ;
}

function q_innerHTML( x , ss ) {
	var s = ss || "" ;
	x = ge( x ) ;
	if ( ! x ) return ;
	if ( /\bpngbtn/.test( x.className ) && isie6() ) x = x.getElementsByTagName( "DIV" )[ 1 ] ;
	if ( x.tagName == "TEXTAREA" ) x.value = s ;
	else x.innerHTML = escapeHTML( s ) ;
	// x.innerHTML = "" ;
	// x.appendChild( document.createTextNode( s ) ) ;
}

function wiqi_text2HTML( s , xskiplinks , forcebr ) {
	var skiplinks = xskiplinks || false ;
	if ( ! s ) return "" ;
	s = s.replace( /&/g, "&amp;" ) ;
	s = s.replace( />/g, "&gt;" ) ;
	s = s.replace( /</g, "&lt;" ) ;	
// [ "'''''" , "<b><i>$1</i></b>" ] ,
	var patts =[
[ "&gt;&gt;&gt;&gt;" , "<div style='margin: 0 0 0 3.2em'>$1</div>" ] ,
[ "&gt;&gt;&gt;" , "<div style='margin: 0 0 0 1.6em'>$1</div>" ] ,
[ "&gt;&lt;" , "<div style='text-align: center'>$1</div>" ] ,
[ "'''" , "<span style='font-weight:bold'>$1</span>" ] ,
[ "''" , "<span style='font-style:italic'>$1</span>" ] ,
[ "\\+\\+\\+\\+" , "<span style='font-size: 177% ; line-height: 1.4em'>$1</span>" ] ,
[ "\\+\\+\\+" , "<span style='font-size: 133% ; line-height: 1.4em'>$1</span>" ] ,
[ "-" + "-" + "-" , "<span style='font-size: 88% ; line-height: 1.4em'>$1</span>" ] ,
[ "[|]-[|]" , "<div style='text-align: justify ; margin: 0'>$1</div>" ] ,
[ "==" , "<span style='text-decoration: line-through'>$1</span>" ]
] ;
	var x ;
	for ( var i = 0 ; i < patts.length ; i++ ) {
		x = patts [i] ;
		s = s.replace( new RegExp ( x [0] + "((.|\\r|\\n)*?)" + x [0] , "g" ) , x[1] ) ;
		s = s.replace( new RegExp ( x [0] + "((.|\\r|\\n)+$)" , "m" ) , x[1] ) ;
	}
	if ( ! skiplinks ) {
		s = s.replace ( /\[\[at\]\]/gi , "@" ) ;
		s = s.replace ( /\[\[([^\]]+?)-&gt;(js|javascript):(.+?)\]\]/gi , "<a href='#' style='cursor: pointer' onmousedown='disabledrag()' onclick='$3 ; return false'>$1</a>" ) ;
		s = s.replace ( /\[\[([^\]]+?)-&gt;http(.+?)\]\]/gi , "[[$1-&gt;tqmzzxvr$2]]" ) ;
		s = s.replace ( /\[\[([^\]]+?)-&gt;mailto(:[^\r\n <>,;:\/"]+)@([^ <>,;:\/"]+\.[a-z]{2,4})\]\]/gi , "[[$1-&gt;euwuvhtc$2pqsdfiezahds$3]]" ) ;
		s = s.replace ( /(https?:\/\/[a-z0-9_@\/=%#?&;.-]+[a-z0-9_@\/=%#?&;-])/gi , "[[$1-&gt;$1]]" ) ;
		s = s.replace ( /(mailto:)?([^\n\r <>,;:\/"]+@[^ <>,;:\/"]+\.[a-z]{2,4})/gi , "[[$2-&gt;mailto:$2]]" ) ;
		s = s.replace ( /tqmzzxvr/g , "http" ).replace ( /euwuvhtc/g , "mailto" ).replace ( /pqsdfiezahds/g , "@" ) ;
		s = s.replace ( /\[\[([^\]]+?)-&gt;(mailto:.+?)\]\]/gi , "<a href='$2' style='cursor: pointer' onmousedown='disabledrag()'>$1</a>" ) ;
	}
	s = s.replace ( /\[\[img-&gt;(http[^\]]+?)(__([^\]]*))?\]\]/gi , "<img src='$1' hspace='12px' vspace='6px' align='$3' style='margin: 7px'/>" ) ;
	s = s.replace ( /\[\[img-&gt;([^\]]+?)(__([^\]]*))?\]\]/gi , "<img src='/images/help/$1' hspace='12px' vspace='6px' align='$3' style='margin: 7px'/>" ) ;
	if ( ! skiplinks ) s = s.replace ( /\[\[([^\]]+?)-&gt;(.+?)\]\]/gi , "<a href='$2' style='cursor: pointer' onmousedown='disabledrag()' onclick='window.open(this.href) ; return false'>$1</a>" ) ;
	s = s.replace ( /^#(.*)$/gm , "<span class='scsquare'>$1</span>" ) ;
	s = s.replace ( /\r/g , "\n" ) ;
/*
	s = s.replace ( /(^|\n)[ \t\n]*-[ \t\n]*(.*)(\n|$)/g , "$1<ul><li style='margin-left: -2em'>$2</li></ul>$3" ) ;
	s = s.replace ( /(^|\n)[ \t\n]*-[ \t\n]*(.*)(\n|$)/g , "$1<ul><li style='margin-left: -2em'>$2</li></ul>$3" ) ;
	s = s.replace ( /<\/ul>[ \t\n]<ul>/g , "" ) ;
	s = s.replace ( /<\/ul>[ \t\n]/g , "</ul>" ) ;
	s = s.replace ( /[ \t\n]<ul>/g , "<ul>" ) ;
*/
	s = s.replace ( /(^|\n)[ \t\n]*\*[ \t\n]*(.*)(\n|$)/g , "$1<ol><li style='margin-left: -1em'>$2</li></ol>$3" ) ;
	s = s.replace ( /(^|\n)[ \t\n]*\*[ \t\n]*(.*)(\n|$)/g , "$1<ol><li style='margin-left: -1em'>$2</li></ol>$3" ) ;
	s = s.replace ( /<\/ol>[ \t\n]<ol>/g , "" ) ;
	s = s.replace ( /<\/ol>[ \t\n]/g , "</ol>" ) ;
	s = s.replace ( /[ \t\n]<ol>/g , "<ol>" ) ;
	if ( forcebr ) {
		s = s.replace( /<\/div>\n/g , "</div><br/>") ;
	} else {
		s = s.replace( /<\/div>\n/g , "</div><div style=\"height: 0.5em ; margin: 0 ; padding: 0\"> </div>") ;
		s = s.replace( /\n\n/g , "<br/><div style=\"height: 0.5em ; margin: 0 ; padding: 0\"> </div>") ;
	}
	s = s.replace( /\n/g , "<br/>") ;
	return s ;	
}

function qHTML2text( s ) {
	s = s.replace( /<br\/?>/gi , "\r") ;
	// s = s.replace ( /<(a|A) href=('|")(http:\/\/[^[:space:]]+)\2>\3<\/\1>/g , "$3" )
// [ "'''''" , "<b><i>$1</i></b>" ] ,
	var patts =[
[ "&gt;&gt;&gt;&gt;" , "<div style=\"margin-left: 2em\">$1</div>" ] ,
[ "&gt;&gt;&gt;" , "<div style=\"margin-left: 1em\">$1</div>" ] ,
[ "'''" , "<b>$1</b>" ] ,
[ "''" , "<i>$1</i>" ] ,
[ "++++" , "<span style=\"font-size: 17px ; line-height: 1.2em\">$1</span>" ] ,
[ "+++" , "<span style=\"font-size: 14px ; line-height: 1.2em\">$1</span>" ] ,
[ "-" + "-" + "-" , "<span style=\"font-size: 9px ; line-height: 1.2em\">$1</span>" ] 
] ;
	var x, y ;
	for ( var i = 0 ; i < patts.length ; i++ ) {
		x = patts [patts.length - 1 - i] ;
		y = x[1].replace ( /\$1/ , "((.|\\r|\\n)*)" ).replace ( /\// , "\/" ) ;
		s = s.replace( new RegExp ( y , "gi" ) , x[0] + "$1" + x[0] ) ;
	}
	s = s.replace( /&amp;/g, "&" ) ;
//	s = s.replace( /&gt;/g, ">" ) ;
//	s = s.replace( /&lt;/g, "<" ) ;
	return s;
}

function q_filterinput( x , h ) {
// tester TEXTAREA ??
	if ( typeof h == "string" ) h = eval( h );
	var validvalue = h( x.value ) ;
	if ( validvalue != x.value ) x.value = validvalue ;
}

function q_validnolt( x ) {
	return x.replace ( /</g , "LT" ) ;
}

function filterinput ( x ) {
	q_filterinput( x , q_validnolt ) ;
//	if ( /</.test ( x.value ) ) x.value = x.value.replace ( /</g , "LT" ) ;
}

function q_validforfm( x ) {
	return q_validnolt( x.replace ( /\/|:/g , "_" ) ) ;
}

function filterinputfm ( x ) {
	if ( x.id && x.id == "qlub_accesspw" ) return ;
	q_filterinput( x , q_validforfm ) ;
//	if ( /\/|:/.test ( x.value ) ) x.value = x.value.replace ( /\/|:/g , "_" ) ;
//	filterinput ( x ) ;
}

function q_urlcompliant( x ) {
	var str = x.toLowerCase() ;
	if ( str == "" ) return "_" ;
	str = str.replace( /(ç|ć|ĉ|ċ|č)/g , "c" ).replace( /æ/g , "ae" ).replace( /œ/g , "oe" ) ;
	str = str.replace( /(à|â|á|ã|ä|å|ā|ă)/g , "a" ).replace( /(é|è|ê|ë|ē|ĕ|ė|ę|ě)/g , "e" ).replace( /(î|ì|í|ï|ĩ|ī|ĭ|į)/g , "i" ).replace( /(ô|ò|ó|õ|ö|ō|ŏ|ő)/g , "o" ) ;
	str = str.replace( /(û|ù|ú|ü|ũ|ū|ŭ|ů|ű)/g , "u" ).replace( /(ý|ŷ)/g , "y" ).replace( /[^a-z0-9_-]/g , "_" ) ;
	str = str.replace( /-+/g , "-" ).replace( /_+/g , "_" ) ;
	return str ;
}
function q_validur( x ) {
	return q_validurl( x ) ;
}
function q_validurl( x ) {
	return x.toLowerCase().replace( /(é|è|ê|ë)/g , "e" ).replace( /(à|â|ä)/g , "a").replace( /(î|ï)/g , "i").replace( /(ô|ö)/g , "o").replace( /(û|ü|ù)/g , "u").replace( / /g , "_" ).replace( /[^a-z0-9_]/g , "-" ) ;
}
function q_validlink( s ) {
	try { s = decodeURI( s ) ; } catch( err ) {} ;
	if ( (/^rel:(.+)$/).test( s ) ) return s;
	s = encodeURI( s.replace( /^([^?]+)(\?.*)?$/ , "$1" ) ) + s.replace( /^([^?]+)(\?.*)?$/ , "$2" ) ;
	if ( ! ( /^http(s)?:\/\//.test( s ) ) ) s = "http://" + s ;
	return s ;
/*
	return "http://" + encodeURI( s.replace( /^([^?]+)(\?.*)?$/ , "$1" ).replace( /^(http:\/\/)+/ , "" ) ) + s.replace( /^([^?]+)(\?.*)?$/ , "$2" )
*/
}

function q_svcid2svcpage( svcid ) {
	if ( ! window.web_svctopages ) return "" ;
	for ( var j = 0 ; j < web_svctopages.length ; j++ ) if ( web_svctopages[ j ].id == svcid ) return web_svctopages[ j ].name + ".html" ;
}

function q_svcid2hrefpath ( svcid ) {
	var href = "local/loginpage.html?lang=" + q_lang + "&wantedsvc=" + encodeURIComponent ( svcid ) ;
	var spaceidRe = new RegExp( "^[0-9a-fA-F-]+$" ) ;
	
	if ( q_pagemode() == 'web' ) {
		var hrefweb = gethref();
		if ( ! hrefweb ) return href ;
		return hrefweb ; 
	} else {
		var svc ;
		if ( ( spaceidRe ).test( svcid ) ) {
			var space = q_spacefromid( svcid ) ;
			if ( ! space || ! space.spacexml ) svc = null ;
			else svc = q_homesvc( space.spacexml ) ;
		} else svc = q_svcfromid( svcid ) ;
		if ( ! svc ) return null ;
		if ( ! q_svcisweb( svc ) ) return href ;
		return svc.weblink +".html";
	}

	function gethref(){
		if ( /#artema(page|disq)/.test( svcid ) ) {
			if ( window.web_svctopages ) {
				var weblink = q_web_svcweblink( svcid ) ;
				if ( weblink ) return weblink.replace( /\.html$/ , "" ) + ".html" ;
			}
		} else if ( ( spaceidRe ).test( svcid ) ) {
			var weblink = q_web_svcweblink( svcid ) ;
			if ( weblink && ! weblink.noaccess ) return weblink.weblink ;
		}
		return null ;
	}
}

function q_innerLightHTML( elemsrc , options ) {
/*
	options, au choix :
		- maxlength ou,
		- JSON : {
			[ maxlength : default null ]
			[ mode : default text ]
			[ href : function( href ) {}, default ... ]
		}
	
*/
	if ( ( typeof options ) != "object" ) options = { maxlength : options } ;
	options = $.extend( { maxlentgh : null , mode : "text" , href : function( href ) { return href ; } } , options ) ;
	function emptyHTMLString( s ) {
		if ( ! s ) return true ;
		return ! /[^ \t\n\r]/.test( s ) ;
	}
	function emptyHTMLElement( elem ) {
		if ( ! elem.nodeType ) return true ;
		if ( elem.nodeType != 1 && elem.nodeType != 3 ) return true ;
		if ( elem.nodeType == 3 ) return emptyHTMLString( elem.nodeValue ) ;
		return false ;
	}
	function formattag( elem , previouselem , s , elemisempty , islast ) {
		if ( ! elem.tagName ) return s ;
		function wrapStyle( t, s ) {
			if ( emptyHTMLString( s ) ) return s ;
			var inlineStyles = [] ;
			if ( elem.style && elem.style.fontWeight == "bold" ) inlineStyles.push( "font-weight: " + elem.style.fontWeight ) ;
			if ( ! ( options && options.nocolor ) && elem.style && elem.style.color ) {
				var color = elem.style.color ;
				try {
					var tmp = color.replace( / /g, "" ) ;
					if ( rgb2brightness( tmp ) > 50 ) color = "rgb(" + rgb2givenlevel( 50, tmp ).join( "," ) + ")" ;
				} catch( err ) {}
				if ( color.replace( / /g, "" ) == "rgb(255,255,255)" ) inlineStyles.push( "color: #DDD" ) ;
				else inlineStyles.push( "color: " + color ) ;
			}
			if ( elem.style && elem.style.fontStyle == "italic" ) inlineStyles.push( "font-style: " + elem.style.fontStyle ) ;
			if ( inlineStyles.length > 0 ) return ( '<' + t  + ' style="' + inlineStyles.join( " ; " ) +'">' + s + '</' + t + '>' ) ;
			return s ;
		}
		function formatDIV( elem , previouselem , s , elemisempty , islast ) {
			if ( previouselem && ( previouselem.nodeType == 3 || $.inArray( previouselem.tagName.toLowerCase() , [ "p" , "div" , t ] ) == -1 ) ) s = "<br/>" + wrapStyle( "span", s ) ;
			if ( emptyHTMLString( s ) && elemisempty ) return s ;
			if ( elem.parentNode && $.inArray( elem.parentNode.tagName , [ "LI" , "DIV" ] ) != -1 && islast == true ) return wrapStyle( "span", s ) ;
			if ( elem.childNodes && elem.childNodes[ 0 ] && ( elem.childNodes[ 0 ].tagName == "UL" || elem.childNodes[ 0 ].tagName == "OL" ) ) return wrapStyle( "span", s ) ;
			if ( islast == "container" ) return wrapStyle( "span", s ) ;
			return ( wrapStyle( "span", s ) + "<br/>" ) ;
		}
		var t = elem.tagName.toLowerCase() ;
		if ( options.mode == "text" ) t+= "_text" ;
		if ( options.mode == "wiqi" ) {
			if ( t == "a" ) t+= "_wiqi" ;
			else t+= "_text" ;
		}
		switch ( t ) {
			case "p" :
			case "div" :
			case "p_text" :
			case "div_text" :
				if ( ( /_text/ ).test( t ) ) return formatDIV( elem , previouselem , s , elemisempty , islast ).replace( /<br\/>/g , "\n" ) ;
				return formatDIV( elem , previouselem , s , elemisempty , islast ) ;
			case "br" :
			case "br_text" :
				if ( elem.parentNode && islast == true ) return s ;
				return ( s + ( ( ( /_text/ ).test( t ) ) ? "\n" : "<br/>" ) ) ;
			case "hr" :
				return "<hr/>" ;
			case "table" :
			case "tbody" :
			case "tr" :
			case "td" :
			case "th" :
			case "ul" :
			case "ol" :
			case "b" :
			case "i" :
			case "em" :
			case "span" :
				var tmp = wrapStyle( t, s ) ;
				if ( tmp != s ) return tmp ;
			case "li" :
				return ( "<" + t + ">" + s + "</" + t + ">" ) ;
			case "a" :
			case "a_text" :
			case "a_wiqi" :
				var href = null ;
				var svcid;
				var onclick = $( elem ).attr( "onclick" );
				var re = new RegExp( ".*openservice\\([^)]*(\"|')([^)]*)\\1.*" , "g" ) ;
				if ( re.test( onclick ) ) {
					var svcid = onclick.replace( re, "$2" );
					svcid = svcid.substring( svcid.indexOf( ":" ) + 1 );// pour supprimer s'il y popup: par exemple
				}
				try { href = elem.href ; } catch( err ) {} // 2012-11-05, vh : sur IE8 parfois, elem.href ne marche pas pour des href bizarres, par ex. http://%%/etc
				if ( ! href ) return s ;
				if ( options.nojavascript && (/^javascript:/).test( href ) ) return s ;
				if ( emptyHTMLString( s ) ) return s ;
				if ( options.mode == "wiqi" ) return ( "[[" + s + "->" + options.href( href, svcid, s ) + "]]" ) ;
				return ( '<a href="' + options.href( href, svcid , s ) + '" target="_blank" >' + s + '</a>' ) ;
			case "tr_text" :
			case "li_text" :
				return ( s + "\n" ) ;
			case "td_text" :
			case "th_text" :
				return ( s + "\t" ) ;
			case "img" :
				return $( '<div></div>' ).append( $( elem ).clone() ).html() ;
			default :
				if ( options.preserveTags && $.inArray( t , options.preserveTags ) !=-1 && ! emptyHTMLString( s ) ) return ( "<" + t + ">" + s + "</" + t + ">" ) ;
				return s ;
		}	
	}
	function truncate( s , maxlength ) {
	 	if ( maxlength === null ) return { s: s, b: false } ;
		if ( maxlength < 0 ) return { s: "...", b: true } ;
		var rest = s.substring( maxlength ).split( "\n" )[0].split( "\r" )[0].split( " " )[0].split( "	" )[0] ;
		var s2 = s.substring( 0 , maxlength ) + rest ;
		//if ( s2 != s || s.length >= maxlength ) s2 += " ..." ;
		if ( s2 != s ) return { s: s2 + "...", b: true } ;
		return { s: s2, b: false } ; 
	}
	//2014-01-15, vh : finalement on accepte de dépasser de maxlength
	/*function truncate( s , maxlength ) {
	 	if ( maxlength === null ) return s ;
		if ( maxlength < 0 ) return "" ;
		if ( s.length <= maxlength ) return s
		var re = new RegExp( "[\t \r\n]+[^\t \r\n]*$" , "m" ) ;
		var s2 = s.substring( 0 , maxlength ).replace( re , "" ) ;
		if ( s2.length < ( maxlength - 3 ) ) {
			return s2 + "..." ;
		}
		if ( re.test( s2 ) ) return truncate( s2 + "xxx" , maxlength ) ;
		return s2.substring( 0 , maxlength - 3 ) + "..." ;
	}*/
	function innerLightHTML( elem , previouselem , maxlength , islast ) {
		var n = 0 ;
		var s = "" ;
		var b = false ;
		if ( maxlength && maxlength < 0 ) return [ s , n ] ;
		if ( ! elem.nodeType ) return [ s , n ] ;
		if ( elem.nodeType != 1 && elem.nodeType != 3 ) return [ s , n ] ;
		if ( elem.nodeType == 3 ) {
			var appended = truncate( ( elem.nodeValue || "" ) , maxlength || null ) ;
			return [ appended.s.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ) , appended.s.length, appended.b ] ;
		}
		if ( elem.style && elem.style.display && elem.style.display == "none" ) return  [ s , n, b ] ;
		var children = elem.childNodes ;
		var x , res ;
		var nc = children.length ;
		var notemptypreviouselem , elemisempty = true ;
		for ( var i = 0 ; i < nc ; i++ ) {
			x = children[ i ] ;
			res = innerLightHTML( x , notemptypreviouselem , maxlength , i == ( nc-1 ) ) ;
			if ( ! emptyHTMLElement( x ) ) {
				notemptypreviouselem = x ;
				elemisempty = false ;
			}
			s += res[ 0 ] ;
			n += res[ 1 ] ;
			b = b || res[ 2 ] ;
			if ( maxlength ) maxlength -= res[ 1 ] ;
			if ( b ) break ;
		}
		return [ formattag( elem , previouselem , s , elemisempty , islast ) , n, b ] ;
	}
	return innerLightHTML( elemsrc , null , options.maxlength , "container" ) ;
}

/*
function -
function EMAILS
*/

function validemail( x , silent ) { // #1510
	if ( ! x ) return false ;
	x = x.toLowerCase() ;
	var emailFilter = /^[^ @]*[a-z0-9]@[a-z0-9][^ @]*\.[a-z]{2,4}$/;
	var illegalChars = /[\(\)\<\>\,\;\:\\\/\"\[\] \t\r\n]/ ;
	var errorchars = /[áéíóúàèìòùâêîôûäëïöüéèàùç]/ ;

	if ( ! ( emailFilter.test ( x ) ) ) return false ;
	if ( x.match ( illegalChars ) ) return false ;
	if ( x.match ( /\.\./ ) ) return false ;
	if ( ( /%/ ).test( encodeURI( x ) ) ) return false ;
	if ( x.match ( errorchars ) ) {
		if ( ! silent ) q_alert( common_message[ "noaccentinemail" ] + "<br/><br/>" + x) ;
		return false ;
	}
	return true ;
}

function verbosevalidemail( x , defaultmsg ) { // defaultmsg peut remplacer "Adresse e-mail invalide"
	return xverbosevalidemail( x , defaultmsg , false ) ;
}

function validoptionalemail( x , optionalmsg ) {
	if ( ( x == "" ) || ( x == optionalmsg ) ) return true ;
	return validemail( x ) ;
}

function verbosevalidoptionalemail( x , optionalmsg , defaultmsg ) { // defaultmsg peut remplacer "Adresse e-mail invalide"
	return xverbosevalidemail( x , defaultmsg , true , optionalmsg ) ;
}

function xverbosevalidemail( x , defaultmsg , isoptional , optionalmsg ) {
	if ( ( x == "" ) || ( x == optionalmsg ) ) {
		if ( isoptional ) return true ;
		q_alert( common_message[ "noemptyemail" ] ) ;
		return false ;
	}
	if ( validemail( x , true ) ) return true ;
	var themsg = defaultmsg || common_message[ "invalidemail" ] ;
	x = x.toLowerCase() ;
	var illegalChars = /[\(\)\<\>\,\;\:\\\/\"\[\] \t\r\n]/ ;
	var errorchars = /[áéíóúàèìòùâêîôûäëïöüéèàù]/ ;
	if ( /@.*@/.test( x ) ) themsg += "\n\n" + common_message[ "onlyoneemail" ] ;
	else if ( /^( |\t)/.test( x ) ) themsg += "\n\n" + common_message[ "leadingspace" ] ;
	else if ( /( |\t)$/.test( x ) ) themsg += "\n\n" + common_message[ "trailingspace" ] ;
	else if ( /( |\t)/.test( x ) ) themsg += "\n\n" + common_message[ "nospaceinemail" ] ;
	else if ( errorchars.test( x ) ) themsg += "\n\n" + common_message[ "noaccentinemail" ].replace( /%/ , x.match( errorchars)[ 0 ] ) ;
	else if ( /ç/.test( x ) ) themsg += "\n\n" + common_message[ "nocedillainemail" ] ;
	else if ( illegalChars.test( x ) ) themsg += "\n\n" + common_message[ "invalidcharinemail" ].replace( /%/ , x.match( illegalChars)[ 0 ] ) ;
	q_alert( themsg + "<br/><br/>" + x ) ;
	return false ;
}

/*
function -
function DEBUG & MSG
*/

function debug_msg( s ) {
	return ;
	try { console.log( s ) ; }
	catch( e ) {} 
}

function debugmail( ss , options ) {
	try {
		var s = ss || "(pas de message)" ;
		var m = { } ;
		m[ "frommail" ] = ( options && options.frommail ) || "debug@quomodo.com" ;
		m[ "objectmail" ] = ( options && options.objectmail ) || "DEBUG MAIL" ; 
		try { m[ "objectmail" ] += " from " + q_spacename() ; } catch(err) { } ;
		var body = "" ;
		try { body += "Date: " + new Date().toString() + "\r" ; } catch(err) { } ;
		try { body += "Page: " + q_currsvcname() + "\r" ; } catch(err) { } ;
		try { body += "Espace: " + q_spacename() + "\r" ; } catch(err) { } ;
		try { body += "q_space: " + document.mainform.q_space.value + "\r" ; } catch(err) { } ;
		try { body += "memberid: " + memberid + "\r" ; } catch(err) { } ;
		try { body += "firstname: " + members[ memberid ].firstname + "\r" ; } catch(err) { } ;
		try { body += "username: " + members[ memberid ].username + "\r" ; } catch(err) { } ;
		try { body += "currsvcid: " + currsvcid + "\r" ; } catch(err) { } ;
		try { body += "clubprivatedomain: " + clubprivatedomain + "\r" ; } catch(err) {} ;
		try { body += "window.location: " + window.location + "\r" ; } catch(err) { } ;
		try {
			var tmp = window.navigator.userAgent ;
			if ( ( /zh-CN/ ).test( tmp ) ) return ;
			if ( ( /BingPreview/ ).test( tmp ) ) return ;
			body += "navigator: " + tmp + "\r" ;
		} catch(err) {} ;
		if ( /Googlebot/.test( body ) ) return ;
		body += "\rMessage:\r\r" + s + "\r" ;
		m[ "bodymail" ] = body ;
		m[ "tomail" ] = "debug@quomodo.com" ;
		if ( ! window.q_makeweb && ( ! isrealserver() || ( window.clubprivatedomain && ( clubprivatedomain == "otc-f" || clubprivatedomain == "otcf" ) ) ) ) alert( body ) ;
		else {
			document.mainform.mission.value = "sendemailtoto" ;
			q_ajaxsubmitwithservice( "common@" + q_lang , m ) ;
		}
	} catch( err ) { } ;
}

function timemsg( ss , wantsimple ) {
	var simple = wantsimple || false ;
	try {
		var m = { } ;
		if ( simple ) {
			m[ "text" ] = ss || "no message" ;
		} else {
			var body = "" ;
			try { body += "currsvcid: " + currsvcid + "\r" ; } catch(err) { } ;
			try { body += "clubprivatedomain: " + clubprivatedomain + "\r" ; } catch(err) { } ;
			try { body += "navigator: " + window.navigator.userAgent + "\r" ; } catch(err) { } ;
			m[ "text" ] = body + new Date().toString() + ": " + ( ss || "no message" ) ;
		}
		document.mainform.mission.value = "timemsg" ;
		q_ajaxsubmitwithservice( "common@" + q_lang , m ) ;
	} catch( err ) { } ;
}

function quietmsg( x ) {
	if ( ge( "headerinfo" ) ) ge( "headerinfo" ).innerHTML = x ;
}

function msg( x ) {
	if ( ge( "headerinfo" ) ) ge( "headerinfo" ).innerHTML = x ;
	else alert( x ) ;
}

/*
function -
function DATE
*/

function q_isot2date( s, nonewdate ){  // s="2006-01-01T00:00:00Z"
	if ( s ){
		var d ;
		try { d = new Date( s ) ; } catch( err ) {}
		if ( d == "Invalid Date" ) {
			try { d = $.datepicker.parseDate( "dd M yy", s ) ; } catch( err ) {}
		}
		if ( d && d != "Invalid Date" && ! isNaN( d ) ) return d ;
		try {
			var t = s.split( "T" ) ;
			var tt = t[0].split( "-" ) ;
			var ttt = t[1].split( ":" ) ;
			d = new Date() ;
			d.setFullYear( tt[ 0 ] ) ;
			d.setMonth( tt[ 1 ] - 1 ) ;
			d.setDate( tt[ 2 ] ) ;
			var tm = d.getTimezoneOffset()/60 ;
			d.setHours( eval ( ttt[ 0 ] ) - tm ) ;
			d.setMinutes( ttt[ 1 ] ) ;
			if ( d != "Invalid Date" ) return d;
		} catch( err ) {};
	}
	if ( nonewdate ) return false;
	return new Date() ;
}

function q_isot2string( s ){  // s="2006-01-01T00:00:00Z"
	return ddmmyyhhmm( q_isot2date( s ) ) ;
}

function q_date2isot( d ) {
	var y = d.getUTCFullYear() ;
	var m = twodigs( 1 + d.getUTCMonth() ) ;
	var j = twodigs( d.getUTCDate() ) ;
	var h = twodigs( d.getUTCHours() ) ;
	var mi = twodigs( d.getUTCMinutes() ) ;
	var s = twodigs( d.getUTCSeconds() ) ;
	return y + "-" + m + "-" + j + "T" + h + ":" + mi + ":" + s + "Z" ;
}

function ddmmyyhhmm( d ) {
	var c = new Date() ;
	var c0 = new Date(c.getFullYear(), c.getMonth(), c.getDate()); // aujourd'hui minuit temps local
	var c1 = new Date(c.getFullYear(), c.getMonth(), c.getDate()+1); // demain minuit temps local
	var t ;
	t =  twodigs ( d.getDate() ) + '.' + twodigs ( 1 + d.getMonth() ) + '.' + twodigs( d.getFullYear() - 2000 ) ;
	if ( ! ( window.currsvcid && ( /#artema(page|disq)/.test( currsvcid ) ) && q_spacetype() == "qlub" ) ) {
		if ( Math.abs( c0 - d ) <= 86400000 ) t = (d >= c0 ) ? common_message[ "today" ] : common_message[ "yesterday" ] ;
		else if ( ( d > c1 ) && ( ( d - c1 ) <= 86400000 ) ) t = common_message[ "tomorrow" ] ;
	}
	return (t + ", " + twodigs ( d.getHours() ) + ":" + twodigs ( d.getMinutes() ) ) ;
}

/*
function -
function MATHS
*/

function rndab( a , b ) {
	return Math.round( a + ( b - a ) * Math.random() ) ;
}

function xrndab( x ) {
	if ( typeof x == "object" ) return rndab( x[ 0 ] , x[ 1 ] ) ;
	return x ;
}

function rndpx( a , b ) {
	var x = rndab( a , b ) ;
	return ( x + "px" ) ;
}

function xrndpx( x ) {
	return ( xrndab( x ) + "px" ) ;
}

function twodigs( i ) {
	return ( '' + (100 + i ) ).slice( -2 ) ;
}

function threedigs( i ) {
	return ( '' + (1000 + i ) ).slice( -3 ) ;
}

function fixedWidthIntervals( w, g, n ){
	var w0 = Math.round( ( w - ( n-1 ) * g ) / n ) ;
	var gTotal = w - n*w0 ;
	var gm = gTotal / ( n - 1 ) ;
	var g0 = Math.round( gm ) ;
	var s = ( gTotal > ( g0 * ( n - 1 ) ) ) ? 1 : -1 ;
	var x = [] ;
	var gtmp = 0 ;
	for ( var i = 0 ; i < n - 1 ; i ++ ) {
		var gi = g0 ;
		var d1 = Math.abs( ( gtmp + gi ) - ( i+1 ) * gm ) ;
		var d2 = Math.abs( ( gtmp + gi + s ) - ( i+1 ) * gm ) ;
		if ( d2 < d1 ) gi = gi + s ;
		gtmp = gtmp + gi ;
		x.push( gi ) ;
	}
	return { width: w0, gaps: x } ;
}

/*
function -
function MEMBERS
*/

function firstadmin_memberid() {
	for ( var memberid in members ) if ( q_getuserlevel( memberid ) == "admin" ) return memberid ;
	return null ;
}
function isadmin() {
	try { if ( window.web_js_loaded ) return false ; } catch( err ) { } ;
	try { if ( parent.web_js_loaded ) return false ; } catch( err ) { } ;
	try { if ( document.mainform.pagemode.value == "view" ) return false ; } catch( err ) { } ;
	try { if ( parent.document.mainform.pagemode.value == "view" ) return false ; } catch( err ) { } ;
	return true ;
}

function adminalert( s ) {
	if ( isadmin() ) alert( s ) ;
}

function q_displayedusername( minfos ) {
	return q_displayedname( "username" , minfos ) ;
}
function q_displayedname( kind , minfos ) {
	if ( ! minfos ) return common_message[ "undefineduser" ] ;
	var firstname = minfos.firstname ;
	if ( kind == "firstname" ) return ( firstname == undefined ) ? common_message[ "undefineduser" ] : firstname ;
	var username = minfos.username ;
	if ( username == undefined ) return common_message[ "undefineduser" ] ;
	if ( minfos.firstname ) return ( firstname + " " + username ) ;//2013-12-17: nom trop long dans les forums à cause de l'espace insécable
	if ( minfos.civility ) return ( minfos.civility + " " + username ) ;
	return username ;
}

function q_username( m ) {
	return q_membername( "username" , m ) ;
}

function q_membername( kind , m ) {
	if ( typeof m != "string" ) return q_displayedname( kind , m ) ;
	if ( m == "quomodo" ) return "Quomodo" ;
	return q_displayedname( kind , ( window.members ) ? members[ m ] : null ) ;
}

function q_evalmember( m ) {
	var thevalue = q_tmpsortedmembers[ m ].username ; 
	if ( ! thevalue ) return "" ;
	var re = /[A-Z][A-Z][A-Z]+/ ;
	thevalue = re.test( thevalue ) ? re.exec( thevalue )[ 0 ] : thevalue.replace( /^(mr|mme|mlle|mle|melle|m)\.? */i , "" ) ;
	return thevalue.toLowerCase() ;
}

function q_sortmembers( m1 , m2 ) {
	var v1 = q_tmpevalmember( m1 ) ;
	var v2 = q_tmpevalmember( m2 ) ;
	if ( v1 == v2 ) return 0 ;
	if ( v1 > v2 ) return 1 ;
	return -1 ;
}

var q_tmpsortedmembers , q_tmpevalmember ;

function q_sortedmemberids( qmembers , heval ) {
	var themembers = ( qmembers ) ? qmembers : members ;
	var sortedm = [] ;
	var n ;
	for ( var m in themembers ) if ( ( m != "quomodo" ) && ( themembers[ m ] ) ) sortedm.push( m ) ;
	q_tmpsortedmembers = themembers ;
	q_tmpevalmember = ( heval ) ? heval : q_evalmember ;
	sortedm.sort( q_sortmembers ) ;
	return sortedm ;
}

var q_membersupdatehandlers = [] ;

function q_addmembersupdatehandler( h ) { //h = string
	if ( indexOfItem( h , q_membersupdatehandlers ) == -1 ) q_membersupdatehandlers.push( h ) ;
}

function q_membersupdateall() {
	for ( var i = 0 ; i < q_membersupdatehandlers.length ; i++ ) {
		try { eval ( q_membersupdatehandlers[ i ] ).apply ( this , [] ) ; } catch(err) {}
	}
}

function q_getuserlevel( mid , withAnimStatus ){
	if ( ! mid ) mid = memberid ;
	if ( ! mid || ! members || ! members[ mid ] ) return false;
	var userlevel = members[ mid ].userlevel;
	if ( ! withAnimStatus || userlevel != "member" ) return userlevel ;
	var animsvcids = $.map( spacexml.services , function(svc){ if ( ( /#artemapage@/ ).test( svc.id ) && $.inArray( "edit" , svc.accessrights ) != -1 ) return svc.id ; } ) ;
	return ( animsvcids.length == 0 ) ? "member" : "anim" ;
}

/*
function -
function DIVERS
*/

var requiredMajorVersion = 8;
var requiredMinorVersion = 0;
var requiredRevision = 0;
var alerte_once_flash = 0;
var uploaded_files = {} ;

function q_args( args ) {
	if ( args == undefined || args == null ) return [];
	else if ( typeof args == "object" && args.splice ) return args ;
	return [ args ] ;
}
function q_apply( h , args , obj ) {
	if ( ! h ) return ;
	if ( ( typeof h ) == "string" ) h = eval( h ) ;
	return h.apply( obj || this , q_args( args ) ) ;
}
function q_sorf( s ) {
	if ( ( typeof s ) == "string" ) return s ;
	return q_apply( s ) ;
}

function q_keycode( ee ) {
	var e = ee || window.event ;
	if ( ! e ) return null ;
	return e.keyCode || e.which || e.charCode ;
}

/*
function q_pagemode() {
	if ( window.web_js_loaded ) return "web" ;
	if ( window.q_makeweb ) return "makeweb" ;
	try { return document.mainform.pagemode.value ; } catch( err ) { } ;
	if ( window.q_loggedpagemode ) return q_loggedpagemode ;
	return null ;
}
*/

function q_sitemap_getnodefrompath( path, sm, currxml ){
	if ( ! sm ) sm = { items : ( currxml || spacexml ).sitemap } ;
	if ( path.length == 0 ) return sm ;
	var tmppath = q_cloneObject( path ) ;
	var i = tmppath.shift() ;
	return q_sitemap_getnodefrompath( tmppath, sm.items[ i ], currxml ) ;
}

function q_sitemap_getnode( id, sm, withdelete, currxml ){
	var s = false; 
	if ( ! sm ) sm = { items : ( currxml || spacexml ).sitemap } ;
	if ( sm.items ) {
		for ( var i = 0 ; i < sm.items.length ; i++ ) {
			if ( sm.items[ i ].id == id ) return ( withdelete ) ? sm.items.splice( i , 1 )[ 0 ] :  sm.items[ i ] ;
			else {
				var t = q_sitemap_getnode( id, sm.items[ i ], withdelete, currxml ) ;
				if ( t ) s = t ;
			}
		}
	}
	return s; 
}

/*
function q_sitemap_getpath( id, sm , path ){
	var s = false;
	 if ( ! path ) path = [];
	if ( ! sm ) sm = { items : spacexml.sitemap };
	if ( sm.id && sm.id == id ) return path ;
	if ( sm.items ) {
		for ( var i in sm.items ) {
			var newpath = q_cloneObject( path ); 
			newpath.push( parseInt( i, 10 ) ); 
			var t = q_sitemap_getpath( id, sm.items[ i ] , newpath );
			if ( t ) { s = t; break ;}
		}
	}
	return s;
}
*/
function q_sitemap_getpath( id, sm , path, currxml ){
	var s = false;
	 if ( ! path ) path = [];
	if ( ! sm ) {
		var sm = { items : ( currxml || spacexml ).sitemap };
		function constructpath( sm , path ){
			if ( sm.id ) {
				( currxml || spacexml ).sitemap.__paths[ sm.id ] = path ;
				return ;
			}
			if ( sm.items ) {
				for ( var i = 0 ; i < sm.items.length ; i++ ) {
					var newpath = q_cloneObject( path ); 
					newpath.push( i ) ;
					constructpath( sm.items[ i ] , newpath )
				}
			}
		}
		if ( ! ( currxml || spacexml ).sitemap.__paths ) {
			( currxml || spacexml ).sitemap.__paths = {} ;
			constructpath( sm , [] ) ;
		}
		var path = ( currxml || spacexml ).sitemap.__paths[ id ] ;
		if ( ! path ) return false ;
		return [].concat( path ) ;
	}
	if ( sm.id && sm.id == id ) return path ;
	if ( sm.items ) {
		for ( var i = 0 ; i < sm.items.length ; i++ ) {
			var newpath = q_cloneObject( path ); 
			newpath.push( parseInt( i, 10 ) ); 
			var t = q_sitemap_getpath( id, sm.items[ i ] , newpath, currxml );
			if ( t ) { s = t; break ;}
		}
	}
	return s;
}

/*
function q_menufromid( svcid, sm, path ) {
	if ( ! sm ) sm = { items : spacexml.sitemap };
	if ( ! path ) path = q_sitemap_getpath( svcid, sm );
	if ( ! path ) return null ;//forum
	if ( path.length <= 1 ) return sm;
	var i = path.shift();
	return q_menufromid( svcid, sm.items[ i ], path );
}
*/
function q_menufromid( svcid, sm, path, currxml ) {
	if ( ! sm ) {
		var path = q_sitemap_getpath( svcid, null, currxml ) ;
		if ( ! path ) return null ;
		var sm = { items : ( currxml || spacexml ).sitemap } ;
		if ( path.length <= 1 ) return sm ;
		for ( var i = 0 ; i < path.length - 1 ; i++ ) sm = sm.items[ path[ i ] ] ;
		return sm ;
	}
	if ( ! sm ) sm = { items : ( currxml || spacexml ).sitemap };
	if ( ! path ) path = q_sitemap_getpath( svcid, sm, currxml );
	if ( ! path ) return null ;//forum
	if ( path.length <= 1 ) return sm;
	var i = path.shift();
	return q_menufromid( svcid, sm.items[ i ], path, currxml );
}

function q_svcname( svc, bPromise ) {
	function svcname( svc ){
		if ( q_pagemode() == "web" && svc && svc.pagename != undefined ) return svc.pagename;
		if ( svc && svc.name != undefined ) return svc.name;
		if ( svc && svc.shortname != undefined ) return svc.shortname ;	
		return "" ;
	}
	if ( ( typeof svc ) != "string" ) return svcname( svc ) ;
	if ( bPromise ) return function( callback ){
		qpromise_svcfromid( svc ).callback( function( promise ){
			callback( svcname( promise ) ) ;
		} ) ;
	} ;
	return svcname( q_svcfromid( svc ) || q_web_svcfromid( svc ) ) ;
}
function qpromise_svcname( svc ) {
	var v = q_svcname( svc, true ) ;
	if ( typeof v == "function" ) return { callback: v } ;
	return { callback: function( callback ){ callback( v ) ; } } ;
}

function qpromise_spacexmlfromId( spaceid, noWait ){
	return qpromise( "otherspaceright", spaceid, noWait ) ;
}
function q_spacefromid( spaceid ){
	for ( var i = 0 ; i < spacexml.spaces.length ; i++ ){
		if ( spacexml.spaces[ i ].id == spaceid ) return spacexml.spaces[ i ] ;
	}
	return null ;
}
function q_spaceid2svcinfo( spaceid ){
	if ( spacexml.bundleid != "qorp" ) return null ;
	var re = new RegExp( "/[^/]+$" ) ;
	var preurl = ( spacexml.parentspace ) ? "../" : "" ;
	var space = q_spacefromid( spaceid ) ;
	if ( ! space ) return null ;
	return { name : space.name , weblink : preurl + ( ( space.homespace ) ? "" : space.subhost ), noaccess: space.noaccess } ;
}
function q_svcfromstuff( stuffID ) {
	var svcs = spacexml.services || recent_services ;
	if ( ! svcs.__index ) q_svcfromid( currsvcid ) ;// pour initialiser
	return svcs.__stuffindex[ stuffID ] ;
}
function q_svcfromid( svcid, currxml ) {
	if ( ! svcid ) return null ;
	if ( typeof svcid == "object" ) return svcid ;//c'est déjà le svc
	var splittedsvc = svcid.split( "/" ) ;
	if ( splittedsvc.length == 1 ) var svcs = ( currxml || spacexml ).services || recent_services ;
	else {
		svcid = splittedsvc[ 1 ] ;
		var space = q_spacefromid( splittedsvc[ 0 ] ) ;
		if ( ! space || ! space.spacexml ) return null ;
		var svcs = space.spacexml.services ;
	}
	if ( ! svcs ) return null ;
	/*for ( var i = 0 ; i < svcs.length ; i++ ) if ( svcs[ i ].id == svcid ) return svcs[ i ] ;
	return q_spaceid2svcinfo( svcid ) ;*/
	if ( svcs.__index ) {
		if ( svcs.__index[ svcid ] == undefined ) return q_spaceid2svcinfo( svcid ) ;
		return svcs.__index[ svcid ] ;
	}
	svcs.__index = {} ;
	svcs.__stuffindex = {} ;
	for ( var i = 0 ; i < svcs.length ; i++ ) {
		var svc = svcs[ i ] ;
		svcs.__index[ svc.id ] = svc ;
		if ( svc.stuffID ) svcs.__stuffindex[ svc.stuffID ] = svc ;
		
	}
	return q_svcfromid( splittedsvc.join( "/" ), currxml ) ;
}

function q_web_svcfromid( svc ){
	if ( ! window.web_svctopages ) return null;
	for ( var i = 0 ; i < web_svctopages.length ; i++ ) if ( svc == web_svctopages[ i ].id ) return web_svctopages[ i ] ;
	return null ;
}

function q_currsvcjson() {
	return q_svcfromid( currsvcid ) ;
}

function q_currsvcname() {
	return q_svcname( currsvcid ) ;
}

function q_currsvcisweb() {
	return q_svcisweb( currsvcid ) ;
}
function q_svcisweb( svcid, currxml ) {
	var x = q_svcfromid( svcid, currxml ) ;
	if ( ! x ) return false ;
	return ( x.viewaccess == "web" ) ;
}

function q_currsvcishome(){
	return q_svcishome( currsvcid ) ;
}

function q_homesvc( currxml ){
	function iterate( s ){
		if ( ! s.items ) return null ;
		for ( var i = 0 ; i < s.items.length ; i++ ){
			if ( s.items[ i ].id && s.items[ i ].home && s.items[ i ].home == true ) return s.items[ i ] ;
			else {
				var svc = iterate( s.items[ i ] );
				if ( svc ) return svc ;
			}
		}
		return null ;
	}
	var svc = iterate( { items : ( currxml || spacexml ).sitemap } ) ;
	if ( svc ) {
		var svc = q_svcfromid( svc.id, currxml ) ;
		if ( svc ) return svc ;
	}
	if ( ( currxml || spacexml ).services[ 0 ] ) return ( currxml || spacexml ).services[ 0 ] ;
	return null ;
}
function q_homesvcid( currxml ){
	var svc = q_homesvc( currxml ) ;
	if ( svc ) return svc.id ;
	return null ;
}

function q_svcishome( svcid, s ){ // à recopier dans /clients/qlubads0910/scripts/custom.js
	if ( ! s && ! spacexml.sitemap ) return false;
	if ( ! s ) s = { items : spacexml.sitemap };
	if ( ! s.items ) return false;
	for ( var i = 0 ; i < s.items.length ; i++ ){
		if ( s.items[ i ].id && s.items[ i ].id == svcid && s.items[ i ].home && s.items[ i ].home == true ) return true;
		else {
			var b = q_svcishome( svcid, s.items[ i ] ) ;
			if ( b ) return true ;
		}
	}
	return false ;
}

function q_checkaccesstosvc( svcid ) {
	var svcitem = q_svcfromid( svcid ) ;
	var splittedsvc = svcid.split( "/" ) ;
	if ( splittedsvc.length > 1 && q_spacefromid( splittedsvc[ 0 ] ).noaccess ) return false ;
	if ( ! svcitem ) return false ;
	return ( serviceaccess( svcitem ) != "denied" ) ;
}

function serviceaccess( svcitem ) {// item de spacexml.services
	if ( svcitem.noaccess ) return "denied" ;
	if ( svcitem.useraccess ) return svcitem.useraccess ;
	if ( window.members && members[ memberid ] ) return svcitem[ q_getuserlevel( memberid ) + "access" ] ;
	return true ; // if called from a web page
}

function q_spacetype( ) {
	var thespacetype = q_spacebundle() ;
	if ( thespacetype == "qorp" ) thespacetype = "qlub" ;
	return thespacetype ;
}

function q_spacename() {
	if ( q_spaceparam( "infos" ) && q_spaceparam( "infos" ).name != undefined ) return q_spaceparam( "infos" ).name ;
	return ( ( spacexml.name ) ? spacexml.name : "" );//ancienne pages webbées
}
function q_spacebundle() {
	return q_spaceparam( "bundleid" ) || q_spaceparam( "right" ) || "qlub" ;
}
function q_spaceclient( ) {
	return q_spaceparam( "client" , "" ) ;
}

function q_setspaceparam( key , v ) {
	if ( ! window.spacexml ) return ;
	spacexml[ key ] = v ;
}
function q_spaceparam( key , emptyresult ) {
	var x = ( emptyresult == undefined ) ? null : emptyresult ;
	if ( window.spacexml ) return ( spacexml[ key ] == undefined ) ? x : spacexml[ key ] ; // pour respecter la chaîne vide
	return x ;
}

function q_addspaceparams( json ) {
	if ( ! window.spacexml ) spacexml = {} ;
	for ( var x in json ) spacexml[ x ] = json[ x ] ;
}

function q_isstaticpage() {
	return ( ! document.mainform.q_space || ! document.mainform.q_space.value ) ;
}

/*
function -
*/

function writecurrsvcname( ) {
	if (! spacexml.services ) return;
	$( "#currservicename" ).html( q_currsvcname() ) ;
}

function writetitleandname( ) {
	if ( q_isstaticpage() ) $( "#welcome_username" ).remove();
	else {
		var un = q_username( memberid ) ;
		document.title = un + " " + common_message[ "on" ] + " " + q_spacename() ;
		$( "#welcome_username" ).html( un + " " );
	}
	logouthref() ;
	writecurrsvcname() ;
}

function userstaysineditmode() {
	if ( ! window.qsn_currstate ) return false ;
	if ( qsn_currstate != "edit" ) return false ;
	if ( confirm( common_message[ "quittingeditmode" ] ) ) return false ;
	return true ;
}

function backtoservice() {
	if ( ! q_ready ) return false ;
	if ( userstaysineditmode() ) return false ;
	document.mainform.mission.value = "back" ;
	q_submit() ;
	return false ;
}

function openhomepage() {
	//document.mainform.target = '_self' ;
	if ( userstaysineditmode() ) return false ;
	document.mainform.mission.value = 'openhomepage' ;
	document.mainform.filename.value = 'index.html' ;
	q_submit() ;
	return false ;
}

function openspace( x , submitfn ) {
	if ( userstaysineditmode() ) return false ;
	document.mainform.mission.value = 'openspace' ;
	document.mainform.calledspace.value = x ;
	document.mainform.calledservice.value = "" ;
	document.mainform.calledfilename.value = "" ;
	( submitfn || q_submit )() ;
	return false ;
}

function opensnbrowser() {
	return opencalledservice( "snbrowser@" + q_lang , "snbrowser.html" ) ;
}

function openprofile() {
	return openservice( "subscribe@" + q_lang , "profile.html" ) ;
}

function opengallery() {
	return opencalledservice( "gallery@" + q_lang , "gallery.html" ) ;
}

function servicefilename( svc ) {
	if ( ! window.rights_record ) return "index.html" ;
	if ( ! rights_record[ "spaceright" ] ) return "index.html" ;
	var sr = rights_record[ "spaceright" ][ q_spacebundle() ] ;
	if ( ! sr ) return "index.html" ;
	var splittedsvc = svc.split( "/" ) ;
	if ( splittedsvc[ 1 ] ) svc = splittedsvc[ 1 ] ;
	svc = svc.replace( /^#[0-9]+/ , "" ).split( "@" )[ 0 ] + "@intl" ;
	if ( ( sr.services ) && ( sr.services[ svc ] ) && ( sr.services[ svc ].filename ) ) return sr.services[ svc ].filename ;
	return "index.html" ;
}

function openservice( svc , filename1 , forcesubmit, noalert ) {
	if ( $( "#accept-cookies" ).length > 0 ) q_acceptCookies( true ) ;
	var spaceidRe = new RegExp( "^[0-9a-fA-F-]+$" ) ;
	if ( ( spaceidRe ).test( svc ) ) {
		if ( ! q_spacefromid( svc ).spacexml ) {
			q_fsm_wait() ;
			var sxppty = "otherspaceright?id=" + svc ;
			return q_ajaxgetppty( sxppty, function(){
				q_fsm_delete() ;
				openservice( svc + "/" + q_homesvcid( q_spacefromid( svc ).spacexml ), filename1 , forcesubmit, noalert ) ;
			} ) ;
		} else return openservice( svc + "/" + q_homesvcid( q_spacefromid( svc ).spacexml ), filename1 , forcesubmit, noalert ) ;
	}
	var popupRe = new RegExp( "^popup:" ) ;
	var wantPopup = ( popupRe ).test( svc ) ;
	var xsvc = svc.replace( popupRe , "" ) ;
	var splittedsvc = xsvc.split( "/" ) ;
	if ( splittedsvc.length > 1 && ! q_spacefromid( splittedsvc[ 0 ] ).spacexml ) {
		var sxppty = "otherspaceright?id=" + splittedsvc[ 0 ] ;
		return q_ajaxgetppty( sxppty, function(){ openservice( svc , filename1 , true, noalert ) ; } ) ;
	}
	if ( window.q_checkaccesstosvc && ! q_checkaccesstosvc( xsvc ) ) {
		if ( splittedsvc.length > 1 && q_svcisweb( xsvc ) ) {
			var url = "http://" + ( ( window.clubhost ) ? clubhost : ( window.location.host + "/" + window.clubprivatedomain ) ) + "/" + q_svcfromid( xsvc ).weblink ;
			return q_confirm( common_message[ "svcaccessdeniedbutweb" ].replace( /%s/g, url ) , {
				callback : function() { window.open( url ) ; } ,
				buttons : [ {} , { label: common_message[ "svcaccessdeniedbutweb_visitbtn" ] } ]
			} ) ;
		}
		if ( ! noalert ) q_alert( common_message[ "svcaccessdenied" ] ) ;
		return ;
	}
	var svcitem = q_svcfromid( xsvc ) ;
	if ( svcitem && svcitem.status == "duplicating" ) return q_alert( common_message[ "importInProgress" ] ) ;
	if ( userstaysineditmode() ) return false ;
	if ( ! wantPopup && ! forcesubmit && ! q_readytosubmit( false ) ) {
		queuedData.push( function(){ openservice( svc , filename1 , true ) ; } ) ;
		return false ;
	}
	var filename = ( filename1 == undefined ) ? servicefilename( xsvc ) : filename1 ;
	if ( ! wantPopup && /called@/.test( filename ) ) return opencalledservice( svc , filename ) ;
	function getthenset( json ){
		var saved = {} ;
		for ( var k in json ){
			saved[ k ] = document.mainform[ k ].value ;
			document.mainform[ k ].value = json[ k ] ;
		}
		return saved ;
	}
	var o = { callerservice: document.mainform.service.value , callerfilename: document.mainform.filename.value , mission: "openservicepage" , filename: filename } ;
	if ( splittedsvc.length > 1 ) {
		o.service = splittedsvc[ 1 ].replace( /@intl/ , "@" + q_lang ) ;
		o.q_space = splittedsvc[ 0 ] ;
	} else o.service = xsvc.replace( /@intl/ , "@" + q_lang ) ;
	var savedMainform = getthenset( o ) ;
	if ( wantPopup || quomodo.page.isPopup ) {
		$.extend( savedMainform , getthenset( { pagemode: "view" } ) ) ;
		var src = "/cgi-bin/cgismile?" + requiredhiddendata( [ "callerservice" , "callerfilename" , "pagemode" ] ) ;
		getthenset( savedMainform ) ;
		if ( wantPopup ) quomodo.fsm.popup( src ) ;
		else quomodo.page.href( src ) ;
		return false ;
	}
	if ( q_getuserlevel( memberid ) != "admin" ) {
		if ( ! ( /#artemapage@/ ).test( xsvc ) ) document.mainform.pagemode.value = "edit" ;//2012-03-14, vh : on force le mode "edit", le mode "view" sera forcé si on n'y a pas accès
		else document.mainform.pagemode.value = q_pagemode( true ) ;//2012-03-14, vh : on force le mode "zone membre"/"zone edition"
	}
	if ( q_pagemode() == "edit" ) q_fsm_wait();
	q_submit( forcesubmit ) ;
	return false ;
}

function opencalledservice( svc , filename1 ) {
	if ( userstaysineditmode() ) return false ;
	if ( ! q_readytosubmit( false ) ) return false ;
	var filename = ( filename1 === undefined ) ? servicefilename( svc ) : filename1 ;
	filename = filename.replace( /called@/ , "" ) ;
	if ( ! (/\//).test( document.mainform.callerservice.value ) ) {
		document.mainform.callerservice.value = "" ;
		document.mainform.callerfilename.value = "" ;
	}
	document.mainform.mission.value = "openservicepage" ;
	document.mainform.calledservice.value = svc.replace( /@intl/ , "@" + q_lang ) ;
	document.mainform.calledfilename.value = filename ;
	q_submit() ;
	return false ;
}

function opensubscribe( sharing1 ) {
	if ( userstaysineditmode() ) return false ;
	var sharing = sharing1 === undefined ?  true : sharing1 ;
	document.mainform.mission.value = "openservicepage" ;
	if ( document.mainform.canuserid ) document.mainform.canuserid.parentNode.removeChild( document.mainform.canuserid ) ;
	document.mainform.calledfilename.value = ( sharing ) ? "index.html" : "subscribe.html" ;
	document.mainform.calledservice.value = "subscribe@" + q_lang ;
	q_submit() ;
	return false ;
}

function openadminspace() {
	if ( userstaysineditmode() ) return false ;
	document.mainform.mission.value = "openservicepage" ;
	if ( document.mainform.canuserid ) document.mainform.canuserid.parentNode.removeChild( document.mainform.canuserid ) ;
	document.mainform.calledfilename.value = "adminspace.html" ;
	document.mainform.calledservice.value = "subscribe@" + q_lang ;
	q_submit() ;
	return false ;
}

function createnewspace() {
	if ( userstaysineditmode() ) return false ;
	document.mainform.mission.value = "openservicepage" ;
	if ( document.mainform.canuserid ) document.mainform.canuserid.parentNode.removeChild( document.mainform.canuserid ) ;
	document.mainform.calledfilename.value = "newspace.html" ;
	document.mainform.calledservice.value = "subscribe@" + q_lang ;
	q_submit() ;
	return false ;
}

function defaultpagename( servicename ) {
	var d = new Date() ;
	return ( servicename + " " + d.getDate() + "/" + (1 + d.getMonth()) + "/" + ( '' + d.getFullYear() ).substring(2) ) ;
}

/*
function -
*/

function checknewpageservice( serviceid , behavior , family, servicename ) {
	var right = q_spacebundle() ;
	var maxpages = rights_record [ "spaceright" ] [ right ] [ "maxpages" ] ;
	var currpages = 0 ;
	var isinteractive = ( behavior == "interactive" ) ;
	if ( isinteractive ) {
		var maxboards = rights_record [ "spaceright" ] [ right ] [ "maxboards" ] ;
		var currboards = 0 ;
	}
	for ( var svc in rights_record [ "currspaceservices" ] ) {
		if ( rights_record [ "currspaceservices" ] [ svc ] [ "family" ] == "pages" ) { 
			currpages++ ;
			if ( ( isinteractive ) && ( rights_record [ "currspaceservices" ] [ svc ] [ "pagebehavior" ] == "interactive" ) ) currboards++ ;
		}
	}
	return ( family == "sad" ) || ( ( currpages < maxpages ) && ( ( ! isinteractive ) || ( currboards < maxboards ) ) ) ;
}

function createnewpageservice_callback ( r ) {
	if ( r.newpageerror ) {
		alert ( common_message [ "not enough rights" ].replace ( /%s/ , r.servicename ) ) ;
		return ;
	}
	openservice( r.newserviceid , r.filename ) ;
}

function createnewpageservice( svcref , message , defaultanswer , callback ) { // svc = string ou { svcid : "#pm@fr" , [ groupname : "mongroupe" ] }
	return xcreatenewpageservice( svcref , message , defaultanswer , {} , callback ) ;
}

function xcreatenewpageservice( svcref , message , defaultanswer , ajaxparams , callback ) { // svc = string ou { svcid : "#pm@fr" , [ groupname : "mongroupe" ] }
	qprompt_newpage( message , defaultanswer , "xcreatenewpageservice_promptdone" , [ svcref , ajaxparams , callback ] ) ;
//	qprompt ( message , "xcreatenewpageservice_promptdone" , { "default" : defaultanswer , "args" : [ false , svcref , ajaxparams , callback ] } ) ;
	return false ;
	if ( newname == null ) return false ;
	var oldname, taken;
	for ( ; ; ) {
		taken = false ;
		for ( var svc in rights_record [ "currspaceservices" ] ) {
			if ( rights_record [ "currspaceservices" ] [ svc ] [ "shortname" ] == newname ) {
				taken = true ;
				break ;
			}
		}
		if ( ! taken ) break ;
		oldname = newname ;
		newname = prompt ( common_message [ "taken" ].replace ( /%s/ , newname ) , newname ) ;
		if ( newname == null ) return false ;
		if ( newname == oldname ) break ;
	}
	document.mainform.mission.value = "newpage" ;
	if ( ! window.tabsdict ) tabsdict = { "homepage@intl" : "home" , "#schooltt@intl" : "tt" , "#pm@intl" : "pm" , "#artemadisq@intl" : "disq" } ;
	var serviceid = ( ( typeof svcref == "string" ) ? svcref : svcref.svcid ).split( "/" ) ;
	var r = ( ajaxparams ) ? ajaxparams : {} ;
	r.pagekind = serviceid[ 0 ] ;
	r.pagekindcode = tabsdict [ serviceid[ 0 ].replace( /@.*$/ , "@intl" ) ] ;
	r.pagename = newname ;
	if ( serviceid[ 1 ] ) r.pagefile = serviceid[ 1 ] ;
	if ( ( typeof svcref != "string" ) && ( svcref.groupname ) ) r.groupname = svcref.groupname ;
	q_ajaxsubmit ( r , ( callback ) ? callback : createnewpageservice_callback ) ;
	return false ;
}

function xcreatenewpageservice_promptdone( newname , svcref , ajaxparams , callback ) {
	document.mainform.mission.value = "newpage" ;
	if ( ! window.tabsdict ) tabsdict = { "homepage@intl" : "home" , "#schooltt@intl" : "tt" , "#pm@intl" : "pm" , "#artemadisq@intl" : "disq" , "#artemapage@intl" : "pages" } ;
	var serviceid = ( ( typeof svcref == "string" ) ? svcref : svcref.svcid ).split( "/" ) ;
	var r = ( ajaxparams ) ? ajaxparams : {} ;
	r.pagekind = serviceid[ 0 ] ;
	r.pagekindcode = tabsdict [ serviceid[ 0 ].replace( /@.*$/ , "@intl" ) ] ;
	r.pagename = newname ;
	if ( serviceid[ 1 ] ) r.pagefile = serviceid[ 1 ] ;
	if ( ( typeof svcref != "string" ) && ( svcref.groupname ) ) r.groupname = svcref.groupname ;
	q_ajaxsubmit ( r , ( callback ) ? callback : createnewpageservice_callback ) ;
}

function qprompt_newpage( message , defaultanswer , callback , params ) {
	qprompt( message , "qprompt_newpage_done" , { "default" : defaultanswer , "args" : [ false , callback , params ] , "emptyvalue" : false , "maxlength" : "120" } ) ;
}

function qprompt_newpage_done( newname , oldname , callback , params ) {
	if ( newname == null ) return false ;
	if ( oldname != newname ) {
		var taken = false ;
		for ( var svc in rights_record [ "currspaceservices" ] ) {
			if ( rights_record [ "currspaceservices" ] [ svc ] [ "shortname" ] == newname ) {
				taken = true ;
				break ;
			}
		}
		if ( taken ) {
			qprompt( common_message [ "taken" ].replace ( /%s/ , newname ) , "qprompt_newpage_done" , { "default" : newname , "args" : [ newname , callback , params ] , "emptyvalue" : false } ) ;
			return ;
		}
	}
	eval( callback ).apply( this , ( params ) ? [ newname ].concat( params ) : [ newname ] ) ;
}

function logouthref() {
	if ( ! ge( "logout_elem" ) ) return ;
	var sites = "club-quomodo.com, club-quomodo.fr, club.quomodo.com, club2.quomodo.com, club1.quomodo.com, clubquomodo.com, clubquomodo.fr, fffootball.fr, ffrugby.fr, quomodo-club.com, quomodo-club.fr, quomodoclub.com, quomodoclub.fr, sites.quomodo.com, localhost".split( ", ") ;
	var host = location.hostname.replace( /^www\./ , "" ) ;
	if ( indexOfItem( host , sites ) != -1 ) ge( "logout_elem" ).href = window.q_logouturl || "/" ;
	else if ( window.q_logouturl && host == "quomodo.com" ) ge( "logout_elem" ).href = "http://sites.quomodo.com" + window.q_logouturl ;
	else if ( window.q_logouturl && host == "beta2.quomodo.com" ) ge( "logout_elem" ).href = "http://club2.quomodo.com" + window.q_logouturl ;
	else ge( "logout_elem" ).href = "http://" + location.hostname;
}

function logout( target ) {
	if ( userstaysineditmode() ) return false ;
	document.mainform.mission.value = 'logout' ;
	if ( target ) return q_ajaxsubmitwithservice( "common@" + q_lang , {} , logout_done , [ target ] ) ;
	q_ready = true ;
	q_submit() ;
	return false ;
}

function logout_done( x , target ) {
	window.location.href = ( ( typeof target ) == "string" ) ? target : target.href ;
}

function selectlanguage( lang ) {
	setcookie ( 'lang' , lang , 365 ) ;
	if ( document.mainform.sessionid.value == "" ) return true ;
	document.mainform.mission.value = "openservicepage" ;
	document.mainform.service.value = document.mainform.service.value.split( "@" )[ 0 ] + "@" + lang ;
	q_submit() ;
	return false ;
}

/*
function -
function FILES
*/

function q_getuploadid( file ){
	if ( ! file ) return; 
	if ( file.newuploadid ) return file.newuploadid;
	else if ( file.uploadid ) return file.uploadid;
	else if ( file.id ) return file.id;
	else if ( file.filename ) return file.filename.replace( /^uploads(\/[^\/]+)?\/([0-9]+)\/.+$/, "$2" );
	else return "";
}

function q_smartbytes( n , s ) {
	if ( n  < 100 ) return ( ""+( Math.round( 10 * n ) / 10 ) ).replace ( /\.0/ , "" ).replace ( /\./ , common_message [ "decsep" ] ) + common_message[ s ] ; 
	return "" + Math.round ( n ) + common_message[ s ] ;
}

function q_smart_filesize( k ) {
	if ( k < 1024 ) return ( "" + k + common_message[ "bytesondisk" ] ) ; 
	k /= 1024 ;
	if ( k < 1024 ) return q_smartbytes( k , "kbondisk" ) ;
	k /= 1024 ; 
	if ( k < 1024 ) return q_smartbytes( k , "mbondisk" ) ;
	return q_smartbytes( k/1024 , "gbondisk" ) ;
}

function getmaxmb() {
	try { return q_spaceparam( "maxmb" ); }
	catch(err) { return 1 ; }
}

/*
function -
*/

function switch_tab( tabscontainer, x, anim ) {
//	if ( /_open/.test( x.className ) ) return ;
	var tabref = /([^ ]+)_title_(mouseover|open|closed)/.exec( x.className )[1] ;
	var tabcontent = gebcn( x.parentNode, tabref + "_content" ) ;
	if ( /_open/.test( x.className ) ) {
		tabcontent.style.display = "none" ;
		x.className = x.className.replace( /_open/ , "_closed" ) ;
		q_innerHTML( gebcn( x, "arrow") , "►" );
		unselect() ;
		return ;
	}

	function dounrolldiv( x, h ) {
		var div = ge( x ) ;
		var currh = parseInt( div.style.height ) ;
		if ( currh < h ) {
			div.style.height = currh + 25 + "px" ;
			setTimeout( function () { dounrolldiv( x, h ) ; } , 5 ) ;
		} else {
			div.style.height = "" ;
			div.id = "" ;
		}
	}

	var tabs = getElementsByClassName( ge( tabscontainer ), tabref + "_content" ) ;
	for ( var i=0; i<tabs.length; i++ ) {
		if ( tabs[ i ] == tabcontent ) {
			x.className = x.className.replace( /_(mouseover|closed|open)/, "_open" ) ;
			q_innerHTML( gebcn( x, "arrow") , "▼" );
			tabcontent.style.display = "block" ;
			if ( ( anim ) && ( anim == true ) ) {
				var h = tabcontent.offsetHeight + 15 ;
				tabcontent.style.height = "0px" ;
				tabcontent.id = "unrolltempid" ;
				dounrolldiv( "unrolltempid", h ) ;
			}
		} else {
			tabs[ i ].style.display = "none" ;
			var tabtitle = gebcn( tabs[ i ].parentNode, tabref + "_title_open" ) ;
			if ( tabtitle ){ 
				tabtitle.className = tabtitle.className.replace( /_(mouseover|closed|open)/, "_closed" ) ;
				q_innerHTML( gebcn( tabtitle, "arrow") , "►" );
			}
		}
	}
	unselect() ;
	if ( window.qsn_currstate == "edit" ) qsn_initdisplaysetting() ;
}

function unselect() {
	try { if( document.execCommand ) document.execCommand("Unselect", false, null) ; } catch ( err ) {} ; 
	return false ;
}

function q_checkimgextensionfile( x ) {
	if ( typeof x == 'string' ) x = getelement ( x ) ;
	var t = x.value.split(".") ;
	if ( t.length == 1 ) return true ;
	var theexts = [ "png" , "gif" , "jpg" , "jpeg" , "ico", "PNG" , "GIF" , "JPG" , "JPEG" , "ICO" , "tiff" , "TIFF" , "bmp" , "BMP" ] ;
	return ( indexOfItem( t[ t.length - 1 ] , theexts ) != -1 ) ;
}

function q_changebackground( oldbg , newbg ) { 
	var divs = getElementsByClassName( document.body , oldbg ) ;
	var re = new RegExp( "\\b" + oldbg + "\\b" ) ;
	for( var i = 0 ; i < divs.length ; i++ ) divs[ i ].className = divs[ i ].className.replace( re , newbg ) ;
}

function clearsel() {
	var sel ;
	if(document.selection && document.selection.empty){ document.selection.empty() ; }
	else if(window.getSelection) {
		sel=window.getSelection();
		if(sel && sel.removeAllRanges) sel.removeAllRanges() ;
		else unselect();
	}
}

var q_mbchangedhandlers = [] ;

function q_addmbchangedhandler( h ) { //h = string
	if ( indexOfItem( h , q_mbchangedhandlers ) == -1 ) q_mbchangedhandlers.push( h ) ;
}

function q_mbchangedall() {
	for ( var i = 0 ; i < q_mbchangedhandlers.length ; i++ ) {
		try { eval ( q_mbchangedhandlers[ i ] ).apply ( this , [] ) ; } catch(err) {}
	}
}

function q_fname( f ) {
	if ( ! f ) return "" ;
	var fname = f.toString().split ( "\n" ) ;
	return fname[ 0 ].replace( /function ([^ ^(]+).*/ , "$1" ) ;
}

function qsn_suppressnotecontaining ( s ) {
	var divs = getElementsByClassName ( document.body , "container" ) ;
	for ( var i = 0 ; i < divs.length ; i++ ) {
		var div = divs [ i ] ;
		if ( ( new RegExp ( s ) ).test ( div.innerHTML ) ) {
			if ( confirm ( "Found \"" + s + "\" in note " + i + " out of " + divs.length + ". Delete?" ) ) qsn_suppressnote ( div ) ;
		}
	}
}

function q_setclass ( theclass , elem , wantset ) {
	if ( elem.splice) {
		for ( var i = 0 ; i < elem.length ; i++ ) q_setclass( theclass , elem[ i ] , wantset ) ;
		return ;
	}
	var cl = elem.className ;
	var re = new RegExp( "\\b" + theclass + "\\b" ) ;
	var reg = new RegExp( "\\b" + theclass + "\\b" , "g" ) ;
	var clset = re.test(cl) ;
	if ( ( wantset ) && ( ! clset ) ) elem.className = cl + ' ' + theclass ;
	if ( ( ! wantset ) && ( clset ) ) elem.className = cl.replace( reg , "" ).replace(/ +/g," ") ;
}

function qa_elems( x ) {
	if ( typeof x == "string" ) return [ q_elems[ x ] ] ;
	var y = [] ;
	for ( var i = 0 ; i < x.length ; i++ ) y.push( q_elems[ x[ i ] ] ) ;
	return y ;
}

if ( window.q_lang ) q_elems[ "qprompt" ] = {
	id : "qprompt_elem" ,
	urls : [
		"/services/qorg/scripts/qprompt_msgs_" + q_lang + ".js" ,
		"/services/qorg/scripts/qprompt.js" ,
		"/services/qorg/style/qprompt.css" ,
		"/services/qorg/qprompt_" + q_lang + ".html"
	] ,
	dynh : "qprompt_dynload"
} ;

function qprompt( s , callback , params ) {
	var thedata = { "callback" : callback , "title" : "", "prompt" : "" } ;
	if ( typeof s == "string" ) thedata.prompt = s ;
	else {
		if ( s.length == 1 ) thedata.prompt = s[ 0 ] ;
		else {
			thedata.title = s[ 0 ] ;
			thedata.prompt = s[ 1 ] ;
		}
	}
	q_cloneObject ( params , thedata ) ;
	var qorgdir = "/services/qorg/" ;
	q_include( q_elems[ "qprompt" ] , "qprompt_reveal" , [ thedata ] ) ;
}

function isiniframe() {
	return ( parent.window != window ) ;
}

function iframeinparent() {
	var parentframes = parent.document.getElementsByTagName( "IFRAME" ) ;
	for ( var j = 0 ; j < parentframes.length ; j++ ) {
		if ( ( parentframes[ j ].contentWindow == window ) ) return parentframes[ j ] ;
	}
	return null ;
}

/*
function -
function PRINT & MAIL
*/

function q_printThis( content ){
	var html = "<html>";
	html +=  "<head>";
	$( "link" ).each( function() { html += "<link type='text/css' rel='stylesheet' href='" + $( this ).attr( "href" ) + "' />"; } );
	html += '<style type="text/css">@media print{ .q_printthis_header{ display : none; } } </style>';
	html += '</head>';
	html += '<body style="background-image:none;background-color:white; font-size:11px;color:#333;">';
	html += '<div class="q_printthis_header" align="center">';
	html += common_message[ "q_printthis_header" ] ;
	html += '<br/><input type="button" onclick="javascript:window.print();" value="Imprimer"/>' ;
	//html += '<br/><a href="javascript:window.print();return false;">Imprimer</a>' ;
	html += '</div>';
	html += '<div class="q_printthis_div">' + content + '</div>' ;
//	html += '<div class="q_printthis_sign" align="right">' + common_message[ "q_printthis_sign" ] + '</div>'; 
	
	var newWin = window.open( common_message[ "q_printthis_title" ] , '_blank', 'width=700,height=600,location=no,menubar=no,status=no,toolbar=no,directories=no,scrollbars=yes' ); 
	newWin.document.open(); 
	newWin.document.write( html );
	//newWin.document.writeln("<script>window.print()</"+"script>");
	newWin.document.writeln("</body></html>");
	newWin.document.close();
	newWin.print();
	//setTimeout( function(){ newWin.close(); } , 10 ); 
}


function q_mailThis( content ){
	var div = $( '<div class="q_mailthis_div" align="left"></div>' )
		.append( '<div align="left">' + common_message[ "q_mailthis_to" ] + '</div>' )
		.append( '<input type="email" class="q_mailthis_tomail"/><br/><br/>' )
		.append( '<div align="left">' + common_message[ "q_mailthis_from" ] + '</div>' )
		.append( '<input type="email" class="q_mailthis_frommail"/><br/><br/>' )
		.append( '<div align="left">' + common_message[ "q_mailthis_message" ] + '</div>' )
		.append( '<textarea class="q_mailthis_message"></textarea>' );
	
	q_fsm_reveal( {
		src : div.get(0),
		title : common_message[ "q_mailthis_title" ],
		buttons : [
			{ label : common_message[ "close" ], icon : "adminmenu sprite_cancel_32", onclick : function(){ q_fsm_delete(); } },
			{ label : common_message[ "q_mailthis_send" ], icon : "adminmenu sprite_diflist_32", onclick : function(){ 
				var div = q_fsm_currentblock();
				
				var thefrom = $( ".q_mailthis_frommail", div ).val();
				if ( ! validemail( thefrom ) ) return q_alert( common_message[ "q_mailthis_invalidfrom" ] );
				
				var theto = $( ".q_mailthis_tomail", div ).val().split( "," );
				theto = $.map( theto, function( v ){ if ( validemail( v ) ) return v; } );
				if ( ! theto.length ) return q_alert( common_message[ "q_mailthis_invalidto" ] );

				var thebody = "<html><body>" ;
				if ( $.trim( $( ".q_mailthis_message", div ).val() ) ) thebody += $( ".q_mailthis_message", div ).val().replace( /\n|\r/g , "<br/>" ) + "<br/><br/>----<br/>" ;
				thebody += content ;
				thebody += common_message[ "q_mailthis_Qsignature" ] ;
				thebody += "</body></html>" ;
				var r = { 
					finalizebody : true,
					frommail : thefrom,
					objectmail : common_message[ "q_mailthis_object" ],
					bodymail : thebody, 
					tomail : theto,
					bccquomodo: false,
					bccmail : thefrom
				} ;
				
				q_fsm_wait();
				document.mainform.mission.value = "sendemailtoto";
				q_ajaxsubmitwithservice( "common@" + q_lang, r, function( x ){
					q_fsm_delete();
					if ( x.mailsent ) {
						q_fsm_delete();
						q_bubble( common_message[ "q_mailthis_sent" ].replace( "%nb%", x.mailsent ) );
					} else q_alert( common_message[ "q_mailthis_notsent" ] );
				} );
			} }
		]
	} );
}

/*
function -
function GOOGLE ANALYTICS
*/

function q_insertGA( clientcode ){
	if ( ! isrealserver() ) return;
	var _gaq = _gaq || [];
	// Code Quomodo
	if ( ! window.pageTracker ) {	
		_gaq.push(['_setAccount', '"UA-5864364-1']);
		_gaq.push(['_setDomainName', 'none']);
		_gaq.push(['_setAllowLinker', true]);
		_gaq.push(['_trackPageview']);
		
		// Nouveau code, l'ancien va ss doute disparaitre
		_gaq.push(['_setAccount', '"UA-5864364-4']);
		_gaq.push(['_setDomainName', 'none']);
		_gaq.push(['_setAllowLinker', true]);
		_gaq.push(['_trackPageview']);
	}
	// Code Client
	if ( clientcode && ! window.pageTracker2 ){
		_gaq.push(['client._setAccount', clientcode]);
		_gaq.push(['client._trackPageview']);
	}

	(function() {
		var ga = document.createElement('script'); 
		ga.type = 'text/javascript'; 
		ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0];
		s.parentNode.insertBefore(ga, s);
	})();
}

/*
function -
function FLASH
*/

/*	SWFObject v2.2 <http://code.google.com/p/swfobject/> 
	is released under the MIT License <http://www.opensource.org/licenses/mit-license.php> 
*/
var swfobject=function(){var D="undefined",r="object",S="Shockwave Flash",W="ShockwaveFlash.ShockwaveFlash",q="application/x-shockwave-flash",R="SWFObjectExprInst",x="onreadystatechange",O=window,j=document,t=navigator,T=false,U=[h],o=[],N=[],I=[],l,Q,E,B,J=false,a=false,n,G,m=true,M=function(){var aa=typeof j.getElementById!=D&&typeof j.getElementsByTagName!=D&&typeof j.createElement!=D,ah=t.userAgent.toLowerCase(),Y=t.platform.toLowerCase(),ae=Y?/win/.test(Y):/win/.test(ah),ac=Y?/mac/.test(Y):/mac/.test(ah),af=/webkit/.test(ah)?parseFloat(ah.replace(/^.*webkit\/(\d+(\.\d+)?).*$/,"$1")):false,X=!+"\v1",ag=[0,0,0],ab=null;if(typeof t.plugins!=D&&typeof t.plugins[S]==r){ab=t.plugins[S].description;if(ab&&!(typeof t.mimeTypes!=D&&t.mimeTypes[q]&&!t.mimeTypes[q].enabledPlugin)){T=true;X=false;ab=ab.replace(/^.*\s+(\S+\s+\S+$)/,"$1");ag[0]=parseInt(ab.replace(/^(.*)\..*$/,"$1"),10);ag[1]=parseInt(ab.replace(/^.*\.(.*)\s.*$/,"$1"),10);ag[2]=/[a-zA-Z]/.test(ab)?parseInt(ab.replace(/^.*[a-zA-Z]+(.*)$/,"$1"),10):0}}else{if(typeof O.ActiveXObject!=D){try{var ad=new ActiveXObject(W);if(ad){ab=ad.GetVariable("$version");if(ab){X=true;ab=ab.split(" ")[1].split(",");ag=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}}catch(Z){}}}return{w3:aa,pv:ag,wk:af,ie:X,win:ae,mac:ac}}(),k=function(){if(!M.w3){return}if((typeof j.readyState!=D&&j.readyState=="complete")||(typeof j.readyState==D&&(j.getElementsByTagName("body")[0]||j.body))){f()}if(!J){if(typeof j.addEventListener!=D){j.addEventListener("DOMContentLoaded",f,false)}if(M.ie&&M.win){j.attachEvent(x,function(){if(j.readyState=="complete"){j.detachEvent(x,arguments.callee);f()}});if(O==top){(function(){if(J){return}try{j.documentElement.doScroll("left")}catch(X){setTimeout(arguments.callee,0);return}f()})()}}if(M.wk){(function(){if(J){return}if(!/loaded|complete/.test(j.readyState)){setTimeout(arguments.callee,0);return}f()})()}s(f)}}();function f(){if(J){return}try{var Z=j.getElementsByTagName("body")[0].appendChild(C("span"));Z.parentNode.removeChild(Z)}catch(aa){return}J=true;var X=U.length;for(var Y=0;Y<X;Y++){U[Y]()}}function K(X){if(J){X()}else{U[U.length]=X}}function s(Y){if(typeof O.addEventListener!=D){O.addEventListener("load",Y,false)}else{if(typeof j.addEventListener!=D){j.addEventListener("load",Y,false)}else{if(typeof O.attachEvent!=D){i(O,"onload",Y)}else{if(typeof O.onload=="function"){var X=O.onload;O.onload=function(){X();Y()}}else{O.onload=Y}}}}}function h(){if(T){V()}else{H()}}function V(){var X=j.getElementsByTagName("body")[0];var aa=C(r);aa.setAttribute("type",q);var Z=X.appendChild(aa);if(Z){var Y=0;(function(){if(typeof Z.GetVariable!=D){var ab=Z.GetVariable("$version");if(ab){ab=ab.split(" ")[1].split(",");M.pv=[parseInt(ab[0],10),parseInt(ab[1],10),parseInt(ab[2],10)]}}else{if(Y<10){Y++;setTimeout(arguments.callee,10);return}}X.removeChild(aa);Z=null;H()})()}else{H()}}function H(){var ag=o.length;if(ag>0){for(var af=0;af<ag;af++){var Y=o[af].id;var ab=o[af].callbackFn;var aa={success:false,id:Y};if(M.pv[0]>0){var ae=c(Y);if(ae){if(F(o[af].swfVersion)&&!(M.wk&&M.wk<312)){w(Y,true);if(ab){aa.success=true;aa.ref=z(Y);ab(aa)}}else{if(o[af].expressInstall&&A()){var ai={};ai.data=o[af].expressInstall;ai.width=ae.getAttribute("width")||"0";ai.height=ae.getAttribute("height")||"0";if(ae.getAttribute("class")){ai.styleclass=ae.getAttribute("class")}if(ae.getAttribute("align")){ai.align=ae.getAttribute("align")}var ah={};var X=ae.getElementsByTagName("param");var ac=X.length;for(var ad=0;ad<ac;ad++){if(X[ad].getAttribute("name").toLowerCase()!="movie"){ah[X[ad].getAttribute("name")]=X[ad].getAttribute("value")}}P(ai,ah,Y,ab)}else{p(ae);if(ab){ab(aa)}}}}}else{w(Y,true);if(ab){var Z=z(Y);if(Z&&typeof Z.SetVariable!=D){aa.success=true;aa.ref=Z}ab(aa)}}}}}function z(aa){var X=null;var Y=c(aa);if(Y&&Y.nodeName=="OBJECT"){if(typeof Y.SetVariable!=D){X=Y}else{var Z=Y.getElementsByTagName(r)[0];if(Z){X=Z}}}return X}function A(){return !a&&F("6.0.65")&&(M.win||M.mac)&&!(M.wk&&M.wk<312)}function P(aa,ab,X,Z){a=true;E=Z||null;B={success:false,id:X};var ae=c(X);if(ae){if(ae.nodeName=="OBJECT"){l=g(ae);Q=null}else{l=ae;Q=X}aa.id=R;if(typeof aa.width==D||(!/%$/.test(aa.width)&&parseInt(aa.width,10)<310)){aa.width="310"}if(typeof aa.height==D||(!/%$/.test(aa.height)&&parseInt(aa.height,10)<137)){aa.height="137"}j.title=j.title.slice(0,47)+" - Flash Player Installation";var ad=M.ie&&M.win?"ActiveX":"PlugIn",ac="MMredirectURL="+O.location.toString().replace(/&/g,"%26")+"&MMplayerType="+ad+"&MMdoctitle="+j.title;if(typeof ab.flashvars!=D){ab.flashvars+="&"+ac}else{ab.flashvars=ac}if(M.ie&&M.win&&ae.readyState!=4){var Y=C("div");X+="SWFObjectNew";Y.setAttribute("id",X);ae.parentNode.insertBefore(Y,ae);ae.style.display="none";(function(){if(ae.readyState==4){ae.parentNode.removeChild(ae)}else{setTimeout(arguments.callee,10)}})()}u(aa,ab,X)}}function p(Y){if(M.ie&&M.win&&Y.readyState!=4){var X=C("div");Y.parentNode.insertBefore(X,Y);X.parentNode.replaceChild(g(Y),X);Y.style.display="none";(function(){if(Y.readyState==4){Y.parentNode.removeChild(Y)}else{setTimeout(arguments.callee,10)}})()}else{Y.parentNode.replaceChild(g(Y),Y)}}function g(ab){var aa=C("div");if(M.win&&M.ie){aa.innerHTML=ab.innerHTML}else{var Y=ab.getElementsByTagName(r)[0];if(Y){var ad=Y.childNodes;if(ad){var X=ad.length;for(var Z=0;Z<X;Z++){if(!(ad[Z].nodeType==1&&ad[Z].nodeName=="PARAM")&&!(ad[Z].nodeType==8)){aa.appendChild(ad[Z].cloneNode(true))}}}}}return aa}function u(ai,ag,Y){var X,aa=c(Y);if(M.wk&&M.wk<312){return X}if(aa){if(typeof ai.id==D){ai.id=Y}if(M.ie&&M.win){var ah="";for(var ae in ai){if(ai[ae]!=Object.prototype[ae]){if(ae.toLowerCase()=="data"){ag.movie=ai[ae]}else{if(ae.toLowerCase()=="styleclass"){ah+=' class="'+ai[ae]+'"'}else{if(ae.toLowerCase()!="classid"){ah+=" "+ae+'="'+ai[ae]+'"'}}}}}var af="";for(var ad in ag){if(ag[ad]!=Object.prototype[ad]){af+='<param name="'+ad+'" value="'+ag[ad]+'" />'}}aa.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"'+ah+">"+af+"</object>";N[N.length]=ai.id;X=c(ai.id)}else{var Z=C(r);Z.setAttribute("type",q);
	var makeweb = q_pagemode() == "makeweb" ;
	if ( makeweb ) {
		Z.setAttribute("classid", "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000");
		var embed = Z.appendChild( C("embed") );
	}
	for(var ac in ai){if(ai[ac]!=Object.prototype[ac]){if(ac.toLowerCase()=="styleclass"){Z.setAttribute("class",ai[ac]);}else{if(ac.toLowerCase()!="classid"){
		Z.setAttribute(ac,ai[ac]);
		if ( makeweb && (ac.toLowerCase() == "width" || ac.toLowerCase() == "height" ) ) embed.setAttribute(ac, ai[ac]);
		if ( makeweb && ac.toLowerCase() == "data" ) {
			e(Z,"Movie", ai[ac]);
			embed.setAttribute("src", ai[ac]);
		}
	}}}}for(var ab in ag){
		if(ag[ab]!=Object.prototype[ab]&&ab.toLowerCase()!="movie"){
			e(Z,ab,ag[ab]);
			if ( makeweb ) embed.setAttribute(ab,ag[ab]);
		}
	}aa.parentNode.replaceChild(Z,aa);X=Z}}return X}function e(Z,X,Y){var aa=C("param");aa.setAttribute("name",X);aa.setAttribute("value",Y);Z.appendChild(aa)}function y(Y){var X=c(Y);if(X&&X.nodeName=="OBJECT"){if(M.ie&&M.win){X.style.display="none";(function(){if(X.readyState==4){b(Y)}else{setTimeout(arguments.callee,10)}})()}else{X.parentNode.removeChild(X)}}}function b(Z){var Y=c(Z);if(Y){for(var X in Y){if(typeof Y[X]=="function"){Y[X]=null}}Y.parentNode.removeChild(Y)}}function c(Z){return ge(Z);var X=null;try{X=j.getElementById(Z)}catch(Y){}return X}function C(X){return j.createElement(X)}function i(Z,X,Y){Z.attachEvent(X,Y);I[I.length]=[Z,X,Y]}function F(Z){var Y=M.pv,X=Z.split(".");X[0]=parseInt(X[0],10);X[1]=parseInt(X[1],10)||0;X[2]=parseInt(X[2],10)||0;return(Y[0]>X[0]||(Y[0]==X[0]&&Y[1]>X[1])||(Y[0]==X[0]&&Y[1]==X[1]&&Y[2]>=X[2]))?true:false}function v(ac,Y,ad,ab){if(M.ie&&M.mac){return}var aa=j.getElementsByTagName("head")[0];if(!aa){return}var X=(ad&&typeof ad=="string")?ad:"screen";if(ab){n=null;G=null}if(!n||G!=X){var Z=C("style");Z.setAttribute("type","text/css");Z.setAttribute("media",X);n=aa.appendChild(Z);if(M.ie&&M.win&&typeof j.styleSheets!=D&&j.styleSheets.length>0){n=j.styleSheets[j.styleSheets.length-1]}G=X}if(M.ie&&M.win){if(n&&typeof n.addRule==r){n.addRule(ac,Y)}}else{if(n&&typeof j.createTextNode!=D){n.appendChild(j.createTextNode(ac+" {"+Y+"}"))}}}function w(Z,X){if(!m){return}var Y=X?"visible":"hidden";if(J&&c(Z)){c(Z).style.visibility=Y}else{v("#"+Z,"visibility:"+Y)}}function L(Y){var Z=/[\\\"<>\.;]/;var X=Z.exec(Y)!=null;return X&&typeof encodeURIComponent!=D?encodeURIComponent(Y):Y}var d=function(){if(M.ie&&M.win){window.attachEvent("onunload",function(){var ac=I.length;for(var ab=0;ab<ac;ab++){I[ab][0].detachEvent(I[ab][1],I[ab][2])}var Z=N.length;for(var aa=0;aa<Z;aa++){y(N[aa])}for(var Y in M){M[Y]=null}M=null;for(var X in swfobject){swfobject[X]=null}swfobject=null})}}();return{registerObject:function(ab,X,aa,Z){if(M.w3&&ab&&X){var Y={};Y.id=ab;Y.swfVersion=X;Y.expressInstall=aa;Y.callbackFn=Z;o[o.length]=Y;w(ab,false)}else{if(Z){Z({success:false,id:ab})}}},getObjectById:function(X){if(M.w3){return z(X)}},embedSWF:function(ab,ah,ae,ag,Y,aa,Z,ad,af,ac){var X={success:false,id:ah};if(M.w3&&!(M.wk&&M.wk<312)&&ab&&ah&&ae&&ag&&Y){w(ah,false);/*2011-09-08:vh, anciennement = K*/(function(){ae+="";ag+="";var aj={};if(af&&typeof af===r){for(var al in af){aj[al]=af[al]}}aj.data=ab;aj.width=ae;aj.height=ag;var am={};if(ad&&typeof ad===r){for(var ak in ad){am[ak]=ad[ak]}}if(Z&&typeof Z===r){for(var ai in Z){if(typeof am.flashvars!=D){am.flashvars+="&"+ai+"="+Z[ai]}else{am.flashvars=ai+"="+Z[ai]}}}if(F(Y)){var an=u(aj,am,ah);if(aj.id==ah){w(ah,true)}X.success=true;X.ref=an}else{if(aa&&A()){aj.data=aa;P(aj,am,ah,ac);return}else{w(ah,true)}}if(ac){ac(X)}})()/*2011-09-08:vh, pour déclencher maintenant et pas sur onload*/}else{if(ac){ac(X)}}},switchOffAutoHideShow:function(){m=false},ua:M,getFlashPlayerVersion:function(){return{major:M.pv[0],minor:M.pv[1],release:M.pv[2]}},hasFlashPlayerVersion:F,createSWF:function(Z,Y,X){if(M.w3){return u(Z,Y,X)}else{return undefined}},showExpressInstall:function(Z,aa,X,Y){if(M.w3&&A()){P(Z,aa,X,Y)}},removeSWF:function(X){if(M.w3){y(X)}},createCSS:function(aa,Z,Y,X){if(M.w3){v(aa,Z,Y,X)}},addDomLoadEvent:K,addLoadEvent:s,getQueryParamValue:function(aa){var Z=j.location.search||j.location.hash;if(Z){if(/\?/.test(Z)){Z=Z.split("?")[1]}if(aa==null){return L(Z)}var Y=Z.split("&");for(var X=0;X<Y.length;X++){if(Y[X].substring(0,Y[X].indexOf("="))==aa){return L(Y[X].substring((Y[X].indexOf("=")+1)))}}}return""},expressInstallCallback:function(){if(a){var X=c(R);if(X&&l){X.parentNode.replaceChild(l,X);if(Q){w(Q,true);if(M.ie&&M.win){l.style.display="block"}}if(E){E(B)}}a=false}}}}();



/*
function -
function QUOMODO object : quomodo.page
*/

if ( window.quomodo ) {
	quomodo.extend( "page" , function(){
		function geturlparams( url ) {
			var params = {} ;
			var x = url.replace( /^[^?]*\??/ , "" ) ;
			var t = x.split( "&" ) ;
			var tt ;
			for ( var i = 0 ; i<t.length ; i++ ) {
				tt = t[ i ].split( "=" ) ;
				params[ tt[ 0 ] ] = decodeURIComponent( tt[ 1 ] ) ;
			}
			return params ;
		}
		this.urlparams = function() { return geturlparams( window.location.search ) ; } ;
		this.isPopup = this.urlparams().popup == "true" ;
		this.popupid = this.urlparams().popupid ;
		this.isIframe = ( window.parent && parent.window != window ) ;
		if ( this.isIframe ) {
			try {
				this.iframeInParent = parent.quomodo.iframe( window ) ;
				this.iframeInParent.__window = window ;
			} catch( err ) {}
		}
		this.svctype = function() {
			if ( ( window.currsvcid ) && ( /artemapage/.test( currsvcid ) ) ) return "page" ;
			else if ( ( window.currsvcid ) && ( /artemadisq/.test( currsvcid ) ) ) return "disq" ;
			else if ( ( window.currsvcid ) && ( /homepage/.test( currsvcid ) ) ) return "shareboard" ;
			return null ;
		} ;
		this.close = function(){
			if ( this.iframeInParent ) this.iframeInParent.close() ;
		} ;
		this.href = function( src ){
			var searchRe = new RegExp( "\\?" ) ;
			if ( this.isPopup ) {
				if ( this.popupId == "old" ) {
					var _this = this ;
					setTimeout( function() { parent.location.href = src ; }, 50 ) ;
					return ;
				}
				this.iframeInParent.togglewait( true ).resize( 260, 126 ) ;
				this.iframeInParent.__window = null ;
			}
			var _this = this ;
			setTimeout( function() { window.location.href = src + ( ( _this.isPopup ) ? ( ( ( searchRe.test( src ) ) ? "&" : "?" ) + "popup=true&popupid=" + _this.popupId ) : "" ) ; }, 50 ) ;
		} ;
		function getPageOffset(){
			var $target = $( "#" + ( window.__resizeTargetId || "__calcoffset" ) ) ;
			if ( $target.length ) {
				var max = {} ;
				var o = $target.offset() ;
				return { scrollTop: o.top, scrollLeft: o.left, top: o.top, left: o.left, right: $target.width() + o.left, bottom: $target.height() + o.top } ;
			}
			if ( window.popupcalcoffset ) return popupcalcoffset() ;
			if ( window.quomodo && quomodo.page && quomodo.page && quomodo.page.sections ) {
				var o = quomodo.page.sections.offset( currsvcid ) ;
				o.scrollTop = Math.round( ( o.bottom == undefined  || o.topHeader > o.bottom ) ? 0 : o.topHeader ) ;
				o.scrollLeft = Math.round( ( o.left == undefined  ||  o.left > o.right ) ? 0 : o.left ) ;
				return o ;
			}
			if ( window.pages_calcpageoffset ) {
				var o = pages_calcpageoffset() ;
				var authorOffset = $( "#q_author_stuff" ).offset() ;
				o.scrollTop = Math.round( authorOffset.top + ( ( o.bottom == undefined  || o.topHeader > o.bottom ) ? 0 : o.topHeader ) ) ;
				o.scrollLeft = Math.round( authorOffset.left + ( ( o.left == undefined  ||  o.left > o.right ) ? 0 : o.left ) ) ;
				return o ;
			}
			var offsetfn = function() {
				var d , noteh ;
				var max = { top: 999999, left:990, right: 0, bottom: 0 } ;
				var leftValueIsOk = false;
				var cnodes = document.body.childNodes ;
				function offsets( elem ) {
					var l = elem.offsetLeft ;
					var t = elem.offsetTop ;
					var r = l + elem.offsetWidth ;
					var b = t + elem.offsetHeight ;
					return { "offsetLeft" : l , "offsetTop" : t , "offsetWidth" : r-l , "offsetHeight" : b-t } ;
				}
				for ( var i = 0 ; i < cnodes.length ; i++ ) {
					d = offsets( cnodes[ i ] ) ;
					var noteBottom = d.offsetTop + d.offsetHeight ;
					var noteRight = d.offsetLeft + d.offsetWidth ;
					if ( noteBottom > max.bottom ) max.bottom = noteBottom ;
					if ( noteRight > max.right ) max.right = noteRight ;
					if ( d.offsetTop < max.top ) max.top = d.offsetTop ;
					if ( d.offsetLeft < max.left ) {
						max.left = d.offsetLeft ;
						leftValueIsOk = true ;
					}
				}
				if ( ! leftValueIsOk ) return {} ;
				return max ;
			}
			var o = offsetfn() ;
			var top = document.body.offsetTop ;
			var left = document.body.offsetLeft ;
			o.scrollLeft = left ;
			o.scrollTop = top ;
			return o ;
		}
		this.triggerResized = function() {
			if ( ! this.isPopup ) return ;
			var pageOffset = getPageOffset() ;
			if ( ! isNaN( pageOffset.left ) ) this.iframeInParent.resize( pageOffset.right - pageOffset.left, pageOffset.bottom - ( pageOffset.topHeader || pageOffset.top ) ) ;
		}
		quomodo.events.addListener( ( ! window.q_pagemode || ! q_pagemode() || q_pagemode() == "web" ) ? "finish_init.page" : "finish_init.notes" , function( eventDesc, eventName ){
			if ( ! this.isPopup && this.urlparams().popup != "true" ) return ;
			this.isPopup = true ;
			var popupid = this.urlparams().popupid ;
			this.popupId = popupid ;
			this.__initTime = (new Date()).getTime() ;
			var _this = this ;
			function initpopup(){
				var pageOffset = getPageOffset() ;
				if ( popupid == "old" ) {
					pageOffset.left = 0 ;
					pageOffset.top = 0 ;
					pageOffset.right = 990 ;
					pageOffset.bottom = pageOffset.bottom + 15 ;
					var authorOffset = $( "#q_author_stuff" ).offset() ;
					pageOffset.scrollTop = authorOffset.top ;
					pageOffset.scrollLeft = authorOffset.left ;
					if ( _this.iframeInParent ) {
						$( _this.iframeInParent ).width( 1002 ).parents( ".qiframe-wrapper:eq(0)" ).width( 990 ) ;
					}
				}
				var currOffset = _this.__pageOffset ;
				function hasChanged(){
					//var keys = [ "topHeader" , "left" , "right" , "bottom" , "pageheight" ] ; // 2013-03-15, vh : trop spécifiques aux sn. Testons simplement les bounds standard
					var keys = [ "left" , "right" , "top", "bottom" ] ;
					for ( var i = 0 ; i < keys.length ; i++ ) if ( currOffset[ keys[ i ] ] != pageOffset[ keys[ i ] ] ) return true ;
					return false ;
				}
				_this.__pageOffset = pageOffset ;
				try { window.scrollTo( 0, 0 ) ; } catch( err ) {} // 2015-02-09 : semble auto scrollé de temps en temps. On force donc à rester à (0,0) quand ça fonctionne
				//window.scrollTo( pageOffset.scrollLeft, pageOffset.scrollTop ) ; // ••• mode scroll iframe
				if ( _this.iframeInParent ) {
					if ( _this.iframeInParent.__window != window ) return ;
					_this.iframeInParent.togglewait( false ) ;
					if ( ! isNaN( pageOffset.left ) ) {
						//_this.iframeInParent.resize( pageOffset.right - pageOffset.left, pageOffset.bottom - ( pageOffset.topHeader || pageOffset.top ) ) ; // ••• mode scroll iframe
						_this.iframeInParent.resize( pageOffset.right - pageOffset.left, pageOffset.bottom - ( pageOffset.topHeader || pageOffset.top ), pageOffset.scrollLeft, pageOffset.scrollTop ) ;
					}
				}
				if ( ! currOffset ) {
					$( document ).ready( function() {// 2013-01-09, vh : il est possible que le chargement de ressources images soit plus long que les 300ms suivantes. On assure le coup en refaisant l'init sur le onload.
						initpopup() ;
					} ) ;
					return setTimeout( initpopup , 300 ) ;
				}
				if ( hasChanged() || ( (new Date()).getTime() - _this.__initTime ) < 10000 ) return setTimeout( initpopup , 1000 ) ;
			}
			initpopup() ;
		} , this ) ;
	} ) ;
}


/*
function -
function Q_EVENTS
*/

var q_events_newevent = 1;
var q_events_monthdays = [ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ] ;

function q_events_renderevents( dest, events, options ){
	/*	dest = element jquery ou dom ou mettre les events
		events = tableau d'événements
		options :
			mode : ( "view" ou "edit" ) affiche les boutons d'édition ou non
			displaydate : affiche la date à coté des événements
			displaytype : affiche le type d'événement
			withdetails : autoriser l'affichage des détails ou non
			callback : fonction à appeller après edit/delete/duplicate...
			callback_args : arguments à appeller
	*/
	if ( typeof events && ! events.splice ) events = [ events ];
	var thesrc = $( '<div></div>' );
	for ( var i = 0; i < events.length ; i++ ) thesrc.append( q_events_eventHTML( events[ i ], options ) );
	
	if ( events.length == 1 && $( ".q_event[qid='" + events[ 0 ].id +"'] .q_event_content", thesrc ).length > 0 ) $( ".q_event[qid='" + events[ 0 ].id +"'] .q_event_title", thesrc ).click();
	$( dest ).append( thesrc );
}

function q_events_eventHTML_elem( ppty, pptyvalue ){
	if ( ! pptyvalue ) return "";
	var val = $.trim( q_events_getPropHTML( ppty, pptyvalue ) );
	if ( ! val ) return "";
	var tr = '<tr>';
	tr += '<td class="q_eventhtml_title" width="100" valign="top">' + ( q_events_msgs[ ppty ] || ppty ) + q_events_msgs[ ":" ] + '</td>';
	tr += '<td>' + val.replace( /(\n|\r)/g, "<br/>" ) + '</td>';
	tr += '</tr>';
	return tr;
}

function q_events_eventHTML( event, options ){
	var t, c;
	var opt = $.extend( { 
		mode : "view", 
		displaydate : true, 
		displaytype : true,
		withdetails : true,
		displaydateformat : ( q_lang == "en" ) ? "mm/dd" : "dd/mm",
		callback : "", 
		callback_args : [] }
	, options || {} );
	var separator = "-" ;
	var kind = event.eventkind || event.kind ;
	switch( kind ) {
		case "birthday" :
			var date = q_events_parseDate( event.day );
			t = ( ( opt.displaytype ) ? q_events_msgs[ "birthday_title" ] : "" ) + ( ( event.firstname ) ? ( event.firstname + " " ) : "" )  + event.member ;
			v = "";
			break;
		case "general" : 
			var date = q_events_parseDate( event.date );
			t = ( ( opt.displaytype ) ? ( ( q_events_msgs[ kind ] || kind ) + q_events_msgs[ ":" ] + " " ) : "" ) + event.title;
			v = '<table cellspacing="5" cellpadding="0" border="0" width="100%" align="center">';
			if ( event.icon ) v += '<tr><td width="1%">' + q_events_getPropHTML( "icon", event.icon ) + '</td><td style="font-weight:bold; font-size:13px;">' + event.title + '</td></tr>';
			if ( $.trim( event.category ) && event.category != -1 ) {
				v += q_events_eventHTML_elem( "category", event.category );
				if ( event.category.color ) separator = '<span style="color:' + event.category.color + '">•</span>' ;
			}
			v += q_events_eventHTML_elem( "description" , event.description );
			if ( event.image && event.image.formats ) v += '<tr><td></td><td align="left">' + q_events_getPropHTML( "image", event.image ) + '</td></tr>'; 
			break;
		case "match" :
			var date = q_events_parseDate( event.date );
			t = ( opt.displaytype ) ? ( ( q_events_msgs[ kind ] || kind ) + q_events_msgs[ ":" ] + " " ) : "" ;
			var teams = [ event.localteam.name || "..." , ( event.vsteam && event.vsteam.name ) || event.vsteam || "..." ] ;
			var score ;
			if ( event.homescore || event.vsscore ) score = [ event.homescore || "?" , event.vsscore || "?" ] ;
			if ( event.__home == "1" ) {
				teams = teams.reverse() ;
				if ( score ) score.reverse() ;
			}
			t += teams.join( ' VS ' ) ;
			if ( score ) t += ' ( ' + score.join( " - " ) + ' )' ;
			
			v = '<table cellspacing="5" cellpadding="0" border="0" width="100%" align="center">';
			v += q_events_eventHTML_elem( "time", event.time );
			var loc = q_events_getPropHTML( "location", event.location );
			if ( event.home && event.home != "-1" ) loc += ( ( loc ) ? " - " : "" ) + " (" + q_events_getAttr( "home", event.home ) + ")";
			if ( $.trim( loc ) ) v += '<tr><td width="100" class="q_eventhtml_title">' + q_events_msgs[ "location" ] + q_events_msgs[ ":" ] + '</td><td>' + $.trim( loc ) + '</td></tr>';
			v += q_events_eventHTML_elem( "competition", event.competition );
			v += q_events_eventHTML_elem( "step", event.step );
			v += q_events_eventHTML_elem( "comment", event.comment );
			v += '</table>';
			break;
		default : 
			var date = new Date();
			t = ( q_events_msgs[ kind ] || kind );
			v = q_tostring( event );
			break;
	}

	if ( opt.displaydate ) {
		try{ t = $.datepicker.formatDate( opt.displaydateformat , date ) + " " + separator + " " + t; } 
		catch( e ){ t = "invalid date - " + t; }
	}
	var r = $( '<div class="q_event">' ).attr( { "qid" : event.eventid || event.id, "qkind" : kind } );
	if ( ! event.eventid ) r.attr( { "qmode" : "json" } );
	var table = $( '<table cellspacing="0" cellpadding="3" border="0" width="100%">' ).appendTo( r );
	var tr = $( '<tr>' ).appendTo( table );
	
	if ( opt.withdetails ) tr.append( '<td class="q_event_toggle" width="20px" style="visibility:hidden;" align="left">►</td>' );
	
	tr.append( '<td class="q_event_title">' + t + '</td>' );
	
	if ( opt.mode == "edit" ){
		tr.append( 
			$( '<td width="16"></td>' ).append( 
				$( '<div class="adminmenu sprite_edit_16" title="' + q_events_msgs[ "edit" ]+ '" style="cursor:pointer;" ></div>' ).click( function(){ q_events_edit( $( this ).parents( '.q_event' ), opt ); } ) 
			)
		)
		.append( 
			$( '<td width="16"></td>' ).append( 
				$( '<div class="adminmenu sprite_page_dupl_16" title="' + q_events_msgs[ "duplicate" ]+ '" style="cursor:pointer;"></div>' ).click( function(){ q_events_duplicate( $( this ).parents( '.q_event' ), opt ); } )
			)
		)
		.append( 
			$( '<td width="16"></td>' ).append( 
				$( '<div class="adminmenu sprite_delete_16" title="' + q_events_msgs[ "delete" ]+ '" style="cursor:pointer;"></div>' ).click( function(){ q_events_delete( $( this ).parents( '.q_event' ), opt ); } )
			)
		);
	}
	
	if ( opt.withdetails && v && ( $( v ).text() != "" || $( v ).find( "img" ).length ) ) {
		$( ".q_event_toggle", r ).css( "visibility" , "visible" );
		$( ".q_event_title, .q_event_toggle", r )			
			.css( "cursor", "pointer" )
			.click( function(){ 
				var ediv = $( this ).parents( ".q_event:first" );
				$( ".q_event_toggle", ediv ).html( ( $( ".q_event_toggle", ediv ).html() == "▼" ) ? "►" : "▼" );
				$( ".q_event_content", ediv ).slideToggle(); 
			} );
		r.append( '<div class="q_event_content" style="display:none;border-style:solid; border-width:1px;">' + v + '</div>' ) ;
	}

	if  ( events_prototypes[ kind ] && events_prototypes[ kind ].color ) {
		$( '.q_event_toggle, .q_event_title', r ).css( "color", events_prototypes[ kind ].color );
		$( ".q_event_content", r ).css( "border-color", events_prototypes[ kind ].color );
	} else {
		$( '.q_event_toggle, .q_event_title', r ).addClass( "clubcolor3" );
		$( '.q_event_content', r ).addClass( "clubbordercolor3" );
	}

	return r;
}

function q_events_renderopenselects( kind, parent, options ){	
	var properties = [].concat( events_prototypes[ kind ].properties );
	for ( var i = 0 ; i < properties.length ; i++ ) properties[ i ] = q_events_getProp( properties[ i ] );
		
	var table = $( '<table cellspacing="0" cellpadding="5" border="0" width="95%" class="q_events_openselect_table">' )
		.bind( "update", function(){
			var elems = $( "select[kind='" + kind + "'] > " + kind, clubopenselects ).get();
			elems = q_sort( elems, true, function( a ) {
				return $( "name", a ).text().replace( /[-.]/g, "" ).toLowerCase() ; // "textContent"
			} ) ;
			$( this ).empty();
			var thead = $( '<thead>' ).appendTo( this );
			var tr = $( '<tr></tr>' ).appendTo( thead );
			for ( var j = 0 ; j < properties.length ; j++ ) tr.append( '<th>' + ( q_events_msgs[ properties[ j ] ] || properties[ j ] ) + '</th>' );
			tr.append( '<th colspan="3"></th>' );
			
			var tbody = $( '<tbody>' ).appendTo( this );
			for ( var i = 0; i < elems.length ; i++ ) { 
				var value = $( elems[ i ] ).attr( "value" );
				var content = q_events_getJSON( kind, value , { realvalues : true } );
				var tr = $( '<tr class="q_events_openselect">' )
					.attr( { "qkind" : kind, "qid": value } )
					.appendTo( tbody );
				for ( var j = 0 ; j < properties.length ; j++ ) {
					var c = content[ properties[ j ] ];
					if ( properties[ j ] == "color" ) c = '<div style="height:15px; width:30px;border:solid 1px #333; background-color:' + c + '"></div>';
					if ( properties[ j ] == "logo" ) c = '<img src="' + ( ( c && c.logourl ) ? ( q_fsbaseurl() + ( ( c.logourl.formats[ "square33" ] ) ? c.logourl.formats[ "square33" ] : c.logourl.formats[ "original" ] ) ) : q_events_defaultlogo( kind ) ) + '"/';
					if ( properties[ j ] == "logourl" ) c = '<img src="' + ( ( c ) ? ( q_fsbaseurl() + ( ( c.formats[ "square33" ] ) ? c.formats[ "square33" ] : c.formats[ "original" ] ) ) : q_events_defaultlogo( kind ) ) + '"/';
					tr.append( '<td>' + c + '</td>' );	
				}
				tr.append( '<td width="16"><div class="adminmenu sprite_edit_16" title="' + q_events_msgs[ "edit" ]+ '" style="cursor:pointer;" onclick="q_events_edit( $( this ).parents( \'.q_events_openselect\' ) );"></div></td>' )
				.append( '<td width="16"><div class="adminmenu sprite_download_16" title="' + q_events_msgs[ "merge" ]+ '" style="cursor:pointer;" onclick="q_events_openselect_merge( $( this ).parents( \'.q_events_openselect\' ) ); "></div></td>' )
				.append( '<td width="16"><div class="adminmenu sprite_delete_16" title="' + q_events_msgs[ "delete" ]+ '" style="cursor:pointer;" onclick="q_events_delete( $( this ).parents( \'.q_events_openselect\' ) );"></div></td>' );
			}
		});

	var newid = "new_" + q_events_newevent++;
	var thesrc = $( '<div class="q_events_openselectform"></div>' )
		.append( $( '<div align="center"></div>' ).append( create_button( { label : q_events_msgs[ kind + "_newlink" ], icon : "adminmenu sprite_symbol_new_16", onclick : function(){ q_eventform_display( "new", kind, table, newid, options ); } } ) ) )
		.append( $( '<div style="max-height:500px; width:550px; overflow:auto;" onmousedown="q_stopPropagation( event );"></div>' ).append( table ) )
		.append( $( '<div align="center"></div>' ).append( create_button( { label : common_message[ "close" ], icon : "adminmenu sprite_cancel_32", onclick : function(){ q_fsm_delete(); } } ) ) );

	table.trigger( "update" );
	
	q_fsm_reveal( { 
		src : thesrc.get( 0 ) , 
		title : q_events_msgs[ kind + "_edittitle_list" ],
		delete_callback : function(){ if ( parent && parent.length ){ parent.trigger( "update" );}  } 
	}) ;	
}

/*
function  - 
function EVENTS REQUEST
*/

function q_events_request( callback, options ){
	document.mainform.mission.value = "processxml" ;
	var mimeType = { "xml": "application/xml", "json": "text/json" } ;
	var type = ( options && options.type ) || "json" ;
	var json = { "href": "events.xml", "type": mimeType[ type ], "pi-title": "select" } ;
	var r = $.extend( {}, options ) ;
	r.openselects = ( options && options.openselects ) || "filter" ;
	if ( r.openselect == "all" && clubopenselects ) r.openselects = "none" ;
	else if ( r.openselect == "always" ) r.openselects = "all" ;
	if ( options && options.eventid ) r.events = [ { id: options.eventid } ] ;
	if ( options && options.events ) {
		var dates = q_events_period.dates( ( options.events[ 0 ] && options.events[ 0 ].date ) || "all" ) ;
		if ( dates[ 0 ] ) r.start = $.datepicker.formatDate( "yy-mm-dd", dates[ 0 ] ) ;
		if ( dates[ 1 ] ) r.end = $.datepicker.formatDate( "yy-mm-dd", dates[ 1 ] ) ;
		r.events = [] ;
		for ( var i = 0 ; i<options.events.length ; i++ ){
			var event = { kind: options.events[ i ].kind } ;
			event = $.extend( event, options.events[ i ].filter ) ;
			r.events.push( event ) ;
			if ( $.inArray( event.matchselector ,[ "l", "n", "ln", "played", "toplay" ] ) != -1 ) r.lastnext = $.datepicker.formatDate( "yy-mm-dd", new Date() ) ;
		}
	}
	json[ "pi-param" ] = r ;
	xq_ajaxsubmitwithservice( "common@" + q_lang, json, function( data ){
		if ( type == "xml" ) {
			clubevents = $( "events", data ).get( 0 ) ;
			clubopenselects = $( "openselects", data ).get( 0 ) ;
			return callback( data ) ;
		}
		var openselects = data.openselects ;
		data.__openselects = {} ;
		var __openselects = data.__openselects ;
		for ( var k in openselects ){	
			var select = openselects[ k ] ;
			if ( ! __openselects[ k ] ) __openselects[ k ] = {} ;
			for ( var i = 0 ; i < select.length ; i++ ) __openselects[ k ][ select[ i ].id ] = $.extend( {}, select[ i ] ) ;
		}
		function finalizeProperty( ppty ){
			for ( var k in ppty ){
				var ppty_prototype = events_prototypes[ k ] ;
				if ( ! ppty_prototype ) continue ;	
				var type = ppty_prototype.kind;
				switch( type ) {
					case "openselect" :
						if ( ppty[ "__" + k ] == undefined ) {
							ppty[ "__" + k ] = ppty[ k ] ;
							if ( ! __openselects[ k ] || ! __openselects[ k ][ ppty[ k ] ] ) ppty[ k ] = "" ;
							else ppty[ k ] = finalizeProperty( __openselects[ k ][ ppty[ k ] ] ) ;
						}
						break; 
					case "closedselect" : 
						if ( ppty[ "__" + k ] == undefined ) {
							ppty[ "__" + k ] = ppty[ k ] ;
							if ( k == "home" && ppty[ k ] != "1" ) ppty[ "__" + k ] = "0" ;
							ppty[ k ] = "" ;
							for ( var j = 0; j < ppty_prototype.properties.length; j++ ) {
								if ( ppty[ "__" + k ] == ppty_prototype.properties[ j ][ 0 ] ) ppty[ k ] =  q_events_msgs[ ppty_prototype.properties[ j ][ 1 ] ] ;
							}
						}
						break ;
				}
			}
			return ppty;
		}
		var events = data.events ;
		var b = false ;
		function _localteam() {
			var x = $.extend( {}, this.localteam ) ;
			x.score = this.homescore ;
			x.team = "localteam" ;
			x.logo33 = ( x.logo && x.logo.logourl ) ? ( q_fsbaseurl() + ( ( x.logo.logourl.formats[ "square33" ] ) ? x.logo.logourl.formats[ "square33" ] : x.logo.logourl.formats[ "original" ] ) ) : q_events_defaultlogo( "localteam" , "33" ) ;
			x.logo100 = ( x.logo && x.logo.logourl ) ? ( q_fsbaseurl() + ( ( x.logo.logourl.formats[ "square100" ] ) ? x.logo.logourl.formats[ "square100" ] : x.logo.logourl.formats[ "original" ] ) ) : q_events_defaultlogo( "localteam" , "100" ) ;
			return x ;
		}
		function _vsteam() {
			var x = $.extend( {}, this.vsteam ) ;
			x.score = this.vsscore ;
			x.team = "vsteam" ;
			x.logo33 = ( x.logo && x.logo.logourl ) ? ( q_fsbaseurl() + ( ( x.logo.logourl.formats[ "square33" ] ) ? x.logo.logourl.formats[ "square33" ] : x.logo.logourl.formats[ "original" ] ) ) : q_events_defaultlogo( "vsteam" , "33" ) ;
			x.logo100 = ( x.logo && x.logo.logourl ) ? ( q_fsbaseurl() + ( ( x.logo.logourl.formats[ "square100" ] ) ? x.logo.logourl.formats[ "square100" ] : x.logo.logourl.formats[ "original" ] ) ) : q_events_defaultlogo( "vsteam" , "100" ) ;
			return x ;
		}
		for ( var i = 0 ; i < events.length ; i++ ){
			events[ events[ i ].id ] = finalizeProperty( events[ i ] ) ;
			if ( events[ i ].kind == "match" ) {
				b = true ;
				if ( events[ i ].__home != "1" )  {
					events[ i ].hometeam = _localteam ;
					events[ i ].visitorteam = _vsteam ;
				} else {
					events[ i ].visitorteam = _localteam ;
					events[ i ].hometeam = _vsteam ;
				}
			}
		}
		if ( b && ! window.q_sports_db ) return q_include( { urls: [ "/scriptsauto/sports_db_" + q_lang + ".js" ] } , function () { callback( data ) ; } ) ;
		callback( data ) ;
	}, type == "xml" ) ;
}

/*
function  - 
function DELETE EVENTS 
*/

function q_events_deleteevents( events, callback ){
	if ( ! events.length ) return q_alert( q_events_msgs[ "deleteevents_noevents" ] );
	var msg = "";
	if ( events.length == 1 ) msg += ( q_events_msgs[ "deleteoneevent_confirm" ] + "<br/><br/>" ) ;
	else msg += ( q_events_msgs[ "deleteevents_confirm" ] + "<br/><br/>" ).replace( "%s", events.length );
	
	var div = $( '<div onmousedown="q_stopPropagation( event );"></div>' ).append( msg );
	var eventsdiv = $( '<div style="width:450px; max-height:300px; overflow:auto;padding-bottom:4px" onmousedown="q_stopPropagation( event );"></div>' ).appendTo( div );
	
	var eventstorender = [].concat( events ) ;
	eventstorender.sort( function( a, b ){
		var adate = q_events_parseDate( a.date || a.day || "" );
		var bdate = q_events_parseDate( b.date || b.day || "" );
		return adate - bdate;
	} );
	
	q_events_renderevents( eventsdiv, eventstorender, {} );
	q_confirm( div , { callback : function(){
		q_fsm_wait();
		var eventids = $.map( events , function( v ){ return v.id ; } ) ;
		document.mainform.mission.value = "deleteevent" ;
		q_ajaxsubmitwithservice( "common@" + q_lang , { id:eventids } , function() {
			q_fsm_delete();
			for ( var i = 0 ; i<eventids.length ; i++ ) $( "event[id='" + eventids[ i ] + "']", clubevents ).remove();
			if ( callback ) callback() ;
		} ) ; 
	} } );
}

/*
function  - 
function ADD EVENTS 
*/

function q_events_addevents( events, msg, options ){
	if ( ! events.length ) return q_alert( q_events_msgs[ "addevents_noevents" ] );
	if ( ! msg ) msg = "";
	else msg += "<br/><br/>";
	if ( events.length == 1 ) msg += ( q_events_msgs[ "addoneevent_confirm" ] + "<br/><br/>" ) ;
	else msg += ( q_events_msgs[ "addevents_confirm" ] + "<br/><br/>" ).replace( "%s", events.length );
	
	var div = $( '<div onmousedown="q_stopPropagation( event );"></div>' ).append( msg );
	var eventsdiv = $( '<div style="width:450px; max-height:300px; overflow:auto;padding-bottom:4px" onmousedown="q_stopPropagation( event );"></div>' ).appendTo( div );
	
	events.sort( function( a, b ){
		var adate = q_events_parseDate( a.date || a.day || "" );
		var bdate = q_events_parseDate( b.date || b.day || "" );
		return adate - bdate;
	} );
	
	var eventstorender = [] ;
	for ( var i = 0 ; i < events.length ; i++ ) {
		eventstorender.push( $.extend( {} , events[ i ] ) ) ;
		var keys = [] ;
		for ( var k in eventstorender[ i ] ) keys.push( k ) ;
		for ( var j = 0 ; j < keys.length ; j++ ) {
			var k = keys[ j ] ;
			if ( eventstorender[ i ][ k ] ) {
				eventstorender[ i ][ "__" + k ] = eventstorender[ i ][ k ] ;
				eventstorender[ i ][ k ] = q_events_getAttr( k, eventstorender[ i ][ k ] ) ;
			}
		}
	}
	q_events_renderevents( eventsdiv, eventstorender, options );
	var tosave = {};
	for ( var i = 0 ; i < events.length ; i++ ){
		var id = events[ i ].eventid;
		var kind = events[ i ].eventkind;
		delete events[ i ].eventid;
		delete events[ i ].eventkind; 
			
		// Attention, les events sont ici en JSON
		var eventxml = q_events_newXML( kind, id ) ;
		for ( var prop in events[ i ] ) q_setInnerContent( eventxml, prop, events[ i ][ prop ] ) ;
		tosave[ id ] = { kind : kind, item : eventxml };
	}
	q_confirm( div , { callback : function(){ q_events_save( tosave , "event", q_events_addevents_done, options ); } } );
}

function q_events_addevents_done( options ){
	q_alert( q_events_msgs[ "addevents_done" ] );
	q_apply( options.callback, options.callback_args || options.args );
}

/*
function  - 
function PRINT EVENT
*/

function q_events_print( events ){
	if (  ! events.length ) return q_alert( q_events_msgs[ "print_noevents" ] );
	var grids = {};
	for ( var i = 0 ; i < events.length ; i++ ){
		var e = events[ i ];
		if ( ! grids[ e.kind ] ) grids[ e.kind ] = [];
		grids[ e.kind ].push( e );		
	}
	
	var thesrc = $( "<div></div>" );
	var div = $( '<div style="width:700px; max-width:800px; max-height:600px; overflow:auto;" onmousedown="q_stopPropagation( event );"></div>' ).appendTo( thesrc );
	var printdiv = $( '<div style="background-color:white;background-image:none;color:#333;"></div>' ).appendTo( div );
	for ( var i in grids ){
		if ( $.inArray( i , events_types ) == -1 ) continue; 
		printdiv.append( '<h3 class="clubcolor3" align="left">' + q_events_msgs[ "events_" + i ] + '</h3>' );
		var tablediv = $( '<div></div>' ).appendTo( printdiv );
		
		var thead = $( '<thead></thead>' );
		var tr = $( '<tr></tr>' )
			.css( "font-weight", "bold" )
			.addClass( "clubbackgroundcolor6" )
			.appendTo( thead );
		
		var ppties = events_prototypes[ i ].properties;
		for ( var j = 0 ; j < ppties.length ; j++ ) tr.append( '<th>' + q_events_msgs[ q_events_getProp( ppties[ j ] ) ] + '</th>' );
		
		var tbody = $( '<tbody></tbody>' );
		for ( var k = 0 ; k < grids[ i ].length ; k++ ){
			var tr = $( '<tr></tr>' ).appendTo( tbody );
			for ( var j = 0 ; j < ppties.length ; j++ ) {
				var p = q_events_getProp( ppties[ j ] );
				tr.append( '<td>' + q_events_getPropHTML( p, grids[ i ][ k ][ p ] )  + '</td>' );
			}
		}
		
		var table = $( '<table cellspacing="0" cellpadding="3" border="1" width="100%" class="clubbordercolor3" style="border-collapse:collapse;background-color:white;font-size : 12px;"></table>' )
			.append( thead )
			.append( tbody )
			.appendTo( tablediv );
	}
	
	q_printThis( $( printdiv ).html() );
	/*q_fsm_reveal( { 
		src : thesrc.get( 0 ) , 
		title : q_events_msgs[ "print_title"],
		buttons : [
			{ label : common_message[ "close" ], icon : "adminmenu sprite_cancel_32", onclick : function(){ q_fsm_delete(); } },
			{ label : q_events_msgs[ "print" ], icon : "adminmenu sprite_print_32", onclick : function(){ 
				//printdiv.jqprint(); 
				q_printThis( $( printdiv ).html() );
			} }
		]
	}) ;	*/
}

function q_events_export( events, options ) {
	if (  ! events || ! events.length ) return q_alert( q_events_msgs[ "export_noevents" ] );
	var listToExport = [ ] ;
	var events_by_t = [ ] ; // Evènement par type
	var ev_proto_prop ; // Propriété de prototype d'évènemnet => Event_prototype.properties[ n ]
	var ev_proto_props ; // Propriétés de prototype d'évènemnet => Event_prototype.properties
	var ev_k; // event kind
	
	var ev_k_line = [ ] ; //Ligne pour le type d'évènement 
	var ev_proto_prop_line = [ ] ;  // Ligne les intitutlés des propriétés => Event_prototype.properties
	var ev_line = [ ] ; // Ligne d'un évènement
	var empty_line = [ ] ; // Line vide
	
	for ( var i = 0; i < events.length; i++ ) {
		ev_line = [ ] ; ev_k = events [ i ] .kind ; if ( ! events_by_t [ ev_k ] ) events_by_t [ ev_k ] = [ ] ;
		for ( var y = 0; y < events_prototypes [ ev_k ][ "properties" ].length ; y++ ) {
			ev_proto_prop = q_events_getProp( events_prototypes [ ev_k ][ "properties" ][ y ] ) ;

			// Le type des propriétés de events_prototypes ne sont pas toujours les mêmes que pour l'évènement en lui-même. Ex: Pour l'évènemnet Birthday la propriété "day" est un objet dans events_prototype alors que c'est une string dans l'évènement en lui-même. Ici on teste ce cas.
			if ( ev_proto_prop != "icon" && ev_proto_prop != "image" ) {
				if ( typeof ( events[ i ][ ev_proto_prop ] ) == "object" ) ev_line.push( events[ i ][ ev_proto_prop ][ "name" ] ) ;
				else ev_line.push( ( ev_proto_prop == "day"  || ev_proto_prop == "date"  ) ? $.datepicker.formatDate( "dd/mm/yy", q_events_parseDate(  events[ i ][ ev_proto_prop ]  ) ) : events[ i ][ ev_proto_prop ] ) ;
			}
		}
		
		events_by_t [ ev_k ].push( ev_line ) ;
	}
	
	for ( var i = 0 ; i < events_types.length ; i ++ ) {
		var ev_k = events_types[ i ] ;
		if ( ! events_by_t[ ev_k ] ) continue ;
		ev_k_line = [ ] ; ev_proto_prop_line = [ ] ; 
		// Construit la ligne du type d' évènement
		ev_k_line.push( q_events_msgs [ ev_k ] ) ;
		// Construit la ligne des propriétés pour un évènement	
		ev_proto_props = events_prototypes [ ev_k ][ "properties" ] ;
		for ( var y = 0 ; y < ev_proto_props.length ; y++ ) {
			if ( ev_proto_props [ y ] != "icon" && ev_proto_props [ y ] != "image" ) ev_proto_prop_line.push(  q_events_msgs[ q_events_getProp( ev_proto_props [ y ] ) ] ) ;
		}
		listToExport.push( ev_k_line ) ;
		listToExport.push( ev_proto_prop_line ) ;
		listToExport = listToExport.concat( events_by_t[ ev_k ] ) ;
		listToExport.push( empty_line ) ;
	}
	q_exportcsv( listToExport, $.extend( { exportname: "events" }, options ) ) ; 
}

/*
function  - 
function EVENTS ET OPENSELECTS ACTIONS
*/

function q_events_duplicate( item, options ){
	var id = item.attr( "qid" );
	var kind = item.attr( "qkind" );
	if ( ! id ) return ;
	function duplicate(){
		var newid = "new_" + q_events_newevent++;
		var event = q_events_getXML( kind, id ).clone().attr( "id", newid );
		var tosave = {};
		tosave[ newid ] = { kind : kind, item : event };
		q_events_save( tosave , "event" ,  function() { q_apply( options.callback, options.callback_args || options.args ) ; } );
	}
	if ( item.attr( "qmode" ) == "json" ){
		var eid = $( this ).attr( "eid" ) ;
		q_events_request( function(){
			duplicate() ;
		}, { openselects: "always", eventid: id, type: "xml" } ) ;
	} else q_confirm( q_events_msgs[ "confirmduplicate" ].replace( "%s", q_events_msgs[ kind + "_this" ] ), { callback : function() { duplicate() ; } } );	
}

function q_events_openselect_merge( item ){
	var id = item.attr( "qid" );
	var kind = item.attr( "qkind" );
	var content = q_events_getJSON( kind, id , { realvalues : true } );
	
	var thesrc = $( '<div></div>' );
	var div = $( '<div class="q_events_mergeopenselect"></div>' ).appendTo( thesrc );
	div.append( "<div>" + q_events_msgs[ "mergeopenselect_select" ] .replace( "%s", q_events_msgs[ kind ] ) + "<br/><li><b>" + q_events_getPropHTML( kind, content ) + "</b></li></div><br/>" );
	
	var select = $( '<select class="q_events_mergeopenselect_select"></select>' )
		.options( $.map( $( 'select[kind="' + kind  + '"] > ' + kind , clubopenselects ) , function ( v , i ) {
			var value = $( v ).attr( "value" );
			if ( value == id ) return null ;
			return { name : q_events_getPropHTML( kind, q_events_getJSON( kind, value , { realvalues : true } ) ) , value : value } ;
		} ) )
		.appendTo( div );
	div.append( "<br/><br/>" );
	var thetable = $( '<table cellspacing="0" cellpadding="0" border="0"><tr class="q_eventform_buttons"></tr></table>' ).appendTo( div );
	$( ".q_eventform_buttons", thetable )
		.append( $( '<td>' ).append( create_button( { label : common_message[ "cancel" ], icon : "adminmenu sprite_cancel_32", onclick : function(){ q_fsm_delete(); } } ) ) )
		.append( $( '<td>' ).append( create_button( { label : common_message[ "ok" ], icon : "adminmenu sprite_validate_32", onclick : function(){ 
			var elem = $( this ).parents( ".q_events_mergeopenselect:first" ) ;
			var val = $( ".q_events_mergeopenselect_select", elem ).val(); 
			q_confirm( q_events_msgs[ "confirmmerge" ].replace( "%s", q_events_msgs[ kind + "_this" ] ), { callback : q_events_openselect_merge_confirmdone, callback_args : [ val, id, kind ] } );
		} } ) ) );

	q_fsm_reveal( { 
		src : thesrc.get( 0 ) , 
		title : q_events_msgs[ "mergeopenselect" ],
		delete_callback : function(){ if ( item && item.length ) { item.trigger( "update" ); } } 
	});
}

function q_events_openselect_merge_confirmdone( newid, oldid, kind ){
	var eventsxml = $( 'event' , clubevents ).filter( function(){ return $( kind, this ).text() == oldid; } );
	var eventsids = eventsxml.map( function(){ return $( this ).attr( "id"); } ).get();
	q_fsm_wait();
	q_events_delete_confirmdone( oldid, kind, "", { callback : q_events_openselect_merge_step2, callback_args : [ eventsxml, kind, newid, oldid ] } );
}

function q_events_openselect_merge_step2( eventsxml, kind, newid, oldid ){
	$( 'select[kind="' + kind + '"] > ' + kind + '[value="' + oldid + '"]', clubopenselects ).remove();
	if ( ! eventsxml.length ) {
		q_fsm_delete();
		q_fsm_delete();
		return;
	}
		
	var e = eventsxml.clone();
	$( kind, e ).text( newid );
	var events = {};
	for ( var i = 0; i< e.length; i++ ){
		var id = e.eq( i ).attr( "id" );
		var k = e.eq( i ).attr( "kind" );
		events[ id ] = { kind : k, item : e.eq( i ) };
	}
	q_events_save( events, "event", q_events_openselect_merge_done, [ eventsxml, kind, newid ] );
}

function q_events_openselect_merge_done( eventsxml, kind, newid ){
	$( kind, eventsxml ).text( newid );
	q_fsm_delete();
	q_fsm_delete();
}

function q_events_edit( item, options ){
	var kind = item.attr( "qkind" );
	var id = item.attr( "qid" );
	
	if (  ! events_prototypes[ kind ] ) return ;
	if ( id ){
		if ( item.attr( "qmode" ) == "json" ){
			var eid = $( this ).attr( "eid" ) ;
			q_events_request( function(){
				q_eventform_display( "edit", kind, item, id, options ) ;
			}, { openselects: "all", eventid: id, type: "xml" } ) ;
		} else q_eventform_display( "edit", kind, item, id, options );
	} else q_events_renderopenselects( kind, item , options );
}

function q_events_delete( item, options ){
	var id = item.attr( "qid" );
	var kind = item.attr( "qkind" );
	q_confirm( q_events_msgs[ "confirmdelete" ].replace( /%s/g, q_events_msgs[ kind + "_this" ] ), { callback : q_events_delete_confirmdone, callback_args : [ id, kind, item, options ] } );	
}

function q_events_delete_confirmdone( id, kind, item, options ){
	q_fsm_wait();
	if ( events_prototypes[ kind ].kind == "event" ) {
		document.mainform.mission.value = "deleteevent" ;
		q_ajaxsubmitwithservice( "common@" + q_lang , { id:id } , "q_events_delete_done", [ kind, id, item, options ] ) ; 
	} else {
		document.mainform.mission.value = "deleteopenselect" ;
		q_ajaxsubmitwithservice( "common@" + q_lang , { id:id, kind:kind }, "q_events_delete_done", [ kind, id, item, options ] ) ; 
	}
}

function q_events_delete_done( x, kind, id , parent, options ){
	q_fsm_delete();
	q_events_getXML( kind, id ).remove();
	if ( parent && parent.length ){ parent.trigger( "update" ); }
	q_apply( options.callback, options.callback_args || options.args );
}

function q_events_save( items, type, callback, args ){
	// items  = { id1 : { kind : nom de l'object (match...), item : element jquery xml  }, ... };
	var itemstosend = [];
	for ( var i in items ){
		try{
			var item = items[ i ].item.get( 0 );
			var kind = events_prototypes[ items[ i ].kind ].kind || "event";
			var id = i;
			try {
				var xmlString = ( new XMLSerializer() ).serializeToString( item );
			} catch( f ){ 
				var xmlString = item.xml;
			}
			xmlString = xmlString.replace( / xmlns="[^"]*"/g , "" ) ;
			var properties = events_prototypes[ items[ i ].kind ].properties ;
			for ( var j = 0 ; j < properties.length ; j++ ) {
				pp = q_events_getProp( properties[ j ] ) ;
				var reg = new RegExp( "(</?)" + pp.toUpperCase() + "\\b" , "g" );
				xmlString = xmlString.replace( reg , "$1" + pp.toLowerCase() );
			}
			itemstosend.push( { id: id, kind : items[ i ].kind, value : xmlString } );
		} catch( err ) {
			var s = "Contactez le service technique avec les infos suivantes : in q_events_save : " ;
			try { s += "kind = " + items[ i ].kind ; } catch( e ){}
			try { s += err.message; } catch( e ){}
			try { s += err.description; } catch( e ){}
			try { s += callback.toString(); } catch( e ){}
			//q_alert(s );
			debugmail( s ) ;
			return;
		}	
	}
	q_fsm_wait();
	
	if ( type == "event" ) {
		document.mainform.mission.value = "setevent" ;
		q_ajaxsubmitwithservice( "common@" + q_lang , { events : itemstosend } , q_events_save_done, [ items, type , callback, args ] ) ;
	} else { 
		document.mainform.mission.value = "setopenselect" ;
		q_ajaxsubmitwithservice( "common@" + q_lang , { openselects : itemstosend }, q_events_save_done, [ items, type , callback, args ] ) ; 
	}	
}

function q_events_save_done( x, items, type, callback, args ) {
	/* 2014-01-28 : on fait une requête dans la callback pour maintenir à jour clubevents
	for ( var i in x ){
		if ( x[ i ].kind == "event"  ) items[ i ].item.attr( "id", x[ i ].newid ).appendTo( clubevents );
		else items[ i ].item.attr( "value", x[ i ].newid ).appendTo( $( "select[kind='" + items[ i ].kind + "']", clubopenselects ) );
	}*/
	// 2014-01-30 : finalement c'est nécessaire. On fait le clonage nous-même
	function cloneXML( xmlobject, target ){
		var d = target.ownerDocument || document ;
		var elems = xmlobject.childNodes ;
		for ( var i = 0 ; i < elems.length ; i++ ) {
			var x = elems[ i ] ;
			if ( x.nodeType == 3 ) {
				var v = x.nodeValue ;
				target.appendChild( d.createTextNode( v ) ) ;
			} else {
				var k = x.tagName ;
				var clone = d.createElement( k )
				cloneXML( x, clone ) ;
				target.appendChild( clone ) ;
			}
		}
		var atts = xmlobject.attributes ;
		for ( var i = 0 ; i < atts.length ; i++ ) {
			var x = atts[ i ] ;
			target.setAttribute( x.nodeName, x.nodeValue ) ;
		}
	}
	for ( var i in x ){
		if ( x[ i ].kind == "event" ) {
			var xmlobject = items[ i ].item.attr( "id", x[ i ].newid ).get( 0 ) ;
			var d = clubevents.ownerDocument || document ;
			var target = $( d.createElement( xmlobject.tagName ) ).appendTo( clubevents ).get( 0 ) ;
			cloneXML( xmlobject, target ) ;
		} else {
			var xmlobject = items[ i ].item.attr( "value", x[ i ].newid ).get( 0 ) ;
			var d = clubopenselects.ownerDocument || document ;
			var target = $( d.createElement( xmlobject.tagName ) ).appendTo( $( "select[kind='" + items[ i ].kind + "']", clubopenselects ) ).get( 0 ) ;
			cloneXML( xmlobject, target ) ;
		}
	}
	q_fsm_delete();
	q_apply( callback, args );
}

/*
function  - 
function EVENT FORM
*/

function q_eventform_display( action, kind, parent, id, options ){
	if ( ! window.q_sports_db ){
		return q_include( { urls: [ "/scriptsauto/sports_db_" + q_lang + ".js" ] } , function () { q_eventform_display( action, kind, parent, id, options ) ; } ) ;
	}
	// action = "new" ou "edit"
	// kind = type de l'event  : "match", "general" ou "birthday"
	// id de l'event
	
	var content = $.extend( {}, q_events_getJSON( kind, id ), ( options && options.content ) || {} ) ;
	var thehtml = $( '<form class="q_eventform" onsubmit="return false"></form>' )
		.attr( "qkind", kind )
		.attr( "qid", id ) ;
		//.submit( function(){ q_eventform_validate( this, options ); return false ; } ) ;
	var thetable = $( '<table cellspacing="0" cellpadding="5" border="0" width="500">' ).appendTo( thehtml );
	for ( var i = 0 ; i < events_prototypes[ kind ].properties.length ; i++ ){
		var ppty = events_prototypes[ kind ].properties[ i ];
		var ppty_name = q_events_getProp( ppty );
		if ( typeof ppty == "object" ) ppty_options = ppty[ ppty_name ];
		else ppty_options = {};
		thetable.append( q_eventform_add( kind, ppty_name, ppty_options, content ) );
	}
	$( '<tr><td colspan="3" align="center"><table cellspacing="0" cellpadding="0" border="0"><tr class="q_eventform_buttons"></tr></table></td><tr>' ).appendTo( thetable );
	$( ".q_eventform_buttons", thetable )
		.append( $( '<td>' ).append( create_button( { label : common_message[ "cancel" ], icon : "adminmenu sprite_cancel_32", onclick : function(){ q_fsm_delete(); } } ) ) )
		.append( $( '<td>' ).append( create_button( { label : common_message[ "ok" ], icon : "adminmenu sprite_validate_32", onclick : function(){ q_eventform_validate( this, options ); } } ) ) );
	
	q_fsm_reveal( { 
		src : thehtml.get( 0 ), 
		title : q_events_msgs[ kind + "_" + action + "title_item" ],
		reveal_callback : function( div ){ $( ".__update" , div ).trigger( "update" ) ; },
		delete_callback : function(){ 
			if ( parent && parent.length ) { parent.trigger( "update" ); } 
			if ( options && options.callback ) q_apply( options.callback, options.callback_args || options.args );
		} 
	}) ;
}

function q_eventform_add( parentkind, name, options, content ){
	var tr, td;
	tr = $( '<tr>' );
	td = $( '<td class="q_eventform_title clubcolor2" width="120">' + ( q_events_msgs[ name ] || name ) + ' :</td>' ).appendTo( tr );
	td = $( '<td class="q_eventform_mandatory" width="10">' + ( ( options.mandatory && options.mandatory == "true" ) ? '*' : '' ) + '</td>' ).appendTo( tr );
	td = $( '<td class="q_eventform_content"></td>' ).appendTo( tr );
	var value = ( content && ( content[ "__" + name ] || content[ name ] ) ) || null;
	
	if ( options.kind || events_prototypes[ name ] ) {
		var kind = options.kind || ( events_prototypes[ name ] && events_prototypes[ name ].kind ) ;
		var ppties = options.properties || ( events_prototypes[ name ] && events_prototypes[ name ].properties ) ;
		var pptyoptions = options.options || ( events_prototypes[ name ] && events_prototypes[ name ].options ) ;

		if ( kind == "openselect" ) {
			td.append( '<table border="0" cellspacing="0" cellpadding="0" width="100%"><tr><td class="selector" width="300"></td><td class="editor" align="right" width="100"></td></tr></table>' );
			var os = q_eventform_openselect( name, value, ppties, parentkind );
			$( "td.selector:eq(0)", td ).append( os );
			$( "td.editor:eq(0)", td ).append( create_button( { 
				label : q_events_msgs[ "event_edit" ], 
				icon : "adminmenu sprite_edit_16", 
				onclick : function(){ q_events_edit( os ); }, 
				small : true 
			} ) );
		} else if ( kind == "calendar" ) {
			td.append( '<table border="0" cellspacing="0" cellpadding="0" width="100%"><tr><td></td><td align="right" width="175"></td></tr></table>' );
			var cal = q_eventform_calendar( name, value, ppties );
			var pickoptions =  { changeMonth: true, changeYear: true, yearRange : 'c-99:c+99', dateFormat : "yy_mm_dd", defaultDate : q_events_parseDate( $( "input", cal ).val() ) };		
			$( cal ).click( function(){ q_datepicker( $( "input", this ), { datePicker : pickoptions, displayField : $( ".q_eventform_cal_display", cal ) }  ); } );
			$( "td", td ).eq( 0 ).append( cal );
			$( "td", td ).eq( 1 ).append( create_button( { 
				label : q_events_msgs[ "date_change" ],
				icon : "adminmenu sprite_edit_16", 
				onclick : function(){ q_datepicker( $( "input", cal ), { datePicker : pickoptions, displayField : $( ".q_eventform_cal_display", cal ) }  ); }, 
				small : true 
			} ) );
			td.append(  ) ;
		} else if ( kind == "closedselect" ) td.append( q_eventform_closedselect( name, value, ppties ) );
		else if ( kind == "dayselector" ) td.append( q_eventform_dayselector( name, value, ppties ) );
		else if ( kind == "choosefile" ) td.append( q_eventform_filechooser( name, value, ppties, pptyoptions ) ) ;
		else if ( kind == "icon" ) td.append( q_eventform_iconchooser( name, value, ppties ) );
		else if ( kind == "color" ) td.append( q_eventform_color( name, value, ppties ) );
		else td.append( q_eventform_textinput( name, value, ppties ) );
			
	} else  td.append( q_eventform_textinput( name, value, options ) );
	
	return tr;
}

function q_eventform_validate( elem, options ){ 
	var div = $( elem ).parents( ".q_eventform:first" );
	var id = div.attr( "qid" );
	var kind = div.attr( "qkind" );
	
	var r = {};
	var elems = $( ':input[class*="qevtsmgr_"]', div ).add( 'div[class*="qevtsmgr_"]', div ) ;
	for ( var i = 0; i < elems.length; i++ ){
		var name = elems.eq( i ).attr( "class" ).replace( /.*qevtsmgr_([^ ]+).*/gi, "$1" );
		var value = elems.eq( i ).val();
		if ( value == undefined ) value = -1 ;

		if ( ( $.trim( value.toString() ) == "" ) || ( value == -1 ) ) { // FF : 0 == "" -> true
			if ( q_events_propIsMandatory( kind, name ) ) {
				q_alert( q_events_msgs[ "mandatoryfield" ].replace( "%s", q_events_msgs[ name ] ), { callback : function() { elems.eq( i ).focus().select() ; } } ) ;
				return;
			}
		}

		if ( ( name == "homescore" || name == "vsscore" ) && value && ! ( /^[0-9]+$/ ).test( value ) ) {
			q_alert( q_events_msgs[ "matchscoreerror" ], { callback: function() { elems.eq( i ).focus().select(); } } ) ;
			return;
		}
		
		r[ name ] = { value : value , kind : ( events_prototypes[ name ] && events_prototypes[ name ].kind ) ? events_prototypes[ name ].kind : "" } ;
	}
	/*
	if ( r.vsscore && r.homescore && ( r.vsscore.value != "" ^ r.homescore.value != "" ) ) if ( ! confirm( q_events_msgs[ "onlyonescore" ] ) ) {
		if ( ! r.homescore ) return $( ':input .qevtsmgr_homescore', div  ).focus();
		return $( ':input .qevtsmgr_vsscore', div  ).focus();
	}
	*/
	
	if ( (/^new_(.+)$/i ).test( id ) ) var item = q_events_newXML( kind, id ) ;
	else var item = q_events_getXML( kind, id ) ;
	
	for ( var prop in r ) q_setInnerContent( item, prop, r[ prop ].value , r[ prop ].kind ) ;
	var tosave = {};
	tosave[ id ] = { kind : kind, item : item };
	q_events_save( tosave, events_prototypes[ kind ].kind , q_eventform_validate_done, options );
}

function q_eventform_validate_done( options ){
	qlub_reloadpage = true;
	q_fsm_delete();
	if ( options && options.callback ) q_apply( options.callback, options.callback_args || options.args );
}

/*
function -
*/

function q_eventform_iconchooser( x, v, option ) { 
	//table des images
	var d = $( '<div></div>' );
	
	var container = $( '<div class="q_eventform_icon_container" style="display:none;"></div>' ).appendTo( d );
	var t = $( '<table cellspacing="0" cellpadding="0" border="0">' ).appendTo( container );
	for ( var i in qlub_iconsref ) {
		if ( ( i - 1 ) % 8 == 0 ) var tr = $( '<tr></tr>' ).appendTo( t ); // 8 élément par ligne
		tr.append( '<td style="border:solid 1px transparent;"><img width="24" src="/bundles/qlub/images/clubicons32/' + qlub_iconsref[ i ].file + '.png" alt="' + qlub_iconsref[ i ].file + '"/></td>' );
	}
	$( "td", container )
		.click( function(){
			$( '.q_eventform_icon_input', d ).val( $( "img", this ).attr( "src" ).replace( /.*(\/bundles\/qlub\/.*)/ , "$1") );
			$( '.q_eventform_icon_preview', d ).attr( "src", $( "img", this ).attr( "src" ) );
			$( '.q_eventform_icon_container', d ).hide();
			$( '.q_eventform_icon_button', d ).show();
		} )
		.hover( 
			function(){ $( this ).css( "border-color", "black" ); },
			function(){ $( this ).css( "border-color", "transparent" ); }
		);

	container.append( create_button( { 
		label : q_events_msgs[ "icon_none" ], 
		small : true, 
		onclick : function(){
			$( '.q_eventform_icon_input', d ).val( "" );
			$( '.q_eventform_icon_preview', d ).attr( "src", '/images/blank.gif' );
			$( '.q_eventform_icon_container', d ).hide();
			$( '.q_eventform_icon_button', d ).show();
		} } ) );

	return d
		.append( '<input type="hidden" class="q_eventform_icon_input qevtsmgr_' + x + '" value="' + ( v || "" ) + '"/>' )
		.append( $( '<table cellspacing="0" cellpadding="0" border="0">' )
			.append( $( '<tr>' )
				.append( '<td><img class="q_eventform_icon_preview" alt="" width="24" src="' + ( v || "/images/blank.gif" ) + '" /></td>' )
				.append( $( '<td>' )
					.append( create_button( { 
						"class" : "q_eventform_icon_button", 
						label : q_events_msgs[ "icon_add" ], 
						icon : "adminmenu sprite_edit_16", 
						onclick : function(){ 
							$( '.q_eventform_icon_button', d ).hide();
							$( '.q_eventform_icon_container', d ).show();
						},
						small : true
					} ) )
				)
			)
		);
}

function q_append_eventform_openselect( target , name, value, ppties ) {
	if ( ! ppties || ! ppties.multiple ) return $( target ).append( q_eventform_openselect( name, value, ppties ) ) ;
	var gridId = "qevtsmgr_tmp_" + ( cloneNumber++ ) ;
	var s = $( '<div class="gridselect qevtsmgr_' + name + '" rel="' + gridId + '"><table cellspacing="0" cellpadding="0" border="0" class="qevtsmgr_' + name + '" id="' + gridId + '"></table></div>' )
		.appendTo( target )
		.bind( "update", function(){
			var griddata = [ { name : q_events_msgs[ "chooseinselect" ] , value : -1 } ]
				.concat( $.map( $( "select[kind='" + name + "'] > " + name, clubopenselects ) , function ( v , i ) { return { name : $( "name", $( v ) ).text() , value : $( v ).attr( "value" ) }; } ).sort( function( a , b ){
					if ( a.name.toLowerCase() < b.name.toLowerCase() ) return -1 ;
					if ( a.name.toLowerCase() > b.name.toLowerCase() ) return 1 ;
					return 0 ;
				} ) ) ;

			var $grid = $( "table:eq(0)" , this )
			$grid.jqGrid( {
				datatype: "local",
				data : griddata,
				colModel : [ { name : "name", sortable: false, index : "name" ,  label : ( q_events_msgs[ "filter_" + name ] || q_events_msgs[ name ] || name ) } , { name : "value", index : "value",hidden : true } ],
				gridview : true,
				shrinkToFit : true,
				width : 250,
				height : ( griddata.length > 3 ) ? 75 : "auto",
				rowNum : griddata.length,
				multiselect : true,
				onSelectRow : function( rowid ) {
					var rowData = $grid.jqGrid( "getRowData", rowid ) ;
					if ( rowData.value == "-1" ) {
						var allchecked = $( ".jqgrow#" + rowid + " .cbox", $grid ).prop( "checked" ) ;
						$( ".jqgrow", $grid ).each( function() {
							var id = $( this ).attr( "id" ) ;
							if ( id != rowid && $( ".cbox", this ).prop( "checked" ) && allchecked ) $grid.setSelection( id, false ) ;
						} ) ;
					} else {
						$( ".jqgrow", $grid ).each( function() {
							var rowData = $grid.jqGrid( "getRowData", $( this ).attr( "id" ) ) ;
							if ( rowData.value == "-1" && $( ".cbox", this ).prop( "checked" ) ) {
								$grid.setSelection( $( this ).attr( "id" ), false ) ;
								return false ;
							}
						} ) ;
					}				
				}
			} ) ;
			$( "#gview_" + gridId + " .ui-jqgrid-hdiv" ).hide() ;
			if ( value != null  && value != undefined ) {
				if ( typeof value != "object" ) value = [ value ] ;
			} else value = [ -1 ] ;
			var options = $.map( griddata , function( v ){ return v.value ; } ) ;
			for ( var i = 0 ; i < value.length ; i++ ) $grid.setSelection( "" + ( 1 + $.inArray( value[ i ] , options ) ) );// les id de jqGrid sont 1-based
		} ) ;
	return s.trigger( "update" );
}

function q_events_defaultlogo( mode, size ) {//mode = "local" || "vs"
	mode = ( mode || "local" ).replace( /team/ , "" ) ;
	size = size || "33" ;
	function formattype() {
		if(  spacexml.infos.subscribe_use == "sport" ) {
			var catsWithIcon = [ "arts-martiaux-sports-de-combat", "badminton", "basketball", "cyclisme", "football", "forme-force-physique-mentale", "handball", "rugby", "sports-choregraphiques", "sports-de-nature", "sports-de-precision", "sports-de-vitesse", "tennis-de-table", "tennis", "volley" ] ;
			if( $.inArray( spacexml.infos.type, catsWithIcon ) != -1 ) return spacexml.infos.type;
			else {
				var cats_arr = q_sports_db.sportsdict[spacexml.infos.type].categories;
				var i;
				for( i = 0; i < cats_arr.length; i++ ) {
					if( $.inArray( cats_arr[i], catsWithIcon ) != -1 ) return cats_arr[i];
				}
				return "other";
			}
		} else return "other";
	}
	return "/bundles/qlub/images/logosDefaultTeam/" + size + "/" + ( ( mode == "vs" ) ? "vs" : "local" ) + "/" + formattype() + ".png" ;
}
function q_eventform_openselect( name, value, ppties , parentkind ) {
	if ( name == "logo" ) {
		var s = $( '<div class="qevtsmgr_' + name + '" qkind="' + name + '" style="width:300px ; overflow : auto"></div>' )
			.bind( "update", function(){
				$( this ).empty().horizontalselect( {
					imgheight : 33,
					values : [ { src : q_events_defaultlogo( parentkind ) , value : "" } ].concat( $.map( $( "select[kind='" + name + "'] > " + name, clubopenselects ) , function ( v , i ) { return { src : q_fsbaseurl() + $( "logourl formats square33", $( v ) ).text() , value : $( v ).attr( "value" ) }; } ) )
				} ) ;
				if ( value != null  && value != undefined && ( ( typeof value ) != "object" || value.length ) ) $( this ).val( value ) ;
				else $( this ).val( "" ) ;
				return $( this ) ;
			} ) ;
	} else {
		var s = $( '<select class="qevtsmgr_' + name + '" qkind="' + name + '"></select>' )
			.bind( "update", function(){
				$( this ).empty().options(
					[ { name : q_events_msgs[ "chooseinselect" ] , value : -1 } ]
					.concat( $.map( $( "select[kind='" + name + "'] > " + name, clubopenselects ) , function ( v , i ) {
						var optiontext = $( "name", $( v ) ).text();
						if ( name == "location" && $( "city", $( v ) ).text() ) optiontext = $( "city", $( v ) ).text() + " - " + optiontext ;
						return { name : optiontext , value : $( v ).attr( "value" ) };
					} ).sort( function( a , b ){
						if ( a.name.toLowerCase() < b.name.toLowerCase() ) return -1 ;
						if ( a.name.toLowerCase() > b.name.toLowerCase() ) return 1 ;
						return 0 ;
					} ) )
				) ;
				if ( value != null  && value != undefined && ( ( typeof value ) != "object" || value.length ) ) $( this ).val( value ) ;
				else $( this ).val( -1 ) ;
				return $( this ) ;
			} ) ;
		if ( ppties && ppties.multiple ) s.attr( "multiple", "multiple" );
	}
	return s.addClass( "__update" );
}

function q_eventform_closedselect( name, value, ppties ) {
	var options = [ { name : q_events_msgs[ "chooseinselect" ] , value : -1 } ] ;
	var p = events_prototypes[ name ].properties ;
	if ( p ) options = options.concat( $.map( p , function ( v , i ) { return { name : q_events_msgs[ v[ 1 ] ] || v[ 1 ] , value : v[ 0 ] }; } ) ) ;
	var s = $( '<select class="qevtsmgr_' + name + '"></select>' )
		.empty()
		.options( options ) ;
	if ( value != null  && value != undefined && ( ( typeof value ) != "object" || value.length ) ) s.val( value ) ;
	else s.val( -1 ) ;
	if ( ppties && ppties.multiple ) s.attr( "multiple", "multiple" );
	return s ;
}

function q_eventform_yearselect( name, value, ppties ) {
	var y = new Date().getFullYear() ;
	var thedate = new Date() ;
	var endweek = new Date ( thedate.getFullYear() , thedate.getMonth() , thedate.getDate() + 7 - thedate.getDay() );
	var nextweek = new Date ( thedate.getFullYear() , thedate.getMonth() , thedate.getDate() + 8 - thedate.getDay() );
	var endnextweek = new Date ( thedate.getFullYear() , thedate.getMonth() , thedate.getDate() + 14 - thedate.getDay() );

	var sel =  $( '<select class="qevtsmgr_' + name + '"></select>' )
		.empty()
		.options( [
			{ name : q_events_msgs[ "chooseinselect" ] , value : -1 } ,
			{ label : "-- " + q_events_msgs[ "future" ], options : [
				{ name : q_events_msgs[ "tomorrow" ] , value : "tm" },
				{ name : q_events_msgs[ "nextweek" ] , value : "nw" },
				{ name : q_events_msgs[ "nextmonth" ] , value : "nm" },
				{ name : q_events_msgs[ "next" ].replace( /%s/ , "7" ) , value : "7daysf" },
				{ name : q_events_msgs[ "next" ].replace( /%s/ , "15" ) , value : "15daysf" },
				{ name : q_events_msgs[ "next" ].replace( /%s/ , "30" ) , value : "30daysf" }
			] },
			{ label : "-- " + q_events_msgs[ "current" ], options : [
				{ name : q_events_msgs[ "today" ] , value : "td" },
				{ name : q_events_msgs[ "currentweek" ] , value : "w" },
				{ name : q_events_msgs[ "currentmonth" ] , value : "m" },
				{ name : q_events_msgs[ "currentyear" ] , value : "y" }
			] },
			{ label : "-- " + q_events_msgs[ "past" ], options : [
				{ name : q_events_msgs[ "yesterday" ] , value : "yd" },
				{ name : q_events_msgs[ "lastweek" ] , value : "lw" },
				{ name : q_events_msgs[ "lastmonth" ] , value : "lm" },
				{ name : "7" + q_events_msgs[ "last" ] , value : "7daysp" },
				{ name : "15" + q_events_msgs[ "last" ] , value : "15daysp" },
				{ name : "30" + q_events_msgs[ "last" ] , value : "30daysp" } 
			] }				
		] ) ;
	if ( value ) sel.val( value );
	return sel;
}

function q_eventform_matchselector( name, value, ppties ) {
	var sel =  $( '<select class="qevtsmgr_' + name + '"></select>' )
		.empty()
		.options( [
			{ name : q_events_msgs[ "chooseinselect" ] , value : -1 } ,
			{ name : q_events_msgs[ "lastmatch" ] , value : "l" } ,
			{ name : q_events_msgs[ "nextmatch" ] , value : "n" } ,
			{ name : q_events_msgs[ "last&nextmatchs" ] , value : "ln" } ,
			{ name : q_events_msgs[ "playedmatchs" ] , value : "played" } ,
			{ name : q_events_msgs[ "matchstoplay" ] , value : "toplay" } 
		] ) ;
	if ( value ) sel.val( value );
	if ( ppties && ppties.multiple ) sel.attr( "multiple", "multiple" );
	return sel;
}

function q_eventform_textinput( name, value, ppties ) {
	if ( ppties && ppties.textarea ) var s = $( '<textarea class="' + "qevtsmgr_" + name + '">' ).html( value || "" );
	else var s = $( '<input type="text" class="' + "qevtsmgr_" + name + '"/>'  ).val( value || "" );
	return s;
}

function q_eventform_filechooser( name, value, ppties , options ) {
	var d = $( '<div class="event_image"></div>' )
		.append( '<input type="hidden" class="q_eventform_imageinput qevtsmgr_'  + name + '" value=""/>' )
		.append( $( '<table cellspacing="0" cellpadding="0" border="0">' )
			.append( $( '<tr>' )
				.append( '<td><img src="/images/blank.gif" class="q_eventform_imagepreview"/></td>' )
				.append( $( '<td class="q_eventform_imagebuttons">' )
					.append( create_button( { 
						label : q_events_msgs[ "image_add" ], 
						icon : "adminmenu sprite_album_16",
						onclick : function(){ q_choosefile( q_eventform_image_request( options ) ); },
						small : true
					} ) )
				)
			)
		);
	q_eventform_image_done( value, d , options );
	return d;
}

function q_eventform_dayselector( name, value, ppties ) {
	var date = q_events_parseDate( value );
	var v  = $.datepicker.formatDate( "mm_dd", date );
	
	var d = $( '<div></div>' )
		.append( '<input type="hidden" class="qevtsmgr_' + name + '" value="' + v + '"/>' );
	
	var sel = $( '<select style="width:70px;margin-right:10px;"></select>' )
		.options( $.map( new Array( 31 ) , function ( v , i ) { return { name : "" + ( i + 1 ) , value : twodigs( i + 1 ) }; } ) )
		.val( twodigs( parseInt( v.split( "_" )[ 1 ], 10 ) ) )
		.change( function(){ q_eventform_daysel_update( this , "day" ); } )
		.appendTo( d );
	
	sel = $( '<select style="width:150px;"></select>' )
		.options( $.map( new Array( 12 ) , function ( v , i ) { return { name : mname[ i ] , value : twodigs( i + 1 ) }; } ) )
		.val( twodigs( parseInt( v.split( "_" )[ 0 ], 10 ) ) )
		.change( function(){ q_eventform_daysel_update( this, "month" ); } )
		.appendTo( d );
	return d;
}

function q_eventform_calendar( name, value, ppties ){
	if ( ! value ) value = $.datepicker.formatDate( "yy_mm_dd", new Date() );
	var v = q_events_parseDate( value );
	
	return $( '<div></div>' )
		.append( '<div class="q_eventform_cal_display">' + $.datepicker.formatDate(  $.datepicker.regional[ q_lang ][ "dateFormat" ], v ) + '</div>'  )
		.append( '<input type="hidden" class="' + "qevtsmgr_" + name + '" value="' + value + '" />' );
}

function q_eventform_color( name, value, ppties ){
	var div = $( '<div class="q_eventform_color"></div>'  )
			.css( "background-color", value ) 
			.click( function(){
				q_colors( { 
					selected : value ,
					c1c2 : false,
					c1decline : false,
					forcecolor : true,
					callback : function( x, y ){
						$( y ).css( "background-color", x );
						$( y ).next().val( x );
					}, 
					callback_args : this
				} );
			} );
		
	return $( '<div></div>' )
		.append( div )
		.append( '<input type="hidden" class="' + "qevtsmgr_" + name + '" value="' + value + '" />' );
}

/*
function -
function Uploads
*/

function q_eventform_image_request( options ) {
	options = $.extend( {} , options ) ;
	return { 
		"uploadkind" : "image",
		"multiple" : false,
		formats : options.formats || "screen halfscreen quarterscreen" ,
		validimgformat : options.validimgformat ,
		"extensions" : ["jpg" , "jpeg" , "png" , "gif" , "tiff" , "tif" ] ,
		"callback" : function( x ) { return q_eventform_image_done( x , null , options ) ;} , 
		fromquomodo : true,
		"resize" : true ,
		"resize_option" : { "ratio" :  options.ratio || "image" } ,
		"transparency" : "image" ,
		"web" : false,
		"prompt" : q_events_msgs[ "image_add" ], 
		"title" : q_events_msgs[ "image_add" ]
	} ;
}

function q_eventform_image_done( x, target, options ) { 
	if ( ! x ) return;
	options = $.extend( {} , options ) ;
	if ( x && x.files && x.files[ 0 ] ) x = x.files[ 0 ];
	$( ".q_eventform_imageinput", target ).val( q_toxml( x ) ) ;	
	$( ".q_eventform_imagebuttons", target )
		.empty()
		.append( create_button( {
			label : q_events_msgs[ "image_change" ],
			icon : "adminmenu sprite_edit_16",
			small : true,
			onclick : function(){ q_choosefile( q_eventform_image_request( options ) );}
		} ) )
		.append( create_button( {
			label : q_events_msgs[ "image_delete" ],
			icon : "adminmenu sprite_delete_16",
			small : true,
			onclick : function(){ q_eventform_image_suppress( target , options ); }
		} ) );
	$( ".q_eventform_imagepreview", target ).attr( { "alt" : x.linkname, "src" : q_fsbaseurl() + x.formats[ "height50" ] + "?d=" + (new Date()).getTime() } );
}

function q_eventform_image_suppress( target , options ){
	options = $.extend( {} , options ) ;
	$( ".q_eventform_imageinput", target ).val( "" ) ;	
	$( ".q_eventform_imagepreview", target ).attr( { "alt" : "", "src" : "/images/blank.gif" } );
	$( ".q_eventform_imagebuttons", target )
		.empty()
		.append( create_button( { 
			label : q_events_msgs[ "image_add" ], 
			icon : "adminmenu sprite_album_16",
			small : true,
			onclick : function(){ q_choosefile( q_eventform_image_request( options ) ); }
		} ) );
}

/*
function -
function Day Selector
*/

function q_eventform_daysel_update( x , type ) {
	var d = $( x ).parents( 'div:first' );
	var sels = $( 'select', d );
	if ( type == "month" ) {
		var m = x.selectedIndex ;
		if ( sels.get( 0 ).selectedIndex > q_events_monthdays[ m ] - 1 ) sels.get( 0 ).selectedIndex = q_events_monthdays[ m ] - 1 ;
		for ( var i = 0; i < 31; i++ ) $( sels.get( 0 ).options[ i ] ).toggle( i < q_events_monthdays[ m ] ) ;
	}
	$( 'input[type="hidden"]', d ).val( sels.eq( 1 ).val() + "_" + sels.eq( 0 ).val() );
}

/*
function -
function UTILES
*/

function q_events_newXML( kind, id  ) {
	if ( ! events_prototypes[ kind ] ) return;
	if ( ! id ) id = "new_" + q_events_newevent++;
	var e = null ;
	var p = events_prototypes[ kind ].properties ;
	var xmldoc = q_parseXMLstring( "<root/>");
	
	if ( events_prototypes[ kind ].kind == "event" ) {
		e = $( xmldoc.createElement( "event" ) ).attr( { "kind" : kind, "id" : id } );
		for ( var i = 0; i < p.length; i++ ) e.append( xmldoc.createElement( q_events_getProp( p[ i ] ) ) ) ;
	} else {
		if ( ! $( "select[kind='" + kind + "']" , clubopenselects ).length ) {
			var select = $( xmldoc.createElement( "select" ) ).attr( "kind", kind );
			$( clubopenselects ).append( select );
		}
		e = $( xmldoc.createElement( kind ) ).attr( "value", id );
		for ( var i = 0; i < p.length; i++ ) e.append( xmldoc.createElement( q_events_getProp( p[ i ] ) ) ) ;
	}
	return e;
}

function q_events_getXML( kind, id ) {
	if ( id == "undefined" ) return null ;
	if ( events_prototypes[ kind ].kind == "event" ) return $( "event[id='" + id + "']", clubevents );
	else return $( "select[kind='" + kind + "'] > " + kind + "[value='" + id + "']", clubopenselects );
}

function q_events_getJSON( kind, id, options ) { 
	opt = $.extend( { 
		originaldate : true,
		realvalue : false 
	}, options || {} );
	
	var pptypath = ( options && options.pptypath ) || [] ;
	var item = ( typeof id == "string" ) ? q_events_getXML( kind, id ) : id ;
	if ( ! item.length ) {
		if ( opt.realvalues && kind == "logo" ) {
			var mode ;
			if ( pptypath.length ) mode = pptypath[ pptypath.length - 1 ] ;
			return q_events_defaultlogo( mode ) ;
		} else return "" ;
	}
	var p = events_prototypes[ kind ].properties ;
	var pp, v;
	
	var r = q_xmltojson( item );
	var pptypath = pptypath.concat( [ kind ] ) ;
	for ( var i = 0; i < p.length; i++ ) {
		ppty = q_events_getProp( p[ i ] ) ;
		if ( ! r[ ppty ] ) r[ ppty ] = "" ;
		if ( opt.realvalues ) {
			r[ "__" + ppty ] = r[ ppty ] ;
			r[ ppty ] = q_events_getAttr( ppty, r[ ppty ], opt.originaldate , { pptypath : pptypath } );
		}
	}
	return r ;
}

function q_events_getProp( p ) { // p : string ou object à une seule clé qu'on veut récupérer
	if ( typeof( p ) == "object" ) for ( var pp in p ) return pp ;
	return p ;
}

function q_events_getPropOptions( kind , p ) {
	var event = events_prototypes[ kind ].properties ;
	for ( var i = 0 ; i < event.length ; i++  ) if ( q_events_getProp( event[ i ] ) == p ) return event[ i ][ p ] ;
}

function q_events_propIsMandatory( kind, propindex ) {
	var prop = q_events_getPropOptions( kind, propindex );
	if ( prop && prop[ "mandatory" ] && prop[ "mandatory" ] == "true" ) return true;
	return false;
}

function q_events_getPropHTML( ppty, pptyvalue ){
	if ( typeof ppty != "string") ppty = q_events_getProp( ppty );
	if ( ! pptyvalue ) return "";
	if ( ppty == "day" || ppty == "date" ){ 
		var date = q_events_parseDate( pptyvalue );
		return $.datepicker.formatDate(  $.datepicker.regional[ q_lang ][ "dateFormat" ], date );
	}
	else if ( ppty == "location" ) {
		var loc = pptyvalue.name || "";
		if ( pptyvalue.city ) loc += ( ( loc ) ? " - " : "" ) + pptyvalue.city;
		return loc;
	}
	else if ( ppty == "localteam" ) return pptyvalue.name || "";
	else if ( ppty == "vsteam" ) return pptyvalue.name || "";
	else if ( ppty == "category" ) return pptyvalue.name || "";
	else if ( ppty == "logo" ) return ( pptyvalue && pptyvalue.formats ) ?  '<img style="height:50px; max-width:500px;" src="' + q_fsbaseurl() + ( ( pptyvalue.formats[ "height50" ] ) ? pptyvalue.formats[ "height50" ] : pptyvalue.formats[ "original" ] ) + '"/>' : "";
	else if ( ppty == "image" ) return ( pptyvalue && pptyvalue.formats ) ?  '<img style="width:250px" src="' + q_fsbaseurl() + ( ( pptyvalue.formats[ "quarterscreen" ] ) ? pptyvalue.formats[ "quarterscreen" ] : pptyvalue.formats[ "original" ] ) + '"/>' : "";
	else if ( ppty == "icon" ) return '<img src="' + pptyvalue + '"/>';
	else return pptyvalue;
}

function q_events_getAttr( kind, value, originaldate , options ){
	if ( kind == "time" ) return ( value + ":00" ).replace( /[^0-9]+/g, ":" ).replace( /^:/, "" ).replace( /^([0-9]+:[0-9]+).*/, "$1" ).replace( /^([0-9]):/, "0$1:" ) ;

	if ( ! events_prototypes[ kind ] ) return value;
	var type = events_prototypes[ kind ].kind;
	switch( type ) {
		case "openselect" : 
			if ( value == -1 || (/^new_(.+)$/i ).test( value ) ) return {};
			return q_events_getJSON( kind, value, { realvalues : true , pptypath : options && options.pptypath } );
			break; 
		case "closedselect" : 
			if ( value == -1 ) return "";
			var e = events_prototypes[ kind ].properties ;
			for ( var j = 0; j < e.length; j++ ) {
				if ( value == e[ j ][ 0 ] ) return  q_events_msgs[ e[ j ][ 1 ] ] ;	
			}
			break ;
		case "choosefile" : 
			if ( value == "null" ) return null ;//10_10_09 : bug cd-arc71
			break;
		case "day" : 
			if ( originaldate ) return value;
			var d = q_events_parseDate( value );
			return $.datepicker.formatDate( "dd M", d );
			break;
		case "calendar" : 
			if ( originaldate ) return value;
			var d = q_events_parseDate( value );
			return $.datepicker.formatDate( "dd M yy", d );
			break;
	}
	return value;
}

function q_events_parseDate( d, nonewdate ){
	d = $.trim( d );
	if ( d ) {
		try{
			if ( (/^\*_[0-9]{1,2}_[0-9]{1,2}$/i).test( d ) ) {
				var now = new Date();
				var y = now.getFullYear();
				var d1 = $.datepicker.parseDate( "yy_mm_dd", d.replace( "*", y ) ) ;
				var d2 = $.datepicker.parseDate( "yy_mm_dd", d.replace( "*", y + ( ( d1 > now ) ? -1 : 1 ) ) ) ;
				if ( Math.abs( now - d1 ) > Math.abs( now - d2 ) ) return d2 ;
				return d1 ;
			} else if ( (/^[0-9]{4}_[0-9]{1,2}_[0-9]{1,2}$/i).test( d ) ) return $.datepicker.parseDate( "yy_mm_dd", d ); //2010_11_23
			else if ( (/^[0-9]{4}-[0-9]{1,2}-[0-9]{1,2}$/i).test( d ) ) return $.datepicker.parseDate( "yy-mm-dd", d ); //2010-11-23
			else if ( (/^[0-9]{1,2}_[0-9]{1,2}$/i).test( d ) ) return $.datepicker.parseDate( "mm_dd", d ); //11_23
			else if ( (/^[0-9]{4}[0-9]{2}[0-9]{2}$/i).test( d ) ) return $.datepicker.parseDate( "yymmdd", d ); //20101123
			else if ( (/^[0-9]{2}[0-9]{2}$/i).test( d ) ) return $.datepicker.parseDate( "ddmm", d ); // 2311
			else if ( (/^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}$/i).test( d ) && q_lang == "fr" ) return $.datepicker.parseDate( "dd/mm/yy", d ); // 11/23/2010
			else if ( (/^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{4}$/i).test( d ) && q_lang == "en" ) return $.datepicker.parseDate( "mm/dd/yy", d ); // 23/11/2010
			else if ( (/^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{1,2}$/i).test( d ) && q_lang == "fr" ) return $.datepicker.parseDate( "dd/mm/y", d , { shortYearCutoff : (new Date()).getFullYear() % 100 } ); // 23/11/10
			else if ( (/^[0-9]{1,2}\/[0-9]{1,2}\/[0-9]{1,2}$/i).test( d ) && q_lang == "en" ) return $.datepicker.parseDate( "mm/dd/y", d , { shortYearCutoff : (new Date()).getFullYear() % 100 } ); // 11/23/10
			else if ( (/^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{4}$/i).test( d ) ) return $.datepicker.parseDate( "dd.mm.yy", d ); // 23.11.2010
			else if ( (/^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{2}$/i).test( d ) ) return $.datepicker.parseDate( "dd.mm.y", d );//23.11.10
			else if ( (/^[0-9]{4}[0-9]{2}[0-9]{2}T[0-9]{2}[0-9]{2}[0-9]{2}(.*)$/i).test( d ) ) return $.datepicker.parseDate( "yymmdd", d.split("T")[ 0 ] );//20100711T183000Z
		} catch( e ){}
	}
	return q_isot2date( d, nonewdate );
}


function q_events_yearselect_getdays( date , d ){
	// date peut valoir [ "y", "m", "nm", "nw", "w", "tm", "td", "lw", "lm", "ly" ]
	if ( ! d ) d = new Date();
	var days = [];
	
	function nbDaysOfYear( y ) {
		return ( ( new Date( y , 1 , 29 ) ).getDate() == 29 ) ? 365 : 366 ;
	}
	if ( date.match( "daysf" ) ){
		var nbdays = parseInt( date, 10 );
		for ( var i = 0;  i <= nbdays ; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( d.getFullYear(), d.getMonth(), d.getDate() + i ) ) ); }
	} else if ( date.match( "daysp"  ) ){
		var nbdays = parseInt( date, 10 );
		for ( var i = 1;  i <= nbdays; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( d.getFullYear(), d.getMonth(), d.getDate() - i ) ) ); }
	} else if ( date == "nw" ) {
		var day = 7 - ( ( d.getDay() + 6 ) % 7 ) ;//nb de jours jusqu'à lundi prochain ; d.getDay() vaut 0 le dimanche, 1 le lundi, ...
		var begdate = new Date( d.getFullYear() , d.getMonth() , d.getDate() + day );
		for ( var i = 0;  i < 7; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( begdate.getFullYear() , begdate.getMonth() , begdate.getDate() + i ) ) ); }
	} else if ( date == "nm" ) {
		var newdate = new Date( d.getFullYear(), d.getMonth() + 1 );	
		for ( var i = 1;  i <= q_events_monthdays[ newdate.getMonth() ]; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( newdate.getFullYear() , newdate.getMonth() , i ) ) ); }
	} else if ( date == "y" ) {
		for ( var i = 1;  i <= nbDaysOfYear( d.getFullYear() ) ; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( d.getFullYear() , 0 , i ) ) ); }
	} else if ( date == "m" ){
		for ( var i = 1;  i <= q_events_monthdays[ d.getMonth() ]; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( d.getFullYear() , d.getMonth() , i ) ) ); }
	} else if ( ( /^w/ ).test( date ) ) {
		var nday = parseInt( date.replace( /w-?/ , "0" ) , 10 ) % 7 ;
		var day = ( d.getDay() + 6 - nday ) % 7 ;//nb de jours jusqu'au lundi précédent ; d.getDay() vaut 0 le dimanche, 1 le lundi, ...
		var begdate = new Date( d.getFullYear() , d.getMonth() , d.getDate() - day );
		for ( var i = 0;  i < 7; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( begdate.getFullYear() , begdate.getMonth() , begdate.getDate() + i ) ) ); }
	} else if ( date == "tm" ) days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( d.getFullYear() , d.getMonth() , d.getDate() + 1 ) ) );
	else if ( date == "yd" ) days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( d.getFullYear() , d.getMonth() , d.getDate() - 1 ) ) );
	else if ( date == "td" ) days.push( $.datepicker.formatDate( "yy_mm_dd", d ) );
	else if ( date == "lw" ){
		var day =  7 + ( ( d.getDay() + 6 ) % 7 ) ;//nb de jours jusqu'au lundi de la semaine précédente ; d.getDay() vaut 0 le dimanche, 1 le lundi, ...
		var begdate = new Date( d.getFullYear() , d.getMonth() , d.getDate() - day );
		for ( var i = 0;  i < 7; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( begdate.getFullYear() , begdate.getMonth() , begdate.getDate() + i ) ) ); }
	} else if ( date == "lm" ){
		var newdate = new Date( d.getFullYear(), d.getMonth() - 1 );
		for ( var i = 1;  i <= q_events_monthdays[ newdate.getMonth() ]; i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( newdate.getFullYear() , newdate.getMonth() , i ) ) ); }
	} else if ( date == "ly" ){
		for ( var i = 1;  i <= nbDaysOfYear( d.getFullYear() -1 ); i++ ){ days.push( $.datepicker.formatDate( "yy_mm_dd", new Date( d.getFullYear() -1 , 0 , i ) ) ); }
	}
	return days;
}

var q_events_period = {
	__normalizeDate: function( d ){
		if ( d == null ) return d ;
		var d = new Date( d ) ;
		d.setHours( 12 ) ;
		d.setMinutes( 0 ) ;
		d.setSeconds( 0 ) ;
		d.setMilliseconds( 0 ) ;
		return d ;
	},
	dates: function( periodselector, referenceDate ){
		periodselector = q_events_formatOldPeriod( periodselector );
		if ( ! referenceDate ) referenceDate = new Date();
		referenceDate = this.__normalizeDate( referenceDate ) ;
		var beg;
		var end;
		var startingDate = null ;
		var endingDate = null ;
		var periodType = q_events_getPeriodType( periodselector );
		function parseDate( d ){
			try {
				return $.datepicker.parseDate( "dd-mm-yy", d ) ;
			} catch( e ) {
				try {
					return $.datepicker.parseDate( "dd-mm-yy", d ) ;
				} catch( e ) {
					return q_events_parseDate( d ) ;
				}
			}
		}
		switch( periodType ) {
			case "all" :
				return [ null, null ] ;
			break;
			case "fixed" :
				beg = periodselector.split( "/" )[ 0 ];
				end = periodselector.split( "/" )[ 1 ];
				return [ parseDate( beg ), parseDate( end ) ] ;
			break;
			case "slipping" :
				beg = periodselector.split( "/" )[ 0 ];
				end = periodselector.split( "/" )[ 1 ];
							
				//starting period
				// beg peut valoir [ "beg", "30daysp", "15daysp", "7daysp", "yd", "td", "tm", "lwbeg", "wbeg", "nwbeg", "lmbeg", "mbeg", "nmbeg", "ybeg" ] 
				if( beg == "30daysp" ) startingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() - 30 );
				else if( beg == "15daysp" ) startingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() - 15 );
				else if( beg == "7daysp" ) startingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() - 7 );
				else if( beg == "yd" ) startingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() - 1 );
				else if( beg == "td" ) startingDate = referenceDate;
				else if( beg == "tm" ) startingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() + 1 );
				else if ( ( /^lwbeg/ ).test( beg ) ) startingDate = q_getWeekDay( referenceDate, "last", true, beg );
				else if ( ( /^wbeg/ ).test( beg ) ) startingDate = q_getWeekDay( referenceDate, "current", true, beg );
				else if ( ( /^nwbeg/ ).test( beg ) ) startingDate = q_getWeekDay( referenceDate, "next", true, beg );
				else if( beg == "lmbeg" ) startingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth() - 1 );
				else if( beg == "mbeg" ) startingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth() );
				else if( beg == "nmbeg" ) startingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth() + 1 );
				else if( beg == "ybeg" ) startingDate = new Date( referenceDate.getFullYear(), 0, 1 );
				
				//ending period
				// end peut valoir [ "yd", "td", "tm", "7daysf", "15daysf", "30daysf", "lwend", "wend", "nwend", "lmend", "mend", "nmend", "yend", "end" ]
				if( end == "yd" ) endingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() - 1 );
				else if( end == "td" ) endingDate = referenceDate;
				else if( end == "tm" ) endingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() + 1 );
				else if( end == "7daysf" ) endingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() + 7 );
				else if( end == "15daysf" ) endingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() + 15 );
				else if( end == "30daysf" ) endingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), referenceDate.getDate() + 30 );
				else if ( ( /^lwend/ ).test( end ) ) endingDate = q_getWeekDay( referenceDate, "last", false, end );
				else if ( ( /^wend/ ).test( end ) ) endingDate = q_getWeekDay( referenceDate, "current", false, end );
				else if ( ( /^nwend/ ).test( end ) ) endingDate = q_getWeekDay( referenceDate, "next", false, end );
				else if( end == "lmend" ) endingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth() - 1, q_events_monthdays[ ( referenceDate.getMonth() - 1 +12 ) % 12 ]  );
				else if( end == "mend" ) endingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth(), q_events_monthdays[ referenceDate.getMonth() ] );
				else if( end == "nmend" ) endingDate = new Date( referenceDate.getFullYear(), referenceDate.getMonth() + 1, q_events_monthdays[ ( referenceDate.getMonth() + 1 ) % 12 ] );
				else if( end == "yend" ) endingDate = new Date( referenceDate.getFullYear(), 11, q_events_monthdays[ 11 ] );
				return [ startingDate, endingDate ] ;
			break;
		}
	},
	checkdate: function( eventdate, periodselector, referenceDate, bGetDate ) {
		var normalizeDate = this.__normalizeDate ;
		function checkandgetdate( eventdate, startingDate, endingDate ){
			if ( typeof eventdate == "string" ){
				if ( ! /^\*/.test( eventdate ) ) return checkandgetdate( normalizeDate( q_events_parseDate( eventdate ) ), startingDate, endingDate ) ;
				if ( startingDate == null && endingDate == null ) return checkandgetdate( normalizeDate( q_events_parseDate( eventdate ) ), startingDate, endingDate ) ;
				var a = [] ;
				var y ;
				if ( startingDate == null ){
					y = endingDate.getFullYear() ;
					a = [ normalizeDate( q_events_parseDate( eventdate.replace( "*", y ) ) ), normalizeDate( q_events_parseDate( eventdate.replace( "*", y-1 ) ) ) ] ;
				} else if ( endingDate == null ){
					y = startingDate.getFullYear() ;
					a = [ normalizeDate( q_events_parseDate( eventdate.replace( "*", y ) ) ), normalizeDate( q_events_parseDate( eventdate.replace( "*", y+1 ) ) ) ] ;
				} else {
					y = startingDate.getFullYear() ;
					var y2 = endingDate.getFullYear() ;
					if ( y2<y ) {
						y = y2 ;
						y2 = startingDate.getFullYear() ;
					}
					for ( var i = y ; i <= y2 ; i++ ) a.push( normalizeDate( q_events_parseDate( eventdate.replace( "*", i ) ) ) ) ;
					var d = new Date() ;
					a.sort( function( a, b ){
						var aa = Math.abs( a-d ) ;
						var bb = Math.abs( b-d ) ;
						return ( aa < bb ) ? -1 : ( aa > bb ) ? 1 : 0 ;
					} ) ;
				}
				for ( var i = 0 ; i < a.length ; i++ ){
					var x = checkandgetdate( a[ i ], startingDate, endingDate ) ;
					if ( x != false ) return x ;
				}
				return false ;
			}
			startingDate = normalizeDate( startingDate ) ;
			endingDate = normalizeDate( endingDate ) ;
			if ( startingDate == null && endingDate == null ) return ( bGetDate ) ? eventdate : true ;
			else if ( startingDate == null && eventdate <= endingDate ) return ( bGetDate ) ? eventdate : true ;
			else if ( endingDate == null && eventdate >= startingDate ) return ( bGetDate ) ? eventdate : true ;
			else if ( eventdate >= startingDate && eventdate <= endingDate ) return ( bGetDate ) ? eventdate : true ;
			else return false;
		}
		var dates = this.dates( periodselector, referenceDate ) ;
		return checkandgetdate( eventdate, dates[ 0 ], dates[ 1 ] ) ;
	}
}
function q_events_checkdate( eventdate, periodselector, referenceDate, bGetDate ) {
	return q_events_period.checkdate( eventdate, periodselector, referenceDate, bGetDate ) ;
}

function q_getWeekDay( referenceDate, theWeek, weekBeginning, period_str ) {
	var turningDay = period_str.split("-")[1];
	if( ! turningDay ) turningDay = 0;
	var nbDayRemaining;
	var theWeekDate;
	var endWeek = weekBeginning ? 0 : 6;
	switch( theWeek ) {
		case "current" :			
			nbDayRemaining = ( referenceDate.getDay() + 6 - turningDay ) % 7 ;
			theWeekDate = new Date( referenceDate.getFullYear() , referenceDate.getMonth() , referenceDate.getDate() - nbDayRemaining + endWeek );
		break;
		case "last" :		
			nbDayRemaining = 7 + ( referenceDate.getDay() + 6 - turningDay ) % 7 ;
			theWeekDate = new Date( referenceDate.getFullYear() , referenceDate.getMonth() , referenceDate.getDate() - nbDayRemaining + endWeek );
		break;
		case "next" :							
			nbDayRemaining = 7 - ( referenceDate.getDay() + 6 - turningDay ) % 7 ;
			theWeekDate = new Date( referenceDate.getFullYear() , referenceDate.getMonth() , referenceDate.getDate() + nbDayRemaining + endWeek );
		break;
	}
	return theWeekDate;
}


/*
function -
function UTILES q_common
*/

function q_parseXMLstring( s ) {
	var xmlDoc = null ;
	if ( window.DOMParser ) {
		var parser = new DOMParser( ) ;
		xmlDoc = parser.parseFromString( s , "text/xml" ) ;
	} else {
		xmlDoc = new ActiveXObject( "Microsoft.XMLDOM" ) ;
		xmlDoc.async = "false" ;
		xmlDoc.loadXML( s ) ;
	}
	return xmlDoc ;
}

function q_setInnerContent( item, prop, content, kind ) { 
	var node = $( prop, item );
	var xmldoc = q_parseXMLstring( "<root/>");
	if ( ! node.length ) node = $( xmldoc.createElement( prop ) ).appendTo( item ).text( "" );
	if ( kind && kind == "choosefile" ) {
		try {
			function cloneXML( xmlobject, target ){
				var d = target.ownerDocument || document ;
				var elems = xmlobject.childNodes ;
				for ( var i = 0 ; i < elems.length ; i++ ) {
					var x = elems[ i ] ;
					if ( x.nodeType == 3 ) {
						var v = x.nodeValue ;
						target.appendChild( d.createTextNode( v ) ) ;
					} else {
						var k = x.tagName ;
						var clone = d.createElement( k ) ;
						cloneXML( x, clone ) ;
						target.appendChild( clone ) ;
					}
				}
			}
			var tagname = node.get( 0 ).tagName ;
			var xmlobject = q_parseXMLstring( "<" + tagname + ">" + content + "</" + tagname + ">" ) ;

			// on supprime l'ancien noeud au cas où
			var target = node.get( 0 ) ;
			var d = target.ownerDocument || document ;
			var p = target.parentNode ;
			p.removeChild( target ) ;
			target = p.appendChild( d.createElement( tagname ) ) ;
			cloneXML( xmlobject.getElementsByTagName( tagname )[ 0 ], target ) ;
			//var importednode = $( tagname, xmlobject );
			//$( tagname, item ).replaceWith( importednode ); // 2014-01-20 : possible bug IE11 avec replaceWith
			//$( tagname, item ).remove();
			//$( item ).append( importednode );
		} catch( e ){ 
			try { debugmail(  "q_setInnerContent : " + e.message + " - " + e.description ) ;  } catch( e ){}
			node.text( content ); 
		}
	} else node.text( ( content != null ) ? content : "" );
}

/*
function -
function Q_SELECT_EVENTS
*/

function q_events_select( desc ){
	if ( ! clubopenselects ){
		q_events_request( function( x ){
			q_events_select( desc ) ;
		}, { openselects: "all", type: "xml" } ) ;
		return ;
	}
	desc = $.extend( {
		types : [ "match", "general", "birthday" ],
		fields : {
			"match" : [ "matchselector", "localteam", "vsteam", "home", "location" ],
			"general" : [ "title", "category" ],
			"birthday" : [ "member", "firstname", "category" ]
		},
		values : [],
		date : true,
		callback : function( x ){ if ( x ) q_events_alert( q_events_search( x ) ); },
		callback_args : []
	}, desc || {} );

	var src = $( '<div class="q_events_select"></div>' )
		.data( "desc", desc );
	if ( desc.date ) src.append( '<div class="q_events_search_date">' + q_events_msgs[ "filterPeriod" ] + q_events_msgs[ ":" ] + '<br /><table cellspacing="0" cellpadding="0" border="0"><tr><td valign="middle" class="q_events_chosen_date"></td><td valign="middle"><table cellspacing="0" cellpadding="5" border="0" class="clubcolor3 q_toolbar q_events_modif_date"><tbody><tr class="q_button_tr" style="cursor: pointer;"><td valign="middle" align="right" class="q_button_td_icon"><div class="q_button_icon adminmenu sprite_edit_16"></div></td><td valign="middle" align="left" class="q_button_td_content"><div class="q_button_content">' + q_events_msgs[ "edit" ] + '</div></td></tr></tbody></table></td></tr></table>' ) ;
	
	src.append( '<div class="q_events_search_tabs" onmousedown="q_stopPropagation( event );" style="width:600px;"></div>' );
	
	function displayPeriod() {
		var div = q_fsm_currentblock();
		var period = $( ".q_events_modif_date", div ).data( "periodFilter" ) ;

		var beg = period.split( "/" )[ 0 ];
		var end = period.split( "/" )[ 1 ];
		
		var periodType = q_events_getPeriodType( period );
		switch( periodType ) {
			case "all" :
				$( ".q_events_chosen_date", div ).html( q_events_msgs[ "events_all" ] );
			break;
			case "fixed" :
				beg = beg.split( "-" ).join( "." );
				end = end.split( "-" ).join( "." );
				
				$( ".q_events_chosen_date", div ).html( q_events_msgs[ "fromPeriod" ] + q_events_msgs[ ":" ] + "<b>" + beg + "</b>" + " - " + q_events_msgs[ "toPeriod" ] + q_events_msgs[ ":" ] + "<b>" + end + "</b>" );
			break;
			case "slipping" :
				beg = beg.replace( /-.*/, "" ) ;
				end = end.replace( /-.*/, "" ) ;
				$( ".q_events_chosen_date", div ).html( q_events_msgs[ "fromPeriod" ] + q_events_msgs[ ":" ] + "<b>" + q_events_msgs[ "period_" + beg ] + "</b>" + " - " + q_events_msgs[ "toPeriod" ] + q_events_msgs[ ":" ] + "<b>" + q_events_msgs[ "period_" + end ] + "</b>" );
			break;
		}
	}

	var json =  { 
		src : src.get( 0 ) ,
		title : q_events_msgs[ "searchEventTitle" ], 
		reveal_callback : function( div, json ){
			if ( desc.date ) {
				desc.values[ 0 ].date = q_events_formatOldPeriod( desc.values[ 0 ].date );
				
				$( ".q_events_modif_date", div ).data( "periodFilter", desc.values[ 0 ].date ) ;
				displayPeriod();
				$( ".q_events_modif_date", div ).unbind( "click" ).click( function() {
					q_select_period( desc, function( period ){
						$( ".q_events_modif_date", div ).data( "periodFilter", period ) ;
						displayPeriod() ;
					} , $( this ).data( "periodFilter" ) );
				} );
			}
			if ( desc.types.length > 1 ){
				div = $( ".q_events_select", div );
				var checkboxes = $( '<ul align="left"></ul>' ).prependTo( div );
				var valuestypes = ( desc.values.length == 0 ) ? [] : $.map( desc.values , function( v ){ return [ v.kind ] ; } ) ;
				
				for ( var i = 0; i < desc.types.length; i++ ){
					var id = "q_events_select_" + new Date().getTime() + "_" + desc.types[ i ];
					checkboxes
						.append( $( '<li style="list-style-type: none"></li>' )
							.append( $( '<input type="checkbox" />' )
								.attr( "id",  id  )
								.val( desc.types[ i ]  )
								.prop( "checked", ( $.inArray( desc.types[ i ] , valuestypes ) != -1 ) )
							)
							.append( $( '<label></label>' )
								.attr( "for", id )
								.html( q_events_msgs[ "events_" +  desc.types[ i ] ] )
							)
						);
				}
				
				$( ":input", checkboxes )
					//.each( function( i, v ){ $( v ).button(); } )
					.mousedown( function( event ){ q_stopPropagation( event ); } )
					.click( function(){ 
						var v = $( ":checked", checkboxes ).map( function(){ return $( this ).val(); } );
						q_events_select_updatefields( v ); 
					} );
					
				var v = $( ":checked", checkboxes ).map( function(){ return $( this ).val(); } );
				q_events_select_updatefields( v );
				
			} else q_events_select_updatefields( desc.types );	
		},
		buttons : [
			{ icon : "adminmenu sprite_cancel_32", label : common_message[ "cancel" ], onclick : function(){ q_fsm_delete(); } },
			{ icon : "adminmenu sprite_validate_32", label : common_message[ "ok" ], onclick : function(){ 
				var d = q_fsm_currentblock();
				var opt =  $( '.q_events_select', d ).data( "desc" );
				
				var types = $( '.q_events_search_tabs > div[qkind]', d );
				var result = [] ;
				
				var date ;
				if ( opt.date ) date = $( ".q_events_modif_date", d ).data( "periodFilter" ) ;
				
				for ( var i = 0; i < types.length; i++ ){
					var kind = $( types[ i ] ).attr( "qkind" );
					var r = { kind : kind , filter : {} };
					$( ':input[class*="qevtsmgr_"]', types[ i ] ).each( function(){
						var n = $( this ).attr( "class" ).replace( /.*qevtsmgr_([^ ]+).*/gi, "$1" );
						var k = $( this ).attr( "qkind" ) || "";
						var v = $( this ).val() || "" ;
						if ( ( $.trim( v.toString() ) != "" ) && v != "-1" )  r.filter[ n ] = v;
					} );
					$( ".gridselect" , types[ i ] ).each( function(){
						var $this = $( this ) ;
						var gridId = $this.attr( "rel" ) ;
						var $grid = $( "#" + gridId ) ;
						var n = $this.attr( "class" ).replace( /.*qevtsmgr_([^ ]+).*/gi, "$1" );
						var selection = ( $grid.getGridParam( "multiselect" ) ) ? $grid.getGridParam( "selarrrow" ) : $grid.getGridParam( "selrow" ) ;
						var v = $.map( selection , function( v ){ return $grid.getRowData( v ).value ; } ) ;
						if ( ( $.trim( v.toString() ) != "" ) && v != "-1" )  r.filter[ n ] = v;
					} );
					if ( date && date != "-1" ) r.date = date;
					result.push( r ) ;
				}
				q_fsm_delete();
				if ( opt.callback ) q_apply( desc.callback, [ result ].concat( desc.callback_args ) );
			} }
		]
	};
	q_fsm_reveal( json );
}

function q_events_formatOldPeriod( oldFormattedPeriod ) {
	var newFormattedPeriod;
	if ( ! oldFormattedPeriod || oldFormattedPeriod == -1 ) oldFormattedPeriod = "all" ;
	if( oldFormattedPeriod == "all" || oldFormattedPeriod.split( "/" ).length > 1 ) return oldFormattedPeriod;
	else {
		 switch( oldFormattedPeriod ) {
			case "-1":
				newFormattedPeriod = "all";
			break;
			case "tm":
				newFormattedPeriod = "tm/tm";
			break;
			case "td":
				newFormattedPeriod = "td/td";
			break;
			case "nm":
				newFormattedPeriod = "nmbeg/nmend";
			break;
			case "7daysf":
				newFormattedPeriod = "td/7daysf";
			break;
			case "15daysf":
				newFormattedPeriod = "td/15daysf";
			break;
			case "30daysf":
				newFormattedPeriod = "td/30daysf";
			break;
			case "m":
				newFormattedPeriod = "mbeg/mend";
			break;
			case "y":
				newFormattedPeriod = "ybeg/yend";
			break;
			case "yd":
				newFormattedPeriod = "yd/yd";
			break;
			case "lm":
				newFormattedPeriod = "lmbeg/lmend";
			break;
			case "7daysp":
				newFormattedPeriod = "7daysp/yd";
			break;
			case "15daysp":
				newFormattedPeriod = "15daysp/yd";
			break;
			case "30daysp":
				newFormattedPeriod = "30daysp/yd";
			break;
			default:
				if ( ( /^w/ ).test( oldFormattedPeriod ) ) {
					var nday = parseInt( oldFormattedPeriod.replace( /w-?/ , "0" ) , 10 ) % 7;
					newFormattedPeriod = "wbeg-" + nday + "/wend-" + nday;
				} else if ( ( /^lw/ ).test( oldFormattedPeriod ) ) {
					var nday = parseInt( oldFormattedPeriod.replace( /lw-?/ , "0" ) , 10 ) % 7;
					newFormattedPeriod = "lwbeg-" + nday + "/lwend-" + nday;
				} else if ( ( /^nw/ ).test( oldFormattedPeriod ) ) {
					var nday = parseInt( oldFormattedPeriod.replace( /nw-?/ , "0" ) , 10 ) % 7;
					newFormattedPeriod = "nwbeg-" + nday + "/nwend-" + nday;
				} else return false;		
		}
		return newFormattedPeriod;
	}
}

function q_events_getPeriodType( period ) {
	var beg = period.split( "/" )[ 0 ];
	var end = period.split( "/" )[ 1 ];
	var reg=new RegExp("^[0-9]{2}[-]{1}[0-9]{2}[-]{1}[0-9]{4}$","g");
	if( ! end ) return "all";
	else if( reg.test( beg ) || reg.test( end ) ) return "fixed";
	else return "slipping";
}

function q_select_period( desc, callback, defaultValue ) {
	var src = $( '<div class="q_events_select"></div>' )
		.data( "desc", desc );
	
	var q_events_fixedDate_div = '<div class="q_eventform_date qmc1 bg_self__text_bw_bd_bw qtxt1 all"></div><input class="q_events_dateFixed" type="hidden" value="">';
	
	var q_events_selector_fixed = '<table class="q_events_selector_fixed"><tr><td class="q_events_selectors_td q_events_datepicker q_events_datepicker0">' + q_events_msgs[ "fromPeriod" ] + q_events_fixedDate_div + '</td><td class="q_events_selectors_td q_events_datepicker q_events_datepicker1">' + q_events_msgs[ "toPeriod" ] + q_events_fixedDate_div + '</td></tr></table>';
	
	var q_events_selector_slipping = '<table class="q_events_selector_slipping"><tr><td class="q_events_selectors_td">' + q_events_msgs[ "fromPeriod" ] + '<div class="q_events_selectors_slipping_select"><select class="qevtsmgr_0"></select></div></td><td class="q_events_selectors_td">' + q_events_msgs[ "toPeriod" ] + '<div class="q_events_selectors_slipping_select"><select class="qevtsmgr_1"></select></div></td></tr></table>';
	
	src.append( '<div class="q_events_periodSelectors" style="display:none">' + q_events_selector_fixed + q_events_selector_slipping + '</div>' );
	
	var q_events_periods_arr = [ "all", "fixed", "slipping" ];
	
	var json =  { 
		src : src.get( 0 ) ,
		title : q_events_msgs[ "selectPeriod" ], 
		reveal_callback : function( div, json ){
			$( ".qevtsmgr_0", div )
			.options( [
				{ name : q_events_msgs[ "period_beg" ] , value : "beg", selected : "selected" },
				{ label : "  ", options : [
					{ name : q_events_msgs[ "period_30daysp" ], value : "30daysp" },
					{ name : q_events_msgs[ "period_15daysp" ], value : "15daysp" },
					{ name : q_events_msgs[ "period_7daysp" ], value : "7daysp" },
					{ name : q_events_msgs[ "period_yd" ], value : "yd" },
					{ name : q_events_msgs[ "period_td" ], value : "td" },
					{ name : q_events_msgs[ "period_tm" ], value : "tm" }
				] },
				{ label : "  ", options : [
					{ name : q_events_msgs[ "period_lwbeg" ], value : "lwbeg" },
					{ name : q_events_msgs[ "period_wbeg" ], value : "wbeg" },
					{ name : q_events_msgs[ "period_nwbeg" ], value : "nwbeg" }
				] },
				{ label : "  ", options : [
					{ name : q_events_msgs[ "period_lmbeg" ], value : "lmbeg" },
					{ name : q_events_msgs[ "period_mbeg" ], value : "mbeg" },
					{ name : q_events_msgs[ "period_nmbeg" ], value : "nmbeg" }
				] },
				{ label : "  ", options : [
					{ name : q_events_msgs[ "period_ybeg" ], value : "ybeg" }
				] }				
			] ) ;
			
			$( ".qevtsmgr_1", div )
			.options( [
				{ name : q_events_msgs[ "period_yd" ] , value : "yd" },
				{ name : q_events_msgs[ "period_td" ] , value : "td" },
				{ name : q_events_msgs[ "period_tm" ] , value : "tm" },
				{ name : q_events_msgs[ "period_7daysf" ], value : "7daysf" },
				{ name : q_events_msgs[ "period_15daysf" ], value : "15daysf" },
				{ name : q_events_msgs[ "period_30daysf" ], value : "30daysf" },
				
				{ label : "  ", options : [
					{ name : q_events_msgs[ "period_lwend" ], value : "lwend" },
					{ name : q_events_msgs[ "period_wend" ], value : "wend" },
					{ name : q_events_msgs[ "period_nwend" ], value : "nwend" }
				] },
				{ label : "  ", options : [
					{ name : q_events_msgs[ "period_lmend" ], value : "lmend" },
					{ name : q_events_msgs[ "period_mend" ], value : "mend" },
					{ name : q_events_msgs[ "period_nmend" ], value : "nmend" }
				] },
				{ label : "  ", options : [
					{ name : q_events_msgs[ "period_yend" ], value : "yend" }
				] },
				{ label : "  ", options : [
					{ name : q_events_msgs[ "period_end" ], value : "end", selected : "selected" }	
				] }		
			] ) ;
			
			$( ".q_eventform_date", div ).unbind( "click" ).click( function(){ 
				$( this ).parent().hasClass( "q_events_datepicker0" ) ? q_events_datepicker( $( ".q_events_datepicker0", div ) ) : q_events_datepicker( $( ".q_events_datepicker1", div ) ) ; 
			} );
			
			var checkboxes_table = $( ".q_events_select", div ).prepend( '<table class="q_events_selectors"></table>' ).find( "table:first" ) ;
			var valuestypes = ( desc.values.length == 0 ) ? [] : $.map( desc.values , function( v ){ return [ v.kind ] ; } ) ;
				
			for ( var i = 0; i < q_events_periods_arr.length; i++ ) {
				var id_period = "q_events_select_" + new Date().getTime() + "_" + q_events_periods_arr[ i ];
				checkboxes_table.
					append( '<tr></tr>' ).
					find( "tr:last" ).
						append( '<td class="q_events_select_period" align="left"></td>' ).
							find( "td:last" ).
								append( '<input type="radio" name="q_events_radio" id="' + id_period + '" value="' + q_events_periods_arr[ i ] + '"/>' ).
								append( '<label></label>' ).
									find( "label:last" ).
										attr( "for", id_period ).
										html( q_events_msgs[ "events_" +  q_events_periods_arr[ i ] ] ) ;
			}
				
			$( ".q_events_select_period :input", checkboxes_table )
				.mousedown( function( event ){ q_stopPropagation( event ); } )
				.click( function(){ 
					switch( $( this ).val() ) {
						case "all" :
							$( ".q_events_periodSelectors" ).hide();
						break;
						case "fixed" : 
							$( ".q_events_periodSelectors" ).show();
							$( ".q_events_selector_fixed" ).show();
							$( ".q_events_selector_slipping" ).hide();								
						break;
						case "slipping" :
							$( ".q_events_periodSelectors" ).show();
							$( ".q_events_selector_fixed" ).hide();
							$( ".q_events_selector_slipping" ).show();								
						break;
					}
				} );				
			
			//initialisation période
			if( defaultValue ) {
				var periodType = q_events_getPeriodType( defaultValue );
				var beg = defaultValue.split( "/" )[ 0 ];
				var end = defaultValue.split( "/" )[ 1 ];
				$( ".q_events_select_period :input", div ).filter( "[value=" + periodType + "]" ).click();
				switch( periodType ) {
					case "all" :
						//do nothing
					break;
					case "fixed" :
						beg = beg.split( "-" ).join( "." );
						end = end.split( "-" ).join( "." );
						$( ".q_events_datepicker0 .q_eventform_date", div ).html( beg );
						$( ".q_events_datepicker0 .q_events_dateFixed", div ).val( beg );
						$( ".q_events_datepicker1 .q_eventform_date", div ).html( end );		
						$( ".q_events_datepicker1 .q_events_dateFixed", div ).val( end );						
					break;
					case "slipping" :
						$( ".qevtsmgr_0", div ).val( beg ) ;
						$( ".qevtsmgr_1", div ).val( end ) ;
					break;
				}
			}
		},
		buttons : [
			{ icon : "adminmenu sprite_cancel_32", label : common_message[ "cancel" ], onclick : function(){ q_fsm_delete(); } },
			{ icon : "adminmenu sprite_validate_32", label : common_message[ "ok" ], onclick : function(){ 
				var div = q_fsm_currentblock();
				var thePeriod;
				switch( $( ".q_events_select_period :input:checked", div ).attr('value') ) {
					case "all" :
						thePeriod = "all";
					break;
					case "fixed" : 
						var startingDate = $( ".q_events_datepicker0 .q_eventform_date", div ).html();
						var endingDate = $( ".q_events_datepicker1 .q_eventform_date", div ).html();
						if( startingDate == "" ) startingDate = $.datepicker.formatDate( "dd-mm-yy", new Date() );
						else if( endingDate == "" ) endingDate = $.datepicker.formatDate( "dd-mm-yy", new Date() );
						
						thePeriod = startingDate.split( "/" ).join( "-" ) + '/' + endingDate.split( "/" ).join( "-" );
					break;
					case "slipping" :
						thePeriod = $( ".qevtsmgr_0", div ).val() + '/' + $( ".qevtsmgr_1", div ).val();
					break;
				}
				
				q_fsm_delete();
				callback( thePeriod );
			} }
		]
	};
	q_fsm_reveal( json );
}

function q_events_select_updatefields( kinds ){	
	var desc = $( '.q_events_select', q_fsm_currentblock() ).data( "desc" );

	$( '.q_events_select', q_fsm_currentblock() ).data( "kind", kinds );

	var tabs = $( '.q_events_search_tabs', q_fsm_currentblock() );
	//try{ tabs.accordion( "destroy" ); } catch( e ){};
	try{ tabs.tabs( "destroy" ); } catch( e ){};
	tabs.empty();
	
	if ( kinds.length > 1 ){
		var ul = $( '<ul></ul>' ).appendTo( tabs );
		for ( var k = 0; k < kinds.length; k++ ){
			ul.append( $( '<li></li>' )
				.append( $( '<a></a>' )
					.attr( "href", "#q_select_events_tabs_" + kinds[ k ] )
					.html( q_events_msgs[ "events_" +  kinds[ k ] ] )
				)
			);
		}
	}
	var values = {} ;
	$.each( desc.values , function( i , v ){ values[ v.kind ] = v.filter ; } ) ;
	for ( var k = 0; k < kinds.length; k++ ){
		var kind = kinds[ k ];
		if ( ! events_prototypes[ kind ].properties ) return;
		
		var div = $( '<div></div>' )
			.attr( "id", "q_select_events_tabs_" + kind )
			.attr( "qkind", kind )
			.appendTo( tabs );

		var table = $( '<table cellpadding="5" width="100%" cellspacing="0"></table>' ).appendTo( div );
		
		for ( var i = 0 ; i < desc.fields[ kind ].length ; i++ ) {
			var ppty_name = desc.fields[ kind ][ i ];
			var ppty_kind = ( events_prototypes[ ppty_name ] && events_prototypes[ ppty_name ].kind ) ? events_prototypes[ ppty_name ].kind : "";
			var ppty_value = ( values[ kind ] && values[ kind ][ ppty_name ] ) || undefined;
			
			if ( $.inArray( ppty_kind, [ "dayselector", "icon", "choosefile" ] ) != -1 ) continue;
			if ( $.inArray( ppty_name, [ "icon", "image" ] ) != -1 ) continue;
			//if ( $.inArray( ppty_name, [ "homescore", "vsscore" ] ) != -1 ) continue;
			
			tr = $( '<tr>' ).appendTo( table );
			tr.append( '<td align="right" class="q_events_search_title clubcolor3">' + ( q_events_msgs[ "filter_" + ppty_name ] || q_events_msgs[ ppty_name ] || ppty_name ) + q_events_msgs[ ":" ] + '</td>' );	
			var td = $( '<td>' ).appendTo( tr );
			
			if ( ppty_kind == "calendar" ) {
				var cal = q_eventform_calendar( ppty_name, ppty_value );
				var pickoptions =  { changeMonth: true, changeYear: true, yearRange : 'c-99:c+99', dateFormat : "yy_mm_dd", defaultDate : $( "input", cal ).val() };		
				$( cal ).click( function(){ q_datepicker( $( "input", this ), { datePicker : pickoptions, displayField : $( ".q_eventform_cal_display", cal ) }  ); } );
				td.append( cal ) ;
			} 
			else if ( ppty_kind == "openselect" ) q_append_eventform_openselect( td , ppty_name, ppty_value, { multiple : true } ) ;
			else if ( ppty_kind == "closedselect" ) td.append( q_eventform_closedselect( ppty_name, ppty_value, { multiple : true } ) );
			else if ( ppty_kind == "dayselector" ) td.append( q_eventform_dayselector( ppty_name, ppty_value ) );
			else if ( ppty_kind == "matchselector" ) td.append( q_eventform_matchselector( ppty_name, ppty_value ) );
			else td.append( q_eventform_textinput( ppty_name, ppty_value ) );
		}
		$( ':input[class*="qevtsmgr_"]', table ).css( { 
			"width" : "250px", 
			//"min-width : "200px",
			//"max-width" : "300px",
			"max-height" : "80px",
			"border" : "solid 1px #777"
		 } );
	}
	//$( tabs ).accordion( { autoHeight : false, collapsible : true } );
	tabs.tabs( { "selected" : 0 } );
}

function q_events_search( eventselectors , desc ){
	var opt = $.extend( {
		sorted : "asc", // du plus vieux au plus récent ("asc") ou l'inverse ("desc" )
		output : "json" // "json" ou "xml"
	}, desc || {} );
	
	if ( ! clubevents ) return []; 
	var events = [];
	var eventDisplayDate = {} ;

	for ( var i = 0 ; i < eventselectors.length ; i++ ) {
		var eventselector = eventselectors[ i ] ;
		var e = $( 'event[kind="' + eventselector.kind + '"]' , clubevents );
		var eventfilter = eventselector.filter ;
		for ( var k in eventfilter ) {
			if ( k == "matchselector" && $.inArray( eventfilter[ k ] , [ "l" , "ln" , "n" ] ) != -1 ) {
				var today = $.datepicker.formatDate( "yy_mm_dd", new Date() );
				var teams = {} ;
				var s = [];
				
				for ( var jj=0; jj < e.length; jj++ ) {
					var m = e[ jj ] ;
					var team = $( "localteam", m ).text() ;
					if ( ! teams[ team ] ) teams[ team ] = {} ;
					var d = $.datepicker.formatDate( "yy_mm_dd", q_events_parseDate( $( "date", m ).text() ) );
					if ( d == today ) {
						s.push( $( m ).attr( "id" ) ) ;
						continue ;
					}
					if ( $.inArray( eventfilter[ k ] , [ "l", "ln" ] ) != -1 ) { // prevmatch
						if ( d < today && ( ! teams[ team ].prevdate || d > teams[ team ].prevdate ) ) {
							teams[ team ].prevdate = d ;
							s.push( $( m ).attr( "id" ) ) ;
							if ( teams[ team ].previndex != undefined ) s[ teams[ team ].previndex ] = null ;
							teams[ team ].previndex = s.length - 1 ;
						}
					}
					if ( $.inArray( eventfilter[ k ] , [ "ln", "n" ] ) != -1 ) { // nextmatch
						if ( d > today && ( ! teams[ team ].nextdate || d < teams[ team ].nextdate ) ) {
							teams[ team ].nextdate = d ;
							s.push( $( m ).attr( "id" ) ) ;
							if ( teams[ team ].nextindex != undefined ) s[ teams[ team ].nextindex ] = null ;
							teams[ team ].nextindex = s.length - 1 ;
						}
					}
				}
				e = e.filter( function( index ){
					return $.inArray( $( this ).attr( "id" ) , s ) != -1 ;
				} ) ;
			} else e = e.filter( function( index ){ 
				if ( k == "matchselector" ) {
					var hs = $( "homescore", this ).text().replace( /[^0-9]/g, "" ) ;
					return ( ( eventfilter[ k ] == "toplay" &&  hs == "" ) || ( eventfilter[ k ] == "played" && hs != "" ) );
				}
				function inSelector( value , selectors ){
					if ( typeof selectors == "string" ) return inSelector( value , [ selectors ] ) ;
					var kind = ( events_prototypes[ k ] && events_prototypes[ k ].kind ) ? events_prototypes[ k ].kind : "" ;
					for ( var j = 0 ; j < selectors.length ; j++ ){
						if ( $.inArray( kind , [ "openselect" , "closedselect" ] ) == -1 ) {
							var r = new RegExp( selectors[ j ], "gi" );
							if ( r.test( value ) ) return true;
						} else if ( value == selectors[ j ] ) return true ;
					}
					return false;
				}
				return inSelector( $( k , this ).text().toLowerCase() , eventfilter[ k ] ) ;
			} );
		}
		if ( eventselector.date && eventselector.date != "-1" ) {
			e = e.filter( function( index ){
				var d = $( "date", this );
				if ( ! d.length ) d = $( "day", this );
				if ( ! d.length ) return false;
				var dayid = $.datepicker.formatDate( ( ( eventselector.kind == "birthday" ) ? "*" : "yy" ) + "_mm_dd", q_events_parseDate( d.text() ) );
				d = q_events_checkdate( dayid, eventselector.date, null, true );
				if ( d == false ) return false ;
				eventDisplayDate[ $( this ).attr( "id" ) ] = d ;
				return true ;
			} ) ;
		}
		events = $.merge( events, e );
	}
	
	if ( opt.output == "xml" ) return events; 
	
	var events_table = [];
	$( events ).each( function(){ 
		var event = q_events_getJSON( $( this ).attr( "kind" ), $( this ).attr( "id" ) , { realvalues : true } ) ;
		event.eventid = $( this ).attr( "id" );
		event.eventkind = $( this ).attr( "kind" );
		events_table.push( event ); 
	} );

	if ( opt.sorted ) events_table.sort( function( a, b ){ 
		var now = new Date();
		var y = now.getFullYear();
		function eventdate( e ){
			if ( eventDisplayDate[ e.eventid ] ) return eventDisplayDate[ e.eventid ] ;
			var edate = q_events_parseDate( e.date || e.day || "" );
			if ( e.eventkind != "birthday" ) return edate ;
			var d1 = new Date( edate ) ;
			d1.setFullYear( y ) ;
			var d2 = new Date( edate ) ;
			d2.setFullYear( y + ( ( now - d1 > 0 ) ? 1 : -1 ) ) ;
			if ( Math.abs( now - d1 ) > Math.abs( now - d2 ) ) return d2 ;
			return d1 ;
		}
		var adate = eventdate( a );
		var bdate = eventdate( b );
		if ( ( adate - bdate ) == 0 ){
			if ( a.eventkind == b.eventkind && a.eventkind == "match" ) {
				function formatTime( t ){
					return t.replace( /[^0-9]+/g, ":" ).replace( /^:/, "" ).replace( /^([0-9]):/, "0$1:" ) ;
				}
				var atime = a.time ? formatTime( a.time ) : "z" ;
				var btime = b.time ? formatTime( b.time ) : "z";
				if ( atime == btime ) return 0 ;
				return ( opt.sorted == "asc" ) ? ( ( atime > btime ) ? 1 : -1 ) : ( ( btime > atime ) ? 1 : -1 ) ;
			}
		}
		return ( opt.sorted == "asc" ) ? ( adate - bdate ) : ( bdate - adate );
	} );

	return events_table ;
}

function q_events_alert( events, options ){
	var div = $( '<div onmousedown="q_stopPropagation( event );" style="width:600px; max-height:500px; overflow:auto;"></div>' );
	options = $.extend( { displaydateformat : "dd/mm" }, options || {} );
	q_events_renderevents( div, events, options );
	q_alert( div );
}

function q_events_datepicker( td ) {
	q_datepicker( $( "input", td ), { datePicker : { changeMonth: true, changeYear: true, yearRange : 'c-99:c+99', dateFormat : "dd.mm.yy", defaultDate : $( "input", td ).val() }, displayField : $( "div", td ) } ) ;
}



function logcookies() {
	logentry() ;
	logad() ;
}

function logentry() {
	try {
		if ( getcookie( "entry" ) ) return ;
		setcookie( "entry" , window.location.pathname + window.location.search , 365 ) ;
		setcookie( "entrydate" , "" + Date.parse( new Date().toUTCString() ) , 365 ) ;
	} catch( err ) { }
}

function logad() {
	try {
		var searchad = q_geturlparams()[ "ad" ] ;
		if ( ! searchad ) {
			if ( ! ( /(www\.)?basket-jeu-2011.com/ ).test( window.location.host ) ) return ;
			searchad = q_geturlparams()[ "refererpage" ] ;
		}
		if ( getcookie( "ad" ) ) return ;
		setcookie( "ad" , searchad , 365 ) ;
		setcookie( "addate" , "" + Date.parse( new Date().toUTCString() ) , 365 ) ;
	} catch( err ) { }
}

function q_initlanguage() {
	if ( ! document.cookie ) return ;
	var lang = getcookie( "lang" ) ;
	if ( lang ) return ;
	lang = q_navigatorlanguage() ;
	if ( ! lang ) lang = "en" ;
	if ( lang != "fr" ) lang = "en" ;
	setcookie ( "lang" , lang , 365000 ) ;
}

function q_redirectmember() {
	var lang ;
	var url = "fv.html" ; 	
	if ( ! document.cookie ) {
		lang = q_navigatorlanguage() ;
		if ( ! lang ) lang = "en" ;
		if ( lang != "fr" ) lang = "en" ;
	} else {
		lang = getcookie( "lang" ) ;
		if ( ( getcookie ( "status" ) ) && ( getcookie ( "status" ) == "member" ) ) url = "authfv.html" ;
	}
	if ( ! lang ) lang = "en" ;
	if ( lang != "fr" ) lang = "en" ;
	window.location.replace ( "services/homepage@" + lang + "/" + url )
}

// also in q_common
function q_navigatorlanguage() {
	var lang = ( navigator.language ) ? navigator.language : ( ( navigator.userLanguage ) ? navigator.userLanguage : "fr" ) ;
	lang = lang.split("-")[ 0 ] ;
	if ( lang != "fr" ) lang = "en" ;
	return lang ;
}


var q_jstarget ; // our IFrame object

function q_document_form( formname ) {
	for ( var i = 0 ; i < document.forms.length ; i++ ) if ( document.forms[ i ].name == formname ) return document.forms[ i ] ;
	return null ;
}

function q_xrssubmit( formname ) {
	if ( q_alreadysubmitted() ) return false ;
	var theform = q_document_form( formname ) ;
	theform[ "q_method" ].value = "rscgi" ;
	return xxq_rssubmit( formname ) ;
}

function q_rssubmit() {
	if ( q_alreadysubmitted() ) return false ;
	document.mainform[ "q_method" ].value = "rscgi" ;
	return xq_rssubmit() ;
}

function xq_rssubmit() {
	return xxq_rssubmit( "mainform" ) ;
}

function xxq_rssubmit( formname ) {
	if (!document.createElement) return true ;
	if ( ! q_jstarget ) q_jstarget = getelement( "jstarget" ) ;
	if ( ! q_jstarget ) {
		var tempIFrame=document.createElement( 'iframe' ) ;
		tempIFrame.id = "jstarget"  ;
		tempIFrame.name = "jstarget"  ;
		tempIFrame.frameborder = "0"  ;
		tempIFrame.style.width='0px' ;
		tempIFrame.style.height='0px' ;
		tempIFrame.style.border='0px' ;
		q_jstarget = document.body.appendChild( tempIFrame ) ;
		q_jstarget.src = '/services/qblank' ;
	}
	var theform = q_document_form( formname ) ;
	theform.target = 'jstarget' ;
	theform.action = cgiurl( "rscgi" ) ;
	theform.submit() ;
}

function cgiurl( requestmethod ) {
	if ( iswaiting ) {
//		if ( document.mainform.cgiurl ) return document.mainform.cgiurl.value ;
//		return "/cgi-bin/cgi_wait" ;
		return "wait" ;
	}
	var url ;
	if ( window.q_cgiurls && q_cgiurls.length ) url = q_cgiurls [ Math.floor ( Math.random() * q_cgiurls.length ) ] ;
	else if ( requestmethod == "rscgi" ) return "/cgi-bin/cgismilers" ;// return "http://" + window.location.host + "/cgi-bin/cgismilers" ;
	else if ( requestmethod == "ajax" ) return "/cgi-bin/cgismileajax" ;
	else {
		/* if ( document.mainform && document.mainform.q_space && document.mainform.q_space.value == "5420AF72-06F6-4116-927C-0054F6727D8E" ) url = "/cgi-bin/cgiremote" ;
		else */
		try{
			url = members[memberid].userlevel || "membre" ;
			if ( url == "member" ) url = "membre" ;
			if ( url == "invite" ) url = "login" ;
		}catch(e){
			url = "login" ;
			//url = "/cgi-bin/cgismile" ;
		}
		//url = "/cgi-bin/cgismile" ;
	}
	return url ;
}

function waitq_submit( forcesubmit ) {
	if ( ( ! forcesubmit ) && ( ! q_readytosubmit() ) ) return false ;
	document.mainform[ "q_method" ].value = "cgi" ;
	document.mainform.action = cgiurl() ;
	document.mainform.submit() ;
	return true ;
}

function q_submit( forcesubmit ) {
	if ( ! forcesubmit && ! q_readytosubmit() ) return false ;
	if ( ! forcesubmit && q_alreadysubmitted() ) return false ;
	document.mainform[ "q_method" ].value = "cgi" ;
	document.mainform.action = cgiurl() ;
	document.mainform.submit() ;
	return true ;
}

var q_ready = true ;

function q_alreadysubmitted(){
	if ( iswaiting ) return true ;
	if ( q_ready ){
		q_ready = false ;
		return false ;
	}
	return true ;
}

var serverbusy = { "fr" : "Opération en cours, veuillez réessayer dans quelques instants." } ;

function q_readytosubmit( asking1 ) {
	var asking = asking1 === undefined ?  true : asking1 ;
	if ( ( ! q_ready ) || ( iswaiting ) ) {
		if ( asking ) {
			var defaultlang = "fr" ;
			var lang = ( q_lang ) ? q_lang : defaultlang ;
			var s = common_message[ "serverbusy" ] || serverbusy[ lang ] || serverbusy[ defaultlang ] ;
			q_alert( s ) ;
		}
		return ( ( q_ready ) && ( ! iswaiting ) ) ;
	}
	return true ;
}

function handlepurchasebutton(){
	document.mainform.target='_self' ;
	document.mainform.mission.value='purchase'	 ;
	q_submit() ;
}

function resetform( wantxml , req ) {
	if ( queuedData.length ) {
		if ( ( typeof queuedData[ 0 ] ) == "function" ) {
			queuedData[ 0 ]( wantxml , req ) ;
			queuedData.splice( 0, 1 ) ;
		} else queuedData_ajaxsubmit( wantxml , req ) ;
	}
	else q_ready = true ;
}

function writenewusercookie ( sid ) {
	if ( sid == undefined ) {
		sid = document.mainform.sessionid.value ;
	} else {
		document.mainform.sessionid.value = sid ;
		document.mainform[ "q_space" ].value = ( document.mainform[ "q_space" ].value != "" ) ? document.mainform[ "q_space" ].value : sid ;
	}
	if ( document.cookie ) {
		if ( ( ! getcookie( "uid" ) ) || ( getcookie( "uid" ) != "member" ) ) {
			setcookie( "uid", sid, 15 ) ;
			setcookie( "known", true, 60000 ) ;
		}
	}
}

function handlenewuser ( x ) {
	if ( window.q_nonewsessionid ) return ;
	if ( document.mainform.sessionid.value != "" ) return ;
	var sid = x [ "q_newsessionid" ] ;
	if ( x.authresult ) {
		document.mainform.sessionid.value = sid ;
		return ;
	}
	if ( ! sid ) q_alert ( common_message[ "unexperror" ] ) ;
	document.mainform.sessionid.value = sid ;
	document.mainform[ "q_space" ].value = ( x[ "q_newspace" ] ) ? x[ "q_newspace" ] : ( ( document.mainform[ "q_space" ].value ) ? document.mainform[ "q_space" ].value : sid ) ;
	if ( document.cookie ) {
		if ( ( ! getcookie( "uid" ) ) || ( getcookie( "uid" ) != "member" ) ) {
			setcookie( "uid", sid, 15 ) ;
			setcookie( "known", true, 60000 ) ;
		}
	}
}

var q_ajaxgetreq = null ;

function q_ajaxgetstdcallback() {
	if ( ! q_ajaxgetreq ) return ;
	if ( q_ajaxgetreq.readyState == 4 ) {
		if ( q_ajaxgetreq.status == undefined ) {
			//badrequest() ;
			return ;
		}
		if ( q_ajaxgetreq.status == 200 ) {
			if ( q_ajaxgetreq.responseText ) handleupdate ( q_ajaxgetreq.responseText ) ;
		} else {
			handleupdate ( "" ) ;
		}
		if ( issafari() ) return ;
		q_ajaxgetreq = null ;
	}
}

function q_ajaxget( url ) {
	if ( ! q_ajaxgetreq ) {
		if ( window.XMLHttpRequest ) {
	 		q_ajaxgetreq = new XMLHttpRequest() ;
			if ( q_ajaxgetreq.overrideMimeType )  { q_ajaxgetreq.overrideMimeType( 'text/plain' ) ; }
		} else if ( window.ActiveXObject ) {
			try { q_ajaxgetreq = new ActiveXObject ( "Msxml2.XMLHTTP" ) ;} 
			catch (e )  {
				try { q_ajaxgetreq = new ActiveXObject ( "Microsoft.XMLHTTP" ) ; } 
				catch (e )  {}
			}
	        }
		q_ajaxgetreq.onreadystatechange = q_ajaxgetstdcallback ;
	}
	q_ajaxgetreq.open( "GET" , url , true ) ;
	q_ajaxgetreq.setRequestHeader ( "Content-Type", "text/xml;charset=utf-8" ) ; 
	q_ajaxgetreq.send ( null ) ;
}

function badrequest() {
	var x = common_message[ "badrequest" ] ;
	if ( issafari() ) x = x+"\n\n"+common_message[ "safaribugarrow" ] ;
	else x = x+"\n\n"+common_message[ "sigbug" ] ;
	q_alert(x) ;
}

var queueajaxsubmit = false ;
var queuedData = [] ;

function q_ajaxpptycallback( x , withwait, callBackFunction , params ) {
	for ( var k in x ) {
		if ( k == "currspaceright" ) {
			q_addspaceparams( x.currspaceright ) ;
			if ( window.q_sitemap_update ) q_sitemap_update() ;//2011-05-06, vh : sinon la ligne suivante fait une erreur car le sitemap peut contenir des services interdits, donc absents.
			if ( window.q_sitemap_update ) qlub_construct_weblinknames() ;//2011-03-22, vh : on vient d'écraser spacexml.sitemap et surtout spacexml.services, il faut refaire les noms de page.
		}
		if ( ( /^otherspaceright\?/ ).test( k ) ) {
			var spaceid = k.replace( /otherspaceright\?id=/ , "" ) ;
			var space = q_spacefromid( spaceid ) ;
			space.spacexml = x[ k ] ;
			q_sitemap_update( space.spacexml ) ;
			function getsubhost( currxml ){
				var re = new RegExp( "^[^/]+(/)?([^/]+)?$" ) ;
				var host = currxml.infos.host || currxml.infos.privatedomain ;
				return host.replace( /club[0-9]+\.quomodo\.com\// , "" ).replace( re , "$2$1" ) ;
			}
			qlub_construct_weblinknames( space.spacexml , ( ( getsubhost( spacexml ) == "" ) ? "" : "../" ) + getsubhost( space.spacexml ) ) ;
		}
		if ( k == "membersall" ) {
			if ( window.members ) members = x.membersall ;
			q_addspaceparams( { members : x.membersall } ) ;
		}
		if ( k == "membersalllight" ) q_addspaceparams( { members_light : x.membersalllight } ) ;
		if ( k == "membersallqorp" && window.am_members ) am_members = x.membersallqorp ;
	}
	if ( withwait ) q_fsm_delete();
	if ( callBackFunction != null ) {
		if ( params ) callBackFunction.apply( this , [ x ].concat( params ) ) ;
		else callBackFunction( x ) ;
	}
}

function q_ajaxgetppty( ppty , callBackFunction , params ) {
	q_ajaxobjgetppty( null , null , ppty , callBackFunction , params ) ;
}
function q_ajaxobjgetppty( objkind , objselector , ppty , callBackFunction , params ) {
	var withwait = false;
	if ( withwait ) q_fsm_wait();
	document.mainform.mission.value = ( ( q_pagemode() == "web" ) ? "www" : "" ) + "getspaceppty" ;
	q_ajaxsubmitwithservice( "common@" + q_lang , { objkind : objkind , objselector : objselector , properties : ppty } , q_ajaxpptycallback , [ withwait, callBackFunction , params ] ) ;
}
function q_ajaxsetppty( json , callBackFunction , params ) {
	q_ajaxobjsetppty( null , null , json , callBackFunction , params ) ;
}
function q_ajaxobjsetppty( objkind , objselector , json , callBackFunction , params ) {
	q_ajaxobjsetpptywithoptions( objkind , objselector , json , {} , callBackFunction , params ) ;
}
function q_ajaxobjsetpptywithoptions( objkind , objselector , json , options , callBackFunction , params ) {
	var withwait = true;
	if ( withwait ) q_fsm_wait();
	document.mainform.mission.value = ( ( q_pagemode() == "web" ) ? "www" : "" ) + "setspaceppty" ;
	q_ajaxsubmitwithservice( "common@" + q_lang , $.extend( {} , options , { objkind : objkind , objselector : objselector , data : json } ) , q_ajaxpptycallback , [ withwait, callBackFunction , params ] ) ;
}
function q_ajaxobjremove( objkind , objselector , callBackFunction , params ) {
	var withwait = true;
	if ( withwait ) q_fsm_wait();
	document.mainform.mission.value = ( ( q_pagemode() == "web" ) ? "www" : "" ) + "removespaceobj" ;
	q_ajaxsubmitwithservice( "common@" + q_lang , { objkind : objkind , objselector : objselector } , q_ajaxpptycallback , [ withwait, callBackFunction , params ] ) ;
}

function q_ajaxsubmitqueue( callBackFunction ) {
	if ( queuedData.length == 0 ) {
		queueajaxsubmit = false ;
		return ;
	}
	queueajaxsubmit = false ;
	var r = { json : queuedData } ;
	r.upindex = document.mainform.upindex.value ;
	q_ajaxsubmit ( r , callBackFunction ) ;
	queuedData = [] ;
}

function q_queueajaxsubmit() {
	queueajaxsubmit = true ;
}

function q_ajaxsubmitwithservice ( service , q_data , callBackFunction , params ) { return xq_ajaxsubmitwithservice ( service , q_data , callBackFunction , false , params ) ; }

function q_xmlajaxsubmitwithservice ( service , q_data , callBackFunction , params ) { return xq_ajaxsubmitwithservice ( service , q_data , callBackFunction , true , params ) ; }

function xq_ajaxsubmitwithservice ( service , q_data , callBackFunction , wantxml , params ) {
	var savedservice = document.mainform.service.value ;
	document.mainform.service.value = service ;
	try { xq_ajaxsubmit( q_data , callBackFunction , wantxml , params ) ; } catch( err ) {} ;
	document.mainform.service.value = savedservice ;
}

function q_ajaxsubmit ( q_data , callBackFunction , params ) { if ( window.currsvcid && document.mainform && document.mainform.service ) document.mainform.service.value = currsvcid.replace( /@intl/ , "@" + ( window.q_lang || "fr" ) ) ; return xq_ajaxsubmit ( q_data , callBackFunction , false , params ) ; }

function q_xmlajaxsubmit ( q_data , callBackFunction , params ) { return xq_ajaxsubmit ( q_data , callBackFunction , true , params ) ; }

function xq_ajaxsubmit ( q_data , callBackFunction , wantxml , params ) {
	if ( q_alreadysubmitted() ) {
		queuedData.push( [ [ q_data , callBackFunction , wantxml , params ] , document.mainform.mission.value , document.mainform.service.value ] ) ;
		return ;
	}
	xxq_ajaxsubmit ( q_data , callBackFunction , wantxml , params ) ;
}

function queuedData_ajaxsubmit( wantxml , req ) {
	document.mainform.mission.value = queuedData[ 0 ][ 1 ] ;
	var savedservice = document.mainform.service.value ;
	document.mainform.service.value = queuedData[ 0 ][ 2 ] ;
	var r = queuedData[ 0 ][ 0 ][ 0 ] ;
	if ( req && ( ! wantxml ) && r.upindex ) {// reset form peut être appelé sans arguments donc req peut être indéfini
		var x = new Object() ;
		if ( req.responseText != "" ) {
			x = eval ( "(" + req.responseText + ")" ) ;
		}
		queuedData[ 0 ][ 0 ][ 0 ].upindex = x.upindex || document.mainform.upindex.value ;
	}
 	xxq_ajaxsubmit.apply( this , queuedData[ 0 ][ 0 ] ) ;
	document.mainform.service.value = savedservice ;
	queuedData.splice( 0, 1 ) ;
}

function xxq_ajaxsubmit ( q_data , callBackFunction , wantxml , params ) {
	document.mainform[ "q_method" ].value = "ajax" ;
	var req = null;
	if ( window.XMLHttpRequest ) {
 		req = new XMLHttpRequest() ;
		if ( req.overrideMimeType )  { req.overrideMimeType( 'text/xml' ) ; }
	} else if ( window.ActiveXObject ) {
		try { req = new ActiveXObject ( "Msxml2.XMLHTTP" ) ; } 
		catch (e )  {
			try { req = new ActiveXObject ( "Microsoft.XMLHTTP" ) ; } 
			catch (e )  {}
		}
        }

	req.open ( "POST" , cgiurl( "ajax" ) , true ) ;
	req.setRequestHeader ( "Content-type", "application/x-www-form-urlencoded" ) ; 
	req.onreadystatechange = function() {
		if ( req.readyState == 4) {
			if ( req.status == undefined ) {
				badrequest() ;
				return false ;
			} else if ( req.status == 200) {
				if ( wantxml ) {
					resetform( wantxml , req ) ;
					if ( callBackFunction != null ) q_apply( callBackFunction , [ req.responseXML ].concat( q_args( params ) ) ) ;
				} else {
					var x = new Object() ;
					if ( req.responseText != "" ) {
						x = eval ( "(" + req.responseText + ")" ) ;
					}
					if ( x.servererror ) {
						resetform( wantxml , req ) ;
						handleajaxservererror( x ) ;
					} else if ( x.ajaxerror ) {
						resetform( wantxml , req ) ;
						handleajaxerror( x ) ;
					} else if ( x.waitid ) {
						handleajaxwait( x , callBackFunction ) ;
						iswaiting = true ;
					} else {
						iswaiting = false ;
						resetform( wantxml , req ) ;
						handlenewuser( x ) ;
						if ( callBackFunction != null ) q_apply( callBackFunction , [ x ].concat( q_args( params ) ) ) ;
					}
				}
				req = null ;
			}
		}
	} ;
	req.send( requiredhiddendata () + "&" + reqAddData ( "data" , q_toplist ( q_data ) ) ) ;
}

function handleajaxservererror( x ) {
	if ( window.q_pagemode && q_pagemode() == "makeweb" ) return ;
	var currentTime = new Date();
	var month = twodigs( currentTime.getMonth() + 1 ) ;
	var day = twodigs( currentTime.getDate() ) ;
	var year = currentTime.getFullYear() ;
	var hours = twodigs( currentTime.getHours() ) ;
	var min = twodigs( currentTime.getMinutes() ) ;
	var date = '<br/><br/><span style="font-style: italic; font-size:10px">' + day + "." + month + "." + year + ", " + hours + ":" + min + "</span>" ;
	q_alert ( ( x.servererror.message || common_message[ x.servererror.kind ].replace( /%s/ , x.servererror.desc ) ) + date ) ;
}

function handleajaxerror( x ) {
	if ( window.q_pagemode && q_pagemode() == "makeweb" ) return ;
	var lang = q_lang ;
//	window.location.replace( q_getrelativebaseurl() + '/services/common@' + lang + '/remoteerrorpage'  ) ;
	if ( x.errormessage == "forcehomepage" ) {
		q_alert ( common_message [ x.errormessage ] ) ;
		return openhomepage() ;
	}
	if ( typeof x.errormessage == "function" ) return x.errormessage() ;
	if ( x.customerrormessage ) return q_alert( x.customerrormessage ) ;
	if ( x.errormessage && common_message [ x.errormessage ] ) return q_alert( common_message [ x.errormessage ] ) ;
	q_alert( common_message [ "ajaxerror" ] ) ;
}

var iswaiting = false ;
var rwait ;
var waitcallBackFunction ;

function handleajaxwait( x , callBackFunction ){
	rwait = x ;
	if ( callBackFunction ) {
		waitcallBackFunction = callBackFunction ;
	} else {
		waitcallBackFunction = null ;
	}
	setTimeout ( ajaxwaitsubmit , 1000 * x.waitdelay ) ;
}

function ajaxwaitsubmit() {
	xxq_ajaxsubmit( rwait , waitcallBackFunction ) ;
}

var hiddenoptional = [] ;
var hiddenrequired = [ "mission" , "sessionid" , "service" , "q_space" , "filename" , "q_method" , "loginsfolder" ] ;

function requiredhiddendata( hiddenkeys ) {
	var z = hiddenrequired ;
	var s = "" ;
	var i ;
	for ( i = 0 ; i < z.length ; i++ ) {
		if ( document.mainform[ z[ i ] ] ) {
			if ( i > 0 ) s += "&" ;
			s += reqAddData( z[ i ] , document.mainform[ z[ i ] ].value ) ;
		}
	}
	hiddenkeys = ( hiddenkeys || [] ).concat( hiddenoptional ) ;
	for ( i = 0 ; i < hiddenkeys.length ; i++ ) {
		if ( document.mainform[ hiddenkeys[ i ] ] ) s += "&" + reqAddData( hiddenkeys[ i ] , document.mainform[ hiddenkeys[ i ] ].value ) ;
	}
	return s ;
}

function reqAddData( key , value ) {
	return encodeURIComponent( key ) + "=" + encodeURIComponent( value ) ;
}

/*
function -
function COUNTERS
*/

function q_ajaxcount( mission , callback ) {//mission = "binincrement" ou "bingetcount"
	xq_ajaxcount( mission, currsvcid, callback ) ;
}
function xq_ajaxcount( mission, what, callback ) {//mission = "binincrement" ou "bingetcount"
	$.ajax( {
		url: "/cgi-bin/cgicounter",
		data: { "data" : q_toplist( { mission: mission , spaceid : document.mainform.q_space.value , svcid : what } ) },
		success: function ( data ) { if ( callback ) callback( data ) ; },
		type: "POST",
		cache: false,
		dataType: "json"
	} ) ;
}

/*
function -
function UPLOAD
*/

var remote_upload_callback ;
var remote_upload_params = [] ;

function q_remote_upload_callback( x ) {
	var currspaceright = rights_record.currspaceright ;
	if ( ! q_spaceparam( "currsize" ) || ! q_spaceparam( "maxmb" ) ) {
		if ( remote_upload_callback ) remote_upload_callback.apply( this , [ x ].concat( remote_upload_params ) ) ;
		return ;
	}
	var maxmb = getmaxmb() * 1024 * 1024 ;
	if ( x.uploadcancelled ) {
		if ( x.overspace ) q_alert( common_message[ "overspace" ].replace( /%maxmb/ , q_smart_filesize( maxmb ) ).replace( /%overspace/ , q_smart_filesize( x.overspace ) ) ) ;
		else q_alert( common_message[ "maxsizereached" ].replace( /%maxmb/ , q_smart_filesize( maxmb  ) ) ) ;
		if ( remote_upload_callback ) remote_upload_callback.apply ( this , [ "stop" ].concat( remote_upload_params ) ) ;
		return ; 
	} else {
		if ( x.uploadedsize ) {
			if ( x.uploadedsize > maxmb ) q_alert( common_message[ "firstmaxsizereached" ].replace( /%maxmb/ , q_smart_filesize( maxmb  ) ) ) ; 
			q_setspaceparam( "currsize" , x.uploadedsize ) ;
			if ( q_spaceparam( "currqorpsize" ) && x.updatedsize ) q_setspaceparam( "currqorpsize" , "" + ( parseInt( q_spaceparam( "currqorpsize" ), 10 ) + x.updatedsize ) ) ;
			//if ( window.managespace_mbchanged ) managespace_mbchanged() ;
			q_mbchangedall() ;
		}
		
	}
	if ( remote_upload_callback ) remote_upload_callback.apply ( this , [ x ].concat( remote_upload_params ) ) ;
}

function q_setinputinmainform( inputname , inputvalue ) {
	if ( ! document.mainform[ inputname ] ) q_newinputinmainform( inputname ) ;
	document.mainform[ inputname ].value = inputvalue ;
}

function q_newinputinmainform( inputname ) {
	document.mainform.innerHTML += '<input type="hidden" name="' + inputname + '" value="" />' ;
}

function q_cloneinputsfrommainform( formname , inputhidden ) {
	var z = ( inputhidden ) ? inputhidden : hiddenrequired ;
	var i ;
	var input ;
	var theform = q_document_form( formname ) ;
	var firstelem = theform.firstChild ;
	var zi ;
	for ( i = 0 ; i < z.length ; i++ ) {
		zi = z[ i ] ;
		if ( document.mainform[ zi ] ) {
			if ( ! theform[ zi ] ) {
				input = q_CloneFromNode2( document.mainform[ zi ] ) ;
				if ( firstelem ) theform.insertBefore( input , firstelem ) ;
				else theform.appendChild( input ) ;
			}
			theform[ zi ].value = document.mainform[ zi ].value ;
		}
	}
}

function q_check_overspace( displayalert ) {
	if ( q_spaceparam( "currsize" ) && q_spaceparam( "maxmb" ) ) {
		var currsize = ( q_spaceparam( "currqorpsize" ) || q_spaceparam( "currsize" ) )/ 1024 / 1024 ; 
		var maxmb = getmaxmb() ;
		var b = maxmb && ( currsize > maxmb ) ;
		if ( b && displayalert ) q_alert( common_message[ "maxsizereached" ].replace( /%maxmb/ , q_smart_filesize( maxmb * 1024 * 1024 ) ) ) ;
		return b ;
	}
	return false ;
}

function q_availablespace(){
	if ( q_spaceparam( "currsize" ) && q_spaceparam( "maxmb" ) ) {
		var currsize = q_spaceparam( "currqorpsize" ) || q_spaceparam( "currsize" ) ;
		var maxmb = getmaxmb() *1024 * 1024 ;
		return maxmb - currsize ;
	}
	return 10*1024*1024;
}

function q_remote_upload( formname , callBack , params ) {
	q_remote_uploadwithoptions( {} , formname , callBack , params ) ;
}
function q_remote_uploadwithoptions( options , formname , callBack , params ) {
	if ( callBack ) remote_upload_callback = callBack ;
	else remote_upload_callback = null ;
	remote_upload_params = params || [] ;
	if ( q_check_overspace() ) return q_remote_upload_callback( { uploadcancelled : "maxsizereached" , maxmb : getmaxmb() } ) ;
	q_cloneinputsfrommainform( formname ) ;
	var theform = q_document_form( formname ) ;
	theform.mission.value = "upload" ;
	for ( var k in ( options || {} ) ) if ( theform[ k ] ) theform[ k ].value = options[ k ] ;
	q_xrssubmit( formname ) ;
}

var remote_remove_callback ;

function q_remote_remove_callback( x ) {
	if ( x.uploadedsize ) {
		q_setspaceparam( "currsize" , x.uploadedsize ) ;
		if ( q_spaceparam( "currqorpsize" ) && x.updatedsize ) q_setspaceparam( "currqorpsize" , "" + ( parseInt( q_spaceparam( "currqorpsize" ), 10 ) + x.updatedsize ) ) ;
		q_mbchangedall() ;
	}
	if ( remote_remove_callback ) remote_remove_callback( x ) ;
}

function q_remote_remove( rmfiles , callBack ) {
	var r = { json : rmfiles } ;
	document.mainform.mission.value = "rmfiles" ;
	remote_remove_callback = callBack ? callBack : null ; 
	q_ajaxsubmit( r , q_remote_remove_callback ) ;
}

function q_remote_changeuploadname( uploadid , linkname ) {
	var r = { uploadid : uploadid , linkname : linkname } ;
	document.mainform.mission.value = "changeuploadname" ;
	q_ajaxsubmit( r , null ) ;
}

function q_readusersettings( callBack ) {
	document.mainform.mission.value = "readusersettings" ;
	q_ajaxsubmitwithservice( "subscribe@" + q_lang , "" , callBack ) ;
}

function q_writeusersettings( usersettings ) {
	document.mainform.mission.value = "writeusersettings" ;
	q_ajaxsubmitwithservice( "subscribe@" + q_lang , { usersettings : usersettings } , null ) ;
}

function isbeta2(){
	return ( /^http:\/\/(beta2|club2).quomodo.com/ ).test( window.location.href ) ;
}


/*function cloneObject() {
  var o = new this.constructor();
  for (var p in this) o[p] = (typeof this[p] == 'object') ? this[p].cloneObject() : this[p];
  return o;
}

Object.prototype.clone = cloneObject


*/
function q_toplist( x ) {
	return "<?xml version='1.0' encoding='UTF-8'?><!DOCTYPE plist PUBLIC '-//Apple Computer//DTD PLIST 1.0//EN' 'http://www.apple.com/DTDs/PropertyList-1.0.dtd'><plist version='1.0'>" + q_toplisttags ( x ) + "</plist>" ;
}

function taggedescapedvalue ( s , x ) {
		return "<" + s + ">" + x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ) + "</" + s + ">" ;
}

function taggedvalue ( s , x ) {
		return "<" + s + ">" + x + "</" + s + ">" ;
}

function q_toplisttags ( x ) {
	if ( x == null) return "" ;
	var t, y, s ;
	t = typeof ( x ) ;
	if ( t == "number" ) {
		y = '' + x ;
		if ( /[Ee\.]/ . test ( y ) ) s = "real" ;
		else s = "integer" ;
		return taggedescapedvalue ( s , y ) ;
	} else if ( t == "string" ) {
		return taggedescapedvalue ( "string" , x ) ;
	} else if ( t == "function" ) {
		return taggedescapedvalue ( "string" , x.toString() ) ;
	} else if ( t == "boolean" ) {
		return ( x ) ? "<true/>" : "<false/>" ;
	} else if ( t == "object" ) {
		if ( x.tagName ) return taggedescapedvalue ( "string" , x.tagName + " element" ) ;
		s = '' ;
		if ( x.splice ) {
			for ( var i = 0 ; i < x.length ; i++ ) if ( x [ i ] != null && x [ i ] != undefined ) s += q_toplisttags ( x [ i ] ) ;
			return taggedvalue ( "array" , s ) ;
		} else {
			for ( y in x ) {
				if ( x [ y ] != null && x [ y ] != undefined ) s += taggedescapedvalue( "key" , y ) + q_toplisttags ( x [ y ] ) ;
			}
			return taggedvalue ( "dict" , s ) ;
		}
	}
}

function q_toxml( x , entete) {
	if ( entete ) return "<?xml version='1.0' encoding='UTF-8'?>\n<root>\n" + q_toxmltags ( x ) + "\n</root>\n" ;
	else return q_toxmltags ( x ) ;
}

/*
function q_toxmltags ( x ) {
	if ( x == null) return "" ;
	var t, y, s, res ;
	t = typeof ( x ) ;
	if ( t == "number" ) {
		return x ;
	} else if   ( t == "string" ) {
		return x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ) ;
	} else if ( t == "object" ) {
		res = "" ; 
		if ( x.tagName ) return res = "<" + x.tagName + "/>" ;
		if ( x.splice ) {
			for ( var i = 0 ; i < x.length ; i++ ) if ( x [ i ] != null ) res += "<item>" +  q_toxmltags ( x [ i ] ) +"</item>" ;
		} else {
			for ( y in x ) {
				if ( x [ y ] != null ) res += "<" + y + ">" + q_toxmltags ( x [ y ] ) + "</" + y + ">" ;
			}
		return res + ((x.tagName) ? (" </" + x.tagName + ">") : "") ;
		}
	}
}
*/

function q_toxmltags ( x ) {
	if ( x == null) return "" ;
	var t, y, s, res ;
	t = typeof ( x ) ;
	if ( t == "number" ) return x ;
	if ( t == "string" ) return x.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ) ;
	if ( t == "object" ) {
		if ( x.tagName ) return "<" + x.tagName + "/>" ;
		res = "" ; 
		if ( x.splice ) {
			for ( var i = 0 ; i < x.length ; i++ ) if ( x [ i ] != null ) res += "<item>" +  q_toxmltags ( x [ i ] ) +"</item>" ;
		} else {
			function forceValidTag( tagName ){
				if ( ( /^[^a-zA-Z]/ ).test( tagName ) ) return "k" + tagName ;
				return tagName ;
			}
			for ( y in x ) {
				if ( x [ y ] != null ) {
					var yTag = forceValidTag( y ) ;
					res += "<" + yTag + ">" + q_toxmltags ( x [ y ] ) + "</" + yTag + ">" ;
				}
			}
		}
		return res ;
	}
}

function q_tostring ( x , forcespace ) {
	var optionalspace = forcespace || "" ;
	try { q_debugging ; optionalspace = " " } catch ( err ) { } ;
	if ( x == null) return "" ;
	var t, y, s ;
	t = typeof ( x ) ;
	if ( t == "number" ) {
		return ('' + x) ;
	} else if ( t == "string" ) {
		return "\"" + x.replace ( /(\r|\n)/g , "\\n" ).replace ( /\\/g , "\\\\" ).replace ( /"/g , "\\\"" ) + "\"" ;
	} else if ( t == "boolean" ) {
		return ( x ) ? "true" : "false" ;
	} else if ( t == "object" ) {
		if ( x.tagName ) return "[" + x.tagName + " node]" ;
		if ( x.splice ) {
			s = "[" + optionalspace ;
			for ( var i = 0 ; i < x.length ; i++ ) if ( x [ i ] != null ) {
				if ( i > 0 ) s += "," + optionalspace ;
				s += q_tostring ( x [ i ] ) ;
			}
			return s + optionalspace + "]" ;
		} else {
			s = "{" + optionalspace ;
			i = 0 ;
			for ( y in x ) if ( x [ y ] != null ) {
				if ( i++ > 0 ) s += "," + optionalspace ;
				s += y + ":" + optionalspace + q_tostring ( x [ y ] ) ;
			}
			return s + optionalspace + "}" ;
		}
	}
}

function q_xmltojson( xml, obj ){
	if ( ! obj ) obj = {};
	var c = $( xml ).children().get();
	if ( ! c.length && $( xml ).text() ) return $( xml ).text();
	for ( var i=0; i< c.length; i++ ){
		var tagname = c[ i ].tagName;
		if ( $( c[ i ] ).children().length ) obj[ tagname ] = q_xmltojson( c[ i ], obj[ tagname ] );
		else obj[ tagname ] = $( c[ i ] ).text();
	}
	return obj;
}


var qdyn_message = { 
"trylater": "Problème de réseau, veuillez ré-essayer plus tard."
} ;

if ( ! window.qdyn_queue ) var qdyn_queue = [ ] ;
var qdyn_loading = " " ;
// [ { h: "getSum" , args: [ 2, 20 ] , waiting: " truc_js machin_html " ] } , { h: etc } ] ;

function qdyn_load ( h , args , url ) {
	if ( typeof ( url ) == "string" ) url = [ url ] ;
	if ( url.length < 2 ) xqdyn_load ( h , args , url ) ;
	else {
		var oneurl = url.splice( 0 , 1 ) ;
		xqdyn_load ( "qdyn_load" , [ h , args , url ] , oneurl ) ;
	}
}

function xqdyn_load ( h , args , url ) {
	var waiting = " " ;
	var toload = [ ] ;
	var ready = true ;
	var s ;
	if ( typeof ( url ) == "string" ) url = [ url ] ;
	for ( var k = 0 ; k < url.length ; k++ ) {
		s = urltoteststring ( url [ k ] ) ;
		if ( eval( "window." + s ) ) continue ;
		ready = false ;
		if ( waiting.indexOf ( " " + s + " " ) == -1 ) waiting += s + " " ;
		if ( qdyn_loading.indexOf ( " " + s + " " ) == -1 ) {
			toload.push ( url [ k ] ) ;
			qdyn_loading += s + " " ;
		}
	}
	if ( ready ) {
		if ( h != "" ) eval ( h ).apply ( this , args ) ;
	} else {
		qdyn_queue.push ( { h: h, args: args, waiting: waiting } ) ;
		loadfiles( toload ) ;
	}
}

/*		try {
			if ( ! eval( s ) ) throw ( "missing") ;
		} catch ( err ) {
			etc
		}
*/

function qdyn_urlloaded( url ) {
	var s = urltoteststring ( url ) ;
	return ( eval( "window." + s ) ) ;
}

function qdyn_loaded ( s ) {
	if ( ! window.qdyn_loading ) return ; // comportement bizarre au chargement le handler est là, mais pas la variable
	qdyn_loading = qdyn_loading.replace ( " " + s + " " , " " ) ;
	var r ;
	eval ( s + " = true ;" ) ;
	for ( var i = 0 ; i < qdyn_queue.length ; i++ ) {	
		r = qdyn_queue [ i ] ;
		if ( r.waiting.indexOf ( " " + s + " " ) == -1 ) continue ;
		r.waiting = r.waiting.replace ( " " + s + " " , " " ) ;
		if ( r.waiting.length > 1 ) continue ;
		if ( r.h != "" ) eval ( r.h ).apply ( this , r.args ) ;
		qdyn_queue.splice ( i-- , 1 ) ;
	}
}

function urltoteststring( url ) {
	if ( /\.js$/.test ( url ) ) return url.replace ( /(.*\/)?([^\/]+)\.js$/ , "$2_js_loaded" ) ;
	if ( /\.css$/.test ( url ) ) return url.replace ( /(.*\/)?([^\/]+)\.css$/ , "$2_css_loaded" ) ;
	if ( /\.html$/.test ( url ) ) return url.replace ( /(.*\/)?([^\/]+)\.html$/ , "$2_html_loaded" ) ;
}

function loadfiles( url ) {
	for ( var k = 0 ; k < url.length ; k++ ) loadfile( url [ k ] ) ;
}

function loadfile ( url ) {
	if ( /\.js$/.test ( url ) ) return loadscript ( url ) ;
	if ( /\.css$/.test ( url ) ) return loadcss ( url ) ;
	if ( /\.html$/.test ( url ) ) return loadhtml ( url ) ;
}

function loadscript( url ) {
	var s = document.createElement( "script" ) ;
	s.setAttribute ( "type" , "text/javascript" ) ;
	s.setAttribute ( "charset" , "UTF-8" ) ;
	url = q_forceoldurl( url ) ;
	s.setAttribute ( "src" , "https://core1.quomodo.com" + url + ( ( window.q_jscssversion ) ? ( "?v=" + window.q_jscssversion ) : "" ) ) ;
	document.getElementsByTagName("head")[ 0 ].appendChild ( s ) ;
}

function loadcss( url ) {
	var s = document.createElement( "link" ) ;
	s.setAttribute ( "type" , "text/css" ) ;
	s.setAttribute ( "rel" , "stylesheet" ) ;
	url = q_forceoldurl( url ) ;
	s.setAttribute ( "href" , "https://core0.quomodo.com" + url + ( ( window.q_jscssversion ) ? ( "?v=" + window.q_jscssversion ) : "" ) ) ;
	document.getElementsByTagName("head")[ 0 ].appendChild ( s ) ;
	var loadedid = urltoteststring( url ) ;
	if ( loadedid ) qdyn_loaded( loadedid ) ;
}

function loadhtml( url ) {
	var iframeid = url.replace ( /(.*\/)?([^\/]+)\.html$/ , "$2_html_loaded" ) + "ifid" ;
	var iframe = document.createElement( "iframe" ) ;
	iframe.id = iframeid ;
	iframe.name = iframeid ;
	iframe.className = "jstarget" ;
	iframe.scrolling = "no" ;
	iframe.style.borderWidth = "0px" ;
	iframe.style.width = "0px" ;
	iframe.style.height = "0px" ;
	url = q_forceoldurl( url ) ;
	iframe.src = url + ( ( window.q_jscssversion ) ? ( "?v=" + window.q_jscssversion ) : "" ) ;
	document.body.appendChild( iframe ) ;
}

function framedocument( theframe ) {
	theframe = ge( theframe );
	if ( theframe.contentDocument ) return theframe.contentDocument ;
	return theframe.contentWindow.document ;
}

function qdyn_snloaddone( h , args , snkinds , loopcounter ) {
	if ( typeof snkinds == "string" ) snkinds = [ snkinds ] ;
	var shortsnkind , iframeid , snkind ;
	var inheritedsn = [] ;
	for ( var i = 0 ; i < snkinds.length ; i++ ) {
		snkind = snkinds[ i ] ;
		shortsnkind = snkind.replace( /_intl/ , "" ) ;
		iframeid = shortsnkind + "_" + q_lang + "_html_loaded" + "ifid" ;
		//var x = document.getElementById ( iframeid ) ;
		//x.parentNode.removeChild( x ) ;
		inheritedsn = inheritedsn.concat( qsn_dynload( snkind , iframeid ) ) ;
	}
	if ( inheritedsn.length == 0 ) {
		if ( h != "" ) eval ( h ).apply ( this , args ) ;	
		return ;
	}
	qdyn_snload( h , args , inheritedsn , loopcounter ) ;
}

function qdyn_snurlstoload( snkind ) {
	if ( typeof snkind == "object" ) {
		var urls = [] ;
		for ( var i = 0 ; i < snkind.length ; i++ ) urls = urls.concat( qdyn_snurlstoload( snkind[ i ] ) ) ;
		return urls ;
	}
//	if ( qsn_dynloaddone( snkind ) ) return [] ; // vh 090901 : qsn_dynloaddone se fait recouvrir de manière erronée par welcome. Par ailleurs, n'apporte pas grand chose et empêche parfois de charger un fichier qui aurait été mal chargé dans le header
	var shortsnkind = snkind.replace( /_intl/ , "" ) ;
	var dir = "/services/" + snkind + "/" ;
	var ulang = "_" + q_lang ;
	return [ dir + "style/" + snkind + ".css" , dir + shortsnkind + ulang + ".html" , dir + "scripts/" + shortsnkind + "_msgs" + ulang + ".js" , dir + "scripts/" + snkind + ".js" ] ;
}

function qdyn_snload( h , args , snkind , loopcounter ) {
	if ( loopcounter == undefined ) var loopcounter = 1 ;
	else loopcounter++ ;
	if ( loopcounter > 10 ) {
		alert ( "Infinite recursion suspected." ) ;
		return ;
	}
	var urls = qdyn_snurlstoload( snkind ) ;
	if ( urls.length == 0 ) {
		if ( h != "" ) eval ( h ).apply ( this , args ) ;	
		return ;
	}
	qdyn_load ( "qdyn_snloaddone" , [ h , args , snkind , loopcounter ] , urls ) ;
}

function qdyn_qorgiframeid( qorgref ) {
	if ( typeof qorgref != "string" ) qorgref = qorgref.id ;
	return qorgref + "_" + q_lang + "_html_loaded" + "ifid" ;
}

function qdyn_qorgfilesloaded( qorgref ) {
	if ( ( typeof qorgref == "object" ) && ( qorgref.splice ) ) {
		for ( var i = 0 ; i < qorgref.length ; i++ ) qdyn_qorgfilesloaded( qorgref[ i ] ) ;
	}
	if ( typeof qorgref != "string" ) qorgref = qorgref.id ;
	eval ( qorgref + "_filesloaded = true ;" ) ;
}

function qdyn_qorgloaddone( h , args , theref , params ) {
	if ( theref == "qu" ) q_fsm_delete() ;
	qdyn_qorgfilesloaded( theref ) ;
	var hh , dynloadparams ;
	if ( ( typeof theref == "object" ) && ( theref.splice ) ) dynloadparams = [ theref ] ;
	else dynloadparams = [ qdyn_qorgiframeid( theref ) , qdyn_qorgforceload( theref ) ] ;
	var qorgcontainer = [] ;
	if ( ( params ) && ( params.dynloadhandler ) ) hh = eval ( params.dynloadhandler ) ;
	else try { hh = eval ( ( ( typeof theref == "string" ) ? theref : theref.id ) + "_dynload" ) ; } catch(err) {}
	if ( ( params ) && ( params.dynloadparams ) ) dynloadparams = dynloadparams.concat( params.dynloadparams ) ;
	if ( hh ) qorgcontainer = hh.apply ( this , dynloadparams ) ;
	if ( ( qorgcontainer ) && ( qorgcontainer.length != 0 ) ) return qdyn_qorgload.apply ( this , [ qdyn_qorgloaddone , [ h , args , theref , params ] ].concat( qorgcontainer ) ) ;
	if ( h != "" ) eval ( h ).apply ( this , args ) ;	
	//var x = document.getElementById ( iframeid ) ;
	//x.parentNode.removeChild( x ) ;
}

function qdyn_qorgloaded( qorgref ) {
	return eval( "window." + qorgref + "_filesloaded" ) ;
}

function qdyn_qorgurlstoload( theref , wantmsgs ) {
	if ( wantmsgs == undefined ) wantmsgs = true ;
	if ( ( typeof theref == "object" ) && ( theref.splice ) ) {
		var urls = [] ;
		for ( var i = 0 ; i < theref.length ; i++ ) urls = urls.concat( qdyn_qorgurlstoload( theref[ i ] , wantmsgs ) ) ;
		return urls ;
	}
	var qorgref ;
	if ( typeof theref == "string" ) qorgref = theref ;
	else {
		qorgref = theref.id ;
	}
	if ( qdyn_qorgloaded( qorgref ) ) return [] ; // risque de ne pas charger les addedfiles si on a déjà été chargé
	var dir , forceload , addedfiles ;
	dir = "/services/qorg/" ;
	forceload = false ;
	addedfiles = [] ;
	if ( typeof theref != "string" ) {
		if ( theref.dir ) dir = theref.dir ;
		if ( theref.forceload ) forceload = true ;
		if ( theref.addedfiles ) addedfiles = theref.addedfiles ;
	}
	var ulang = "_" + q_lang ;
	var urls = addedfiles.concat( [ dir + qorgref + ulang + ".html" , dir + "scripts/" + qorgref + ".js" ] ) ;
	if ( wantmsgs ) urls.push( dir + "scripts/" + qorgref + "_msgs" + ulang + ".js" ) ;
	if ( $.inArray( qorgref , [ "rights" , "managespace" , "manageselfspace" , "familyrights" ] ) != -1 ) {
		urls.push( "/services/paypal_intl/scripts/paypal_msgs" + ulang + ".js" ) ;
		urls.push( "/services/paypal_intl/scripts/paypal.js" ) ;
	}
	if ( $.inArray( qorgref , [ "notepad" ] ) != -1 ) urls.push( dir + "style/" + qorgref + ".css" ) ;
	if ( $.inArray( qorgref , [ "qu" ] ) != -1 ) {
		urls.push( "/services/swfs/scripts/swfupload.js" );
		urls.push( "/services/swfs/scripts/swfupload_queue.js" );
		urls.push( "/services/swfs/scripts/swfupload_swfobject.js" );
		urls.push( "/services/swfs/scripts/swfupload_functions.js" );
		urls.push( "/services/swfs/style/swfupload.css" );
	}
	return urls ;
}

function qdyn_qorgforceload( theref ) {
	if ( ( typeof theref == "object" ) && ( theref.splice ) ) {
		for ( var i = 0 ; i < theref.length ; i++ ) if ( qdyn_qorgforceload( theref[ i ] ) ) return true ;
		return false ;
	}
	if ( ( typeof theref != "string" ) && ( theref.forceload ) ) return true ;
	return false ;
}

function qdyn_qorgloadwom( h , args , theref , params ) { qdyn_xqorgload( h , args , theref , params , false ) ; }
function qdyn_qorgload( h , args , theref , params ) { qdyn_xqorgload( h , args , theref , params , true ) ; }
function qdyn_xqorgload( h , args , theref , params , wantmsgs ) {
	if ( theref == "qu" ) return q_apply( q_choosefile , args ) ;
	if ( typeof h == "object" ) return qdyn_qorglistload( h , wantmsgs ) ;
	var urls = qdyn_qorgurlstoload( theref , wantmsgs ) ;
	if ( urls.length == 0 ) {
		if ( qdyn_qorgforceload( theref ) ) qdyn_qorgloaddone( h , args , theref , params ) ;
		else if ( h != "" ) eval ( h ).apply ( this , args ) ;	
		return true ;
	}
	if ( theref == "qu" ) q_fsm_wait() ;
	qdyn_load ( "qdyn_qorgloaddone" , [ h , args , theref , params ] , urls ) ;
	return false ;
}

function qdyn_qorglistloaddone( qorgloads , wantmsgs , h , args , theref , params ) {
	qdyn_qorgloaddone( h , args , theref , params ) ;
	qdyn_qorglistload( qorgloads , wantmsgs ) ; 
}

function qdyn_qorglistload( qorgloads , wantmsgs ) {
	if ( wantmsgs == undefined ) wantmsgs = true ;
	if ( qorgloads.length == 0 ) return ;
	var p = qorgloads[ 0 ] ;
	qorgloads.splice( 0 , 1 ) ;
	var theref = p[ 2 ] ;
	var urls = qdyn_qorgurlstoload( theref , wantmsgs ) ;
	if ( urls.length == 0 ) {
		if ( qdyn_qorgforceload( theref ) ) return qdyn_qorglistloaddone.apply( this , [ qorgloads , wantmsgs ].concat( p ) ) ;
		else if ( h != "" ) eval ( p[ 0 ] ).apply ( this , p[ 1 ] ) ;
		return qdyn_qorglistload( qorgloads , wantmsgs ) ;
	}
	qdyn_load ( "qdyn_qorglistloaddone" , [ qorgloads , wantmsgs ].concat( p ) , urls ) ;
	return false ;
}

function qdyn_finishload( iframeid , target ) {
	var elem , div ;
	var mode = "append" ;
	var srcid = "qorg_block" ;
	if ( ( typeof target == "string" ) || ( target.tagName ) ) elem = ge( target ) ;
	else {
		elem = ge( target.target ) ;
		if ( target.mode ) mode = target.mode ;
		if ( target.srcid ) srcid = target.srcid ;
	}
	if ( eval( "window." + iframeid + "_" + srcid + "_finishloaddone" ) ) return ;
	if ( mode == "append" ) div = elem.appendChild( document.createElement( "DIV" ) ) ;
	else if ( mode == "insert" ) div = elem.parentNode.insertBefore( document.createElement( "DIV" ) , elem ) ;
	else if ( mode == "replace" ) div = elem ;
	if ( target.id ) div.id = target.id ;
	div.innerHTML = framedocument( iframeid ).getElementById( srcid ).innerHTML ;
	eval ( iframeid + "_" + srcid + "_finishloaddone = true ;" ) ;
}

function qdyn_q_partial_done( x ) {
	if ( x.clienturls ) {
		var urls = [ ] ;
		for ( var i in x.clienturls ) urls.push( x.clienturls[ i ] ) ;
		qdyn_load( "qdyn_q_done" , [ x ] , urls ) ;
	} else qdyn_q_done( x ) ;
}

function qdyn_q_done( x ) {
	if ( x.id ) eval ( x.id + " = true ;" ) ;	
	var iframeid = [] ;
	var t = x.urls.join( " " ).match( new RegExp( "/?([^/.]+\.html)" , "g" ) ) ;
	if ( t ) for ( var i = 0 ; i < t.length ; i++ ) iframeid.push( urltoteststring( t[ i ] ) + "ifid" ) ;
	if ( iframeid.length == 1 ) iframeid = iframeid[ 0 ] ;
	if ( x.target ) qdyn_finishload( iframeid , x.target ) ;
	else if ( x.dynh ) {
		var hh = eval ( x.dynh ) ;
		var dynargs = [ iframeid ] ;
		if ( x.dynargs ) dynargs = dynargs.concat( x.dynargs ) ;
		hh.apply ( this , dynargs ) ;
	}
	if ( x.target && ( x.target == "q_drawers" || x.target == ge( "q_drawers" ) ) ) showblock( "q_drawers" ) ;
	if ( ( x.h ) && ( x.h != "" ) ) eval ( x.h ).apply ( this , ( x.args ) ? x.args : [] ) ;
}

function q_( x ) { // { [ target : objHTML ou id ] , [ dynh : string handler de chargement dynamique ] , [ dynargs : [ params ] ] , [ id : string identifiant du chargement à effectuer ] , urls : [ paths ] , [ h : string handler à exécuter ] , [ args : [ params ] ] }
	if ( ( x.id ) && ( eval( "window." + x.id ) ) ) {
		if ( x.target && ( x.target == "q_drawers" || x.target == ge( "q_drawers" ) ) ) showblock( "q_drawers" ) ;
		if ( ( x.h ) && ( x.h != "" ) ) eval ( x.h ).apply ( this , ( x.args ) ? x.args : [] ) ;	
		return true ;
	}
	var urls = [ ] ;
	for ( var i in x.urls ) urls.push( x.urls[ i ] ) ;
	qdyn_load( "qdyn_q_partial_done" , [ x ] , urls ) ;
}

function q_include( x , h , args ) {
// x = liste d'éléments [ { target: "", urls : [ paths ] } , { } , ... ] 
// h, args : fonction et arguments exécutée une fois tous les éléments chargés
	var xx ;
	if ( ! x.splice ) xx = [ x ] ;
	else xx = x ;
	if ( xx.length == 0 ) {
		if ( ( h ) && ( h != "" ) ) eval ( h ).apply ( this , ( args ) ? args : [] ) ;
		return ;
	}
	var p = xx[ 0 ] ;
	xx.splice( 0 , 1 ) ;
	p.h = "q_include" ;
	p.args = [ xx , h , args ] ;
	q_( p ) ;
}


var dragdisabled = false;

function disabledrag() {
	dragdisabled = true ;
}

function q_stopPropagation( ee ){
	var e = ee || window.event ;
	if ( e.stopPropagation ) e.stopPropagation() ;
	else e.cancelBubble = true ;
}

function q_preventDefault( ee ){
	var e = ee || window.event ;
	if ( e.preventDefault ) e.preventDefault() ;
	else e.returnValue = false ;
}

//var zindex ;
var sliderindent = -64; //-25 ;
var qdr_leftcolwidth = 198 ;
var qdr_resizewidth = 12 ;

function q_clientX( ee ) {
	var e = ee || window.event ;
	if ( e.pageX ) return e.pageX ;
	return e.clientX + document.documentElement.scrollLeft + document.body.scrollLeft ;
}

function q_clientY( ee ) {
	var e = ee || window.event ;
	if ( e.pageY ) return e.pageY ;
	return e.clientY + document.documentElement.scrollTop + document.body.scrollTop ;
}

function beginDragE( e ){
	e = e || window.event ; // var 
	var x = getElementFromEvent ( e ) ;
	var elem = getContainer ( x ) ;
	beginDrag(elem , e ) ;
}

var latestclick = { time: (new Date()).getTime() , x: 0 , y: 0 , target: null } ;

function beginDrag( elem , ee , movecallBack , upcallBack , thelimits , preparecallBack ) {
	if ( dragdisabled ) {
		dragdisabled = false ;
		return false ;
	}
	if ( window.unselect ) unselect() ;
	var e = ee || window.event ; // var 
	
	if ( ! window.qsn_currstate ) var qsn_currstate = "view" ;	
	if ( ( ( ( new Date() ).getTime() - latestclick.time ) < 700 ) && ( Math.abs ( q_clientX( e ) - latestclick.x ) < 2 ) && ( Math.abs ( q_clientY( e ) - latestclick.y ) < 2 ) && ( elem == latestclick.target ) && ( ! ( /(edit|new)/.test ( qsn_currstate ) ) ) ) return false ;
	latestclick.time = ( new Date() ).getTime() ;
	latestclick.x = q_clientX( e ) ; 
	latestclick.y = q_clientY( e ) ; 
	latestclick.target = elem ;
/*
	if ( ! ( /edit/.test ( qsn_currstate ) ) ) {
		var tx = getElementsByClassName( elem ,"text") ;
	//	for ( var i = 0 ; i < tx.length ; i++ ) if ( tx[ i ] ) tx[ i ].innerHTML = tx[ i ].innerHTML ;
	}
*/

	var x = parseInt( gcs( elem , "left" ) , 10) ;
	var y = parseInt( gcs( elem , "top" ) , 10) ;
//	var w = parseInt( gcs( elem , "width" ) , 10);
	elem.deltawidth = ( window.qsn_deltawidth ) ? qsn_deltawidth( elem ) : 0 ;
	elem.deltacontentwidth = ( window.q_deltacontentwidth ) ? q_deltacontentwidth( elem ) : 0 ;
//	var w = elem.offsetWidth - elem.deltawidth ;
	var w = elem.offsetWidth ;
	var h = elem.offsetHeight ;
	var dx = q_clientX( e ) - x ;
	var dy = q_clientY( e ) - y ;
	var dw = q_clientX( e ) - w ;
	var xylimits = thelimits ;
	var clientX0 = q_clientX( e ) ;
	var clientY0 = q_clientY( e ) ;
	if ( elem.toresize ) {
		var targets = elem.toresize() ;
		for ( var i = 0 ; i < targets.length ; i++ ) {
			var targetelem = targets[ i ] ;
			targetelem.deltawidth = q_deltawidth( targetelem ) ;
			if ( isie6() && targetelem.tagName == "IMG" && targetelem.offsetHeight && targetelem.filters[ "DXImageTransform.Microsoft.AlphaImageLoader" ] ) {
				var originalwidth = targetelem.offsetWidth - ( ( window.qsn_deltawidth ) ? qsn_deltawidth( targetelem ) : 0 ) ;
				var originalheight = targetelem.offsetHeight - ( ( window.qsn_deltaheight ) ? qsn_deltaheight( targetelem ) : 0 ) ;
				if ( originalwidth ) targetelem.dragratio = originalheight / originalwidth ;
				else targetelem.dragratio = 1 ;
			}
		}
	}
	// var isGrow = ( q_clientX( e ) > ( x + w + qdr_leftcolwidth - qdr_resizewidth ) ) ;
	var isGrow = ( q_clientX( e ) > ( elem.offsetLeft + elem.offsetWidth + ( window.qdr_authorstuffoffsetleft || 0 ) + qdr_leftcolwidth - qdr_resizewidth ) ) ;
	if ( preparecallBack ) {
		var r = preparecallBack( elem , clientX0 , isGrow ) ;
		if ( ( r ) && ( r.isgrow != null ) && ( r.isgrow != undefined ) ) isGrow = r.isgrow ;
	}

	function moveHandler( ee ) {
		var em = ee || window.event ; // var 
		if ( qsn_currstate == "tm" ) return ;
		if ( ! movecallBack ) movecallBack = q_moveHandler ;
		var qx = q_clientX( em ) - dx ;
		var qy = q_clientY( em ) - dy ;
		if ( em.shiftKey ) {
			if ( Math.abs( qx - x) < Math.abs( qy - y ) ) {
				var ex = x ;
				var ey = qy ;
			} else {
				var ex = qx ;
				var ey = y ;
			}
		} else {
			var ex = qx ;
			var ey = qy ;
		}
		var ew = q_clientX( em ) - dw ;
		movecallBack( elem , ex , ey , ew , isGrow , xylimits ) ;
		q_stopPropagation( em );
		q_preventDefault( em );
	}
	function upHandler( ee ) {
		var eu = ee || window.event ; 
		if ( ! upcallBack ) upcallBack = q_upHandler ;
		document.onmouseup = null ;
		document.onmousemove = null ;
		var qx = q_clientX( eu ) - dx ;
		var qy = q_clientY( eu ) - dy ;
		if ( eu.shiftKey ) {
			if ( Math.abs( qx - x) < Math.abs( qy - y ) ) {
				var ex = x ;
				var ey = qy ;
			} else {
				var ex = qx ;
				var ey = y ;
			}
		} else {
			var ex = qx ;
			var ey = qy ;
		}
		var ew = q_clientX( eu ) - dw ;
		var isMove = ( ( parseInt( clientX0 , 10 ) == parseInt( q_clientX( eu ) , 10 ) ) && ( parseInt( clientY0 , 10 ) == parseInt( q_clientY( eu ) , 10 ) ) ) ;
		upcallBack( elem , ex , ey , ew , isGrow , isMove , xylimits ) ;
		elem = null ;
		q_stopPropagation( eu ) ;
		q_preventDefault( eu ) ;
	}
	document.onmousemove = moveHandler ;
	document.onmouseup = upHandler ;
	q_stopPropagation( e );
	// q_preventDefault( e );
	if ( ( window.getSelection ) && ( window.getSelection() == "" ) ) q_preventDefault( e );
	if ( ! window.getSelection ) q_preventDefault( e );
}

function q_moveHandler( elem , ex , ey , ew , isGrow ) {
	if ( isGrow ) {
		elem.style.cursor = "e-resize" ;
		elem.style.width = Math.max ( 24, ew ) + "px";
	}
	else {
		elem.style.cursor = "move" ; // "default";
		if ( ex < 0 ) ex = 2 ;
		if ( ey < 0 ) ey = 0 ;
		elem.style.left = ex + "px";
		elem.style.top = ey+ "px";
	}
}

function q_upHandler( elem , ex , ey , ew , isGrow , isMove ) {
		elem.style.cursor = "auto" ; // "move" ;
}

function beginDragOnly( elem , e ) {
	beginDrag( elem , e , moveOnlyHandler , upOnlyHandler ) ;
}

function moveOnlyHandler( elem , ex , ey , ew , isGrow ) {
	q_moveHandler( elem , ex , ey , ew , false ) ;
}

function upOnlyHandler( elem , ex , ey , ew , isGrow , isMove ) {
	q_upHandler( elem , ex , ey , ew , false , isMove ) ;
}

function beginFreeDrag( elem , ee ) {
	return beginDrag( elem , ee , q_freemoveHandler ) ;
}

function q_VmoveHandler( elem , ex , ey , ew , isGrow ) {
	elem.style.cursor = "move" ; // "default";
	if ( ey < 0 ) ey = 0 ;
	elem.style.top = ey + "px";
}

function beginVDrag( elem , ee ) {
	return beginDrag( elem , ee , q_VmoveHandler ) ;
}

function q_freemoveHandler( elem , ex , ey , ew , isGrow ) {
	if ( isGrow ) {
		elem.style.cursor = "e-resize" ;
		elem.style.width = Math.max ( 24, ew ) + "px";
	}
	else {
		elem.style.cursor = "default" ; // "move" ;
		elem.style.left = ex + "px";
		elem.style.top = ey+ "px";
	}
}

function beginResize( elem , ee , h ) {
	beginDrag( elem , ee , q_moveResizeHandler , h ) ;
}

function q_moveResizeHandler( elem , ex , ey , ew , isGrow ) {
	q_moveHandler( elem , ex , ey , ew , true ) ;
}




/*
* jQuery Watermark plugin
* @requires jQuery v1.3 or later
*
* Examples at: http://mario.ec/static/jq-watermark/
* Copyright (c) 2010 Mario Estrada
* Licensed under the MIT license:
* http://www.opensource.org/licenses/mit-license.php
*
*/

;(function ($) {
  var old_ie = /MSIE [1-7]\./.test(navigator.userAgent);
  /* Quomodo Begin 
  var hard_left = 4;
*/
  var hard_left = 0;
  /* Quomodo end Eviter le décalage entre la watermark et le texte de l'input
*/
  $.watermarker = function () { };
  /* Quomodo Begin 
  $.extend($.watermarker, {
    defaults: {
      color: '#999',
      left: 0,
      top: 0,
      fallback: false,
      animDuration: 300,
      minOpacity: 0.6
    },
    setDefaults: function (settings) {
      $.extend($.watermarker.defaults, settings);
    },
    checkVal: function (val, label) {
      if (val.length === 0) {
        $(label).show();
      } else {
        $(label).hide();
      }

      return val.length > 0;
    },
    html5_support: function () {
      var i = document.createElement('input');
      return 'placeholder' in i;
    }
  });
	*/
  $.extend($.watermarker, {
    defaults: {
      color: '#999',
      left: 0,
      top: 0,
      fallback: false,
      animDuration: 0,
      minOpacity: 1
    },
    setDefaults: function (settings) {
      $.extend($.watermarker.defaults, settings);
    },
    checkVal: function (val, label) {
      if (val.length === 0) {
        $(label).show();
      } else {
        $(label).hide();
      }

      return val.length > 0;
    },
    html5_support: function () {
      var i = document.createElement('input');
      return 'placeholder' in i;
    }
  });

   /*Quomodo End animDuration initalisé à 0 et minOpacity iniatilisé à 1
	animDuration: 0, minOpacity: 1
	=> Il y avait un changement de taille de l'input lors de l'animation
    */

  $.fn.watermark = function (text, options) {
    var elems;
       /* Quomodo Begin */ 
	var _options ;
	if ( options ) _options = $.extend( {}, options ) ;
      /*Quomodo end ajout des paramètres d'initialisation
	*/
    options = $.extend({}, $.watermarker.defaults, options);

    elems = this.filter('textarea, input:not(:checkbox,:radio,:file,:submit,:reset)');

    if (options.fallback && $.watermarker.html5_support()) {
      return this;
    }

    elems.each(function () {
      var $elem, attr_name, label_text, watermark_container, watermark_label, control_id;
      var e_margin_left, e_top = 0, e_height;

      $elem = $(this);
       /* Quomodo Begin */ 
	if ( text != true ) $elem.attr( "data-jq-watermark-text", text ) ;    
	if ( _options ) $elem.data( "watermark-options", _options ) ;
	else {
		var __options = $elem.data( "watermark-options" ) ;
		if ( __options ) options = $.extend( options, __options ) ;
	}
      /*Quomodo end ajout des paramètres d'initialisation
	*/
     control_id = $elem.attr('id');

	/*Quomdo Begin 
		  if ($elem.attr('data-jq-watermark') === 'processed') {
       		 return;
      }
	*/
	if ( $elem.attr('data-jq-watermark' ) === 'processed' && text != true ) return;
	else if ( text == true ) {
		var w_c = $elem.parents( ".watermark_container:eq(0)" ) ;
		w_c.before( $elem ) ;
		w_c.remove() ;
	}

/*Quomodo End Prise en compte du passage en paramètre de la valeur true si on est dans le cas d'une réinitialisaiton
*/

/* Quomodo Begin 
attr_name = $elem.attr('placeholder') !== undefined && $elem.attr('placeholder') !== '' ? 'placeholder' : 'title';
      label_text = text === undefined || text === '' ? $(this).attr(attr_name) : text;
*/

	if ( text === true && $elem.attr( 'data-jq-watermark-text' ) !== undefined )
		attr_name = 'data-jq-watermark-text' ;
	else
		attr_name = $elem.attr('placeholder') !== undefined && $elem.attr('placeholder') !== '' ? 'placeholder' : 'title';
      label_text = text === undefined || text === true || text === '' ? $(this).attr(attr_name) : text;
/* Quomodo End Quand text == true, on regarde si "data-jq-watermark-text" est présent. 
	Si c'est le cas, on est en présence d'une réinialisation donc on récupère sa valeur
*/    

      /* Quomodo Begin */ 
      if( window.escapeHTLM ) label_text = escapeHTML( label_text ) ;
      /*Quomodo end Echappemment du texte
	*/
      watermark_container = $('<span class="watermark_container"></span>');

      /* Quomodo Begin 
      watermark_label = $('<label class="watermark" for="' + control_id + '">' + label_text + '</label>');
      */   
	
      if ( $elem.get(0).tagName == "INPUT" ) 
        watermark_label = $('<label class="watermark" for="' + control_id + '">' + label_text + '</label>');
      else 
        watermark_label = $('<div class="watermark" >' + label_text + '</div>');

      /*Quomodo end Remplace la label par une div dans le cas d'un textarea, car pour permettre les sauts de ligne
	*/
      // If used, remove the placeholder attribute to prevent conflicts
      if (attr_name === 'placeholder') {
        $elem.removeAttr('placeholder');
      }

      watermark_container.css({
        display: 'inline-block',
        position: 'relative'
      });

      if ($elem.attr('data-percent-width') === 'true' ) {
        watermark_container.css('width', '100%');
      }

      if ($elem.attr('data-percent-height') === 'true') {
        watermark_container.css('height', '100%');
      }
	

      if (old_ie) {
        watermark_container.css({
          zoom: 1,
          display: 'inline'
        });
      }

      $elem.wrap(watermark_container).attr('data-jq-watermark', 'processed');

      if (this.nodeName.toLowerCase() === 'textarea') {
        e_height = parseInt($elem.css('line-height'), 10);
        e_height = e_height === 'normal' ? parseInt($elem.css('font-size'), 10) : e_height;
        e_top = ($elem.css('padding-top') !== 'auto' ? parseInt($elem.css('padding-top'), 10) : 0);
      } else {
        e_height = $elem.outerHeight();
        if (e_height <= 0) {
          e_height = ($elem.css('padding-top') !== 'auto' ? parseInt($elem.css('padding-top'), 10) : 0);
          e_height += ($elem.css('padding-bottom') !== 'auto' ? parseInt($elem.css('padding-bottom'), 10) : 0);
          e_height += ($elem.css('height') !== 'auto' ? parseInt($elem.css('height'), 10) : 0);
        }
      }

      e_top += ($elem.css('margin-top') !== 'auto' ? parseInt($elem.css('margin-top'), 10) : 0);

      e_margin_left = $elem.css('margin-left') !== 'auto' ? parseInt($elem.css('margin-left'), 10) : 0;
      e_margin_left += $elem.css('padding-left') !== 'auto' ? parseInt($elem.css('padding-left'), 10) : 0;
      
      /* Quomodo Begin */
      e_margin_left += $elem.css('border-left-width') !== 'auto' ? parseInt($elem.css('border-left-width'), 10) : 0;
      /*Quomodo end Prise en compte du bord gauche dans le calcul de la marge gauche
	 */

      /* Quomodo Begin 
         watermark_label.css({
        position: 'absolute',
        display: 'block',
        fontFamily: $elem.css('font-family'),
        fontSize: $elem.css('font-size'),
        color: options.color,
        left: hard_left + options.left + e_margin_left,
        top: options.top + e_top,
        height: e_height,
        lineHeight: e_height + 'px',
        textAlign: 'left',
        pointerEvents: 'none'
      });
      */

      var quomodo_input_css = { 
        "text-overflow": "ellipsis",
        "white-space": "nowrap",
        "overflow": "hidden"
      } ;

      var quomodo_textarea_css = { 
        "overflow": "hidden"
      } ;

      var plugin_label_css = {
        position: 'absolute',
        display: 'block',
        fontFamily: $elem.css('font-family'),
        fontSize: $elem.css('font-size'),
        color: options.color,
        left: hard_left + options.left + e_margin_left,
        top: options.top + e_top,
        height: e_height,
        lineHeight: e_height + 'px',
        textAlign: 'left',
        pointerEvents: 'none'
      } ;

      watermark_label.css( $.extend( {}, plugin_label_css, ( $elem.get(0).tagName == "TEXTAREA" ) ? quomodo_textarea_css : quomodo_input_css ) ) ;

      watermark_label.css( "width",  $elem.css( "width" ) ) ;

      /*Quomodo end Le plugin ne gérait pas les ellipses. Dans le cas d'un input on ajoute les css nécessaires à l'ellipse, autrement on met overflow:hidden pour le textarea. Ensuite on ajuste automatiquement le label ou la div qui va contenir la watermark, et on lui assigne la largeur de l'input
	*/

      $.watermarker.checkVal($elem.val(), watermark_label);

      if (!control_id) {
        watermark_label
        .data('jq_watermark_element', $elem)
        .click(function () {
          $($(this).data('jq_watermark_element')).trigger('click').trigger('focus');
        });
      }

      $elem.before(watermark_label)
      .bind('focus.jq_watermark', function () {
        if (!$.watermarker.checkVal($(this).val(), watermark_label)){
          watermark_label.stop().fadeTo(options.animDuration, options.minOpacity);
        }
      })
      .bind('blur.jq_watermark change.jq_watermark', function () {
        if (!$.watermarker.checkVal($(this).val(), watermark_label)){
          watermark_label.stop().fadeTo(options.animDuration, 1);
        }
      })
      .bind('keydown.jq_watermark, paste.jq_watermark', function (e) {
        $(watermark_label).hide();
      })
      .bind('keyup.jq_watermark', function (e) {
        $.watermarker.checkVal($(this).val(), watermark_label);
      });

      /* Quomodo begin */
      if ( $elem.get(0).tagName == "TEXTAREA" && watermark_label.ellipsis ) watermark_label.ellipsis( { row: parseInt( $elem.attr( "rows" ) || 3, 10 ) || 3 } ) ;

      /*Quomodo end Appel du plugin de l'ellipse pour les textarea
	*/
    });


    return this;
  };

  $(function () {
    $('.jq_watermark').watermark();
  });
})(jQuery);



var qsn_currstate = "view" ;
var qsn_edittarget = null ;
var q_stuffmode = "q_author_stuff" ;

function qsn_handler( notekind , handler , wantdefault ) {
	if ( ( wantdefault ) && ( wantdefault == true ) ) return false ;
	var h ;
	try { h = eval ( handler.replace( /\bqsn/ , notekind ) ) ; } catch(err) {}
	if ( h ) return h ;
	var jsonnewnote = eval ( notekind + "_json_template" ) ;
	if ( ( jsonnewnote.common ) && ( jsonnewnote.common.inherited ) ) {
		var inherited = jsonnewnote.common.inherited ;
		for ( var i = 0 ; i < inherited.length ; i++ ) {
			h = qsn_handler( inherited[ i ].notekind , handler , wantdefault ) ;
			if ( h ) return h ;
		}
	}
	return false ;
}
function qsn_notemessage( notekind , key , wantdefault ) {
	if ( ( wantdefault ) && ( wantdefault == true ) ) return qsn_message[ key ] ;
	var notemessage ;
	try { notemessage = eval ( notekind + "_message" ) ; } catch(err) {}
	if ( notemessage && notemessage[ key ] ) return notemessage[ key ] ;
	return qsn_message[ key ] ;
}

function qsn_container_rendermargin( div, r, wantdefault ) {
	var h = qsn_handler( r.common.notekind , "qsn_container_rendermargin" , wantdefault ) ;
	if ( h ) return h( div, r ) ;
	
	var $div = $( div ) ;
	var $tablenote = $div.find( ".tablenote:eq(0)" ) ;
	
	var version = qsn_version( r.common.notekind ) ;
	var noteMargin = qsn_container_contentMargin( r ) ;
	//HEADER
	function headerHasBorder( r ) {
		return ( ( r.shadow && r.shadow.d ) || ( r.strokecolor != "-1" && ( qsn_resolveValue( "header.headerstyle", r ) != "detached" ) ) || ( qsn_resolveValue( "header.color", r ) != "-1" ) ) ;// la couleur de filet ne s'applique pas au bandeau détaché
	}
	
	var textmargin = noteMargin.textmargin ;
	if (  r.header && r.header.display == "true" ) {
		if ( qsn_resolveValue( "header.headerstyle", r ) == "padding" && noteMargin.version ) textmargin = parseInt( noteMargin.right, 10 ) ; // pour le style "padding", on utilise la marge qui va être appliquée à la note
		if ( r.header.margin != undefined ) {
			var headermargin = parseInt( r.header.margin || 0 , 10 ) ;
			$tablenote.find( "h3" ).css( "padding-top", headermargin + "px" ).css( "padding-bottom", headermargin + "px" ) ;
			$tablenote.find( ".header-padding" ).width( headermargin ) ; // marge intérieure pour le style "padding"
		}
		if ( ! headerHasBorder( r ) && qsn_resolveValue( "header.headerstyle", r ) != "padding" ) $tablenote.find( "h3" ).css( "padding-top", "0px" ) ; // pour le style "padding", il faut toujours appliquer la marge haute pour la marge intérieure
		if ( qsn_currstate != "edit" && $tablenote.find( ".header-margin" ).length == 0 ) {// 2012-12-17, vh : compatibilité aniennes notes mode web
			var paddingLeft = ! headerHasBorder( r ) ? "0px" : ( ( r.header.icon && r.header.align == "left" ) ? "10px" : ( textmargin + "px" ) ) ;
			var paddingRight = ! headerHasBorder( r ) ? "0px" : ( textmargin + "px" ) ;
			$( ".qlubcontainer_headertext:eq(0), .qlubcontainer_headermeasure:eq(0)", div ).eq( 0 ).css( "padding-left", paddingLeft ).css( "padding-right", paddingRight ) ;
		} else {
			$tablenote.find( ".header-margin, .header-tablemargin" ).width( ! headerHasBorder( r ) ? 0 : textmargin ) ;
			$tablenote.find( ".header-row-padding td" ).height( ! headerHasBorder( r ) ? 0 : textmargin ) ;
		}
	}

	//CONTENT
	if ( noteMargin.version ) {
		$div.find( ".qlubcontainer_content:eq(0)" ).css( { "padding-top" : noteMargin.top, "padding-right" : noteMargin.right, "padding-bottom": noteMargin.bottom, "padding-left" : noteMargin.left } ) ;
	}
}

function qsn_version( notekind, wantdefault ) {
	var h = qsn_handler( notekind , "qsn_version" , wantdefault ) ;
	if ( h ) return h( notekind ) ;
	return {} ;
}


var zindexmax = 0 ;
if ( ! window.qsn_notestyles ) var qsn_notestyles = {} ;
var qsn_globalversion = 1 ;
var qsn_stuffIDs = [ "q_author_stuff" ] ;
var qsn_dynloadstatus = {} ;

function qsn_noteidssortedlist() {
	var idslist = [] ;
	for ( var id in qsn_thenotes ) if ( qsn_thenotes[ id ] ) idslist.push( id ) ;
	var re = new RegExp( "^note_[0-9]*([0-9]{9})$", "i" ) ;
	return idslist.sort( function( a , b ){
		if ( re.test( a ) && re.test( b ) ) return ( a.replace( re, "$1" ) < b.replace( re, "$1" ) ) ? -1 : 1 ;
		if ( ! re.test( a ) && ! re.test( b ) ) return parseInt( a.replace( /.*_([0-9]+)_[0-9]+$/ , "$1" ) , 10 ) - parseInt( b.replace( /.*_([0-9]+)_[0-9]+$/ , "$1" ) , 10 ) ;
		if ( re.test( a ) ) return -1 ;
		return 1 ;
	} ) ;
}

function qsn_globalupgradejson( id ) {
	var r = qsn_thenotes[ id ] ;
	if ( ! r ) return ;
	if ( ! r.qsnversion ) r.qsnversion = 0 ;
	if ( r.qsnversion < 1 ) r = qsn_globalupgradejsontov1( r ) ;
	r.qsnversion = qsn_globalversion ;
	return r ;
}
function qsn_globalupgradejsontov1( r ) {
	if ( ! r.spacedefaults || ! r.spacedefaults.common ) return r ;
	if ( r.spacedefaults.common.ghost != undefined ) r.common.ghost = r.spacedefaults.common.ghost ;
	if ( r.spacedefaults.common.row != undefined ) r.common.row = r.spacedefaults.common.row ;
	if ( r.spacedefaults.common.col != undefined ) r.common.col = r.spacedefaults.common.col ;
	return r ;
}

function qsn_doupgradejson( id ) {
	var r = qsn_thenotes[ id ] ;
	var notekind = r.common.notekind ;
	if ( ! r ) return ;
	qsn_globalupgradejson( id ) ;
	var inheriteds = [ { notekind : notekind , version : r.version } ] ;
	if ( r.common.inherited ) inheriteds = inheriteds.concat( r.common.inherited ) ;
	inheriteds.reverse() ;
	var inheritednotekind , inheritedversion , json , appendtarget ;
	var n = inheriteds.length ;
	for ( var i = 0 ; i < n ; i++ ) {
		inheritednotekind = inheriteds[ i ].notekind ;
		inheritedversion = inheriteds[ i ].version ;
		json = eval ( "window." + inheritednotekind + "_json_template" ) ;
		if ( ! json ) return false ;
		r.version = inheritedversion ;
		if ( ( inheritedversion == undefined ) || ( json.version > inheritedversion ) ) r = qsn_thenotes[ id ] = ( eval ( inheritednotekind + "_upgradejson" ) )( r ) ;
		if ( inheritednotekind != notekind ) r.common.inherited[ n-i-2 ].version = r.version ;
	}
	if ( $.inArray( notekind, [ "btn", "charmessage", "hello_intl", "mcn", "navig", "silhouette" ]	 ) != -1 ) delete r.shadow ;
}

function qsn_stuffID( noteid ) {
	if ( qsn_thenotes[ noteid ] && qsn_thenotes[ noteid ].common && qsn_thenotes[ noteid ].common.stuffID ) return  qsn_thenotes[ noteid ].common.stuffID ;
	return q_stuffmode || "q_author_stuff" ;
}

function qsn_trueXY( id ) {
	var y = ge( id ) ;
	if ( ! qsn_thenotes[ id ] || isremoved( y ) ) {
		if ( ! qsn_thenotes[ id ] ) debugmail( "qsn_trueXY called for " + id + ", qsn_thenotes missing" ) ;
		if ( isremoved( y ) ) debugmail( "qsn_trueXY called for " + id + ", element missing" ) ;
		return [ 0 , 0 ] ;
	}
	var ypos = q_trueXY( y ) ;
	var refpos = q_trueXY( qsn_stuffID( id ) ) ;
	return [ ypos[0] - refpos[0] , ypos[1] - refpos[1] ] ;
}
function qsn_trueleft( id ) {
	var pos =  qsn_trueXY( id ) ;
	return pos[ 0 ] ;
}
function qsn_truetop( id ) {
	var pos =  qsn_trueXY( id ) ;
	return pos[ 1 ] ;
}

function qsn_position( id , position , spacedefault ) {
	var sc = qsn_thenotes[ id ].spacedefaults.common ;
	if ( ! sc[ position ] ) return null ;
	if ( spacedefault ) return sc[ position ] ;
	var uc = qsn_thenotes[ id ].user.common ;
	return ( uc[ position ] ) ? uc[ position ] : sc[ position ] ;
}
function qsn_left( id , spacedefault ) {
	return qsn_position( id , "left" , spacedefault ) ;
}
function qsn_top( id , spacedefault ) {
	return qsn_position( id , "top" , spacedefault ) ;
}
function qsn_width( id , spacedefault ) {
	return qsn_position( id , "width" , spacedefault ) ;
}

/*
function -
function COLORS
*/

function qsn_setcolors( elems , noteid ) {
	var local_debug = "qsn_setcolors 0" ;
	try {
		var res = qsn_gettargetsbykeys( elems , "color" , noteid ) ;
		local_debug = "qsn_setcolors 1" ;
		var notekind = res[ 0 ] ;
		var alltargets = res[ 1 ] ;
		var r = res [ 2 ] ;
		var colordesc = $.extend( {}, qsn_colordesc ) ;
		colordesc = $.extend( colordesc , eval( "window." + notekind + "_colordesc" ) ) ;
		local_debug = "qsn_setcolors 2" ;
		if ( ! colordesc ) return ;
		var colorvalue , colorrules , elem ;
		for ( var key in colordesc ) {
			local_debug = "qsn_setcolors 3 - " + key ;
			var targets = alltargets[ key ] ;
			colorvalue = qsn_desc2rvalue( r , colordesc , key ) ;
			if ( targets && colorvalue != undefined ) {
				local_debug = "qsn_setcolors 4 - " + colorvalue ;
				for ( var i = 0 ; i < targets.length ; i++ ) {
					elem = targets[ i ] ;
					var re = new RegExp ( "^.*\\b" + key + " +([^ ]+).*$" ) ;
					colorrules = elem.className.replace( re , "$1" ).split( "__" ) ;
					try { local_debug = "qsn_setcolors 5 - colorrules.length=" + colorrules.length + " - " + q_tostring( colorrules ) ; }
					catch ( e ) { local_debug = "qsn_setcolors 5 - colorrules can't get length" ; }
					for ( var j = 0 ; j < colorrules.length ; j++ ) {
						local_debug = "qsn_setcolors 6 - " + colorrules[ j ] ;
						try {
							qsn_applycolorrule( elems , elem , colorvalue , colorrules[ j ] ) ;
						} catch ( err ) {
							var debugmsg =  "in qsn_applycolorrule elems=" + elems + " - colorvalue=" + colorvalue + " -colorrule=" + colorrules[ j ] + " - key=" + key + " - colordesc=" + q_tostring( colordesc ) + " - r=" + q_tostring( r ) + "\r" ;
							
							try {
								if ( ( typeof colordesc[ key ] ) == "function" ) debugmsg += "typeof colordesc[ key ]=function" ;
								else if ( ( typeof colordesc[ key ] ) == "object" ) {
									debugmsg += "typeof colordesc[ key ]=object" ;
									var values = [] ;
									for ( var j in colordesc[ key ] ) debugmsg += "j=" + j + " - v=" + qsn_desc2rvalue( r , colordesc[ key ] , j ) ;
								} else {
									debugmsg += "colordesc[ key ]=" + colordesc[ key ] ;
									var keys = colordesc[ key ].split( "." ) ;
									var value = r ;
									for ( var ii = 0 ; ii < keys.length ; ii++ ) {
										debugmsg += "k=" + keys[ ii ] ;
										value = value[ keys[ ii ] ] ;
									}
									debugmsg += "value=" + value ;
								}
								if ( value != "0" ||  ! ( /_/.test( key ) ) ) debugmsg += "value returned" ;
								else debugmsg += "call qsn_desc2rvalue with " + key.replace( /^[^_]+_/ , "" ) ;
							} catch ( err ) {}
							
							if ( ( typeof err ) == "object" ) throw $.extend( {} , err , { message : debugmsg + " : " + err.message } ) ;
							throw { message : debugmsg } ;
						}
					}
				}
			}
		}
	} catch ( err ) {
		if ( ( typeof err ) == "object" ) throw $.extend( {} , err , { message : "in qsn_setcolors " + local_debug + " :\r" + err.message } ) ;
		throw { message : "in qsn_setcolors " + local_debug + " :\r" } ;
	}
}

function qsn_desc2rvalue( r , thedesc , thekey ) {//thedesc = wsg_colordesc , thekey = "qmc1"
	/*if ( ( typeof thedesc[ thekey ] ) == "object" ) {
		var values = [] ;
		for ( var j in thedesc[ thekey ] ) values.push( qsn_desc2rvalue( r , thedesc[ thekey ] , j ) ) ;
		return values ;
	}*/
	var snstyleid = r.common.snstyle || "qsn" ;
	function getvalue( getterDesc ) {
		if ( ! getterDesc ) return null ;
		if ( typeof getterDesc == "function" ) return getterDesc( r ) ;
		if ( ( typeof getterDesc ) == "object" ) {
			var values = [] ;
			for ( var j = 0 ; j < getterDesc.length ; j++ ) values.push( getvalue( r , getterDesc[ j ] ) ) ;
			return values ;
		}
		function applyJsonPath( value, jsonpath ){
			var jsonkeys = jsonpath.split( "." ) ;
			for ( var i = 0 ; i < jsonkeys.length ; i++ ) {
				value = value[ jsonkeys[ i ] ] ;
				if ( value == undefined ) return undefined ;
			}
			return value ;
		}
		var jsonkeys = getterDesc.split( "." ) ;
		var value = applyJsonPath( r, getterDesc ) ;
		if ( value == undefined ) {
			if ( applyJsonPath( qsn_containerDefaults(), getterDesc ) != undefined ) return "__auto-" + snstyleid + "-" + getterDesc ;
			return undefined ;
		}
		return value ;
	}
	var splitkeys = thekey.split( "_" ) ;
	var nkeys = splitkeys.length ;
	var values = [] ;
	for ( var j = 0 ; j < nkeys ; j++ ) {
		var getterDesc = thedesc[ splitkeys.join( "_" ) ] || thedesc[ splitkeys[ 0 ] ] ;
		/*if ( ! getterDesc ) debugmail( "getterDesc undefined in qsn_desc2rvalue : " + r.common.notekind + ", " + splitkeys.join( "_" ) + ", " + splitkeys[ 0 ], { objectmail: "WARNING in qsn_desc2rvalue" } ) ;
		else values.push( getvalue( getterDesc ) ) ;*/
		values.push( getvalue( getterDesc ) ) ;
		splitkeys.splice( 0, 1 ) ;
	}
//console.log( "qsn_desc2rvalue", r , thedesc , values ) ;
	if ( values.length == 1 ) return values[ 0 ] ;
	return values ;
}

function qsn_getcolor( id , colorkey , colorrule ) {//colorkey = "qmc1"...
	return qsn_applycolorrule( id , null , qsn_colorvalue( id , colorkey ) , colorrule , true ) ;
}
function qsn_colorvalue( id , colorkey ) {//colorkey = "qmc1"...
	var r = qsn_thenotes[ id ] ;
	if ( ! r ) return null ;
	var notekind = r.common.notekind ;
	var colordesc = $.extend( {}, qsn_colordesc ) ;
	colordesc = $.extend( colordesc, eval( "window." + notekind + "_colordesc" ) ) ;
	if ( ! colordesc ) return null ;
	return qsn_desc2rvalue( r , colordesc , colorkey ) ;
}

function qsn_applycolorrule( id , elem , colorvalue , colorrule , rgbonly ) {
	var therule = colorrule.split( "_" ) ;
	var themode = therule[ 1 ] ;
	var styledict = { "bg" : "backgroundColor" , "bd" : "borderColor" , "text" : "color" } ;
	var thestyle = styledict[ therule[ 0 ] ] || therule[ 0 ] ;
	var xcolorvalue = [].concat( ( typeof colorvalue == "object" ) ? colorvalue : [ colorvalue ] ) ;
	if ( ( xcolorvalue[ 0 ] == null || xcolorvalue[ 0 ] == "0" ) && xcolorvalue.length > 1 ) {
		if ( therule.length > 2 ) therule.splice( 1, 1 ) ;
		xcolorvalue.splice( 0, 1 ) ;
		return qsn_applycolorrule( id , elem , xcolorvalue , therule.join( "_" ) , rgbonly ) ;
	}
	if ( /noteborder/.test(thestyle) ) return qsn_colornoteborder( elem , xcolorvalue[ 0 ] , /[0-9]*$/.exec( thestyle )[ 0 ] ) ;
	if ( thestyle == "isdyndark" ) return qsn_colorisdyndark( elem , colorvalue, themode ) ;
	if ( thestyle == "isdark" ) return qsn_colorisdark( elem, colorvalue, themode ) ;
	if ( thestyle == "setdark" ) return qsn_colorsetdark( elem , colorvalue ) ;
	if ( thestyle == "headericon" ) return qsn_headericon( elem , xcolorvalue[ 0 ] ) ;
	if ( thestyle == "button" ) return qsn_colorbutton( elem , xcolorvalue[ 0 ] , themode ) ;
	colorvalue = xcolorvalue[ 0 ] ;
	if ( colorvalue && ( /\// ).test( colorvalue ) ) {
		qsn_applycolorrule( id, $( ".bicolor:eq(0)", elem ).get( 0 ) , colorvalue.split( "/" )[ 1 ], colorrule ) ;
		colorvalue = colorvalue.split( "/" )[ 0 ] ;
	}
	var cc ;
	if ( themode == "self" ) cc = qsn_selfclasscolor( colorvalue , thestyle , rgbonly ) ;
	else if ( themode == "selfbg" ) cc = qsn_selfbgclasscolor( colorvalue , thestyle , rgbonly ) ;
	else if ( themode == "contrast150" ) cc = qsn_contrast150classcolor( colorvalue , thestyle , rgbonly ) ;
	else if ( themode == "contrast9" ) cc = qsn_contrastXclasscolor( 9, colorvalue , thestyle , rgbonly ) ;
	else if ( themode == "contrast13" ) cc = qsn_contrastXclasscolor( 13, colorvalue , thestyle , rgbonly ) ;
	else if ( themode == "contrast19" ) cc = qsn_contrastXclasscolor( 19, colorvalue , thestyle , rgbonly ) ;
	else if ( themode == "contrast27" ) cc = qsn_contrastXclasscolor( 27, colorvalue , thestyle , rgbonly ) ;
	else if ( themode == "contrast40" ) cc = qsn_contrastXclasscolor( 40, colorvalue , thestyle , rgbonly ) ;
	else if ( themode == "bw" ) cc = qsn_bwclasscolor( colorvalue , thestyle , rgbonly ) ;
	else if ( (/^color[0-9]+$/).test( themode ) ) cc = qsn_colorXclasscolor( themode.replace( /^color([0-9]+)$/, "$1" ), colorvalue , thestyle , rgbonly ) ;
	if ( ! cc ) return null ;
	if ( cc[ 0 ] && ( /rgba/ ).test( cc[ 0 ] ) && BrowserDetect && ! BrowserDetect.supportRGBA ) {
		var tmp = rgbvalues( cc[ 0 ], 1 ) ;
		cc[ 0 ] = "rgb(" + tmp.join( "," ) + ")" ;
	}
	if ( rgbonly ) {
		if ( typeof cc[ 0 ] == "function" ) return cc[ 0 ]( elem ) ;
		return cc[ 0 ] ;
	}
	if ( ! elem ) return cc ;
	if ( thestyle == "borderColor" && cc[ 0 ] == "transparent" ) elem.style.borderStyle = "none" ;
	if ( thestyle == "borderinset" ) thestyle = "borderColor" ;
	elem.className = elem.className.replace( cc[ 2 ] , "" ) + ( ( cc[ 1 ] != "" ) ? " " + cc[ 1 ] : "" ) ;
	elem.style[ thestyle ] = cc[ 0 ] ;
}

function qsn_headericon( elem , colorvalue ) {
	if ( qsn_currstate == "edit" && qsn_edittarget ) var currentWidth = qsn_edittarget.offsetWidth ;
	if ( ! colorvalue ) {
		elem.innerHTML = "" ;
		elem.style.width="0px" ;
		$( elem.parentNode ).removeClass( "withicon" ) ;
	} else {
		elem.innerHTML = "<div style=\"position: relative ; top : 0px ; left : 0px ; width: 46px;\"><div style=\"z-index:1;position: absolute; top : -16px ; width: 48px; height: 48px; background: transparent top left no-repeat ; background-image : url(" + colorvalue + ") ; _filter :progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + colorvalue + "',sizingMethod='scale') ; _background-image : none\"></div>" ;
		elem.style.width = "46px" ;
		//elem.style.paddingRight = "8px" ;
		$( elem.parentNode ).addClass( "withicon" ) ;
	}
	if ( qsn_currstate == "edit" && qsn_edittarget ) q_changedwidth( qsn_edittarget, currentWidth ) ;
}

function qsn_colornoteborder( elem , colorvalue , borderwidth ) {
	if ( qsn_currstate == "edit" ) {
		elem.style.borderStyle = "solid" ;
		elem.style.borderWidth = (borderwidth) ? (borderwidth +"px" ) : "3px" ;
		elem.style.borderColor = rgb2brightness( getpagebackgroundcolor( ) ) < 50  ? "#fff" : "#444" ; 
		return ;
	} 
	var c = parseInt( colorvalue , 10 ) ;
	if ( c == -1 ) {
		elem.style.borderStyle = "none" ;
		return ;
	}
	c = ( typeof c == "number" && c < 10 ) ? getsncontextualbackgroundcolors( 7 )[ c - 1 ] : qsn_colorforcergb( colorvalue ) ;
	elem.style.borderStyle = "solid" ;
	elem.style.borderWidth = ( borderwidth != undefined && borderwidth != null && borderwidth != "" ) ? ( borderwidth +"px" ) : "1px" ;
	elem.style.borderColor = ( rgb2brightness( c ) < 50 ) ? "#CCC #CCC #AAA #CCC" : "#AAA #AAA #777 #AAA" ;
}

function qsn_colorisdyndark( elem , colorvalue, classPrefix ) {
//console.log( "qsn_colorisdyndark", colorvalue, classPrefix ) ;
	var xcolorvalue = [].concat( ( typeof colorvalue == "object" ) ? colorvalue : [ colorvalue ] ) ;
	for ( var i = 0 ; i < xcolorvalue.length ; i++ ) {
		colorvalue = xcolorvalue[ i ] ;
		if ( colorvalue != undefined && colorvalue != -1 ) break ;
	}
	var $elem = $( elem ) ;
	var c = qsn_realcolor( colorvalue ) ;
	var isdark = ( rgb2brightness( c ) < 50 ) ;
	if ( ! elem ) return isdark ;
	elem.isdark = isdark ;
	classPrefix = ( ! classPrefix || classPrefix == "self" ) ? "is" : classPrefix ;
	$elem.removeClass( classPrefix + "clear" ).removeClass( classPrefix + "dark" ).addClass( classPrefix + ( ( rgb2brightness( c ) < 50 ) ? "dark" : "clear" ) ) ;
}

function qsn_colorisdark( elem , colorvalue, themode ) {
//console.log( "qsn_colorisdark", colorvalue ) ;
	var xcolorvalue = [].concat( ( typeof colorvalue == "object" ) ? colorvalue : [ colorvalue ] ) ;
	for ( var i = 0 ; i < xcolorvalue.length ; i++ ) {
		colorvalue = xcolorvalue[ i ] ;
		if ( colorvalue != undefined && ( themode == "page" || colorvalue != -1 ) ) break ;//2013-04-23, vh: ajout de la gestion d'un mode page qui permet de considérer la couleur de page en cas de couleur transparent (=-1)
	}
	var $elem = $( elem ) ;
	elem.className = elem.className.replace( /isbw[^ ]+/g , "" ) ;
	$elem.removeClass( "isclear" ).removeClass( "isdark" ) ;
	var c = qsn_realcolor( colorvalue ) ;
	if ( /^__auto/.test( colorvalue ) ) {
		var splitted = colorvalue.split( "-" ) ;
		var jsonPath = splitted[ splitted.length - 1 ].replace( /\./g, "-" ) ;
		$elem.addClass( "isbwqsnstyle-" + jsonPath ) ;
	} else if ( /^c(1|2)$/.test( colorvalue ) ) $elem.addClass( "isbw" + colorvalue ) ;
	else if ( parseInt( colorvalue , 10 ) > 0 && parseInt( colorvalue , 10 ) < 10 ) $elem.addClass( "isbw" + colorvalue ) ;
	else if ( colorvalue == -1 ) $elem.addClass( "isbwpage" ) ;
	else $elem.addClass( "is" + ( ( rgb2brightness( c ) < 50 ) ? "dark" : "clear" ) ) ;
	var isdark = ( rgb2brightness( c ) < 50 ) ;
	if ( ! elem ) return isdark ;
	elem.isdark = isdark ;
}

function qsn_colorsetdark( elem , colorvalue ) {
	var xcolorvalue = [].concat( ( typeof colorvalue == "object" ) ? colorvalue : [ colorvalue ] ) ;
	for ( var i = 0 ; i < xcolorvalue.length ; i++ ) {
		colorvalue = xcolorvalue[ i ] ;
		if ( colorvalue != undefined && colorvalue != -1 ) break ;
	}
	var c = getrealcolor( colorvalue ) ;
	var b = ( rgb2brightness( c ) < 50 ) ;
	var re = new RegExp( "\\bdarkvador *" ) ;
	elem.className = elem.className.replace( re , "" ) + ( ( b ) ? " darkvador" : "" ) ;
}

function qsn_colorbutton( elem , colorvalue , themode ) {
	var c = getrealcolor( colorvalue ) ;
	var c2 = rgbcontrastcolor( c , 150 ) ;
	if ( themode == "bw" ) c2 = ( rgb2brightness( c ) < 50 ) ? "#FFF" : "#000" ;
	elem.onmouseout = function () { this.style.color = this.style.borderColor = c2 ; this.style.backgroundColor = c ; } ;
	elem.onmouseover = function () { this.style.backgroundColor = this.style.borderColor = c2 ; this.style.color = c ; } ;
	elem.style.color = elem.style.borderColor = c2 ;
	elem.style.backgroundColor = c ;
	if ( !(/\bbutton\b/.test( elem.className )) ) elem.className = "button " + elem.className ;
}

function qsn_colorforcergb( colorvalue ) {	
	var namedcolor = { "black" : "rgb(0,0,0)" , "white" : "rgb(255,255,255)" } ;
	return namedcolor[ colorvalue ] || colorvalue ;
}
function qsn_realcolor( colorvalue ) {
	if ( ( /^__auto/ ).test( colorvalue ) ) {
		var splitted = colorvalue.split( "-" ) ;
		var jsonPath = splitted[ splitted.length - 1 ] ;
		var snstyleid = ( splitted.length == 3 ) ? splitted[ 1 ] : "default" ;
		return qsn_realcolor( qsn_resolveValue( jsonPath, snstyleid ) ) ;
	}
	if ( ( /rgb/.test( colorvalue ) ) ) return colorvalue ;
	if ( /^c(1|2)$/.test( colorvalue ) ) return club_siteelemscolor[ colorvalue ] ;
	if ( colorvalue == "bw" ) return function( elem ){
		return ( $( elem ).parents( ".isdark, .isclear" ).eq( 0 ).hasClass( "isclear" ) ) ? "#000" : "#FFF" ;
	} ;
	var c = parseInt( colorvalue , 10 ) ;
	if ( c == -1 ) return getpagebackgroundcolor() ;
	if ( c < 10 ) return qsn_colorforcergb( getsncontextualbackgroundcolors( 7 )[ c - 1 ] ) ;
	return qsn_colorforcergb( colorvalue ) ;
}

function qsn_selfclasscolor( colorvalue , thestyle , rgbonly ) {
	var re ;
	if ( thestyle != "color" ) re = new RegExp( "club" + thestyle.toLowerCase() +"[^ ]* ?" ) ;
	else re = new RegExp( "(pagetextcolor|club" + thestyle.toLowerCase() +"[^ ]*) ?" , "g" ) ;
	if ( ( /rgb/ ).test( colorvalue ) ) return [ ( thestyle != "borderinset" ) ? colorvalue : rgb2insetcolor( colorvalue ) , "" , re ] ;
	if ( ( /^__auto/ ).test( colorvalue ) ) {
		var splitted = colorvalue.split( "-" ) ;
		var jsonPath = splitted[ splitted.length - 1 ].replace( /\./g, "-" ) ;
		return ( rgbonly ) ? [ qsn_realcolor( colorvalue ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + "-" + jsonPath , re ] ;
	}
	if ( colorvalue == "bw" ) return ( rgbonly ) ? [ qsn_realcolor( "bw" ), "" , "" ] : [ "", "club" + thestyle.toLowerCase() + "bw" , re ] ;
	if ( /^c(1|2)$/.test( colorvalue ) ) return ( rgbonly ) ? [ qsn_colorforcergb( club_siteelemscolor[ colorvalue ] ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + colorvalue , re ] ;
	if ( colorvalue == "standard" ) return ( rgbonly ) ? [ "#CCC" , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + colorvalue , re ] ;
	var c = parseInt( colorvalue , 10 ) ;
	if ( c == -1 && thestyle != "color" ) return [ "transparent" , "" , re ] ;
	if ( c == -1 && thestyle == "color" ) return ( rgbonly ) ? [ getpagecolor( ) , "" , "" ] : [ "" , "pagetextcolor" , re ] ;
	var thecolor = getsncontextualbackgroundcolors( 7 , true )[ c - 1 ] ;
	if ( q_spacetype( ) == "family" ) return [ qsn_colorforcergb( thecolor ) , "" , re ] ;
	if ( c < 10 ) return ( rgbonly ) ? [ qsn_colorforcergb( getsncontextualbackgroundcolors( 7 )[ c - 1 ] ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + thecolor , re ] ;
	return [ ( thestyle != "borderinset" ) ? qsn_colorforcergb( colorvalue ) : rgb2insetcolor( qsn_colorforcergb( colorvalue ) ) , "" , re ] ;
}

function qsn_selfbgclasscolor( colorvalue , thestyle , rgbonly ) {
	var re ;
	if ( thestyle != "color" ) re = new RegExp( "club" + thestyle.toLowerCase() +"[^ ]* ?" ) ;
	else re = new RegExp( "(pagetextcolor|club" + thestyle.toLowerCase() +"[^ ]*) ?" , "g" ) ;
	if ( /^c(1|2)$/.test( colorvalue ) ) return ( rgbonly ) ? [ qsn_colorforcergb( club_siteelemscolor[ colorvalue ] ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + colorvalue , re ] ;
	if ( ( /rgb/.test( colorvalue ) ) ) return [ colorvalue , "" , re ] ;
	var c = parseInt( colorvalue , 10 ) ;
	if ( c == -1 && thestyle != "color" ) return [ getpagebackgroundcolor( ) , "" , re ] ;
	if ( c == -1 && thestyle == "color" ) return ( rgbonly ) ? [ getpagecolor( ) , "" , "" ] : [ "" , "pagetextcolor" , re ] ;
	var thecolor = getsncontextualbackgroundcolors( 7 , true )[ c - 1 ] ;
	if ( q_spacetype( ) == "family" ) return [ qsn_colorforcergb( thecolor ) , "" , re ] ;
	if ( c < 10 ) return ( rgbonly ) ? [ qsn_colorforcergb( getsncontextualbackgroundcolors( 7 )[ c - 1 ] ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + thecolor , re ] ;
	return [ qsn_colorforcergb( colorvalue ) , "" , re ] ;
}

function qsn_contrast150classcolor( colorvalue , thestyle , rgbonly ) {
	//return qsn_contrastXclasscolor( 150, colorvalue , thestyle , rgbonly ) ;
	var re ;
	if ( thestyle != "color" ) re = new RegExp( "club" + thestyle.toLowerCase() + "c150" + "[^ ]* ?" ) ;
	else re = new RegExp( "(pagetextcolorc150" + "|club" + thestyle.toLowerCase() +"c150" + "[^ ]*) ?" , "g" ) ;
	if ( ( /rgb/.test( colorvalue ) ) ) return [ rgbcontrastcolor150( colorvalue ) , "" , re ] ;
	if ( /^c(1|2)$/.test( colorvalue ) ) return ( rgbonly ) ? [ rgbcontrastcolor150( qsn_colorforcergb( club_siteelemscolor[ colorvalue ] ) ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + "c150" + colorvalue , re ] ;
	var c = parseInt( colorvalue , 10 ) ;
	if ( c == -1 && thestyle != "color" ) return [ rgbcontrastcolor150( getpagebackgroundcolor( ) ) , "" , re ] ;
	if ( c == -1 && thestyle == "color" ) return ( rgbonly ) ? [ rgbcontrastcolor150( getpagebackgroundcolor( ) ) , "" , "" ] : [ "" , "pagetextcolorc150" , re ] ;
	var thecolor = getsncontextualbackgroundcolors( 7 , true )[ c - 1 ] ;
	if ( q_spacetype( ) == "family" ) return [ rgbcontrastcolor150( qsn_colorforcergb( thecolor ) ) , "" , re ] ;
	if ( c < 10 ) return ( rgbonly ) ? [ rgbcontrastcolor150( qsn_colorforcergb( getsncontextualbackgroundcolors( 7 )[ c - 1 ] ) ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + "c150" + thecolor , re ] ;
	return [ rgbcontrastcolor150( qsn_colorforcergb( colorvalue ) ) , "" , re ] ;
}

function qsn_contrastXclasscolor( x, colorvalue , thestyle , rgbonly ) {
	var re ;
	if ( thestyle != "color" ) re = new RegExp( "club" + thestyle.toLowerCase() + "c" + x + "[^ ]* ?" ) ;
	else re = new RegExp( "(pagetextcolorc" + x + "|club" + thestyle.toLowerCase() +"c" + x + "[^ ]*) ?" , "g" ) ;
	if ( ( /rgb/.test( colorvalue ) ) ) return [ rgbcontrastcolor( colorvalue, x ) , "" , re ] ;
	if ( /^c(1|2)$/.test( colorvalue ) ) return ( rgbonly ) ? [ rgbcontrastcolor( qsn_colorforcergb( club_siteelemscolor[ colorvalue ] ) , x ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + "c" + x + colorvalue , re ] ;
	var c = parseInt( colorvalue , 10 ) ;
	if ( c == -1 && thestyle != "color" ) return [ rgbcontrastcolor( getpagebackgroundcolor( ), x ) , "" , re ] ;
	if ( c == -1 && thestyle == "color" ) return ( rgbonly ) ? [ rgbcontrastcolor( getpagebackgroundcolor( ), x ) , "" , "" ] : [ "" , "pagetextcolorc" + x , re ] ;
	var thecolor = getsncontextualbackgroundcolors( 7 , true )[ c - 1 ] ;
	if ( q_spacetype( ) == "family" ) return [ rgbcontrastcolor( qsn_colorforcergb( thecolor ), x ) , "" , re ] ;
	if ( c < 10 ) return ( rgbonly ) ? [ rgbcontrastcolor( qsn_colorforcergb( getsncontextualbackgroundcolors( 7 )[ c - 1 ] ), x ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + "c" + x + thecolor , re ] ;
	return [ rgbcontrastcolor( qsn_colorforcergb( colorvalue ), x ) , "" , re ] ;
}

function qsn_colorXclasscolor( x, colorvalue , thestyle , rgbonly ) {
	var re ;	
	if ( thestyle != "color" ) re = new RegExp( "club" + thestyle.toLowerCase() + "c" + x + "[^ ]* ?" ) ;
	else re = new RegExp( "(pagetextcolorc" + x + "|club" + thestyle.toLowerCase() +"c" + x + "[^ ]*) ?" , "g" ) ;
	if ( ( /rgb/.test( colorvalue ) ) ) return [ ( x == 1 ) ? colorvalue : rgb2levelcolor( colorvalue, x ) , "" , re ] ;
	if ( /^c(1|2)$/.test( colorvalue ) ) return ( rgbonly ) ? [ ( x == 1 ) ? qsn_colorforcergb( club_siteelemscolor[ colorvalue ] ) : rgb2givenlevel( levels[ parseInt( x, 10 ) - 2  ], qsn_colorforcergb( club_siteelemscolor[ colorvalue ] ) ) , "" , "" ] : [ "" ,"club" + thestyle.toLowerCase() + colorvalue.replace( /c1/ , "" ) + x , re ] ;
	var c = parseInt( colorvalue , 10 ) ;
	var thecolor = getsncontextualbackgroundcolors( 7 , true )[ c - 1 ] ;
	if ( c < 10 ) return ( rgbonly ) ? [ qsn_colorforcergb( getsncontextualbackgroundcolors( 7 )[ parseInt( x, 10 ) - 1 ] ) , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + x , re ] ;
	return [ ( x == 1 ) ? qsn_colorforcergb( colorvalue ) : rgb2levelcolor( qsn_colorforcergb( colorvalue ), x  ) , "" , re ] ;
}

function qsn_bwclasscolor( colorvalue , thestyle , rgbonly ) {
	var re ;
	if ( thestyle != "color" ) re = new RegExp( "club" + thestyle.toLowerCase() +"bw[^ ]* ?" ) ;
	else re = new RegExp( "(bwpagetextcolor|club" + thestyle.toLowerCase() +"bw[^ ]*) ?" , "g" ) ;
	if ( ( /rgb/.test( colorvalue ) ) ) return [ ( rgb2brightness( colorvalue ) < 50 ) ? "#FFF" : "#000" , "" , re ] ;
	if ( /^c(1|2)$/.test( colorvalue ) ) return ( rgbonly ) ? [ (rgb2brightness( qsn_colorforcergb( club_siteelemscolor[ colorvalue ] ) ) < 50 ) ? "#FFF" : "#000" , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + "bw" + colorvalue , re ] ;
	if ( ( /^__auto/ ).test( colorvalue ) ) {
		var splitted = colorvalue.split( "-" ) ;
		var jsonPath = splitted[ splitted.length - 1 ].replace( /\./g, "-" ) ;
		return ( rgbonly ) ? [ ( rgb2brightness( qsn_colorforcergb( qsn_realcolor( colorvalue ) ) ) < 50 ) ? "#FFF" : "#000" , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() +"-" + jsonPath + "-bw" , re ] ;
	}
	var c = parseInt( colorvalue , 10 ) ;
	if ( c == -1 && thestyle != "color" ) return [ ( rgb2brightness( getpagebackgroundcolor() ) < 50 ) ? "#FFF" : "#000" , "" , re ] ;
	if ( c == -1 && thestyle == "color" ) return ( rgbonly ) ? [ ( rgb2brightness( getpagebackgroundcolor() ) < 50 ) ? "#FFF" : "#000" , "" , "" ] : [ "" , "bwpagetextcolor" , re ] ;
	var thecolor = getsncontextualbackgroundcolors( 7 , true )[ c - 1 ] ;
	if ( q_spacetype( ) == "family" ) return [ ( rgb2brightness( qsn_colorforcergb( thecolor ) ) < 50 ) ? "#FFF" : "#000" , "" , re ] ;
	if ( c < 10 ) return ( rgbonly ) ? [ ( rgb2brightness( qsn_colorforcergb( getsncontextualbackgroundcolors( 7 )[ c - 1 ] ) ) < 50 ) ? "#FFF" : "#000" , "" , "" ] : [ "" , "club" + thestyle.toLowerCase() + "bw" + thecolor , re ] ;
	return [ ( rgb2brightness( qsn_colorforcergb( colorvalue ) ) < 50 ) ? "#FFF" : "#000" , "" , re ] ;
}

function qsn_setnotecolors( id, elemsToDark ) {
	var div = getelement ( id ) ;
	var r = qsn_thenotes[ id ] ;
	var c ;
	// set background
	c = getrealcolor( r.color , true );
	div.style.backgroundColor = c;

	c = div.style.backgroundColor;
	// set borders
	var isdark = false ;
	if ( c == "transparent" ) {
		if ( qsn_currstate == "edit" ) {
			div.style.borderStyle = "solid" ;
			if (q_spacetype( ) == "qlub") div.style.borderColor = rgbcomplement( getpagebackgroundcolor() ) ;
		} else if ( r.common.notekind != "wsg" ) div.style.borderStyle = "none" ; 
	} else {
		c = ( typeof c == "number" && c < 10 ) ? getsncontextualbackgroundcolors( 7 )[ c - 1 ] : r.color ;
		div.style.borderStyle = "solid" ;
		isdark = ( rgb2brightness( c ) < 50 ) ;
		if ( qsn_currstate == "edit" ) {
			if ( q_spacetype( ) == "qlub") div.style.borderColor = rgbcomplement ( getpagebackgroundcolor() );
		} else div.style.borderColor = ( isdark ) ? "#CCC #CCC #AAA #CCC" : "#AAA #AAA #777 #AAA" ;
	}
	
	c = div.style.backgroundColor;
	if ( c == "transparent" ) c = getpagebackgroundcolor() ;
	// set contrast elemsToDark
	if ( q_spacetype( ) == "qlub") {
		var g;
		if ( elemsToDark == undefined) var elemsToDark = [ "linkinnote", "signature", "button"];
		else elemsToDark.push (  "linkinnote", "signature" , "button" ) ;
		for ( var i=0; i<elemsToDark.length; i++) {
			g = getElementsByClassName( div , elemsToDark[i] );
			for ( var j=0; j<g.length; j++) {
				if ( qsn_currstate == "edit" && g [ j ].className  == "button") g [ j ].className = "buttonbg";
				else g [ j ].style.color = rgbcontrastcolor150 (c) ;
			}
		}
		var help = gebcn( div, "howtolink");
		if ( help && help != null && help != undefined) {
			// obsolete en qlub, on le vire, 20px = cosmetik
			help.innerHTML = "";
			help.style.height = "20px";
		}
	}
}

function getTargetsByClassName( elem , cont ){  // build a json { class : [ list of HTML nodes ] , ... }
	if ( ! elem || elem.nodeType != 1 ) {
		if ( getElementsByClassName.caller ) return debug_msg( "getElementsByClassName called by " + q_fname( getElementsByClassName.caller ) ) ;
	}
	var fl = ( cont === undefined )  ? true : cont ;
	var t = {} ;
	function find( x , b ) {
		if ( x.nodeType == 1 ) {
			if ( x.className && ( b || ! ( /\bstickynote\b/ ).test( x.className ) ) ) {
				var ws = x.className.replace( / +/g , " " ).split( " " ) ;
				for ( var i = 0 ; i < ws.length ; i++ ) {
					var w = ws[ i ] ;
					if ( t[ w ] ) t[ w ].push( x ) ;
					else t[ w ] = [ x ] ;
				}
			}
			if ( fl && ( b || ! x.className || ! ( /\bstickynote\b/ ).test( x.className ) ) ) for ( var i = 0 ; i < x.childNodes.length ; i++ ) find ( x.childNodes[ i ] );
		}
	}
	find( elem , true ) ;
	return t ;
}

/*
function -
function TEXT
*/

function qsn_getdesctargets( elem , notekind , kind , cont ) {  
// return the json { color : { colorkey1 : [ list of nodes with colorkey1 ] , ... } , text : { textkey1 : list of nodes with textkey1 ] , ... } }
// if kind is defined return the list res[ kind ]
	var fl = cont === undefined  ? true : cont ;
	var t = getTargetsByClassName( elem , fl ) ;
	if ( kind ) { var res ={} ; res[ kind ] = {} ; }
	else var res ={ color:{} , text:{} } ;
	var desckinds = q_getkeys( res ) ;
	for ( var k = 0 ; k < desckinds.length ; k++ ) {
		var desckind = desckinds[ k ] ;
		var r = res[ desckind ] ;
		var thedesc = $.extend( {}, ( ( desckind == "color" ) ? qsn_colordesc : qsn_textdesc ) ) ;
		thedesc = $.extend( thedesc, eval( "window." + notekind + "_" + desckind + "desc" ) ) ;
		if ( thedesc ) {
			var keys = q_getkeys( thedesc ) ;
			for ( var i = 0 ; i < keys.length ; i++ ) r[ keys[ i ] ] = t[ keys[ i ] ] ;
		}
	}
	return kind ? res[ kind ] : res ;
}

function qsn_gettargetsbykeys( elems , kind , noteid ) { // elems is a string or a list of nodes
	if ( typeof elems == "string" ) {
		var local_debug = "step 0" ;
		try {
			var div = ge( elems ) ;
			var b = isremoved( div ) ;
			local_debug = "step 1 - isremoved=" + b ;
			var id = div.id ;
			local_debug = "step 2 - isremoved=" + b ;
			var r = qsn_thenotes[ id ] ;
			local_debug = "step 3 - isremoved=" + b ;
			var notekind = r.common.notekind ;
			local_debug = "step 4 - isremoved=" + b ;
			var alltargets = qsn_getdesctargets( div , notekind , kind , true ) ;
		} catch ( err ) {
			if ( ( typeof err ) == "object" ) throw $.extend( {} , err , { message : "in qsn_gettargetsbykeys " + local_debug + " :\r" + err.message } ) ;
			throw { message : "in qsn_gettargetsbykeys " + local_debug + " :\r" } ;
		}
	} else {
		var targets = elems ; 
		if ( ! targets.length ) return {} ;
		var div = targets[ 0 ] ;
		if ( ! div.notekind && ! noteid ) div = getContainer( targets[ 0 ] ) ;
		var notekind = div.notekind ; // pb avec broll -> iframe
		var r = qsn_thenotes[ noteid || div.noteid || div.id ] ;
		if ( ! notekind ) notekind = r.common.notekind ;
		var alltargets = {} ;
		for ( var i = 0 ; i < targets.length ; i++ ) {
			var oldid = div.id ; 
			if ( div.noteid ) div.id = div.noteid ;
			//var res = qsn_getdesctargets( div , notekind , kind , false ) ; 
			var res = qsn_getdesctargets( targets[ i ] , notekind , kind , ( noteid ) ? true : false ) ; // modife récupérée de JG, #1609 //2012-07-20, vh : ajout du test de noteid pour permettre d'appliquer à d'autres éléments que dans une note (appication = pronos)
			div.id = oldid ;
			for ( var k in res ) {
				if ( alltargets[ k ] ) alltargets[ k ].concat( res[ k ] ) ; 
				else alltargets[ k ] = res[ k ] ; 
			}
		}
	}
	return [ notekind , alltargets , r ] ;
}

function qsn_settextproperties( elems, noteid ) { // elems is a string or a list of nodes
	var res = qsn_gettargetsbykeys( elems , "text", noteid ) ;
	var notekind = res[ 0 ] ;
	var alltargets = res[ 1 ] ;
	var r = res [ 2 ] ;
	var textdesc = $.extend( {}, qsn_textdesc ) ;
	textdesc = $.extend( textdesc , eval( "window." + notekind + "_textdesc" ) ) ;
	if ( ! textdesc ) return ;
	var colorvalue , colorrules , elem ;
	for ( var key in textdesc ) {
		var targets = alltargets[ key ] ;
		if ( targets ) {
			var textvalues = {} ;
			for ( var keyt in textdesc[ key ] ) textvalues[ keyt ] = qsn_desc2rvalue( r , textdesc[ key ] , keyt ) ;
			for ( var i = 0 ; i < targets.length ; i++ ) {
				elem = targets[ i ] ;
				var re = new RegExp ( "^.*\\b" + key + " +([^ ]+).*$" ) ;
				var stextrules = elem.className.replace( re , "$1" ) ;
				var textrules = stextrules.split( "_" ) ;
				if ( textrules[ 0 ] =="all" ) {
					if ( textrules.length == 1 ) textrules = q_getkeys( textvalues ) ;
					else {
						var sall = q_getkeys( textvalues ).join( " " ) ;
						for ( var j = 1 ; j < textrules.length ; j++ ) {
							var re = new RegExp( "\\b" + textrules[ j ] + "\\b" ) ;
							sall = sall.replace( re , "" ) ;
						}
						textrules = sall.replace(/ +/g," ").split( " " ) ;
					}
				}
				for ( var j = 0 ; j < textrules.length ; j++ ) qsn_applytextrule( notekind , elem , textvalues[ textrules[ j ] ] , textrules[ j ] ) ;
			}
		}
	}
	var h = qsn_handler( notekind , "qsn_posttreatment" , false ) ;
	if ( h ) h( elems ) ;
}

function qsn_applytextrule( notekind , elem , textvalue , textrule ) {
	switch( textrule.toLowerCase() ) {
		case "align" : 
			elem.style[ "textAlign" ] =qsn_definetextaligns( notekind )[ textvalue ] ;
			break ;
		case "bold" : 
			elem.style[ "fontWeight" ] = ( textvalue == "true" ) ? "bold" : "normal" ;
			break ;
		case "center" : 
			elem.style[ "textAlign" ] = ( textvalue == "true" ) ? "center" : "left" ;
			break ;
		case "font" :
			elem.className = elem.className.replace( /clubfontfamily[^ ]* */, "" ) ;
			elem.style[ "fontFamily" ] = "" ;
			if ( ( /^__auto/ ).test( textvalue ) ) {
				var splitted = textvalue.split( "-" ) ;
				var jsonPath = splitted[ splitted.length - 1 ].replace( /\./g, "-" ) ;
				elem.className = elem.className + " clubfontfamily-" + jsonPath ;
			} else elem.style[ "fontFamily" ] = getFontFamilyByCode( textvalue, notekind ) ;
			break ;
		case "italic" : 
			elem.style[ "fontStyle" ] = ( textvalue == "true" ) ? "italic" : "normal" ;
			break ;
		case "margin" : 
			elem.style.margin = qsn_definemargins( notekind )[ textvalue ] ;
			break ;
		case "marginslider" : 
			elem.style.margin = textvalue + ( ( ( /px/ ).test( textvalue ) ) ?  "" : "px" ) ;
			break ;
		case "opacity" : 
			if ( qsn_currstate == "edit" && qsn_edittarget ) qsn_setcolors( qsn_edittarget.id ) ;
			var op = qsn_defineopacities( notekind )[ textvalue ] ;
			elem.style.opacity = op ;
			var intop = 5 * Math.round( 20 * op ) ;
			elem.style.filter = "alpha(opacity=" + intop + ")" ;
			elem.className = elem.className.replace( / ?qsn_trans[0-9]+/g , "" )  + " qsn_trans" + intop ;
			break ;
		case "padding" :
			elem.style.padding = qsn_definepaddings( notekind )[ textvalue ] ;
			break ;
		case "paddingslider" : 
			elem.style.padding = textvalue + ( ( ( /px/ ).test( textvalue ) ) ?  "" : "px" ) ;
			break ;
		case "slider" : 
			elem.style[ "fontSize" ] = textvalue + "px" ;
			elem.style[ "lineHeight" ] = Math.round(textvalue*1.2) + "px" ;
			break ;
		case "size" : 
			elem.style[ "fontSize" ] = qsn_definefontsizes( notekind )[ textvalue ] ;
			elem.style[ "lineHeight" ] = qsn_definelineheights( notekind )[ textvalue ] ;
			break ;
		case "uppercase" : 
			elem.style.textTransform = ( textvalue == "true" ) ? "uppercase" : "none" ;
			break ;
		case "spacing" : 
			elem.style[ "letterSpacing" ] =qsn_definetextspacings( notekind )[ textvalue ] ;
			break ;
	}
}

function qsn_noteoffsets( id ) {
	var div = ge( id ) ;
	var l = qsn_trueleft( id ) ;
	var t = qsn_truetop( id ) ;
	var r = l + div.offsetWidth ;
	var b = t + div.offsetHeight ;
	var headerTop = qsn_headerTopOffset( id ) ;
	return { "offsetLeft" : l , "offsetTop" : t , "offsetTopHeader" : t - headerTop , "offsetWidth" : r-l , "offsetHeight" : b-t } ;
}

function qsn_updatenoteheight( div ) {
	if ( window.pages_isaligned && pages_isaligned() ) {
		var r = qsn_thenotes[ div.id ] ;
		if ( r.parentid ) {
			var d = ( window.pages_richnoteoffsets ) ? pages_richnoteoffsets( r.parentid ) : qsn_noteoffsets( r.parentid ) ;
			ge( r.parentid ).parentNode.style.height = ( d.offsetHeight ) + "px" ;
		} else {
			var d = ( window.pages_richnoteoffsets ) ? pages_richnoteoffsets( div.id ) : qsn_noteoffsets( div.id ) ;
			div.parentNode.style.height = ( d.offsetHeight ) + "px" ;
		}
	} else {
		if ( window.pages_updatepageoffset ) pages_updatepageoffset() ;
	}
}

function qsn_calcpageheight( stuffID ) {
	var pageOffset = qsn_calcpageoffset( stuffID ) ;
	if ( isNaN( pageOffset.bottom ) ) return null ;
	return pageOffset.bottom + ( ( window.pages_bottomsecuremargin ) ? pages_bottomsecuremargin : 12 ) ;
}

function qsn_calcpageoffset( stuffID ) {
	stuffID = stuffID || q_stuffmode || "q_author_stuff" ;
	var d , noteh ;
	var leftValueIsOk = false;
	var max = { top: 999999, topHeader: 999999, left:990, right: 0, bottom: 0 } ;
	qsn_noteidslist = qsn_noteidssortedlist() ;
	for ( var i = 0 ; i < qsn_noteidslist.length ; i++ ) {
		var id = qsn_noteidslist[ i ] ;
		if ( ! qsn_thenotes[ id ] || ! ge ( id ) ) continue ;
		if ( qsn_stuffID( id ) != stuffID ) continue ;
		if ( qsn_thenotes[ id ].common.notekind == "settings" || qsn_thenotes[ id ].parentid ) continue ;
		d = ( window.pages_richnoteoffsets ) ? pages_richnoteoffsets( id ) : qsn_noteoffsets( id ) ;
		noteBottom = d.offsetTop + d.offsetHeight ;
		noteRight = d.offsetLeft + d.offsetWidth ;
		if ( noteBottom > max.bottom ) max.bottom = noteBottom ;
		if ( noteRight > max.right ) max.right = noteRight ;
		if ( d.offsetTop < max.top ) max.top = d.offsetTop ;
		if ( d.offsetTopHeader < max.topHeader ) max.topHeader = d.offsetTopHeader ;
		if ( d.offsetLeft < max.left ) {
			max.left = d.offsetLeft ;
			leftValueIsOk = true ;
		}
	}
	if ( ! leftValueIsOk ) return {} ;
	return max ;
}

function qsn_initfooter( reseth, stuffID ) {
	if ( ge( stuffID || q_stuffmode || "q_author_stuff" ).getAttribute( "initfooter" ) != "true" ) return ;
	qsn_initfooter_setheight( reseth, stuffID ) ;
}

function qsn_initfooter_setheight( reseth, stuffID ) {
	if ( qsn_currstate == "edit" ) return ;
	var div = ge( stuffID || q_stuffmode || "q_author_stuff" ) ;
	var hdiv = ( div.style.height && parseInt( div.style.height , 10 ) ) ? parseInt( div.style.height , 10 ) : 0 ;
	if ( reseth ) hdiv = 0 ;
	if ( hdiv && ! div.lastheight ) {// la hauteur est déjà mise, on lance un contrôle pour dans 5 secondes
		div.lastheight = hdiv ;
		if ( q_pagemode() != "makeweb" ) setTimeout( function() { qsn_initfooter_setheight( false, stuffID ) ; } , 5000 ) ;
		return ;
	}
//	var h = Math.max( q_windowInnerHeight() , pages_calcpageheight() ) ; // prise en compte d'une hauteur mini directement dans pages_calcpageheight()
	var h = qsn_calcpageheight( stuffID ) ;
	if ( h == null ) return ;
	//h = Math.max( h , hdiv ) ;
	div.style.height = h + "px" ;
	if ( h == div.lastheight ) return ;
	div.lastheight = h ;
	if ( q_pagemode() != "makeweb" ) setTimeout( function() { qsn_initfooter_setheight( false, stuffID ) ; } , 1000 ) ;
}

/*
function -
function CONTAINER
*/

var qsn_colordesc = {
	"qsn5_qsn1" : function ( r ) {
		return ( ! r.textcolor || r.textcolor == "-1" ) ?  null : r.textcolor ;
	},
	"qsn5" : function ( r ) {
		return ( ! r.textcolor || r.textcolor == "-1" ) ? null : r.textcolor ;
	},
	"qsn4": function( r ){
		if ( r.strokecolor == undefined ) return "standard" ;
		return r.strokecolor ;
	},
	"qsn3_qsn2_qsn1": "header.textcolor",
	"qsn2_qsn1": "header.color",
	"qsn1": "color"
};
var qsn_textdesc = { "qsnt1": { "font": "header.font" } };
function qsn_containerDefaults( wantDefault ){
	var fontsize = ( window.spacexml && spacexml.creationdate && spacexml.creationdate > "2014-12-11" ) ? "24px" : "14px" ;
	return { header: { color: "c1", textcolor: "bw", bold: "true", italic: "false", "case": "false", align: "left", font: "0", fontsize: fontsize, margin: "0px", "hr": "false", "headerstyle": "standard" } } ;
}
function qsn_resolveValue( jsonPath, r ){
	var keys = jsonPath.split( "." ) ;
	var snstyleid = "", v = "" ;
	if ( typeof r == "string" ) snstyleid = r ;
	else if ( r ) {
		var v = r ;
		for ( var i = 0 ; i < keys.length ; i++ ) {
			v = v[ keys[ i ] ] ;
			if ( v == undefined ) {
				v = "__auto" ;
				break ;
			}
		}
		if ( ! ( /^__auto/ ).test( v ) ) return v ;
		var snstyleid = v ;
	}
	snstyleid = snstyleid.replace( /__auto-?/, "" ).replace( /default/, "" ) || "s0" ;//spacexml.theme.defaultsnstyle
	v = ( snstyleid && spacexml.theme.smartnotes && spacexml.theme.smartnotes[ snstyleid ] ) || qsn_containerDefaults() ;
	for ( var i = 0 ; i < keys.length ; i++ ) {
		v = v[ keys[ i ] ] ;
		if ( v == undefined ) {
			v = null ;
			break ;
		}
	}
	return v ;
}
function qsn_container_client( handler ){
	if ( ! window.client_container ) return false ;
	return client_container[ handler ] ;
}
function qsn_container_toresize( div ) {
	if ( qsn_currstate != "edit" ) return [] ;
	//var elem = $( ".qlubcontainer_headertext", div ).get( 0 ) ;
	//elem.widthrule = function( w ){ return w - $( this ).parents( "tr:first" ).find( "td:first" ).get( 0 ).offsetWidth - q_deltawidth( this.parentNode ) ; }
	//return [ elem, gebcn( div , "cancelokelem" ) ] ;
	var x = gebcn( div , "cancelokelem" ) ;
	return ( x ) ? [ x ] : [] ;
}
function qsn_container_renderheader( div , r, wantDefault ) {
	if ( ! wantDefault && qsn_container_client( "renderheader" ) ) return qsn_container_client( "renderheader" )( div, r ) ;
	div.className = div.className.replace( /\bheaderstyle-[^ ]+/g , "" ) ;
	if ( r.header && r.header.headerstyle ) $( div ).addClass( "headerstyle-" + r.header.headerstyle ) ;
	else $( div ).addClass( "headerstyle--" ) ;
	if ( ! r.header || r.header.display != "true" ) $( ".tablenotecontent:eq(0) .headerstyle-detached td.content", div ).css( "padding-top", "0px" ) ;
	if ( ! $( ".qlubcontainer_noteheader", div ).length ) return ;
	if ( ! r.header ) return $( ".qlubcontainer_noteheader", div ).eq( 0 ).parents( "tr:first").hide();
	$( ".qlubcontainer_noteheader", div ).eq( 0 ).parents( "tr:first").toggle( r.header.display == "true" );
	if ( r.header.display != "true" ) {
		if ( qsn_currstate != "edit" ) $( ".tablenote", div ).remove() ;
		return ;
	}
	var $tablenote = $( ".tablenote", div ).eq( 0 ) ;
	var $headertext = $( ".qlubcontainer_headertext", div ).eq( 0 ) ;
	var $headerbckg = $( ".qlubcontainer_headerbckg", div ).eq( 0 ) ;
	var $headermesure = $( ".qlubcontainer_headermeasure", div ).eq( 0 ) ;
	var headertextStyle = {} ;
	if ( r.header[ "case" ] != undefined  ) {
		headertextStyle[ "text-transform" ] = ( r.header[ "case" ] == "up" ) ? "uppercase" : "none" ;
		headertextStyle[ "font-variant" ] = ( r.header[ "case" ] == "cap" ) ? "small-caps" : "normal" ;
	}
	if ( r.header.bold != undefined ) headertextStyle[ "font-weight" ] = ( r.header.bold == "true" ) ? "bold" : "normal" ;
	if ( r.header.italic != undefined ) headertextStyle[ "font-style" ] = ( r.header.italic == "true" ) ? "italic" : "normal" ;
	if ( r.header.font != undefined ) {
		var v = getFontFamilyByCode( r.header.font, r.common.notekind ) ;
		$headertext.removeClass( "headerfont--" ) ;
		$headermesure.removeClass( "headerfont--" ) ;
		if ( v == "" || v == "inherit" ) {
			$headertext.addClass( "headerfont--" ) ;
			$headermesure.addClass( "headerfont--" ) ;
			headertextStyle[ "font-family" ] = "" ;
		} else headertextStyle[ "font-family" ] = getFontFamilyByCode( r.header.font, r.common.notekind ) ;
	}
	function gettextmargin(){
		var key ;
		var keys = [ "margin", "textmargin", "notemargin" ] ;
		for ( var i = 0 ; i<keys.length ; i++ ){
			if ( r[ keys[ i ] ] != undefined ) {
				key = keys[ i ] ;
				break ;
			}
		}
		if ( ! key ) return 10 ;
		var thedesc = $.extend( {}, qsn_textdesc ) ;
		var notekind = r.common.notekind ;
		thedesc = $.extend( thedesc, eval( "window." + notekind + "_textdesc" ) ) ;
		for ( var k in thedesc ) {
			for ( var kk in thedesc[ k ] ){
				if ( kk == "paddingslider" || kk == "marginslider" ) return parseInt( r[ key ] || 0 , 10 ) ;
			}
		}
		var margin = qsn_definemargins( notekind )[ parseInt( r[ key ] , 10 ) ] ;
		if ( margin == undefined ) margin = 10 ;
		return parseInt( margin , 10 ) ;
	}
	var textmargin ;
	if ( qsn_container_client( "headerTextMargin" ) ) textmargin = qsn_container_client( "headerTextMargin" )( r, gettextmargin ) ;
	else textmargin = gettextmargin() ;
	if ( r.header.margin != undefined ) {
		var headermargin = parseInt( r.header.margin || 0 , 10 ) ;
		//headertextStyle[ "padding-top" ] = headertextStyle[ "padding-bottom" ] = headermargin + "px" ;
		$tablenote.find( "h3" ).css( "padding-top", headermargin + "px" ).css( "padding-bottom", headermargin + "px" ) ;
		$tablenote.find( ".header-padding" ).width( headermargin ) ;
	}
	
	if ( qsn_currstate != "edit" && $tablenote.find( ".header-margin" ).length == 0 ) {// 2012-12-17, vh : compatibilité aniennes notes mode web
		headertextStyle[ "padding-left" ] = ( r.header.icon && r.header.align == "left" ) ? "10px" : textmargin + "px" ;
		headertextStyle[ "padding-right" ] = textmargin + "px" ;
		$( ".qlubcontainer_headermeasure", div ).eq( 0 ).css( "padding-left", headertextStyle[ "padding-left" ] ).css( "padding-right", headertextStyle[ "padding-right" ] ) ;
	} else {
		$tablenote.find( ".header-margin, .header-tablemargin" ).width( textmargin ) ;
		$tablenote.find( ".header-row-padding td" ).height( textmargin ) ;
	}
	$headerbckg.removeClass( "qsncenter qsnalign" ) ;
	if ( r.header.align != undefined ) {
		headertextStyle[ "text-align" ] = r.header.align ;
		if ( r.header.align == "center" ) $headerbckg.addClass( "qsncenter" ) ;
	} else $headerbckg.addClass( "qsnalign" ) ;
	var fontSize = qsn_resolveValue( "header.fontsize", r ) ;
	if ( r.header.fontsize != undefined ) {
		headertextStyle[ "font-size" ] = r.header.fontsize ;
		headertextStyle[ "line-height" ] = ( 10 + parseInt( r.header.fontsize, 10 ) ) + "px" ;
	}
	if ( r.header.hr == "true" ) $tablenote.find( "h3 div.hr" ).show() ;
	else if ( r.header.hr == "false" ) $tablenote.find( "h3 div.hr" ).hide() ;
	$headertext.css( headertextStyle ) ; 
	function splitHalf( s ){
		var sep ;
		var n = s.length ;
		if ( s.split( "__" ).length > 1 ) sep = "__" ;
		else if ( s.split( " " ).length > 1 ) sep = " " ;
		if ( sep ) {
			var l = s.split( sep ) ;
			var m = 0 ;
			var j = 0 ;
			for ( var i = 0 ; i < l.length - 1 ; i++ ) {
				j = i ;
				var mm = l[ i ].length ;
				var n1 = m / n ;
				var n2 = ( m + mm ) / n ;
				if ( Math.abs( 0.5 - n1 ) < Math.abs( 0.5 - n2 ) ) j = j - 1 ;
				if ( n2 > 0.5 ) break ;
				m += mm + sep.length ;
			}
			return [ l.slice( 0, j + 1 ).join( sep ) + ( ( sep == "__" ) ? "" : sep ), l.slice( j + 1 ).join( sep ) ] ;
		} else {
			var m = Math.round( n / 2 ) ;
			return [ s.substring( 0, m ), s.substring( m ) ] ;
		}
	}
	if ( qsn_currstate != "edit" ) {
		$headerbckg.css( "cursor", "" );
		var t = splitHalf( r.header.text || " " ) ;
		$headertext.html( escapeHTML( t[ 0 ] ) ) ;
		if ( t[ 1 ].length > 0 ) $headertext.append( '<span class="bicolor">' + escapeHTML( t[ 1 ] ) + '</span>' ) ;
	} else {
		var t = $headertext.val( r.header.text ) ;
		var t2 = $( ".qlubcontainer_headermeasure", div ).eq( 0 ).show().texthtml( r.header.text || " " ) ;
		t2.css( headertextStyle ) ;
		q_changedwidth( t2.get( 0 ), $headertext.width() ) ;
		t.height( Math.min( 250, Math.max( 20,  t2.height() ) ) + "px" );
		t2.empty().hide();
		qsn_container_blurdefault( t.get( 0 ), "notetitleprompt" ) ;
	}
}

function qsn_container_rendersignature( div , r ) {
	if ( qsn_currstate == "edit" ) {
		var s = $( ".qlubcontainer_signaturetext", div  ).eq( 0 ) ;
		s.prop( "disabled", true );
		var act = "val", removeact = "hide";
	} else {
		var s = $( ".qlubcontainer_signature", div  ).eq( 0 ) ;
		var act = "texthtml", removeact = "remove"; 
	}
	if ( ! s.length ) return ;
	if ( ! r.showsignature || r.showsignature == "false" ) return s.parents( "tr" ).eq( 0 )[ removeact ]();
	else {
		s.parents( "tr" ).eq( 0 ).show();
		if ( (/homepage/i).test( currsvcid ) ) s.css( "font-size", "9px" ) ;
		if ( r.showsignature == "true" ) {
			if ( (/homepage/i).test( currsvcid ) ) r.showsignature = "date" ;
			else r.showsignature = "name" ;
		}
		if ( r.showsignature == "name" ) s[ act ]( qsn_username( r ) );
		else if ( r.showsignature == "date" ) s[ act ]( qsn_username( r ) + ", " + q_isot2string( r.common.date ) );
		else if ( r.showsignature == "custom" ) s[ act ]( r.customsignature || "" ).prop( "disabled", false ) ;
	}
	if ( qsn_currstate == "edit" ) qsn_container_blurdefault( s.get( 0 ), "notesignature" ) ;
}

function qsn_container_contentMargin( r ) {
	var version = qsn_version( r.common.notekind ) ;
	var marginversion = ( version && version.margin && version.margin ) || 0 ;
	function gettextmargin() {
		if ( qsn_container_client( "headerTextMargin" ) ) return qsn_container_client( "headerTextMargin" )( r, gettextmargin ) ;
		var key ;
		var keys = [ "margin", "textmargin", "notemargin" ] ;
		if ( marginversion ) return parseInt( r[ "margin" ] || 0 , 10 ) ; 
		for ( var i = 0 ; i<keys.length ; i++ ){
			if ( r[ keys[ i ] ] != undefined ) {
				key = keys[ i ] ;
				break ;
			}
		}
		if ( ! key ) return 10 ;
		var thedesc = $.extend( {}, qsn_textdesc ) ;
		var notekind = r.common.notekind ;
		thedesc = $.extend( thedesc, eval( "window." + notekind + "_textdesc" ) ) ;
		for ( var k in thedesc ) {
			for ( var kk in thedesc[ k ] ){
				if ( kk == "paddingslider" || kk == "marginslider" ) return parseInt( r[ key ] || 0 , 10 ) ;
			}
		}
		var margin = qsn_definemargins( notekind )[ parseInt( r[ key ] , 10 ) ] ;
		if ( margin == undefined ) margin = 10 ;
		return parseInt( margin , 10 ) ;
	}
	var o = { "textmargin": gettextmargin(), "version": marginversion } ;
	if ( ! marginversion ) return o ;
	var b = ( ( r.shadow && r.shadow.d ) || ( r.strokecolor != undefined && r.strokecolor != "-1" ) || ( r.color && r.color != "-1" ) ) ;
	o = $.extend( o, { "top": r.margin + "px", "right": r.margin + "px", "bottom": r.margin + "px", "left": r.margin + "px" } ) ;
	if ( ! b ) {
		o.right = "0px" ;
		o.left = "0px" ;
		o.bottom = "0px" ;
		if ( ! r.header || r.header.display != "true" ) o.top = "0px" ;
	}
	return o ;
}

function qsn_container_classstyle( r ) {
	return "style_" + ( r.common.snstyle || "qsn" ) ;
}
function qsn_container_renderhtml( div , r , wantDefault ) {
	if ( ! wantDefault && qsn_container_client( "renderhtml" ) ) return qsn_container_client( "renderhtml" )( div , r ) ;
	$( div ).addClass( qsn_container_classstyle( r ) ) ;
	if ( ! div.toresize ) div.toresize = function () { return qsn_container_toresize( this ) ; } ;
	qsn_container_renderheader( div , r ) ;
	qsn_container_rendersignature( div , r ) ;
	if ( qsn_currstate == "edit" ) $( ".cancelokelem", div ).css( "width", qsn_width( r.common.noteid ) );
	$( ".qlubcontainer_secorner", div ).eq( 0 ).toggle( q_pagemode() == "edit"  &&  qsn_currstate == "view" &&  ! qsn_widthinfos( r.common.notekind ).wfixed );
	var h = qsn_handler( r.common.notekind , "qsn_withVerticalResize" ) ;
	if ( q_pagemode() != "edit" || ! h || ! h() ) $( ".qlubcontainer_verticalhandle", div ).eq( 0 ).remove() ;

	if ( r.shadow ) {
		var shadowStyle = ( ! r.shadow.d ) ? "none" : ( r.shadow.h + " " + r.shadow.v + " " + " " + r.shadow.b + " " + r.shadow.c ) ;
		$( div ).css( "box-shadow", shadowStyle ) ;
	}
}

function qsn_headerTopOffset( id ) {
	var r = qsn_thenotes[ id ] ;
	if ( ! r ) return 0 ;
	return ( $( "#" + id + " .richtarget table:eq(0) .headericon *" ).length > 0 ) ? 16 : 0 ;
	/*
	if ( r.header && r.header.display == "true" ) {
		if ( r.header.icon ) return 16 ;
		var notekind = r.common.notekind ;
		if ( window[ notekind + "_json_template" ] && window[ notekind + "_json_template" ].header.icon == undefined ) return 16 ;
		if ( $( "#" + id + " .richtarget table:eq(0) .headericon" ).length > 0 ) return 16 ;
	}
	return 0 ;
	*/
}

function qsn_username( morr , dontask ) {
	return qsn_name( "username" , morr , dontask ) ; 
}
function qsn_name( kind , morr , dontask ) {
	var m = ( typeof morr == "string" ) ? morr : morr.common.ownerid ;
	if ( m == "quomodo" ) return " " ;
	if ( ( m == "invite" ) && ( typeof morr != "string" ) ) return morr.common.signature ;
	if ( ! members[ m ] && ( typeof morr != "string" ) && morr.common.savedmember ) return q_displayedname( kind , morr.common.savedmember ) ;
	return q_membername( kind , m ) ;
}


function qsn_definetextaligns( notekind , wantdefault ) {
	var h = qsn_handler( notekind , "qsn_definetextaligns" , wantdefault ) ;
	if ( h ) return h() ;
	return [ "left" , "right" , "center" , "justify" ] ;
}

function qsn_definefontfamilies( notekind, wantdefault ) {
	var h = qsn_handler( notekind , "qsn_definefontfamilies" , wantdefault ) ;
	if ( h ) return h() ;
	var res = [
		[ -1, "default" ],
		[ 0, "Arial, Helvetica, sans-serif" ],
		[ 1, "'Times New Roman', Times, serif" ],
		[ 3, "'Courier New', monospace" ],
		[ 2, "Zapf-Chancery, 'Segoe Script', cursive" ],
		[ 5, "'Lucida Sans', 'Lucida Grande', sans-serif" ],
		[ 4, "Verdana, Geneva, sans-serif" ],
		[ 7, "'Palatino Linotype', 'Book Antiqua', Palatino, serif" ],
		[ 8, "Georgia, serif" ],
		[ 9, "'Arial Black', Gadget, sans-serif" ],
		[ 10, "'Century Gothic', sans-serif" ],
		[ 11, "'Trebuchet MS', Helvetica, sans-serif" ],
		[ 6, "Impact, Charcoal, sans-serif" ],
		[ 12, "Tahoma, Geneva, sans-serif" ]
	] ;
	if ( window.client_definefontfamilies ) res = res.concat ( client_definefontfamilies() ) ;
	return res ;
}

function getFontFamilyByCode( code, notekind, wantdefault ) {
	if ( code == -1 ) return "inherit" ;
	var fonts = qsn_definefontfamilies( notekind, wantdefault ) ;
	for ( var i = 0 ; i < fonts.length ; i++) {
		if ( fonts[ i ][ 0 ]  == code ) return fonts[ i ][ 1 ] ;
	}
	return null ;
}

function qsn_definemargins( notekind , wantdefault ) {
	var h = qsn_handler( notekind , "qsn_definemargins" , wantdefault ) ;
	if ( h ) return h() ;
	return [ "0", "5px", "10px", "15px", "20px" ] ;
}

function qsn_definepaddings( notekind , wantdefault ) {
	var h = qsn_handler( notekind , "qsn_definepaddings" , wantdefault ) ;
	if ( h ) return h() ;
	return [ "0px", "5px", "10px", "15px", "20px" ] ;
}

function qsn_defineopacities( notekind , wantdefault ) {
	var h = qsn_handler( notekind , "qsn_defineopacities" , wantdefault ) ;
	if ( h ) return h() ;
	return [ 1 , 0.75 , 0.5, 0.25, 0 ] ;
}

function qsn_definefontsizes( notekind , wantdefault ) {
	var h = qsn_handler( notekind , "qsn_definefontsizes" , wantdefault ) ;
	if ( h ) return h() ;
	return [ "15px" , "12px" , "10px" ] ;
}

function qsn_definelineheights( notekind , wantdefault ) {
	var h = qsn_handler( notekind , "qsn_definelineheights" , wantdefault ) ;
	if ( h ) return h() ;
	return [ "18px" , "15px " , "13px" ] ;
}

function qsn_definetextspacings( notekind , wantdefault ) {
	var h = qsn_handler( notekind , "qsn_definetextspacings" , wantdefault ) ;
	if ( h ) return h() ;
	return [ "-1px", "0px", "3px" ] ;
}


var qsn_message = {
	"duplicationinprogress" : "Duplication en cours. Merci de patienter..." ,
	"suppressnote" : "Êtes-vous certain de vouloir supprimer cette note ?" ,
	"suppressreplynote" : "Êtes-vous certain de vouloir supprimer cette réponse ?" ,
	"notviewmode" : "Opération impossible pour l'instant. Si une note est actuellement en cours de modification, cliquez d'abord sur annuler ou sur ok." ,
	"plug" : "Vos smartnotes_Choisissez celles que vous voulez avoir toujours sous la main." ,
	"newnoteprompt" : "cliquez ici pour rédiger une nouvelle note" ,
	"inviteusername" : "Veuillez indiquer une signature pour votre message." ,
	"undefineduser" : "membre inconnu",
	"missingeditblocks" : "missing in editblocks html",
	"notecolor" : "Couleur de la note",
	"color" : "Couleur",
	"sitecolor" : "Couleurs du site :" ,
	"morecolors" : "autres couleurs",
	"otherscolors" : "Autres couleurs :",
	"transparent" : "fond transparent" ,
	"undefinedhandler" : "Fonction non disponible. Veuillez nous excuser." ,
	"undefinedtip" : "(aide non disponible)" ,
	"shareboardrights" : "Droits de modification",
	"f1" : "Texte principal",
	"f2" : "Texte secondaire",
	"f3" : "Titre principal",
	"f4" : "Titre secondaire",
	"tip_edit" : "modifier la note" ,
	"tip_replyto" : "répondre à la note" ,
	"tip_reduce" : "réduire" ,
	"tip_expand" : "agrandir" ,
	"tip_hideanswers" : "masquer les réponses" ,
	"tip_showanswers" : "voir les réponses" ,
	"tip_suppress" : "supprimer la note" ,
	"tip_suppressreply" : "supprimer la réponse" ,
	"tip_duplicate" : "dupliquer / déplacer la note" ,
	"tip_rich" : "associer une nouvelle note..." ,
	"tip_help" : "aide" ,
	"tip_sendtobckg" : "mettre en arrière-plan" ,
	"tip_move" : "déplacer la note",
	"tip_setviewed" : "marquer comme vu",
	"tip_getviewed" : "vu par...",
	"tip_live" : "vider + archiver + nouveau message",
	"tip_exportxls" : "exporter vers Excel ou RAZ",
	"tip_addevent" : "nouveau match",
	"tip_markers" : "ajouter un point",
	"tip_lines": "tracer une ligne",
	"tip_shapes": "dessiner une forme",
	"tip_razcounter": "remise à zéro",
	"notetitleprompt" : "Cliquez ici pour ajouter un titre..." ,
	"notesignature" : "Cliquez ici pour ajouter une signature...",
	"tabcolor" : "Couleur" ,
	"tabheader" : "Titre" ,
	"tabsignature" : "Signature" ,
	"taboptions" : "Options de la note",
	"tabtext" : "Texte" ,
	"maskheader" : "masquer le titre" ,
	"displayheader" : "afficher le titre" ,
	"hideicon" : "masquer l'icône" ,
	"showicon" : "afficher l'icône" ,
	"note-background-color" : "Fond de la note",
	"note-stroke-color" : "Tour",
	"headercolortitle" : "Couleur :" ,
	"headercolorlikenote" : "comme la note" ,
	"headercolorwhite" : "blanc" , 
	"headercolorblack" : "noir" ,
	"headericontitle" : "Icône :" ,
	"headericonprevious" : "Icônes précédentes" ,
	"headericonnone" : "aucune icône" ,
	"headericonnext" : "Icônes suivantes" ,
	"signature_hide" : "masquer la signature" ,
	"signature_show" : "afficher le nom" ,
	"signature_date" : "afficher le nom et la date" ,
	"signature_custom" : "signature personnalisée",
	"qsn_textsize" : "Taille du texte" ,
	"qsn_textsize:" : "Taille du texte : " ,
	"qsn_textfont" : "Type de lettres" ,
	"font-1" : "(défaut)",
	"font0" : "Arial" ,
	"font1" : "Times" ,
	"font2" : "Cursive" ,
	"font3" : "Courier" ,
	"font4" : "Verdana" ,
	"font5" : "Lucida Sans",
	"font6" : "Impact" ,
	"font7" : "Palatino",
	"font8" : "Georgia",
	"font9" : "Arial Black",
	"font10" : "Century",
	"font11" : "Trebuchet",
	"font12" : "Tahoma",
	"size0" : "grand" ,
	"size1" : "moyen" ,
	"size2" : "petit" ,
	"qsn_textoptions" : "Options" ,
	"textstyleoptions" : "Options de style" ,
	"bold" : "gras" ,
	"center" : "centré" ,
	"italic" : "italique" ,
	"uppercase" : "maj." ,
	"qsn_textalign" : "Alignement" , 
	"align0" : "gauche" ,
	"align1" : "droite" ,
	"align2" : "centré" ,
	"align3" : "justifié" ,
	"qsn_textspacing" : "Espacement" , 
	"spacing0" : "réduit" ,
	"spacing1" : "normal" ,
	"spacing2" : "fort" ,
	"qsn_tabmargin" : "Marge" , 
	"qsn_textmargin" : "Marge autour du texte" , 
	"qsn_imagesize": "Taille de l'image",
	"margin" : "Marge",
	"margin0" : "aucune" ,
	"margin1" : "fine" ,
	"margin2" : "normale" ,
	"margin3" : "grande" ,
	"margin4" : "très grande" ,
	"qsn_textopacity" : "Transparence" , 
	"opacity0" : "aucune" ,
	"opacity1" : "légère" ,
	"opacity2" : "moyenne" ,
	"opacity3" : "forte" ,
	"opacity4" : "complète" ,
	"tabtextcolor" : "Couleur du texte" , 
	"qsn_tablinks" : "Lien" , 
	"qsn_linktitle" : "Type de lien" ,
	"link" : "URL de la page" ,
	"link0" : "aucun lien" , 
	"link1" : "lien vers une page web" , 
	"link2" : "lien vers une page du site" , 
	"link3" : "lien vers un fichier" , 
	"link4" : "lien javascript (expert)" , 
	"link5" : "lien envoi d'un e-mail" , 
	"link6" : "lien vers une note" , 
	"currentlink" : "Actuellement :" , 
	"currentlink0" : "aucun lien" , 
	"currentlink1" : "lien vers la page web" , 
	"currentlink2" : "lien vers la page du site" , 
	"currentlink3" : "lien vers le fichier" , 
	"currentlink4" : "lien javascript" , 
	"currentlink5" : "lien envoi vers l'e-mail" , 
	"currentlink6" : "lien vers la note" , 
	"currentlink7" : "popup de la page" , 
	"currentlink8" : "lien special",
	"currentlink9" : "lien calendrier",
	"Choosepage" : "Choisissez une page" , 
	"insertlink_page" : "Insérer un lien vers une page du site",
	"nofile" : "Aucun fichier sélectionné" , 
	"clicktochooseafile" : "Cliquez pour choisir un fichier." , 
	"selectnote" : "Voulez-vous sélectionner la note numéro \n%s \nde type %v \net commençant par le texte suivant : ",
	"cancel" : "annuler" , 
	"small" : "petit" , 
	"large" : "grand" , 
	"qsn_textsize:min" : "petit" , 
	"qsn_textsize:max" : "grand" , 
	"ok" : "ok",
	"confirmdelete" : "Voulez-vous vraiment supprimer ce fichier ?",
	"deletefilealt" : "Supprimer le fichier",
	"filename" : "Nom du fichier", 
	"comment" : "Commentaire :", 
	"link" : "Lien :",
	"size" : "Taille", 
	"rank" : "Rang", 
	"date" : "Date", 
	"duplicatenote" : "Dupliquer / déplacer la note",
	"selectnote_next" : "note suivante",
	"selectnote_select" : "Valider",
	"selectnote_cancel" : "Annuler",
	"selectnote_desc" : "Cliquez sur une note pour la sélectionner",
	"selectnote_title" : "SELECTION D'UNE NOTE",
	"editlink" : "Modifier le lien",
	"notselected" : "Veuillez choisir un mode de duplication.",
	"edit_styles" : "Style du titre...",
	"edit_shadows" : "Ombre portée...",
	"header_styles" : "Style du titre",
	"snstyles_button": "Enregistrer comme style de titre par défaut"
} ;

var qsn_plug_message = {
	"bd_intl" : "Anniversaires",
	"bd_intl_desc" : "Pour savoir à tout moment le temps qu'il reste avant les anniversaires de vos amis.",
	"bdcfamily" : "Miniprojet",
	"bdcfamily_desc" : "Pour organiser un projet facilement en étant sûr de ne rien oublier." ,
	"bn_intl" : "Glassnote",
	"bn_intl_desc" : "Votre message sur plaque de verre, sans les traces de doigts." ,
	"bnq_intl" : "Laissez un message",
	"bnq_intl_short" : "Post-it",
	"bnq_intl_desc" : "Avec la smartnote de base écrivez un message rapide, pratique, et expressif.",
	"bnv_intl" : "Vu",
	"bnv_intl_desc" : "Chacun vous signale d'un simple clic qu'il a bien vu votre note." ,
	"bookmarks" : "Signets",
	"bookmarks_desc" : "Partagez vos liens favoris avec vos visiteurs et vos membres." ,
	"broll" : "Texte défilant",
	"broll_short" : "Défilant",
	"broll_desc" : "Mettez vos messages en valeur en les faisant défiler.",
	"btn" : "Bouton",
	"btn_desc" : "Smartnote pour créer des boutons réactifs." ,
	"cal" : "Calendrier",
	"cal_desc" : "Visualisez côte à côte vos dates et celles de tous les autres membres" ,
	"calendar" : "Calendrier",
	"calendar_desc" : "Visualisez les événements du club" ,
	"carousel" : "Carrousel",
	"carousel_desc" : "Créez un bandeau de photos ou de logos défilants." ,
	"charmessage" : "Titre décor",
	"charmessage_desc" : "Décorer vos pages de titres sur fond d'images pour plus de fun.",
	"clock" : "Clock",
	"clock_desc" : "Affichez simplement l'heure de manière graphique sur votre page.",
	"comment" : "Commentaire",
	"comment_desc" : "Proposez à vos visiteurs de s'exprimer sur un sujet, une photo, une actualité de votre site." ,
	"contact" : "Contact",
	"contact_desc" : "Proposez un formulaire de contact, d'inscription, de commande, etc. à vos visiteurs." ,
	"countdown" : "Compte à rebours",
	"countdown_short" : "Décompte",
	"countdown_desc" : "Décomptez le temps qu'il reste avant un prochain événement.",
	"dispo" : "Dispo ?",
	"dispo_desc" : "Planifiez à l'avance toutes vos réunions entre amis en s'assurant de qui sera là",
	"dn" : "Ce jour",
	"dn_desc" : "Mettez en valeur un événement particulier pour un jour donné.",
	"dropbox" : "Dépot Photos",
	"dropbox_short" : "Dépot",
	"dropbox_desc" : "Laissez vos membres déposer des photos sur votre site, et créez des pages avec celles-ci." ,
	"events" : "Événements",
	"events_desc" : "Affichez une liste des événements passés ou à venir de votre site." ,
	"favorite" : "Coup de Coeur",
	"favorite_short" : "Coudkeur",
	"favorite_desc" : "Afficher sur votre site le coup de coeur Quomodo de la semaine" ,
	"ffbb" : "Actus Fédé",
	"ffbb_short" : "FFBB",
	"ffbb_desc" : "Affichez dans votre site web les infos de la FFBB" ,
	"files" : "Documents",
	"files_desc" : "Affichez les documents de votre choix et proposez une archive ZIP." ,
	"flash" : "Flash",
	"flash_desc" : "Affichez sur votre site un contenu Flash/HTML issu d'un autre site.",
	"flickr" : "Flickr",
	"flickr_desc" : "Affichez dans votre espace des photos stockées chez Flickr." ,
	"fv" : "Vidéo",
	"fv_desc" : "Stockez, visionnez et montrez vos vidéos sur votre espace.",
	"gm" : "Cartes",
	"gm_desc" : "Affichez une carte, des points d'intérêt ou un itinéraire, avec Google Maps®." ,
	"gmlist" : "Liste de Points" ,
	"gmlist_desc" : "Affichez une liste d'emplacements sur une carte.",
	"gmlist_short" : "Liste Points",
	"hello_intl" : "Hello !",
	"hello_intl_desc" : "Décorez votre page de différents messages avec des styles aléatoires.",
	"kado" : "Kado",
	"kado_desc" : "L'outil utile pour organiser le choix d'un cadeau collectif et collecter les dons en secret.",
	"kitty" : "Cagnotte",
	"kitty_desc" : "Régler ses comptes sans se fâcher, sans se prendre la tête et sans calculette.",
	"live" : "En direct" ,
	"live_desc" : "Envoyez des infos sur votre site directement depuis votre mobile.",	
	"matchnext" : "Matchs",
	"matchnext_desc" : "Affichez les matchs joués ou à venir de toutes ou partie de vos équipes." ,
	"mcn" : "Décor",
	"mcn_desc" : "Ajoutez des éléments graphiques pour décorer votre page." ,
	"menu" : "Menu Vertical",
	"menu_short" : "Menu",
	"menu_desc" : "Affichez un menu à la verticale sur vos pages." ,
	"meteo" : "Météo",
	"meteo_desc" : "Affichez dans vos pages la météo de votre ville." ,
	"mhpdisq" : "Discussion",
	"mhpdisq_desc" : "La note de la page de forum.",
	"music" : "Musique",
	"music_desc" : "Ajoutez votre musique sur votre site." ,
	"navig" : "Navigation",
	"navig_desc" : "Ajouter de boutons de navigation sur votre site." ,
	"nl" : "Inscription Newsletter",
	"nl_short" : "Newsletter",
	"nl_desc" : "Invitez vos visiteurs à s'inscrire à vos newsletters.",
	"nws" : "À la une",
	"nws_desc" : "Présentez les dernières actualités en texte et en images." ,
	"photoboxes" : "Planche Photos",
	"photoboxes_short" : "Planche",
	"photoboxes_desc" : "Créez une planche photos à partir de vos images." ,
	"photoflow" : "Photo Flow",
	"photoflow_desc" : "Créez un super effet façon iTunes® pour présenter vos photos." ,
	"photomaton" : "Photos d'identité",
	"photomaton_short" : "Identité",
	"photomaton_desc" : "En une minute une planche de photos d'identités prête à être découpée",
	"photoslider" : "Diapo Photos",
	"photoslider_short" : "Diapo",
	"photoslider_desc" : "Créez un diaporama de photos pour les partager avec vos visiteurs." ,
	"pimg" : "Image",
	"pimg_desc" : "Ajoutez rapidement une photo (cliquable ou non) sur votre page.",
	"pmessage" : "Messages privés",
	"pmessage_short" : "Mess. privé",
	"pmessage_desc" : "Une note qui peut envoyer un message différent à chaque destinataire.",
	"pmtxt" : "Titre",
	"pmtxt_desc" : "Créez un titre ou une légende avec un grand choix de mises en forme." ,
	"poll" : "Sondage",
	"poll_desc" : "Réalisez un sondage avec choix multiples auprès de vos visiteurs." ,
	"pronos" : "Pronostics",
	"pronos_desc" : "Organisez des concours de pronostiques sur les matchs de vos équipes." ,
	"rss" : "RSS",
	"rss_desc" : "Affichez les infos de vos sites préférés avec leurs fils RSS." ,
	"rsvp" : "Sondage",
	"rsvp_desc" : "Avec les préférences de chacun, les rendez-vous s'organisent rapidement." ,
	"silhouette" : "Silhouette",
	"silhouette_desc" : "Ajoutez des silhouettes sportives pour animer votre page." ,
	"slide" : "Diaporama",
	"slide_desc" : "La projection de diapos sur votre page web!" ,
	"spiral" : "Spirale",
	"spiral_short" : "Spirale",
	"spiral_desc" : "La note qui vous permet d'écrire en une spirale que vous pouvez personnaliser.",
	"table" : "Tableau",
	"table_desc" : "Copiez-coller un tableau depuis un tableur et modifiez-le en direct." ,
	"team" : "Equipe",
	"team_desc" : "Affichez la fiche détaillée des membres d'une de vos équipes.",
	"tennislibre" : "TennisLibre.com",
	"tennislibre_desc" : "Réservez vos courts de tennis par internet avec notre partenaire TennisLibre.com",
	"todo" : "ToDo",
	"todo_desc" : "Tous les trucs à faire: qui a dit de les faire, qui doit les faire... et qui les a faits.",
	"todos" : "Check List",
	"todos_desc" : "La liste des trucs à faire et des trucs faits." ,
	"traffic" : "Trafic",
	"traffic_desc" : "Affichez dans votre espace le traffic actuel..." ,
	"upload" : "Stockage",
	"upload_desc" : "Mettez en commun vidéos, photos, musiques ou tous autres types de documents.",
	"vc" : "Compteur",
	"vc_short" : "Compteur",
	"vc_desc" : "Affichez le nombre de visites sur votre page web." ,
	"wsg" : "Billet",
	"wsg_desc" : "Réalisez des blocs de texte comme dans un traitement de texte."
}

function initfooter() {
	var stuffIDs = document.body.getAttribute( "stuff-ids" ) ;
	stuffIDs = ( stuffIDs ) ? stuffIDs.split( " " ) : [ "q_author_stuff" ] ;
	for ( var i = 0 ; i < stuffIDs.length ; i++ ) {
		var stuffID = stuffIDs[ i ] ;
		if ( pages_isaligned( stuffID ) ) continue ;
		if ( ge( stuffID ).getAttribute( "initfooter" ) == "false" ) return ;
		qsn_initfooter_setheight( null, stuffID ) ;
	}
}

function pages_isaligned( stuffID ) {
	return ( pages_getpageformat( stuffID ) && pages_getalignversion( stuffID ) ) ;
}

function pages_getalignversion( stuffID ) {
	var s = settings_getnote( stuffID ) ;
	if ( ! s ) return null ;
	return s.common.alignversion ;
}

function pages_getpageformat( stuffID ) {
	var s = settings_getnote( stuffID ) ;
	if ( ! s ) return null ;
	rformat = s.spacedefaults.format ;
	if ( ! rformat ) return null ;
	return rformat.pageformat ;
}

function settings_getnote( stuffID ) {
	var noteid = settings_noteid[ stuffID || q_stuffmode ] ;
	if ( ! noteid ) return null ;
	if ( qsn_thenotes[ noteid ] ) return qsn_thenotes[ noteid ] ;
	if ( qsn_thenotes[ q_idalias[ noteid ] ] ) {
		noteid = q_idalias[ noteid ] ;
		settings_noteid[ stuffID ] = noteid ;
		return qsn_thenotes[ noteid ] ;
	}
	return null ;
}

function pages_richnoteoffsets( id ) {
	var div = ge( id ) ;
	var children = getElementsByClassName( div , "container" ) ;
	var deltawidth = ( div.transparentOffsetWidth ) ? div.transparentOffsetWidth : 0 ;
	var headerTop = qsn_headerTopOffset( id ) ;
	var l = qsn_trueleft( id ) + deltawidth/2 ;
	var t = qsn_truetop( id ) + deltawidth/2 ;
	var th = t - headerTop ;
	var r = l + div.offsetWidth - deltawidth ;
	var b = t + div.offsetHeight - deltawidth ;
	var isrichnote = false ;
	var cdiv , cid, offsets ;
	for ( var i = 0 ; i < children.length ; i++ ) {
		cdiv = children[ i ] ;
		cid = cdiv.id ;
		if ( ! cid || ! qsn_thenotes[ cid ] ) continue ;
		if ( qsn_thenotes[ cid ].parentid != id ) continue ;
		isrichnote = true ;
		offsets = pages_richnoteoffsets( cid ) ;
		l = Math.min( l , offsets.offsetLeft ) ;
		t = Math.min( t , offsets.offsetTop ) ;
		th = Math.min( th , offsets.offsetTopHeader ) ;
		r = Math.max( r , offsets.offsetLeft + offsets.offsetWidth ) ;
		b = Math.max( b , offsets.offsetTop + offsets.offsetHeight ) ;
	}
	return { "offsetLeft" : l , "offsetTop" : t , "offsetTopHeader" : th, "offsetWidth" : r-l , "offsetHeight" : b-t , "isrichnote" : isrichnote } ;
}

function pages_calcpageoffset() {
	var pageOffset = qsn_calcpageoffset() ;
	if ( ! isNaN( pageOffset.bottom ) ) pageOffset.pageheight = pageOffset.bottom + ( ( window.pages_bottomsecuremargin ) ? pages_bottomsecuremargin : 12 ) ;
	return pageOffset ;
}


var artema_message = {
"newgroup" : "nouveau groupe..." ,
"newsubgroup" : "nouveau sous-groupe..." ,
"newpage" : "Nouvelle page" ,
"newdisq" : "Nouvelle discussion" ,
"pages" : "page interactive" ,
"disqs" : "page de discussion" ,
"otherpages" : "Navigation" ,
"nootherpage" : "(Pas d'autre page)" ,
"otherdisqs" : "Discussions" ,
"nootherdisq" : "(Pas de discussion)" ,
"hrefpages" : "quomodo:ouvrir_la_page" ,
"hrefdisqs" : "quomodo:ouvrir_la_discussion" ,
"newnameprompt" : "Indiquez un nom pour la nouvelle %s :" ,
"taken" : "Le nom \"%s\" est déjà pris, vous pouvez en choisir un autre :" ,
"musteditinvitedmembers" : "Cliquez sur 'modifier la liste' pour ajouter ou supprimer un membre de cette liste de discussion." ,
"badlink" : "Liens visiteurs : la page \"%s\" n'existe pas, aucun lien ne sera créé.\n\nVoulez-vous continuer la publication ?" ,
"thedate" : "le " ,
"pagenameempty" : "La page doit avoir un nom !" ,
"myself" : "moi-même" ,
"titleinstall" : "Cliquez pour créer la smartnote dans la page" ,
"groupname" : "Groupe %" ,
"switchtopublic" : "passer en mode public" ,
"switchtoadmin" : "revenir en mode admin" ,
"publicmode" : "mode public" ,
"adminmode" : "mode admin" ,
"pageremove" : "Attention, vous avez décidé de supprimer cette page. Ni vous ni les autres membres de cet espace ne pourrez désormais y accéder.\n\nÊtes-vous certain de vouloir supprimer cette page ?",
"invalidefrommail" : "L'adresse e-mail de l'expéditeur n'est pas valide." ,
"emptyobjectmail" : "L'objet du message est vide. L'envoyer malgré tout ?" ,
"emptymessage" : "Le message est vide !" ,
"mailalertgroupsize" : "(%s1 membres sur %s2 ont un e-mail)" ,
"mailalertsent" : "L'alerte e-mail a bien été envoyée. Une note récapitulative va être créée sur la page." ,
"mailalertnotsent" : "L'alerte e-mail n'a pas été envoyée. Vérifiez que les membres ont fourni une adresse e-mail valide." ,
"newemailalert" : "Nouvelle alerte e-mail" ,
"currstateedit" : "Veuillez valider ou annuler les modifications en cours avant de changer de mode." ,
"pagewidthbadvalue" : "La valeur indiquée pour la largeur est non valide. Vous devez indiquer une valeur comprise entre 800 et 2048." ,
"pagewidthtitle" : "Largeur de la page" ,
"pagewidthprompt" : "Veuillez indiquer la largeur de page souhaitée (en pixels)." ,
"pagewidthlink" : "Largeur de la page (%s px)" ,
"pages_ncolstitle" : "Nombre de colonnes pour l'alignement" ,
"pages_ncolsprompt" : "Veuillez indiquer un nombre de colonnes compris entre 1 et 8." ,
"pages_ncolsbadentry" : "Le nombre de colonnes que vous avez indiqué n'est pas correct.\n\nIl faut indiquer un nombre de colonnes compris entre 1 et 8." ,
"confirmalign" : "Cet alignement vous convient-il ?" ,
"pagepublishedformembers" : "Votre page a bien été publiée pour les membres de votre site." ,
"pagepublishedforweb" : "Votre page a bien été publiée sur internet." ,
"todatepublishbuttonname" : "Page à jour" ,
"nottodatepublishbuttonname" : "Publier la page" ,
"dragstop" : "Déplacez le taquet pour redimensionner les colonnes",
"restoreok" : "La page est revenue telle qu'elle était lors de la dernière publication." ,
"restoreconfirm" : "Voulez-vous vraiment revenir à la dernière version publiée ? Vos dernières modifications seront alors définitivement perdues." ,
"restorefailed" : "Impossible de revenir à la dernière version publiée. La page n'avait probablement pas encore été publiée."
} ;

var artema_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "artema_msgs_fr_js_loaded" ) ;


rights_record[ 'spaceright' ] = {"qorp":{"homepage":"#artemapage@intl", "tmhorizon":"1900", "maxmb":"1000", "price":"0", "maxspaces":"15", "promo":{"fr":"", "id":"qorp0", "en":"Profit 2 months free"}, "maxpages":"30", "maxsn":"1000000", "services":{"#artemapage@intl":{"filename":"index.html"}, "#artemadisq@intl":{"filename":"index.html"}, "#homepage@intl":{"filename":"index_qorp.html"}}, "maxboards":"10"}, "q2bpm":{"homepage":"q2bpm@intl", "tmhorizon":"1900", "maxmb":"1000", "price":"0", "maxspaces":"15", "maxpages":"30", "maxsn":"1000000", "services":{}, "maxboards":"10"}, "qlub":{"homepage":"#artemapage@intl", "tmhorizon":"1900", "maxmb":"1000", "price":"0", "maxspaces":"15", "maxpages":"30", "maxsn":"1000000", "services":{"#artemapage@intl":{"filename":"index_qlub.html"}, "#artemadisq@intl":{"filename":"index_qlub.html"}, "#homepage@intl":{"filename":"index_qlub.html"}}, "maxboards":"10"}, "rugby":{"homepage":"#clubpage@intl", "tmhorizon":"1900", "maxmb":"1000", "price":"0", "maxspaces":"15", "maxpages":"30", "maxsn":"1000000", "services":{"#clubpage@intl":{"filename":"index.html"}, "#artemadisq@intl":{"filename":"called@index_clubpage.html"}, "#pm@intl":{"filename":"index.html"}, "homepage@intl":{"filename":"index_clubpage.html"}}, "maxboards":"10"}, "family":{"homepage":"homepage@intl", "tmhorizon":"1900", "maxmb":"1000", "price":"0.02", "maxspaces":"15", "promo":{"fr":"Bénéficiez de 2 mois gratuits", "id":"family0", "en":"Profit 2 months free"}, "maxpages":"30", "maxsn":"1000000", "services":{"#artemadisq@intl":{"filename":"index_qmdfamily.html"}, "#homepage@intl":{"filename":"fopage_free.html"}, "#pm@intl":{"filename":"index_qmdfamily.html"}, "homepage@intl":{"filename":"qmdfamily.html"}, "#schooltt@intl":{"filename":"index_qmdfamily.html"}}, "maxboards":"30"}, "liberty":{"homepage":"homepage@intl", "tmhorizon":"30", "maxmb":"100", "price":"0", "maxspaces":"1", "maxpages":"30", "maxsn":"0", "services":{"gallery@intl":{"filename":"gallery.html"}, "#artemadisq@intl":{"filename":"index_homepage.html"}, "#homepage@intl":{"filename":"index.html"}, "#pm@intl":{"filename":"index.html"}, "homepage@intl":{"filename":"index.html"}}, "maxboards":"10"}, "libertyself":{"homepage":"homepage@intl", "tmhorizon":"30", "maxmb":"100", "price":"0", "maxspaces":"1", "maxpages":"30", "maxsn":"0", "services":{"gallery@intl":{"filename":"gallery.html"}, "#artemadisq@intl":{"filename":"index_homepage.html"}, "#homepage@intl":{"filename":"index.html"}, "#pm@intl":{"filename":"index.html"}, "homepage@intl":{"filename":"index.html"}}, "maxboards":"10"}, "ultimateself":{"homepage":"homepage@intl", "tmhorizon":"1900", "maxmb":"1000", "price":"0.01", "maxspaces":"15", "maxpages":"30", "maxsn":"1000000", "services":{"gallery@intl":{"filename":"gallery.html"}, "#artemadisq@intl":{"filename":"index_homepage.html"}, "#familyplanning@intl":{"filename":"index.html"}, "#homepage@intl":{"filename":"index.html"}, "homepage@intl":{"filename":"index.html"}, "#pm@intl":{"filename":"index.html"}}, "maxboards":"10"}, "ultimate":{"homepage":"homepage@intl", "tmhorizon":"1900", "maxmb":"1000", "price":"0.01", "maxspaces":"15", "promo":{"fr":"Bénéficiez de 2 mois gratuits", "id":"ultimate0", "en":"Profit 2 months free"}, "maxpages":"30", "maxsn":"1000000", "services":{"gallery@intl":{"filename":"gallery.html"}, "#artemadisq@intl":{"filename":"index_homepage.html"}, "#familyplanning@intl":{"filename":"index.html"}, "#homepage@intl":{"filename":"index.html"}, "homepage@intl":{"filename":"index.html"}, "#pm@intl":{"filename":"index.html"}}, "maxboards":"10"}, "family_ended":{"homepage":"homepage@intl", "tmhorizon":"1900", "maxmb":"1000", "price":"0", "maxspaces":"15", "maxpages":"30", "maxsn":"1000000", "services":{"homepage@intl":{"filename":"qmdfamily_ended.html"}}, "maxboards":"10"}} ;
var rights_spacerights_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( 'rights_spacerights_js_loaded' ) ;

var qorp_message = {
"newgroup" : "nouveau groupe..." ,
"newsubgroup" : "nouveau sous-groupe..." ,
"newpage" : "Nouvelle page" ,
"newdisq" : "Nouvelle discussion" ,
"editpage_tab" : "Édition" ,
"editpage_new" : "nouvelle page" ,
"editpage" : "page" ,
"disq_tab" : "Forum" ,
"disq_new" : "nouvelle discussion" ,
"disq" : "discussion" ,
"pages" : "page interactive" ,
"disqs" : "page de discussion" ,
"otherpages" : "Navigation" ,
"nootherpage" : "(Pas d'autre page)" ,
"otherdisqs" : "Discussions" ,
"nootherdisq" : "(Pas de discussion)" ,
"hrefpages" : "quomodo:ouvrir_la_page" ,
"hrefdisqs" : "quomodo:ouvrir_la_discussion" ,
"newnameprompt" : "Indiquez un nom pour la nouvelle %s :" ,
"taken" : "Le nom \"%s\" est déjà pris, veuillez en choisir un autre :" ,
"musteditinvitedmembers" : "Cliquez sur 'modifier la liste' pour ajouter ou supprimer un membre de cette liste de discussion." ,
"badlink" : "Liens visiteurs : la page \"%s\" n'existe pas, aucun lien ne sera créé.\n\nVoulez-vous continuer la publication ?" ,
"thedate" : "le " ,
"pagenameempty" : "La page doit avoir un nom !" ,
"myself" : "moi-même" ,
"titleinstall" : "Cliquez pour créer la smartnote dans la page" ,
"groupname" : "%" ,
"new" : "du nouveau !" ,
"newgrouplinks" : "nouvelle rubrique" ,
"webzinepage" : "Pages webzine" ,
"delete" : "supprimer" ,
"selectanimage" : "Veuillez choisir une image sur votre ordinateur:" ,
"uploadtitle" : "Modifier la photo de mon profil"
} ;

var tabs_message = {
"info_tab" : "le site" ,
"info_new" : "Nouvelle page" ,
"info_name" : "Page" ,
"page_tab" : "le site" ,
"page_new" : "Nouvelle page" ,
"page_name" : "Page" ,
"gonewildtab" : "Autres" ,
"disq" : "Forums",
"disq_tab" : "mes forums" ,
"disq_new" : "Nouveau forum" ,
"disq_name" : "Forum" ,
"shareboard" : "Libres-échanges",
"shareboard_tab" : "mes libres-échanges" ,
"shareboard_new" : "Nouveau libre-échange" ,
"shareboard_name" : "Libre-échange"
} ;

var memberprofile_message = {
"username" : "Nom : " , 
"firstname" : "Prénom : " , 
"sex" : "Sexe : " ,
"gender" : "Sexe : " ,
"fgender" : "Féminin" ,
"mgender" : "Masculin" ,
"pict" : "Photo :",
"lang" : "Langue de l'affichage : " ,
"fr" : "Français" ,
"en" : "Anglais" ,
"langinfo" : "Déconnectez et reconnectez-vous pour mettre à jour la langue",
"address" : "Adresse : " ,
"addressextra" : "<br/><div style='color : gray ; font-size : 10px ; margin-top : 0.5em ; padding-left : 0.5em ; border-left : solid 1px gray'>si vous appartenez à un organisme<br/>(Club, Comité, Ligue, Fédération)<br/>merci de l'indiquer ici.<br/>N'oubliez pas votre code postal !</div>" ,
"mobile" : "N° tél. portable : " ,
"email" : "Email : " ,
"birthdate" : "Date de naissance : " ,
"category" : "Catégorie : " ,
"licensenumber" : "(Licenciés) Numéro de licence : " ,
"subscriptiondate" : "Date d'inscription : " ,
"emptyfirstname" : "Veuillez indiquer votre prénom." ,
"emptyusername" : "Veuillez indiquer votre nom de famille.",
"emptypict" : "Aucune photo"
} ;

var qlub_message = {
"notool" : "Outil non disponible" ,
"website" : "Gestion de l'offre et des options" ,
"diflistmgr" : "Gestion des listes de diffusion" ,
"sitemap" : "Gestion des pages et des menus" ,
"uploads" : "Gestion des fichiers du site" ,
"events" : "Gestion du calendrier du club" ,
"infoclub" : "Personnalisation de la bannière" ,
"custompages" : "Gestion de l'habillage du site" ,
"sponsors" : "Gestion des emplacements de publicité",
"palette" : "Palette",
"noname" : "(sans nom)" ,
"delete" : "supprimer" ,
"youhavetosignin" : "Accès réservé aux membres. Si vous êtes membre, entrez vos identifiants en haut de cette page." ,
"restrictedpage_title" : "Accès réservé aux membres", 
"restrictedpage_message" : "L'accès à cette partie du site est reservé aux membres. Identifiez-vous ou créez un compte pour y accéder.",
"webzinepage" : "Le Club" ,
"missinghelp" : "Cette page d'aide n'est pas disponible actuellement. Veuillez nous excuser.",
"snnotavailable-comment-offer" : "light" ,
"snnotavailable-comment-name" : "smartnote commentaire" ,
"snnotavailable-poll-offer" : "light" ,
"snnotavailable-poll-name" : "smartnote sondage" ,
"snnotavailable-contact-offer" : "light" ,
"snnotavailable-contact-name" : "smartnote contact" ,
"snnotavailable-matchnext-offer" : "light" ,
"snnotavailable-matchnext-name" : "smartnote match" ,
"snnotavailable-video-offer" : "premium" ,
"snnotavailable-video-name" : "smartnote vidéo" ,
"snnotavailable-fv-offer" : "premium" ,
"snnotavailable-fv-name" : "smartnote vidéo" ,
"snnotavailable-slide-offer" : "premium" ,
"snnotavailable-slide-name" : "smartnote diaporama" ,
"snnotavailable-offer" : "premium" ,
"snnotavailable-name" : "(inconnu)" ,
"titleinstall" : "Cliquez pour créer la smartnote dans la page",
"changeofferok" : "Votre changement d'offre s'est bien déroulé. La page va être rechargée." ,
"fr" : "Français" ,
"en" : "Anglais" ,
"default" : "Langue par défaut" ,
"othersmartnotes" : "Les autres smartnotes",
"mepoptions" : "Options de mise en page",
"mepactivate" : "Activer",
"mepreactivate" : "Réactiver",
"currstateedit" : "Veuillez valider ou annuler les modifications en cours avant de changer de mode." ,
"popupLinkTitle" : "Popup d'accueil",
"confirmDelete" :  "Etes-vous sûr de vouloir supprimer le popup d'accueil ?",

"back" : "retour" ,
"Results" : "Résultats : " ,
"Results2" : "Résultats : %values sur " ,
"Resultpagename" : "Résultats de la recherche" ,

"login" : "Connexion/Inscription",
"logintitle" : "Cliquez pour fermer le panneau de connexion",
"loginname" : "Identifiant : " ,
"loginpassword" : "Mot de passe : " ,
"loginbtn" : "Connexion au site",
"forgotten" : "oublié" ,
"forgottenv2" : "Identifiant / Mot de passe oublié ?" ,
"forgottenlink" : "Cliquez ici pour les recevoir par mail." ,
"click2identify" : "Connectez-vous à votre site :" ,
"subscribe2space" : "Vous n'êtes pas membre du site ?" ,
"subscribe2spacev2" : "Pas encore inscrit sur le site ? Créez vos identifiants !",
"subscribe2spacelink" : "Démarrer l'inscription",
"subscribe2quomodo" : "Vous aussi vous voulez votre site web ?",
"subscribe2quomodolink" : "Créer un site Quomodo.", 
"accesspw" : "Code d'accès : ",
"accessbadpw" : "Le code d'accès est incorrect.",
"accesspwmsg" : "Vous n'avez pas le code d'accès ? Demandez-le au responsable du site." ,
"sponsors_contactform_title" : "Demande d'affichage de publicité", 

"members_title" : "Membres et accès",
"members_desc" : "Administration des membres du site, du code d'accès et des groupes.", 
"sitemap_title" : "Pages et menus, forums et libres-échanges", 
"sitemap_desc" : "Gestion des pages du site : Nouvelles pages et rubriques, page d'accueil, pages privées, accès aux forums...",
"infos_title" : "Coordonnées, Domaine et Référencement", 
"infos_desc" : "Gestion du nom de domaine, des infos de contact et de localisation utilisées pour le référencement.", 
"account_title" : "Offre, services, et options", 
"account_desc" : "Changement d'offre, commande de nom de domaine, d'espace disque, factures, paiement en ligne...", 
"events_title" : "Événements du site", 
"events_desc" : "Remplissage des événements de la vie du site, des matchs du club et des anniversaires.", 
"uploads_title" : "Fichiers chargés sur le site",
"uploads_desc" : "Ajout / suppression des fichiers du site, classement par dossiers et options de tri.", 
"diflist_title" : "Listes de diffusion mail",
"diflist_desc" : "Listes d'adresses mail utilisées pour les newsletters.",
"theme_title" : "Habillage du site", 
"theme_drawertitle" : "Habillage du site <a id='upgrade_to_newversion' href='#' onclick='q_upgrade_to_newversion();return false'>Passer à la nouvelle version</a>", 
"theme_desc" : "Couleurs du site, polices, bannière et fond du site, style de la page et des menus...", 
"results_more" : "Elargir la recherche",
"sponsors_title" : "Affichage de la publicité", 
"sponsors_desc" : "Utilisation des zones de publicité à l'extérieur du site avec vos propres annonceurs.",
"charlie_title" : "Afficher un brassard", 
"charlie_desc" : "Je suis Charlie - brassard Noir",

"adminbar_admin" : "<b>Menu Admin </b>",
"adminbar_sitemap" : "Pages / Menus",
"adminbar_custom" : "Habillage",
"adminbar_help" : "Aide",
"adminbar_gotosite" : "Voir le site",
"adminbar_annu" : "Annuaire",
"adminbar_logoutbtn" : "se déconnecter",
"adminbar_logouttitle" : "Cliquez pour modifier votre profil",

"help_title" : "Rechercher sur l'aide de Quomodo",
"help_searchdesc" : "Rechercher :",
"help_desc" : "Une seule adresse : http://aide.quomodo.com/classic !",
"qwiz_title" : "Afficher le Panneau de bienvenue",
"qwiz_desc" : "Pour afficher l'assistant des premiers pas sur Quomodo.",
"invitemembers_title" : "Inviter des membres",
"invitemembers_desc" : "Pour qu'ils accèdent aux contenus privés du site.",
"stats_title" : "Voir les statistiques du site",
"stats_desc" : "Statistiques détaillées de votre site : visiteurs, pages consultées, liens référents...",
"news_title" : "Consulter les News Quomodo",
"news_desc" : "Pour se tenir au courant des dernières nouveautés.",
"gallery_title" : "Visiter l'annuaire des sites Quomodo",
"gallery_desc" : "Pour découvrir des idées sympas pour réaliser votre propre site.",
"sendpressrelease_title" : "Envoyer un article de presse",
"sendpressrelease_desc" : "Pour diffuser vos articles de presse sur l'espace presse Quomodo.",
"ods_title" : "Publier une manifestation",
"ods_desc" : "Faites connaître vos manifestations dans la région.",
"sponsornewclub_title" : "Parrainer un ami chez Quomodo",
"sponsornewclub_desc" : "Pour faire découvrir Quomodo à d'autres clubs ou à des amis.",
"contactsupport_title" : "Contacter le support",
"contactsupport_desc" : "Pour adresser une demande à l'équipe Quomodo, ou pour fermer le site.",

"mode_admin_title" : "Voir la page en tant qu'Admin", 
"mode_admin_desc" : "C'est le mode dans lequel vous pouvez ajouter et modifier des contenus",
"mode_admin_html" : "Mode <br/><b>ADMIN</b>",
"mode_members_title" : "Voir la page en tant que Membre", 
"mode_members_desc" : "Permet de voir la page telle que les membres inscrits sur le site la voient",
"mode_members_html" : "Mode <br/><b>MEMBRE</b>",
"mode_web_title" : "Mode WEB", 
"mode_web_desc" : "Pour voir la page telle que les visiteurs Internet la voient",
"mode_web_html" : "Mode <br/><b>WEB</b>",
"admin_quitview" : "Passer en mode admin",
"default_quitview" : "Modifier la page",
"default_quitviewother" : "Animer mes pages",
"intranet_quitview" : "Modifier la page",
"intranet_quitviewother" : "Animer mes pages",
"wiki_quitview" : "Modifier la page",
"wiki_quitviewother" : "Animer mes pages",
"admin_quitedit" : "Passer en mode membre",
"default_quitedit" : "Zone membres",
"intranet_quitedit" : "Intranet",
"wiki_quitedit" : "Retour",
"wiki_publish" : "Publier les modifications",
"wiki_restore" : "Restaurer la version publiée",

"q_select_members" :  "Sélectionnez un ou plusieurs membres",
"q_select_member" :  "Sélectionnez un membre",
"q_select_groups" :  "Sélectionnez un ou plusieurs groupes",
"q_select_group" :  "Sélectionnez un groupe",
"q_select_pages" :  "Sélectionnez une ou plusieurs pages",
"q_select_page" :  "Sélectionnez une page",
"q_select_menu" :  "Sélectionnez un menu",
"q_select_folders" :  "Sélectionnez un dossier",
"q_select_emptyselection" :  "Vous devez sélectionner un élément.",
"q_select_dest" :  "Sélectionnez un groupe de destinataires ou une liste de diffusion",
"q_select_diflists" :  "Sélectionnez une liste de diffusion",
"q_select_newdiflist" : "Ajouter, modifier une liste",
"q_select_sites" : "Sélectionnez un ou plusieurs sites du Portail",
"q_select_sitespage" : "Sélectionnez une page du site",

"live_manager_title" : "Gestion des messages du Direct" ,
"live_new" : "Nouveau message" ,
"live_new_prompt" : "Entrez le nouveau message à faire apparaître sur le Direct" ,
"live_new_title" : "Nouveau message pour le Direct" ,
"live_new_done" : "Message enregistré" ,
"live_delete" : "Supprimer la sélection" ,
"live_deleteandsave" : "Supprimer + archiver" ,
"live_nomsgselected" : "Aucun message à supprimer" ,
"live_deleteonemsg_confirm" : "Souhaitez-vous réellement supprimer le message sélectionné ?" ,
"live_deletemsgs_confirm" : "Souhaitez-vous réellement supprimer les %s messages sélectionnés ?" ,
"live_deletedone" : "Opération effectuée avec succès" ,

"contact" : "Contact",
"member" : "Membre",
"animator" : "Animateur",
"admin" : "Administrateur",
"folders" : "Vos dossiers",
"nofolder" : "(aucun dossier)",

"createpage_title" : "Nouvelle page",
"createpage_prompt" : 'Rubrique : %s <br/><br/><span style="white-space: nowrap">Veuillez indiquer le nom de la nouvelle page :</span>',
"createpage_musthavename" : "Erreur : La page doit avoir un nom.",
"createpage_error" : "Erreur pendant la création de la page",
"renamepage_done" : "La page a bien été renommée",

"createshareboard_title" : "Nouveau libre-échange",
"createshareboard_prompt" : 'Rubrique : %s <br/><br/><span style="white-space: nowrap">Veuillez indiquer le nom du nouveau libre-échange :</span>',
"createshareboard_musthavename" : "Erreur : Le libre-échange doit avoir un nom.",
"createshareboard_error" : "Erreur pendant la création du libre-échange",
"renameshareboard_done" : "La libre-échange a bien été renommé",

"createdisq_title" : "Nouveau forum",
"createdisq_musthavename" : "Erreur : Le forum doit avoir un nom.",
"createdisq_error" : "Erreur pendant la création du forum",
"renamedisq_done" : "La forum a bien été renommé",

"search_rubricname" : "( page web )",
"noaccesstoadmindrawer" : "Vous ne disposez pas des droits suffisants pour accéder aux panneaux de gestion. Contactez votre administrateur.",

"group" : "Groupe", 
"group_removed" : "(groupes supprimés)" ,
"group_allmembers" : "Tous les membres" ,
"group_admins" : "Les administrateurs",

"snchooser_content" : "Smartnotes de contenu", 
"snchooser_events" : "Smartnotes pour les événements", 
"snchooser_multimedia" : "Smartnotes multimédia", 
"snchooser_navigation" : "Smartnotes pour la navigation", 
"snchooser_services" : "Smartnotes pour intégrer d'autres services", 
"snchooser_interaction" : "Smartnotes pour interagir", 
"snchooser_decor" : "Smartnotes pour décorer",
"snchooser_switch_cat" : "Catégories",
"snchooser_switch_list" : "Liste",

"givingupdomain" : "<h2>Attention !</h2>L'adresse que vous utilisez :<br/><a href='%host%' target='_blank'>%host%</a><br/>est en cours d'abandon.<br/><br/>Elle ne fonctionnera bientôt plus, et il faudra alors utiliser :<br/><a href='%privatedomain%' target='_blank'>%privatedomain%</a><br/><br/>D'ores et déjà recopiez cette adresse dans vos favoris." ,
"givingupdomain_title" : "Attention",

"external_links_desactivated" : "En mode administrateur, les liens vers des sites extérieurs sont désactivés dans les menus.",
"qwizpage_desactivated" : "Impossible de lancer l'Assistant de Création de Page. La page ne doit contenir aucune Smartnote pour pouvoir lancer l'assistant.",
"signin" : "authentifiez-vous pour accéder à l'administration et aux pages réservées",
"yourprofile" : "Votre profil"
} ;

var qlub_help_pages = { // site d'aide
	"intro" : "aide.quomodo.com/classic/" ,
	"g_smartnotes" : "aide.quomodo.com/classic/je_cree_mon_site/je_cree_des_smartnotes_dans_ma_page" ,
	"g_pagelayout" : "aide.quomodo.com/classic/je_cree_mon_site/la_mise_en_page_auto" ,
	"g_publication" : "aide.quomodo.com/classic/je_cree_mon_site/je_publie_ma_premiere_page" ,
	"g_alert" : "aide.quomodo.com/classic/aller_plus_loin/j_envoie_une_alerte_aux_membres" ,
	"g_newsletter" : "aide.quomodo.com/classic/aller_plus_loin/j_envoie_une_newsletter_a_une_liste" ,
	"m_forum" : "aide.quomodo.com/classic/aide_membres/vos_pages_pour_discuter_en_prive" ,
	"m_shareboard" : "aide.quomodo.com/classic/aide_membres/vos_pages_pour_echanger_en_prive" ,
	"a_members" : "aide.quomodo.com/classic/menu_admin/membres_et_acces" ,
	"a_groups" : "aide.quomodo.com/classic/menu_admin/membres_et_acces" ,
	"a_forums" : "aide.quomodo.com/classic/menu_admin/gerer_les_forums_et_libres-echanges" , 
	"a_shareboards" : "aide.quomodo.com/classic/menu_admin/gerer_les_forums_et_libres-echanges" ,
	"a_sitemap" : "aide.quomodo.com/classic/menu_admin/pages_et_menus" ,
	"a_website" : "aide.quomodo.com/classic/menu_admin/offre_abonnements_et_options" ,
	"a_banner" : "aide.quomodo.com/classic/menu_admin/apparence_generale_du_site" ,
	"a_themes" : "aide.quomodo.com/classic/menu_admin/apparence_generale_du_site" ,
	"a_events" : "aide.quomodo.com/classic/menu_admin/evenements_du_club", 
	"a_uploads" : "aide.quomodo.com/classic/menu_admin/fichiers_charges_sur_le_site", 
	"a_wsg" : "aide.quomodo.com/classic/les_smartnotes/la_smartnote_billet" ,
	"a_pmtxt" : "aide.quomodo.com/classic/les_smartnotes/la_smartnote_titre" , 
	"a_image" : "aide.quomodo.com/classic/les_smartnotes/la_smartnote_image" , 
	"a_poll" : "aide.quomodo.com/classic/les_smartnotes/la_smartnote_sondage" , 
	"a_table" : "aide.quomodo.com/classic/les_smartnotes/la_smartnote_tableau" , 
	"a_video" : "aide.quomodo.com/classic/les_smartnotes/la_smartnote_video" ,
	"a_contact" : "aide.quomodo.com/classic/les_smartnotes/la_smartnote_contact" 
} ;

var profile_message = { 
"none" : "(aucun)" ,
"idmissing" : "SVP veuillez d'abord fournir un identifiant Quomodo." ,
"pwmissing" : "SVP veuillez d'abord fournir un mot de passe." ,
"pwconfirmationfailed" : "Les deux mots de passe que vous avez indiqués sont différents, veuillez recommencer." ,
"wrongpassword" : "Mot de passe erroné" ,
"desc" : "(...)"
} ;

var qlub_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "qlub_msgs_fr_js_loaded" ) ;


/*
function -
function ADS

qlub_ads_checkadd [ à recouvrir ] : renvoie le statut du site - site = "top", "bottom", "right". Le statut peut être false, true ou une string
qlub_init_adshandler [ à recouvrir ] : renvoie un json qui donne pour chaque clé la function à appeler

qlub_init_siteads : on lui passe site et option. Fabrique une clé site + "_" + option si option est défini et n'est pas un boolean 
*/
var qlub_ads_cmd = qlub_ads_cmd || [] ;

function qlub_ads_init() {
	if ( qlub_ads_cmd.splice ) {
		for ( var i = 0 ; i < qlub_ads_cmd.length ; i++ ) qlub_ads_cmd[ i ]() ;
		qlub_ads_cmd = {} ;
		qlub_ads_cmd.push = function( x ) {
			x() ;
		} ;
	}
}
function qlub_ads_checkadd( site, excludePagemodeCheck ) {
	excludePagemodeCheck = excludePagemodeCheck || [] ;
	function checkPageMode( mode ){
		for ( var i = 0 ; i < excludePagemodeCheck.length ; i++ ) {
			if ( mode == excludePagemodeCheck[ i ] ) return false ;
		}
		return q_pagemode() == mode ;
	}
	if ( checkPageMode( "makeweb" ) ) return false ;
	var spaceads = q_spaceparam( "ads" ) ;
	if ( ! spaceads || ! spaceads.active || spaceads.active == "false" ) return false ;
	return true ;
}
function qlub_init_adshandler() {
	return { "top" : qlub_init_topads , "right" : qlub_init_rightads , "bottom" : qlub_init_bottomads } ;
}

function qlub_init_siteads( site , option ) {
	var spaceads = q_spaceparam( "ads" ) ;
	var h = qlub_init_adshandler() ;
	var key = site + ( ( option && ( typeof option ) != "boolean" ) ? ( "_" + option ) : "" ) ;
	return h[ key ].apply( this , [ spaceads && spaceads[ site ] ] ) ;
}
function qlub_ads_checkandinitadd( site ) {
	var b = qlub_ads_checkadd( site ) ;
	if ( b == false ) return false ;
	return qlub_init_siteads( site , b ) ;
}
function qlub_ads_addtop() {
	qlub_ads_cmd.push( function() {
		qlub_ads_checkandinitadd( "top" ) ;
	} ) ;
	//qlub_ads_checkandinitadd( "top" ) ;
}
function qlub_ads_addbottom() {
	qlub_ads_cmd.push( function() {
		qlub_ads_checkandinitadd( "bottom" ) ;
	} ) ;
	//qlub_ads_checkandinitadd( "bottom" ) ;
}
function qlub_ads_addright() {
	qlub_ads_cmd.push( function() {
		qlub_ads_checkandinitadd( "right" ) ;
	} ) ;
	//qlub_ads_checkandinitadd( "right" ) ;
}

function qlub_ads_slotdim( slot , dim , options ) {
	var scale = ( options && options.scale ) ? options.scale : 1 ;
	var d = ( slot.type == "textlink" ) ? -2 : 0 ;
	return Math.round( scale*parseInt( slot[ dim ] , 10 ) ) + d ;
}
function qlub_ads_autoad() {
	q_fsm_reveal( { src : { id : "qlub_sponsor_form" , urls : [ qlubdir + "scripts/qlub_sponsors_contactform.js" , qlubdir + "scripts/qlub_sponsors_contactform_msgs_" + q_lang + ".js" , qlubdir + "qlub_sponsors_contactform_" + q_lang + ".html" ] } , title : qlub_message[ "sponsors_contactform_title" ] , reveal_callback : "qlub_sponsors_contactform_reveal" } ) ;
}

function qlub_ads_increment_onclick ( adlink ) {
	if ( q_pagemode() == "view" || q_pagemode() == "web" ) {
		var slotid = $( adlink ).parents( ".qlub_ads_slot" ).attr( "slotid" ) ;
		xq_ajaxcount( "binincrement", "#" + slotid.replace( "s", "") + "#adsclick@intl" );
	}
}

function qlub_ads_slotHTML( slot , options ) {
	if ( ! slot || slot.type == "none" ) return "" ;
	if ( slot.type == "imgwithhttp" ) return true ;
	if ( slot.type == "version" ) return 1 ;
	var scale = ( options && options.scale ) ? options.scale : 1 ;
	var slotwidth = Math.round( scale*parseInt( slot.width , 10 ) ) ;
	var slotheight = Math.round( scale*parseInt( slot.height , 10 ) ) ;
	var withlink = ! options || ! options.nolink ;
	var s = '<div class="qlub_ads_slot qlub_ads_' + slot.type + '" ' + ( ( slot.id ) ? ( 'slotid="' + slot.id +'" ' ) : '' ) + 'style="' + ( ( options && options.style ) ? ( options.style + ';' ) : ( ( withlink ) ? '' : 'position: relative ; top: 0px ; left : 0px ; ' ) ) + 'width:' + qlub_ads_slotdim( slot , "width" , options ) + 'px ; height:' + qlub_ads_slotdim( slot , "height" , options ) + 'px ;' + ( ( slot.type == "multi" ) ? 'border: solid 1px #666 ;' : '' ) + '">' ;
	switch ( slot.type ) {
		case ( "autoad" ) :
			if ( withlink ) s += '<a href="#" onclick="qlub_ads_autoad() ; return false" >' ;
			s += '<img class="qlub_ads_img" src="/bundles/qlub/images/ads/autoad_' + slot.width + 'x' + slot.height + '.jpg" style="width:' + slotwidth + 'px ; height:' + slotheight + 'px" />' ;
			if ( withlink ) s += '</a>' ;
			break ;
		case ( "quomodo" ) :
			if ( withlink ) s += '<a href="http://www.quomodo.com?ad=' + encodeURIComponent( window.location.host + ( ( ( /club[0-9]+.quomodo.com/ ).test( window.location.host ) ) ? window.location.pathname.replace( /^(\/[^\/]+).*/ , "$1" ) : "" ) ) + '" target="_blank">' ;
			s += '<img class="qlub_ads_img" src="/bundles/qlub/images/ads/quomodo_' + slot.width + 'x' + slot.height + '.png" style="width:' + slotwidth + 'px ; height:' + slotheight + 'px" />' ;
			if ( withlink ) s += '</a>' ;
			break ;
		case ( "imglink" ) :
			var thelink = slot.link.replace( /^https?:\/\//, "" );
			var thehttp = slot.link.replace( /^(https?:\/\/).*/, "$1" ) || "http://" ;
			if ( withlink && thelink ) s += '<a href="' + thehttp + escapeattribute( thelink ) + '" target="_blank" onclick="qlub_ads_increment_onclick( this );" oncontextmenu="qlub_ads_increment_onclick( this );">' ;
			s += '<img class="qlub_ads_img" src="' + ( ( ( /^(https?:\/)?\// ).test( slot.img ) ) ? slot.img : escapeattribute( q_spaceabsoluteurl( memberid , slot.img ) ) ) + '" style="width:' + slotwidth + 'px ; height:' + slotheight + 'px" />' ;
			if ( withlink && thelink ) s += '</a>' ;
			break ;
		case ( "textlink" ) :
			var thelink = slot.link.replace( /^https?:\/\//, "" );
			var thehttp = slot.link.replace( /^(https?:\/\/).*/, "$1" ) || "http://" ;
			s += '<div class="qlub_ads_textlinkcontents">' ;
			s += ( ( withlink && thelink ) ? ( '<a class="qlub_ads_texttitle" href="' + thehttp + escapeattribute( thelink ) + '" target="_blank" onclick="qlub_ads_increment_onclick( this );" oncontextmenu="qlub_ads_increment_onclick( this );" ' + ( ( scale == 1 ) ? '' : ( 'style="font-size:' + Math.round( scale*16 ) + 'px" ' ) ) + '>' ) : '<span class="qlub_ads_texttitle" ' + ( ( scale == 1 ) ? '' : ( 'style="font-size:' + Math.round( scale*16 ) + 'px" ' ) ) + '>' ) + escapeHTML( slot.title ) + ( ( withlink && thelink ) ? '</a>' : '</span>' ) ;
			if ( slot.desc ) s += '<div class="qlub_ads_textdesc"' + ( ( scale == 1 ) ? '' : ( 'style="font-size:' + Math.round( scale*13 ) + 'px" ' ) ) + '>' + escapeHTML( slot.desc ) + '</div>' ;
			s += '</div>' ;
			break ;
		case ( "flash" ) :
			var swf = ( ( /^(https?:\/)?\// ).test( slot.swf ) ) ? slot.swf : escapeattribute( q_spaceabsoluteurl( memberid , slot.swf ) ) ;
			var thelink = slot.link.replace( /^https?:\/\//, "" );
			var thehttp = slot.link.replace( /^(https?:\/\/).*/, "$1" ) || "http://" ;
			if ( withlink && thelink ) s += '<a href="' + thehttp + escapeattribute( thelink ) + '" target="_blank"  onclick="qlub_ads_increment_onclick( this );" oncontextmenu="qlub_ads_increment_onclick( this );">' ;
			s += '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" type="application/x-shockwave-flash" data="' + swf + '" width="' + slotwidth + '" height="' + slotheight + '">';
			s += '<param name="movie" value="'+ swf + '" />';
			s += '<param value="transparent" name="wmode"/>';
			s += '<param name="allowFullScreen" value="true" />';
			s += '<param name="allowScriptAccess" value="never" />';
			s +='<embed src="'+ swf +'" wmode="transparent" allowfullscreen="true" width="'+ slotwidth + '" height="'+ slotheight +'" type="application/x-shockwave-flash" pluginspage="http://www.adobe.com/go/getflashplayer"/>';
			s += '</object>';
			if ( withlink && thelink ) s += '</a>' ;
			break ;
		case ( "iframe" ) :
			var thesrc = slot.src.replace( /^https?:\/\//, "" );
			var thehttp = slot.src.replace( /^(https?:\/\/).*/, "$1" ) || "http://" ;
			s += '<iframe frameborder="0" scrolling="no" width="' + slotwidth + '" height="' + slotheight + '" src="' + thehttp + escapeattribute( thesrc ) + '"></iframe>' ;
			break ;
		case ( "multi" ) :
			var url = "/bundles/qlub/images/ads/multislots_72.jpg" ;
			if ( slotheight < 60 ) url = "/bundles/qlub/images/ads/multislots_32.jpg" ;
			else if ( slotheight < 84 ) url = "/bundles/qlub/images/ads/multislots_48.jpg" ;
			s += '<img class="qlub_ads_img" src="' + url + '"/><br/>' + ( sponsorsmgr_message[ "span_multislots" ] || "%n" ).replace( /%n/g , slot.n ) ;
			break ;
	}
	if ( ! withlink ) s += '<div " style="position: absolute ; top: 0px ; left : 0px ; width:' + qlub_ads_slotdim( slot , "width" , options ) + 'px ; height:' + qlub_ads_slotdim( slot , "height" , options ) + 'px ;"></div>' ;
	s += '</div>' ;
	return s ;
}
function qlub_slotfromid( slotid , slot ){
	if ( slotid == "none" || slotid == "autoad" || slotid == "quomodo" ) {
		var x = q_cloneObject( slot ) ;
		x.type = slotid ;
		return x ;
	}
	if ( ! spacexml.ads || ! spacexml.ads.slots ) return null ;
	for ( var i = 0 ; i < spacexml.ads.slots.length ; i++ ) {
		if ( spacexml.ads.slots[ i ].id == slotid ) return spacexml.ads.slots[ i ] ;
	}
	return null ;
}
function qlub_getoneslot( slot , bDisplayMultiSlots ){
	if ( slot.ids == undefined ) return slot ;
	function validslotid( slotid ){
		if ( slotid == "none" || slotid == "autoad" || slotid == "quomodo" ) return true ;
		if ( ! spacexml.ads || ! spacexml.ads.slots ) return false ;
		for ( var i = 0 ; i < spacexml.ads.slots.length ; i++ ) {
			if ( spacexml.ads.slots[ i ].id == slotid ) return true ;
		}
		return false ;
	}
	function validslotids(){
		var validids = [] ;
		var tmpids = slot.ids.split( " " ) ;
		for ( var i = 0 ; i < tmpids.length ; i++ ) {
			if ( validslotid( tmpids[ i ] ) ) validids.push( tmpids[ i ] ) ;
		}
		return validids ;
	}
	var ids = validslotids() ;
	if ( slot.ids == "" || ids.length == 0 ) {
		var x = q_cloneObject( slot ) ;
		x.type = "none" ;
		return x ;
	}
	if ( ids.length > 1 && bDisplayMultiSlots ) {
		var x = q_cloneObject( slot ) ;
		x.type = "multi" ;
		x.n = ids.length ;
		return x ;
	}
	return qlub_slotfromid( ids[ Math.floor( Math.random() * ids.length ) ] , slot ) ;
}
var ads_randomnumber = Math.floor( Math.random() * 1000000 ) ;
function qlub_getonead( siteads ){
	if ( ! siteads.ads ) return siteads ;
	var activeads = [] ;
	for ( var i = 0 ; i < siteads.ads.length ; i++ ) if ( siteads.ads[ i ].active != false ) activeads.push( siteads.ads[ i ] ) ;
	if ( activeads.length == 0 ) return null ;
	return activeads[ ads_randomnumber % activeads.length ] ;
}

function qlub_addTarget( id ) {
	var $target = $( "#" + id ) ;
	if ( $target.length == 0 && id == "qlub_rightads" ) $target = $( "#qlub_ads_addright_elem" ) ;
	for ( ; $target.children().length > 0 ; ) {
		var $tmp = $target.children().eq( 0 ) ;
		if ( $tmp.get( 0 ).tagName.toLowerCase() == "script" ) break ;
		$target = $tmp ;
	}
	return $target ;
}
function qlub_init_topads( siteads ) {
	if ( ! siteads ) return false ;
	var ad = qlub_getonead( siteads ) ;
	if ( ! ad ) return false ;
	var s = '<table id="qlub_init_topads_elem" cellspacing="0" cellpadding="0" border="0"><tr>' ;
	for ( var i = 0 ; i < ad.slots.length ; i++ ) {
		if ( ad.slots.length == 5 && i > 0 ) s += '<td style="width: 7px"> </td>' ;
		s += '<td align="center">' + qlub_ads_slotHTML( qlub_getoneslot( ad.slots[ i ] ) ) + '</td>' ;
	}
	s += '</tr></table>' ;
	//document.write( s ) ;
	$( "#qlub_init_topads_elem" ).remove() ;
	var $target = qlub_addTarget( "qlub_topads" ) ;
	$target.append( s ) ;
	return true ;
}

function qlub_init_bottomads( siteads ) {
	if ( ! siteads ) return false ;
	var ad = qlub_getonead( siteads ) ;
	if ( ! ad ) return false ;
	var s = '<table id="qlub_init_bottomads_elem" cellspacing="0" cellpadding="0" border="0"><tr>' ;
	for ( var i = 0 ; i < ad.slots.length ; i++ ) s += '<td align="center" style="padding-bottom : 8px">' + qlub_ads_slotHTML( qlub_getoneslot( ad.slots[ i ] ) ) + '</td>' ;
	s += '</tr></table>' ;
	//document.write( s ) ;
	$( "#qlub_init_bottomads_elem" ).remove() ;
	var $target = qlub_addTarget( "qlub_bottomads" ) ;
	$target.append( s ) ;
	return true ;
}

function qlub_init_rightads( siteads ) {
	if ( ! siteads ) return false ;
	var ad = qlub_getonead( siteads ) ;
	if ( ! ad ) return false ;
	// 100616 vh : fix de la hauteur qui était à 600px au lieu de 120*6 + 5*8 = 760
	var elem = document.getElementById( "qlub_ads_addright_elem" ) ;
	if ( elem ) {
		var div = elem.getElementsByTagName( "DIV" )[ 0 ] ;
		if ( div ) div.style.height = "760px" ;
	}
	var s = '<div id="qlub_init_rightads_elem">' ;
	for ( var i = 0 ; i < ad.slots.length ; i++ ) s+= qlub_ads_slotHTML( qlub_getoneslot( ad.slots[ i ] ) , { style : "margin-bottom: 8px" } ) ;
	s += '</div>' ;
	//document.write( s ) ;
	$( "#qlub_init_rightads_elem" ).remove() ;
	var $target = qlub_addTarget( "qlub_rightads" ) ;
	$target.append( s ) ;
	return true ;
}


/*
function CONFIG
*/

var members_descfields = [ 
	{ key: "username", type: "text", validator : { required: true } },
	{ key: "firstname", type: "text", validator : { required: true } },
	{ key : "gender" , type : "select" , values : [ "fgender" , "mgender" ], validator : { required: true } } , 
	{ key:"address", type : "textarea" }, 
	{ key : "birthdate", type : "date" },
	{ key : "email", type : "email", validator : { required: true, email: true } },
	{ key : "mobile", type : "tel" },
	{ key: "category", type: "text", displayColInSelect: [ "rich" ] }, 
	"licensenumber", 
	{ "key" : "lang" , "type" : "select" , values : [ "fr" , "en" ] , onchange : function() { if ( q_lang != this.value ) q_alert ( memberprofile_message [ "langinfo" ] ) ; } } 
] ;

function q_members_descfields() {
	var desc = {
		key:"",
		type:"",
		display:"",
		displayColon:"",
		values:[],
		displays : {},
		onchange:"",
		validator : { required: false }
	}
	var options;
	
	var descfields = members_descfields ;
	if ( window.quomodoclient && quomodoclient.members && quomodoclient.members.descfield ) descfields = quomodoclient.members.descfield ;

	var newdescfields = { keys:[], descs:{} } ;
	
	for ( var i = 0; i < descfields.length ; i++ ) {
		options = {} ;
		var val = descfields[ i ] ;
		if ( typeof val == "string" ) {
			options.key = val;
			options.type = "text";
			var display = ( memberprofile_message[ val ] || val ).replace( /( | )*:( | )*$/, "") ;
			options.display = display ;
			options.displayColon = display + common_message[ ":" ] ;
		} else {
			options.key = val.key;
			options.type = val.type;
			var display = ( val.display || memberprofile_message[ val.key ] || val.key ).replace( /( | )*:( | )*$/, "") ;
			options.display = display ;
			options.displayColon = display + common_message[ ":" ] ;
			options.validator = val.validator ;
			if ( val.type == "select" ) {
				options.values = val.values || [];
				options.displays = {};
				for ( var j = 0; j <options.values.length ; j++ ) {
					var v = options.values[ j ] ;
					options.displays[ v ] = memberprofile_message[ v ] || val.values[ j ] ;
				}				
			}
		}
		newdescfields.keys.push( options.key ) ;
		newdescfields.descs[ options.key ] = $.extend( {}, desc, options ) ;
	}

	newdescfields.displayedCols = { "rich": [ "username", "firstname", "category" ] } ;
	if ( window.quomodoclient && quomodoclient.members && quomodoclient.members.descfieldOptions ) {
		if ( quomodoclient.members.descfieldOptions.displayedCols ) newdescfields.displayedCols = quomodoclient.members.descfieldOptions.displayedCols ;
		newdescfields.summaryHTML = quomodoclient.members.descfieldOptions.summaryHTML ;
	}
	return newdescfields ;
}

var qlubpagewidth = 1024 ;

var qlubdir = "/bundles/qlub/" ;
var pagesdir = "/services/artemapage@" + q_lang + "/" ;

/*
function CONFIG - q_elems
*/

var newelems = {
	"membermgr" : {
		id : "qlub_membermgr" , 
		urls : [ 
			"/styleauto/auto_admin.css",
			qlubdir + "scripts/qlub_membermgr.js" , 
			qlubdir + "scripts/qlub_membermgr_msgs_" + q_lang + ".js", 
			qlubdir + "qlub_membermgr_" + q_lang + ".html" 
		] , 
		target : "q_fullscreenmask" },
	"siteloader" : { 
		id : "siteloader" , 
		urls : [ 
			"/services/qorg/siteloader_" + q_lang + ".html" , 
			"/services/qorg/scripts/siteloader.js"
		] , 
		target : "q_fullscreenmask" },
	"emailalert" : { // ALERTES E-MAIL
		id : "qlub_emailalert" , 
		urls : [ 
			qlubdir + "scripts/qlub_ema.js" , 
			qlubdir + "scripts/qlub_ema_msgs_" + q_lang + ".js", 
			qlubdir + "qlub_ema_" + q_lang + ".html" 
		] }
} ;
if ( ! window.q_elems ) q_elems = {} ;
$.extend( q_elems , newelems ) ;

/*
function CONFIG - qlub_customize
*/
 
var qlub_iconsref = {
	1 : { icon : "basketball", file : "1_basket" } ,
	2 : { icon : "rugby", file : "2_rugby" } ,
	3 : { icon : "football", file : "4_football" } ,
	4 : { icon : "boxing", file : "3_boxe" } ,
	5 : { icon : "target", file : "cible" } ,
	6 : { icon : "dog", file : "animaux" } ,
	7 : { icon : "chrono", file : "920_chrono" } ,
	8 : { icon : "love", file : "coeur" } ,
	9 : { icon : "billard", file : "9_billard" } ,
	10 : { icon : "pingpong", file : "914_pingpong" } ,
	11 : { icon : "", file : "boussole" } ,
	12 : { icon : "motorbike", file : "916_moto" } ,
	13 : { icon : "theater", file : "masques" } ,
	14 : { icon : "photo", file : "photo" } ,
	15 : { icon : "bike", file : "915_velo" } ,
	16 : { icon : "usfootball", file : "5_football_us" } ,
	17 : { icon : "baseball", file : "6_baseball" } ,
	18 : { icon : "bowling", file : "7_bowling" } ,
	19 : { icon : "", file : "8_bowling2" } ,
	20 : { icon : "", file : "910_billard2" } ,
	21 : { icon : "", file : "911_crosse" } ,
	22 : { icon : "", file : "912_palet" } ,
	23 : { icon : "gym", file : "913_gym" } ,
	24 : { icon : "car", file : "917_voiture" } ,
	25 : { icon : "", file : "918_compteur" } ,
	26 : { icon : "", file : "919_chaussures" } ,
	27 : { icon : "", file : "casier" } ,
	28 : { icon : "", file : "casier2" } ,
	29 : { icon : "", file : "casier3" } ,
	30 : { icon : "", file : "damiers" } ,
	31 : { icon : "blueflag", file : "drapeau_bleu" } ,
	32 : { icon : "yellowflag", file : "drapeau_jaune" } ,
	33 : { icon : "blackflag", file : "drapeau_noir" } ,
	34 : { icon : "redflag", file : "drapeau_rouge" } ,
	35 : { icon : "greenflag", file : "drapeau_vert" } ,
	36 : { icon : "star", file : "etoile" } ,
	37 : { icon : "cup", file : "prix" } ,
	38 : { icon : "", file : "prix2" } ,
	39 : { icon : "", file : "prix3" } ,
	40 : { icon : "", file : "prix4" } ,
	41 : { icon : "", file : "whistle" } ,
	42 : { icon : "", file : "stopwatch" } 
} ;

/*
function CONFIG - qlub_eventsmgr
*/

var clubopenselects = null ;
var clubevents = null ;

var events_types = [ "match", "birthday","general" ] ;

var events_prototypes = {
	"match" : {
		"kind" : "event" ,
		"properties" : [
			{ "date": { "mandatory": "true" , "mode" : "full" } } ,
			"time" ,
			{ "localteam": { "mandatory": "true" } } ,
			{ "vsteam": { "mandatory": "true" } } ,
			"competition" ,
			"step" ,
			"home" ,
			"location" ,
			"homescore" ,
			"vsscore" , 
			{ "comment": { "textarea":"true" } }  
		],
		"color" : "darkred"
	} ,
	"general" : {
		"kind" : "event" ,
		"properties" : [
			{ "date": { "mandatory": "true" } } ,
			"icon" ,
			{ "title": { "mandatory": "true" } },
			"category",
			{"description" : { "textarea":"true" }} ,
			"image"  
		],
		"color" : "darkgreen"
	} ,
	"birthday" : {
		"kind" : "event" ,
		"properties" : [
			{ "day": { "mandatory": "true" } } ,
			{ "member": { "mandatory": "true" } },
			"firstname", 
			"category"
		],
		"color" : "purple"
	} ,
	"home" : {
		"kind" : "closedselect" ,
		"properties" : [ 
			[ "0" , "homeY" ] , 
			[ "1" , "homeN" ] 
		] 
	} ,
	"localteam" : {
		"kind" : "openselect" ,
		"tostring" : function( id , json ) { return json.name ; } ,
		"properties" : [
			{ "name": { "mandatory": "true" } } ,
			"gender" ,
			"logo"
		]
	} ,
	"vsteam" : {
		"kind" : "openselect" ,
		"tostring" : function( id , json ) { return json.name ; } ,
		"properties" : [
			{ "name": { "mandatory": "true" } } ,
			"logo"/* ,
			"naffi",
			"geocity"*/
		]
	} ,
	"gender" : {
		"kind" : "closedselect" , 
		"properties" : [ 
			[ "0" , "genderM" ] , 
			[ "1" , "genderF" ] , 
			[ "2" , "genderMF" ] 
		] 
	} ,
	"date" : { "kind" : "calendar" } ,
	"day" : { "kind" : "calendar" } ,
	"location" : {
		"kind" : "openselect" ,
		"tostring" : function( id , json ) { return json.name + " - " + json.city ; } ,
		"properties" : [
			{ "name": { "mandatory": "true" } } ,
			"city" 
		]
	} ,
	"category" : {
		"kind" : "openselect" ,
		"tostring" : function( id , json ) { return json.name ; } ,
		"properties" : [ 
			{ "name": { "mandatory": "true" } } ,
			"color"
		]
	} ,
	"logo" : {
		"kind" : "openselect" ,
		"tostring" : function( id , json ) { return json.name ; } ,
		"properties" : [ 
			{ "name": { "mandatory": "true" } } ,
			"logourl"
		]
	} ,
	"image" : { "kind" : "choosefile" },
	"logourl" : { kind : "choosefile" , options : { formats : "square33 square100" , ratio : 1 , validimgformat : "square33" } },
	"icon" : { "kind" : "icon" },
	"color" : { "kind" : "color" },
	"matchselector" : { "kind" : "matchselector" }
} ;

/*
function -
function INIT
*/

quomodo.events.addListener( "finish_init.page" , function( eventDesc, eventName ){
	//if ( ! eventDesc || eventDesc.mode != "web" ) return ;
	if ( q_pagemode() == "edit" ) return ;
	$( "#jesuischarlie" ).remove() ;
	if ( quomodo.page && quomodo.page.isPopup ) return ;
	if ( ! spacexml.infos || ! spacexml.infos.charlie || ! spacexml.infos.charlie.url ) return ;
	var url = spacexml.infos.charlie.url ;
	if ( spacexml.https ) url = url.replace( /https?:\/\//, "https://" ) ;
	var link = spacexml.infos.charlie.link ;
	var charlieHTML = '<img src="' + url + '"/>' ;
	if ( link ) charlieHTML =  '<a href="' + link + '">'+ charlieHTML + '</a>' ;
	$( "body" ).prepend( '<div id="jesuischarlie" style="position: fixed ; top: ' + ( q_pagemode() == "view" ? 44 : 0 ) + 'px ; left: 0px ; z-index: 1000000">' + charlieHTML + '</div>' ) ;
} ) ;

var qlub0_checked = 0 ;
function check_qlub0( callback ) {
	try {
		if ( qlub0_checked > 1 ) return true ;
		if ( window.club_menubariconsize != undefined ) return true ;
		var f = function() {
			qlub0_checked++ ;
			if ( qlub0_checked < 2 && window.club_menubariconsize == undefined ) return check_qlub0( callback ) ;
			q_apply( callback ) ;
		} ;
		$.getScript( q_spacebaseurl( "" ) + "custom/scripts/qlub0.js" , f ).error( f ) ;
		return false ;
	} catch ( err ) { return true ; }
}

/*
function -
function HEADER & TABSMENU
*/

function qlub_menupaneposition_maxwidth() {
	return 954 ;
}

function qlub_initmenupaneposition() {
	var menupanewidth = 300 ;
	$( "#qlub_menuonlybar>td:has(.qlub_menupane)" ).each( function ( i , td ) {
		$( "div:first" , td ).css( "z-index" , "0" ) ;
		$( ">div:has(.qlub_menupane)" , td ).css( "position" , "relative" ) ;
		if ( ( $( td ).position().left + menupanewidth ) > qlub_menupaneposition_maxwidth() ) $( ".qlub_menupane:first" , td ).css( { right : "-10px" , left : "auto" } ) ;
	} ) ;
}

function qlub_maxmenuwidth() {
	var maxwidth = 1002 ;
	return ( q_pagemode() == "edit" ) ? Math.min( q_windowInnerWidth() - ge( "qlub_header_nav" ).offsetLeft + 6 , maxwidth ) : maxwidth ; 
	// + 6 car lorsque la fenêtre est réduite, il y a un décalage de 6 px
}

function qlub_menus_sizeinit( wantDefault ){
	if ( ! wantDefault && window.quomodoclient && quomodoclient.qlub_menus_sizeinit ) return quomodoclient.qlub_menus_sizeinit() ;
	//initialisation taille du menu
	var trid = "qlub_menubar" ;
	var trmenu = ge( trid ) ;
	if ( ! trmenu ) {
		trid = "web_leftcollinks" ;
		trmenu = ge( trid ) ;
	}
	if ( ! trmenu ) return ;
	var x = trmenu.cells[ trmenu.cells.length - 1 ] ;
	var tabs = $( "#" + trid + " .qlub_tab_title" );
	var maxfont = Math.max( Math.round( parseInt( ( spacexml && spacexml.theme && spacexml.theme.menuheight ) || 36, 10 ) / 2.5 ), 13 ) ;
	if ( window.client_menusSize ) tabs.css( "font-size" , client_menusSize );
	else tabs.css( "font-size" , maxfont + "px" );
	var wref = qlub_maxmenuwidth() ;
	if ( ( x.offsetWidth + x.offsetLeft ) <= wref ) return qlub_initmenupaneposition() ;
	$( "#qlub_disqmenulink, #qlub_shareboardmenulink" ).hide() ;
	if ( ( x.offsetWidth + x.offsetLeft ) <= wref ) return qlub_initmenupaneposition() ;
	
	for ( var j = maxfont-1 ; j > 6 ; j-- ) {
		tabs.each( function(){
			$( this ).css( "font-size", j + "px" );
			if ( this.tagName.toLowerCase() == "div" ) $( this ).css( "padding", "0 " + Math.max( 4 , Math.round( j * 0.6 ) ) + "px" );
		} );
		if ( ( x.offsetWidth + x.offsetLeft ) <= wref ) return qlub_initmenupaneposition() ;
	}
	qlub_initmenupaneposition() ;
}

/*
function -
function PAGE TITLE
*/

function qlub_pagetitle_init(){
	var x = $.extend( {
		sitebgimageanchor : "scroll",
		sitebgimageposition : "center",
		menudisplay : "horizontal", 
		titlecontent : "title",
		titlealign : "left", 
		titlefont : "Arial", 
		titletextstyles : "",
		facebookbutton : "false",
		twitterbutton : "false"
	} , ( ( spacexml && spacexml.theme ) || {} ) ) ;
	
	$( "#qlub_menubartable" ).toggle( x.menudisplay != "none" || q_pagemode() =="edit" );
	
	var t = x.titletextstyles.split(" ");
	$( "#currservicename" ).
		attr( "align", x.titlealign ).
		css( "font-family", x.titlefont ).
		css( "font-weight", ( $.inArray( "bold", t ) != -1 ) ?  "bold" : "normal" ).
		css( "font-style", ( $.inArray( "italic", t ) != -1 ) ?  "italic" : "none" ).
		css( "text-transform", ( $.inArray( "uppercase", t ) != -1 ) ?  "uppercase" : "none" ).
		html( q_currsvcname() ).
		toggle( x.titlecontent != "none" );
	
	$( "body > div.qlub_sitebgimage" ).remove();	
	if ( x.sitebgimageanchor == "fixed" ) $( "body" ).
		removeClass( "qlub_sitebgimage" ).
		prepend( '<div class="qlub_sitebgimage fixed" style="top: 0px; left: 0px; width: 100%; height: 100%;"></div>' );
	else $( "body" ).addClass( "qlub_sitebgimage" );
	
/*	if ( q_pagemode() == "web" ){
		function httpsiteurl(){
			if ( spacexml && spacexml.infos ) return "http://" + ( ( spacexml.infos.host ) ? spacexml.infos.host  : window.location.host + "/" + spacexml.infos.privatedomain ) ;
			return "http://" + ( ( window.clubhost ) ? clubhost  : window.location.host + "/" + window.clubprivatedomain ) ;
		}
		if ( x.twitterbutton == "true" ){
			var content = '<td align="right" style="padding:0 10px;">'
			//data-count = "horizontal" ou "none"
			content += '<div style="width:110px;position:relative;z-index:0;white-space:nowrap"><a rel="nofollow" href="http://twitter.com/share" class="twitter-share-button" data-count="horizontal" data-lang="fr">Tweeter</a><script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script></div>';
			content += '</td>';
			$( "#currservicename" ).parents( "td:first" ).after( content );
		}

		if ( x.facebookbutton == "true" ){
			var content = '<td align="right" style="padding:0 10px;">'
			//type = "button_count", "button", "icon_link", ou "icon" selon ce qu'on veut
			//content += '<div style="width:110px;position:relative;z-index:0;white-space:nowrap"><a rel="nofollow" href="http://www.facebook.com/sharer.php" type="button_count" name="fb_share">Partager</a><script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript"></script></div>';
			content += '<iframe src="http:/' + '/www.facebook.com/plugins/like.php?href=' + encodeURIComponent( httpsiteurl() ) + '&amp;send=false&amp;layout=button_count&amp;width=100&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font=lucida+grande&amp;height=21&amp;appId=248280301880468" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:100px; height:21px;" allowTransparency="true"></iframe>' ;
			content += '</td>';
			$( "#currservicename" ).parents( "td:first" ).after( content );
		}
		if ( x.googlebutton == "true" ){
			(function() {
				var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
				po.src = 'https://apis.google.com/js/plusone.js';
				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
			})();
			var content = '<td align="right" style="padding:0 10px;">'
			content += '<div style="width:110px;position:relative;z-index:0;white-space:nowrap"><g:plusone size="medium" annotation="none"></g:plusone></div></td>';
			$( "#currservicename" ).parents( "td:first" ).after( content );
		}
	}*/
}

/*
function -
function MENUS
*/

function qlub_menus_menuisvisible( menu ) {
/*
	en mode edit, on affiche toujours le menu, chaque page s'annonce visible ou non en prenant en plus en compte le fait d'être ou non dans une rubrique visible
*/
	return ( q_pagemode() == "edit" || spacexml.mode == "wiki" || menu.visibility != "hidden" ) ;
}
function qlub_menus_svcisinhiddenmenu( svcid ) {
	var path = q_sitemap_getpath( svcid ) ;
	var hidden = false ;
	var node = spacexml.sitemap ;
	for ( var i = 0 ; i < path.length - 1 ; i++ ) {
		node = node[ path[ i ] ] ;
		if ( node.visibility == "hidden" ) hidden = true ;
		node = node.items ;
	}
	return hidden ;
}
function qlub_menus_linkisvisible() {
	if ( q_pagemode() == "edit" && q_getuserlevel( memberid ) != "admin" ) return false ;
	if ( spacexml.mode == "wiki"  && q_getuserlevel( memberid ) != "admin" ) return false ;
	return true ;
}
function qlub_menus_siteisvisible( spaceid ) {
	return true ;
}
function qlub_menus_svcisvisible( svcid ) {
	if ( ! svcid ) return false;
	var pagemode = q_pagemode( true ) ;
	var userlevel = q_getuserlevel( memberid ) ;
	if ( pagemode == "edit" && ( userlevel == "admin" || ( q_svcfromid( svcid ) && $.inArray( "edit" , q_svcfromid( svcid ).accessrights ) != -1 ) ) ) return true ;
	if ( pagemode == "edit" && userlevel != "admin" ) return false ;
	if ( pagemode == "view" && userlevel != "admin" && spacexml.mode == "intranet" && q_svcisweb( svcid ) ) return false ;
	if ( pagemode == "view" && userlevel != "admin" && spacexml.mode == "wiki" && $.inArray( "edit" , q_svcfromid( svcid ).accessrights ) != -1 ) return true ;
	if ( pagemode == "view" && userlevel != "admin" && spacexml.mode == "wiki" && q_svcisweb( svcid ) ) return false ;
	if ( ! q_sitemap_getnode( svcid ) ) return false;
	if ( qlub_menus_svcisinhiddenmenu( svcid ) ) return false;
	var v = q_sitemap_getnode( svcid ).visibility;
	if ( v == "hidden" ) return false;
	else if ( v == "forcevisible" ) return true;
	return ( q_svcisweb( svcid ) || $.inArray( q_pagemode() , [ "edit" , "view" ] ) != -1 ) ;
}

function qlub_menus_submenu( sm, path , options ){
	var xoptions = $.extend( {
		svcfromid : function( svcid ) { return q_svcfromid( svcid ) ; } ,
		svcisvisible : function( svcid ) { return qlub_menus_svcisvisible( svcid ) ; } ,
		siteisvisible : function( spaceid ) { return qlub_menus_siteisvisible( spaceid ) ; } ,
		linkisvisible : function() { return qlub_menus_linkisvisible() ; }
	} , options ) ;
	var li = $( '<li class="menu">' ).
		attr( { "rel" : "menu", "menuindex" : q_tostring( path ) }  ).
		html( '<a href="#" style="padding-right:11px;">' + escapeHTML( sm.name ) + '</a><span style="position:absolute; right:0px;padding-right:9px;font-family: Arial">►</span>' );
	
	var menu = $( "#qlub_menu_template" ).
		clone().removeAttr( "id").
		css( { "position" : "absolute", "top" : "-9px", "left" : "303px" , "z-index" : "1" } ).
		appendTo( li );
	var ul = $( ".qlub_menu_content", menu ).empty();
	
	var currenthtml = '' ;
	for ( var i = 0; i < sm.items.length; i++ ) {
		if ( ! sm.items[ i ].items && sm.items[ i ].id ) {
			if ( xoptions.svcisvisible( sm.items[ i ].id ) ) ul.append( qlub_menus_page( xoptions.svcfromid( sm.items[ i ].id ), sm.items[ i ].icon ) ) ;//currenthtml += qlub_menus_pageHTML( xoptions.svcfromid( sm.items[ i ].id ), sm.items[ i ].icon ) ;//
		} else if ( ! sm.items[ i ].items && sm.items[ i ].qorpid ) {
			if ( qlub_menus_siteisvisible( sm.items[ i ].qorpid ) ) ul.append( qlub_menus_site( sm.items[ i ] ) , options ) ;
		} else if ( ! sm.items[ i ].items && sm.items[ i ].href ) {
			if ( xoptions.linkisvisible() ) ul.append( qlub_menus_link( sm.items[ i ] , options ) ) ;//currenthtml += qlub_menus_linkHTML( sm.items[ i ] , options ) ;//
		} else if ( sm.items[ i ].items ) {
			if ( qlub_menus_menuisvisible( sm ) ) {
				if ( currenthtml ) {
					ul.append( currenthtml ) ;
					currenthtml = '' ;
				}
				ul.append( qlub_menus_submenu( sm.items[ i ], path.concat( [ i ] ) , options ) );
			}
		}
	}
	if ( currenthtml ) {
		ul.append( currenthtml ) ;
		currenthtml = '' ;
	}

	if ( q_pagemode() == "edit" && q_getuserlevel( memberid ) == "admin" ) qlub_menus_addgroupnewsvclink( ul ) ;

	if ( $( "li" , menu ).length == 0 ) return null ;
	return li;
}

function qlub_menus_page( svc, icon ) {
	var li = $( '<li>' ).attr( { "svcid" : svc.id,  "rel": "page" } );
	if ( svc.id == currsvcid ) li.css( "font-weight", "bold" );
	if ( svc.filename ) li.attr( "filename", svc.filename );
	if ( icon ) li.append( $( '<ins>' ).attr( "class", icon ) );
	li.append( $( '<a>' ).
		html( escapeHTML( q_svcname( svc ) ) ).
		attr( "href", ( q_pagemode() == "makeweb" && q_svcisweb( svc.id ) ) ? ( svc.weblink + ".html" ) : "#" )
	);
	return li;
}
function qlub_menus_pageHTML( svc, icon ) {
	var li = '<li svcid="' + escapeattribute( svc.id ) + '" rel="page"' ;
	if ( svc.id == currsvcid ) li += ' style="font-weight: bold"' ;
	if ( svc.filename ) li += ' filename="' + escapeattribute( svc.filename ) + '"' ;
	li += '>' ;
	if ( icon ) li += '<ins class="' + icon + '"></ins>' ;
	li += '<a href="' + ( ( q_pagemode() == "makeweb" && q_svcisweb( svc.id ) ) ? escapeattribute( svc.weblink + ".html" ) : "#" ) + '">' + escapeHTML( q_svcname( svc ) ) + '</a>' ;
	li += '</li>' ;
	return li;
}

function qlub_menus_site( item, options ) {
	var site = q_spaceid2svcinfo( item.qorpid ) ;
	if ( ! site ) return null ;
	var li = $( '<li>' ).attr( { "svcid" : item.qorpid,  "rel": "site" } );
	if ( svc.id == currsvcid ) li.css( "font-weight", "bold" );
	if ( item.icon ) li.append( $( '<ins>' ).attr( "class", icon ) );
	li.append( $( '<a>' ).
		html( escapeHTML( item.name ) ).
		attr( "href", ( q_pagemode() == "makeweb" ) ? site.weblink : "#" ).
		attr( "target", item.target ? item.target : "_self" )
	);
	return li;
}
function qlub_menus_link( item , options ) {
	var li = $( '<li>' ).attr( { "rel": "link" } );
	if ( item.icon ) li.append( $( '<ins>' ).attr( "class", item.icon ) );
	
	var href = item.href;
	if ( item.kind && item.kind == "2" ) {
		li.attr( "svcid", item.href );
		href = "#" ;
		if ( q_pagemode() == "makeweb" ) {
			var svcid = item.href ;
			if ( ! options || ! options.svcfromid ) {
				var svc = q_svcfromid( svcid ) ;
				if ( ! svc ) {
					qpromise_svcfromid( svcid ).callback( function( promise ){
						if ( ! promise || ! promise.weblink ) return ;
						if ( ! q_svcisweb( promise ) ) return ;
						$( '#qlub_menuonlybar li[svcid="' + svcid + '" ] a' ).attr( "href", promise.weblink + ".html" ) ;
					} ) ;
				} else href = ( q_svcisweb( svcid ) ) ? ( svc.weblink + ".html" ) : "#" ;
			} else {
				var svc = options.svcfromid( svcid ) ;
				href =  ( q_svcisweb( svc ) ) ? ( svc.weblink + ".html" ) : "#" ;
			}
		}
	}
	 
	li.append( $( '<a>' ).
		attr( "target", item.target ).
		attr( "href", href ).
		html( escapeHTML( item.name ) )
	);
	return li;
}
function qlub_menus_linkHTML( item , options ) {
	var li = '<li rel="link" target="' + item.target + '"' ;
	var href = item.href;
	if ( item.kind && item.kind == "2" ) {
		href = "#" ;
		if ( q_pagemode() == "makeweb" ) {
			var svcid = item.href ;
			if ( ! options || ! options.svcfromid ) {
				var svc = q_svcfromid( svcid ) ;
				if ( ! svc ) {
					qpromise_svcfromid( svcid ).callback( function( promise ){
						if ( ! promise || ! promise.weblink ) return ;
						if ( ! q_svcisweb( promise ) ) return ;
						$( '#qlub_menuonlybar li[svcid="' + svcid + '" ] a' ).attr( "href", promise.weblink + ".html" ) ;
					} ) ;
				} else href = ( q_svcisweb( svcid ) ) ? ( svc.weblink + ".html" ) : "#" ;
			} else {
				var svc = options.svcfromid( svcid ) ;
				href =  ( q_svcisweb( svc ) ) ? ( svc.weblink + ".html" ) : "#" ;
			}
		}
		li += ' svcid="' + escapeattribute( item.href ) + '"' ;
	}
	li += '>' ;
	if ( item.icon ) li += '<ins class="' + item.icon + '"></ins>' ;
	li += '<a href="' + href + '">' + escapeHTML( item.name ) + '</a>' ;
	li += '</li>' ;
	return li;
}

function qlub_menus_setmarker( $target, wantDefault ){
	if ( ! wantDefault && window.client_menus_setmarker ) return client_menus_setmarker( $target ) ;
	$target.prepend( '<div class="qlub_tab_marker">' );
}

/*
function -
function MENUS EVENTS
*/

function qlub_menus_events(){
	qlub_initmenupaneposition() ;// 2010-12-23, vh : pour compatibilité de la mise à jour des menus sans refaire les menus de tous les sites
	if ( q_pagemode() == "makeweb" ) return ;

	// hover et click du openleftcolbutton
	$( "#qlub_openleftcolbutton" ).
		unbind( "click" ).
		click( function(){ qlub_animleftcol( this.className ); });
	
	// hover et click des tabs principales
	$( "#qlub_menuonlybar td.qlub_tab_td" ).
		hover( 	
			function(){ 
				$( this ).css( "z-index", "1" ).addClass( "over" );
				$( ".qlub_menupane", this ).show();
			},function(){ 
				$( this ).css( "z-index", "0" ).removeClass( "over" );
				$( ".qlub_menupane", this ).hide();
			}
		).
		unbind( "click" ).
		click( function(){ 
			var rel = $( this ).attr( "rel" );
			if ( rel == "page" || rel == "site" ) return qlub_menus_click_svclink( this );
			else if ( rel == "link" ) {
				if ( $( this ).attr( "svcid" ) ) return qlub_menus_click_svclink( this );
				if ( $.inArray( q_pagemode() , [ "web" , "view" ] ) == -1 ) return q_alert( qlub_message[ "external_links_desactivated" ] );
				return true;
			}
		 });

	// hover et click des li sans items
	$( "#qlub_menuonlybar li[rel!='menu']" ).
		hover( 
			function(){ $( this ).addClass( "over" );}, 
			function(){ $( this ).removeClass( "over" );}
		);
		
	$( "#qlub_menuonlybar li[rel='menu']" ).
		hover( 
			function(){ 
				$( this ).addClass( "over" );
				$( this ).css( "z-index" , "2" ) ;
				if ( $( this ).offset().left + 318 > qlub_menupaneposition_maxwidth() ) var left = -277;
				else var left = ( isie6() ) ? ( 295 - 12 ) : 295 ;
				$( 'div:first', this ).css( "left", left + "px" ).show(); 
			}, function(){ 
				$( this ).removeClass( "over" );
				$( this ).css( "z-index" , "1" ) ;
				$( 'div:first', this ).hide();
			}
		);
	
	$( "a:first" , "#qlub_menuonlybar li[rel='menu']" ).unbind( "click" ).click( function(){ return false; } );		
	//$( "#qlub_menuonlybar li[svcid='" + currsvcid + "'] a:first").unbind( "click").click( function(){ return false; } );
	
	$( "#qlub_menuonlybar li[rel='page']" ).unbind( "click" ).click( function(){ return qlub_menus_click_svclink( this ); } );
	$( "#qlub_menuonlybar li[rel='site']" ).unbind( "click" ).click( function(){ return qlub_menus_click_svclink( this ); } );
	$( "#qlub_menuonlybar li[rel='link'] a[href='#']" ).parent().unbind( "click" ).click( function(){ return qlub_menus_click_svclink( this ); } );
	$( "#qlub_menuonlybar li[rel='new'][target='page']" ).unbind( "click" ).click( function(){ qlub_menus_click_newlink( this ); } );
	$( "#qlub_menuonlybar li[rel='new'][target='disq']" ).unbind( "click" ).click( function(){ qlub_menus_click_newlink( this ) ; } );
	$( "#qlub_menuonlybar li[rel='new'][target='shareboard']" ).unbind( "click" ).click( function(){ qlub_menus_click_newlink( this ) ; } );
}

function qlub_menus_click_svclink( x ) { // à surdéfinir en mode web pour que ça ne fasse rien
	var id = $( x ).attr( "svcid" );
	var filename = $( x ).attr( "filename" );
	//if ( id == currsvcid ) return false;
	//else openservice( id, filename ) ; return false ; 
	openservice( id, filename ) ; return false ; 
}

function hasCurrrights( righttype ) {
	if( ! spacexml.currrights ) return false;
	var currobject;
	for( currobject in spacexml.currrights ) if( spacexml.currrights[currobject].name == righttype ) return true;
	return false;
}

/*
function -
function ANCIENS MENUS
*/

function qlub_mouseoverbutton( x ) {
	var t = x.getElementsByTagName( "TABLE" )[ 0 ] ;
	if ( headertabsbuttontype == "old" ) autowbtn_mover( t , { "lineHeight" : "30px", "ie6" : { "marginTop" : "3px" } } ) ;
	else {
		var td = t.getElementsByTagName( "TD" ) ;
		var x0 = td[ 0 ].getElementsByTagName( "DIV" )[ 0 ] ;
		var x1 = td[ 1 ].getElementsByTagName( "DIV" )[ 0 ] ;
		q_mouseoverbutton( x0 , "left bottom" ) ;
		q_mouseoverbutton( x1 , "right bottom" ) ;
	}
}

function qlub_mouseoutbutton( x, pos ) {
	var t = x.getElementsByTagName( "TABLE" )[ 0 ] ;
	if ( headertabsbuttontype == "old" ) autowbtn_mout( t , { lineHeight : "24px" , "ie6" : { "marginTop" : "0px" }  } ) ;
	else {
		var td = t.getElementsByTagName( "TD" ) ;
		var x0 = td[ 0 ].getElementsByTagName( "DIV" )[ 0 ] ;
		var x1 = td[ 1 ].getElementsByTagName( "DIV" )[ 0 ] ;
		q_mouseoutbutton( x0 , "left top"  ) ;
		q_mouseoutbutton( x1 , "right top"  ) ;	
	}
}

function qorp_tabsleftori() {
	return 210 ;
}

function qlub_mainmenumouseover( ee ) {//#1496
	var target = getElementFromEvent( ee ) ;
	var container = getContainer ( target ) ;
	if ( target.className && ( /divimg/.test( target.className ) ) ) target = target.parentNode ;
	if ( container && container.className && ( /qlub_menutab/.test( container.className ) ) ) {
		qlub_mouseovermenutab( container ) ; 
	} else if ( target.id && target.id == "qlub_openleftcolbutton" ) { 
		if ( ! isfirefox() )  q_mouseoverbutton( target ) ;
	} else if ( container && container.className && ( /qlub_menuitem_link/.test( container.className ) ) ) { 
		qlub_mouseovermenupane( getContainer( container.parentNode ) ) ; 
		container.className = container.className.replace( /qlub_menuitem_link(over)?/ , "qlub_menuitem_linkover" ) ;
	} else if ( container && container.className && ( /qlub_menupane_link/.test( container.className ) ) ) { //ancienne façon de faire
		qlub_mouseovermenupane( getContainer( container.parentNode ) ) ;
		q_mouseoverbutton( container , "bottom left" ) ;
		container.getElementsByTagName( "A" )[ 0 ].style.color = ( window.club_menucolorpalette ) ? club_menucolorpalette[ 1 ] : club_sitecolorpalette[ 1 ] ;
	} else if ( container && container.className && ( /qlub_menubutton/.test( container.className ) ) ) { 
		qlub_mouseovermenubutton( container ) ; 
	} else if ( container && container.className && ( /qlub_menupane/.test( container.className ) ) ) { 
		qlub_mouseovermenupane( container ) ;
	}
}

function qlub_mainmenumouseout( ee ) {
	var target = getElementFromEvent( ee ) ;
	var container = getContainer ( target ) ;
	if ( target.className && ( /divimg/.test( target.className ) ) ) target = target.parentNode ;
	if ( container && container.className && ( /qlub_menutab/.test( container.className ) ) ) {
		qlub_mouseoutmenutab( container ) ; 
	} else if ( target.id && target.id == "qlub_openleftcolbutton" ) {
		if ( ! isfirefox() ) q_mouseoutbutton( target ) ;
	} else if ( container && container.className && ( /qlub_menuitem_link/.test( container.className ) ) ) { 
		qlub_mouseoutmenupane( getContainer( container.parentNode ) ) ; 
		container.className = container.className.replace( /qlub_menuitem_link(over)?/ , "qlub_menuitem_link" ) ;
	} else if ( container && container.className && ( /qlub_menupane_link/.test( container.className ) ) ) {//ancienne façon de faire
		qlub_mouseoutmenupane( getContainer( container.parentNode ) ) ;
		q_mouseoutbutton( container , "top left" ) ;
		container.getElementsByTagName( "A" )[ 0 ].style.color="#FFF" ;
	}else if ( container && container.className && ( /qlub_menubutton/.test( container.className ) ) ) { 
		qlub_mouseoutmenubutton( container ) ; 
	}else if ( container && container.className && ( /qlub_menupane/.test( container.className ) ) ) { 
		qlub_mouseoutmenupane( container ) ;
	}
}

function qlub_mouseovermenutab( x ) {
	var td = getContainer( x , "qlub_tdmenutab(over)?" ) ;
	td.className = td.className.replace( /qlub_tdmenutab\b/ , "qlub_tdmenutabover" );
	td.style.zIndex = "1" ;
	$( ".qlub_menupane", td ).show();
}

function qlub_mouseoutmenutab( x ) {
	var td = getContainer( x , "qlub_tdmenutab(over)?" ) ;
	td.className = td.className.replace( /qlub_tdmenutabover/ , "qlub_tdmenutab" );
	td.style.zIndex = "0" ;
	$( ".qlub_menupane", td ).hide();
}

function qlub_svclinkonclick( x ) {
	openservice( x.id , x.filename ) ; return false ; 
}

function qlub_mainmenuonclick( ee ) {
	var target = getElementFromEvent( ee ) ;
	var container = getContainer( target ) ;
	if ( target.className && ( /divimg/.test( target.className ) ) ) target = target.parentNode ;
	if ( target.id && target.id == "qlub_openleftcolbutton" ) {
		if ( ! isfirefox() ) q_mouseoutbutton( target ) ;
		if ( target.className == "closed" ) qlub_closeleftcol() ;
		else qlub_openleftcol() ;
	} else if ( container && container.className && ( ( /qlub_menuitem_link/ ).test( container.className ) ) && ( ! ( /fo_tabsmenu_newlink/ ).test( container.className ) ) ) { 
		qlub_svclinkonclick(container);
	} else if ( container && container.className && ( ( /qlub_menupane_link/ ).test( container.className ) ) ) { 
		qlub_svclinkonclick(container);
	}
}

function qlub_mouseovermenubutton( x ) {
	if ( x.tagName == "TABLE" ) {
		var n = x.rows.length ;
		hideshowblock( x.rows[ n-2 ] , x.rows[ n-1 ] ) ;
	} else q_mouseoverbutton( x ) ;
	x.parentNode.style.zIndex = "1" ;
	showblock( gebcn( x.parentNode, "qlub_menupane" ) ) ;
	x.style.color = "white" ;
}

function qlub_mouseoutmenubutton( x ) {
	if ( x.tagName == "TABLE" ) {
		var n = x.rows.length ;
		hideshowblock( x.rows[ n-1 ] , x.rows[ n-2 ] ) ;
	} else q_mouseoutbutton( x ) ;
	x.parentNode.style.zIndex = "0" ;
	hideblock( gebcn( x.parentNode, "qlub_menupane" ) ) ;
	x.style.color = "" ;
}

function qlub_mouseovermenupane( x ) {
	x.style.display = "block" ;
	var b = gebcn( x.parentNode, "qlub_menutab" ) ;
	if ( b ) return qlub_mouseovermenutab( b ) ;
	var b = gebcn( x.parentNode, "qlub_menubutton" ) ;
	if ( b.tagName == "TABLE" ) {
		var n = b.rows.length ;
		hideshowblock( b.rows[ n-2 ] , b.rows[ n-1 ] ) ;
	} else q_mouseoverbutton( b ) ;
	b.parentNode.style.zIndex = "1" ;
	b.style.color = "white" ;
}

function qlub_mouseoutmenupane( x ) {
	x.style.display = "none" ;
	var b = gebcn( x.parentNode, "qlub_menutab" ) ;
	if ( b ) return qlub_mouseoutmenutab( b ) ;
	var b = gebcn( x.parentNode, "qlub_menubutton" ) ;
	if ( b.tagName == "TABLE" ) {
		var n = b.rows.length ;
		hideshowblock( b.rows[ n-1 ] , b.rows[ n-2 ] ) ;
	} else q_mouseoutbutton( b ) ;
	b.parentNode.style.zIndex = "0" ;
	b.style.color = "" ;
}

/*
function -
function EVENTS LOAD / MGR
*/

var qlub_loadevents_queue = [] ;
var qlub_loadevents_loading = false ;
function qlub_loadevents( callback, args ) {
	q_include( { urls: [ "/scriptsauto/sports_db_" + q_lang + ".js" ] } , function () {
		if ( ! clubopenselects || ! clubevents ) {
			qlub_loadevents_queue.push( [ callback, args ] ) ;
			if ( qlub_loadevents_loading ) return ;
			qlub_loadevents_loading = true ;
			document.mainform.mission.value = "getxmlwithxpath" ;
			var r =  { 
				servicename: "" , 
				xmlname: "events" , 
				xpath : "//root",
				version : 1,
				defaultxml : "<?xml version=\"1.0\" encoding=\"UTF-8\"?><root v=\"1\"><events nextid=\"0\"/><openselects/></root>" 
			};
			q_xmlajaxsubmitwithservice( "common@" + q_lang , r , qlub_loadevents_callback, [ callback, args ] ) ;
		} else qlub_loadevents_callback3( callback, args ) ;
	} ) ;
}

function qlub_loadevents_callback( x, callback, args ) {
	clubevents = $( "events", x ).get( 0 );
	clubopenselects = $( "openselects", x ).get( 0 );
	for ( var i in qlub_loadevents_queue ) {
		qlub_loadevents_callback3( qlub_loadevents_queue[ i ][ 0 ] , qlub_loadevents_queue[ i ][ 1 ] ) ;
	}
	qlub_loadevents_queue = [] ;
	qlub_loadevents_loading = false ;
}

function qlub_loadevents_callback3( callback, args ) {
	if ( ! args ) args = [ ] ; // IE
	eval( callback ).apply( null, args ) ;
}

/*
function -
function LOGIN PANEL
*/

function club_verify_login ( ee ) {
//	if ( ! isie6() && ! isie78() ) return ;
// il faut tester les navigateurs pour lesquels ça ne marche pas ou trouver une alternative sinon on déclenche 2 fois le submit et on a un message d'alert le serveur vous a mis en attente
// solution alternative = toujours valider comme ça et faire onsubmit return false
	var e = ee || window.event ;
	if ( q_keycode ( e ) == 13 ) {
		club_login_submit();
		return false;
	}
}

function club_get_logintable() {
	var s =  '<div id="club_logindiv" style="padding:5px 20px;"><table cellspacing="0" cellpadding="3" border="0" width="665"><tr><td colspan="3" id="club_logintable_prompt" style="padding-bottom:10px;"/></tr><tr><td valign="top"><form id="js_authenticate" name="js_authenticate" class="zero" method="post" action="http:/' + '/localhost/err_nocgi.html" enctype="multipart/form-data" accept-charset="utf-8" onsubmit="jsvalidateauth( handleauthresultopenhomepageorservice ) ; return false ;"><input type="submit" style="position: absolute ; left: -4000px; top: -4000px;display:none;" value="submit"/><table cellspacing="0" cellpadding="3" border="0"><tr><td colspan="2" style="padding-right:5px;height:30px;" class="club_login_bold clubcolor2">' + qlub_message[ "click2identify" ] + '</td></tr><tr><td width="120" align="right" valign="middle" class="club_login_inputtitle">' + qlub_message[ "loginname" ] + '</td><td align="left" style="height:28px ; padding-right:12px"><input name="canuserid" id="edituserid" type="text" maxlength="100" class="club_login_input" onkeyup="filterinputfm( this ) ; return true" onkeypress="club_verify_login( event );" onmousedown="q_stopPropagation( event )" tabindex="1"/></td></tr><tr><td align="right" valign="middle" class="club_login_inputtitle">' + qlub_message[ "loginpassword" ] + '</td><td align="left" style="height:28px"><input name="canpassword" id="editpassword" type="password" maxlength="100" class="club_login_input" onkeypress="club_verify_login( event );" onmousedown="q_stopPropagation( event )" tabindex="2"/></td></tr><tr><td colspan="2" align="center" valign="top" style="padding:10px;"><div class="club_login_btn" onclick="club_login_submit() ; return false" title="' + qlub_message[ "click2identify" ] + '" onmousedown="q_stopPropagation( event )">' + qlub_message[ "loginbtn" ] + '</div><div style="padding-top:4px;"><a href="#" onclick="launchforgottenpw(); return false" style="color:blue; font-size:11px">' + qlub_message[ "forgottenv2" ] + '</a><br/></div></td></tr></table></form></td><td width="1" style="border-left:solid 1px #CCC;"/><td valign="top"><table cellspacing="0" cellpadding="3" border="0"><tr><td colspan="2" style="padding-left:5px;height:30px;" class="club_login_bold clubcolor2">' + qlub_message[ "subscribe2spacev2" ] + '</td></tr><tr class="club_login_inputaccesspw"><td width="120" align="right" valign="middle" class="club_login_inputtitle">' + qlub_message[ "accesspw" ] + '</td><td align="left" style="height:28px"><input name="canaccesspw" id="editaccesspw" type="text" maxlength="100" class="club_login_input" onmousedown="q_stopPropagation( event )" tabindex="3"/></td></tr><tr class="club_login_inputaccesspw"><td colspan="2" valign="top" align="center" style="height:28px"><div style="font-size:11px;font-style:italic;width:230px;">' + qlub_message[ "accesspwmsg" ] + '</div></td></tr><tr><td colspan="2" align="center" valign="top" style="padding:10px;"><div class="club_login_btn" onclick="club_login_subscribe( ge(\'editaccesspw\').value ); return false" title="' + qlub_message[ "subscribe2spacelink" ] + '" onmousedown="q_stopPropagation( event )">' + qlub_message[ "subscribe2spacelink" ] + '</div></td></tr></table></td></tr><tr><td colspan="3" style="height:1px; border-top:solid 1px #CCC;"/></tr><tr><td align="left" class="club_login_bold clubcolor2">' + qlub_message[ "subscribe2quomodo" ] + '</td><td></td><td align="center"><div class="club_login_btn" onclick="window.open(\'http:/' + '/www.quomodo.com/inscription-sport?refererpage=loginblock\'); return false" title="' + qlub_message[ "subscribe2quomodolink" ] + '" onmousedown="q_stopPropagation( event )">' + qlub_message[ "subscribe2quomodolink" ]+ '</div></td></tr></table></div>' ;
	return s ;
}

function club_login_submit(){
	$( "#js_authenticate input[type='submit']" ).click() ;
}

function club_login_block( p, b ){
	if ( ! b && window.quomodoclient && quomodoclient.club_login_block ) return quomodoclient.club_login_block( p ) ;
	//window.location.href = web_baseurl() + "local/loginpage.html?lang=" + q_lang +"&url=" + encodeURIComponent( document.location.href ) + "&svc=" + encodeURIComponent( window.currsvcid ) + ( ( p != undefined && p.svcid ) ? ( "&wantedsvc=" + encodeURIComponent ( p.svcid ) ) : "" ) ;
	var o = { lang: q_lang, url: document.location.href } ;
	if ( window.currsvcid ) o.svc = currsvcid ;
	if ( p != undefined && p.svcid ) o.wantedsvc = p.svcid ;
	if ( p && p.wantPopup ) quomodo.fsm.popup( web_baseurl() + q_privateurl( o ) ) ;
	else quomodo.page.href( web_baseurl() + q_privateurl( o ) ) ;
	//window.location.href = web_baseurl() + q_privateurl( o ) ;
}

function club_login_subscribe( pw ){
	q_fsm_wait() ;
	var savedspaceid = document.mainform.q_space.value ;
	if ( spacexml.parentspace ) document.mainform.q_space.value = spacexml.parentspace ;
	document.mainform.mission.value = "checkaccesspw" ;
	q_ajaxsubmitwithservice( "subscribe@" + q_lang , { accesspw : pw } , function( x ){
		q_fsm_delete() ;
		if ( x.check ) {
			if ( spacexml.parentspace ) document.mainform.q_space.value = spacexml.parentspace ;
			q_form_editmember( { action : "new" , accesspw : pw } , function(){
				if ( spacexml.parentspace ) q_alert( qorp_message[ "newsubscription_on_childspace" ] ) ;
				else {
					document.mainform.mission.value = "openhomepage" ;
					q_submit() ;
				}
			} ) ;
			if ( spacexml.parentspace ) document.mainform.q_space.value = savedspaceid ;
		} else q_alert( qlub_message[ "accessbadpw" ] ) ;
	} ) ; 
	if ( spacexml.parentspace ) document.mainform.q_space.value = savedspaceid ;
}

function club_closelogin_block(){
	$( "#club_logintable" ).remove();
	$( "#q_fullscreenmask" ).hide();
}

/*
function -
function SEARCH STUFF
*/
// --> dans un fichier search.js dans /Documents/scripts
var search_submitted = false ;
var search_data = { maxhits : 20 } ;

function launchsearchinspace(){
	search_data.text = ge( "searchtext" ).value;
	document.mainform.mission.value = "searchinspace" ;
	q_ajaxsubmitwithservice( "common@" + q_lang , search_data , search_callback ) ;
}


var search_results = null ;
function search_callback( x ) {
	search_results = x ;
	window.open("/bundles/qlub/qlub_search_fr.html") ;
	return ;
	ge( "searchout_number" ).innerHTML = x.hits ;
	var div = ge( "searchout" ) ;
	if ( x.hits ) {
		table.style.display = "table" ;
		var n = table.rows.length ;
		for ( var i = 1 ; i < n ; i++ ) table.deleteRow( 1 ) ;
		for( var i = 0 ; i < x.hits ; i++ ) {
			var r = table.insertRow( i +1 ) ;
			var a = create_elem( "A" , { "href" : x.listf[ i ] } ) ;
			a.innerHTML = x.listf[ i ] ;
			r.insertCell( 0 ).appendChild( a ) ;
			var c = r.insertCell( 1 ) ;
			c.className = "search_pertinence" ;
			c.align = "right" ;
			c.innerHTML = x.listp[ i ] ;
			var c = r.insertCell( 2 ) ;
			c.className = "search_size" ;
			c.align = "center" ;
			c.innerHTML = x.sizes[ i ] ;
		}
	} else table.style.display = "none" ; 
}

function qlub_getprivatedomain(){
	return clubprivatedomain.replace( /:.*$/ , "" ) ;// replace bug plistopened
}
 
function qlub_search_submit( xform , xinput ){
	var theform = xform || "searchform" ;
	var theinput = xinput || "searchtext" ;
	if ( search_submitted ) return false ;
	search_submitted = true ;
	document[ theform ].privatedomain.value = qlub_getprivatedomain() ;
	var d = new Date() ;
	window.location.href="search?searchtext=" + encodeURIComponent( ge( theinput ).value ) + "&privatedomain=" + qlub_getprivatedomain() + "&lang=" + document[ theform ].lang.value +  "&searchentriesperpage=" + document[ theform ].searchentriesperpage.value + "&searchstartnumber=" + document[ theform ].searchstartnumber.value + "&mission=" + document[ theform ].mission.value + "&time=" + d.getTime() ;
}

/*
function -
function ARBRES ET GRILLES
*/

function qlub_preparedata_groups( x ) {
	if ( ! x ) x = spacexml.groups;
	var rslt = [];
	var itemname, itemid ;
	var i = 0 ;
	for ( var g in x ) {
		if ( g == "newgroupid" ) continue ;
		if ( g == "g-all" ) continue ;
		rslt.push( { id : g, name : x[ g ].name, type : "group" , members : x[ g ].members } ) ;
		//rslt[ g ] = rslt[ i ] ;
		i++ ;
	}
	return rslt;
}

/*
function -
function FORMULAIRES
*/

function qlub_openemailalert( type , options ) {
	if ( isiniframe() && quomodo.page.isPopup && parent.qlub_openemailalert ) return parent.qlub_openemailalert( type , options ) ;
	type = type || "emailalert" ;
	q_fsm_reveal( { 
		src : q_elems[ "emailalert" ] , 
		revealid : "qlub_emailalert" , 
		title : function () { return ( options && options.title ) || qlub_ema_message[ type ] ; } ,
		reveal_callback : function ( div , json ) { qlub_ema_reveal( div, json, type , options ) ; }
	} ) ;
}

function q_form_editmember( action , h , args , member, title ) {
	//q_include( q_elems[ "membermgr" ] , "membermgr_display" , [ action , h , args , member ] ) ;
	q_fsm_reveal( { 
		src : q_elems[ "membermgr" ] , 
		fsmsrc : "membermgr_template" , 
		title : function () { return title ? title : ( member ) ? qlub_membermgr_message[ "infos_edit" ] : qlub_membermgr_message[ "infos_new"] ; } , 
		reveal_callback : "membermgr_prepare" , 
		reveal_args : [ action , h , args , member ] ,
		delete_callback : "membermgr_delete"
	}) ;
}

function qlub_launchPopup() {
	if ( q_pagemode() == "makeweb" ) return ;
	if ( spacexml && spacexml.popups && spacexml.popups[ currsvcid ] && quomodo.fsm.addStartupPopup( spacexml.popups[ currsvcid ] ) ) openservice( spacexml.popups[ currsvcid ], null, null, true );
}


function relaunchupdates() {
	return false ;
}
function spacetabalert() {
	return false ;
}
function qsn_beginDrag( elem , ee , wantdefault ) {
	return false ;
}
function qsn_beginDragOnly( elem , ee , wantdefault ) {
	return false ;
}
function qsn_mouseover( elem , ee , wantdefault ) {
	return false ;
}
function qsn_mouseout( elem , ee , wantdefault ) {
	return false ;
}
function qsn_notechanged( id , action , callBack ) { // id = qsn_edittarget.id
	if ( /_static/.test ( qsn_thenotes[ id ].common.notekind ) ) return ;
	if ( q_isstaticpage() ) return ;
	if ( callBack === undefined ) callBack = qsn_applynoterefresh ;
	var r = { json : qsn_thenotes[ id ] } ;
	if ( qsn_userrefreshid.length ) r.userrefresh = qsn_updateuserrefresh( id ) ;
 	r.upindex = document.mainform.upindex.value ;
	document.mainform.mission.value = ( action == "notechanged" ) ? "viewnotechanged" : action ;
	q_ajaxsubmit( r , callBack ) ;
}


var bbase = false ;
try { bbase = document.getElementsByTagName("head")[0].getElementsByTagName("base").length != 0 ; } catch( err ) {} ;
if ( ! bbase ) document.write( '<base href="' + web_baseurl() + '"></base>' ) ;

var web_js_loaded = true ;

function settings_getnote() {
	for( var x in qsn_thenotes) {
		if ( ! qsn_thenotes[ x ] ) continue ;
		if ( qsn_stuffID( x ) != q_stuffmode ) continue ;
		if ( qsn_thenotes[ x ].common.notekind != "settings" ) continue ;
		return qsn_thenotes[ x ] ;
	}
	return null ;
}

function initcustomstyle() {
	var params = q_geturlparams() ;
	if ( ! params.privatedomain ) return ;
	var custombaseurl = ( ( isrealserver() ) ? "http://club.quomodo.com/" : "http://club2.quomodo.com/" ) + params.privatedomain + "/custom/" ;
	loadcss( custombaseurl + "style/qlub0.css" ) ;
	loadscript( custombaseurl + "scripts/qlub0.js" ) ;
}

function initweb_menumarker() {
	$( "#qlub_menuonlybar .qlub_tab_marker" ).remove() ; 
	qlub_menus_setmarker( $( "#qlub_menuonlybar li[svcid='" + currsvcid + "']").parents( "td.qlub_tab_td:first" ) ) ;
	qlub_menus_setmarker( $( "#qlub_menuonlybar td[svcid='" + currsvcid + "']") ) ;
}

function initweb( b ) {
	if ( ! check_qlub0( function () { initweb( b ) ; } ) ) return ;
	//$( "#bodyfooterbody table td:eq(2)" ).toggle( ( spacexml && spacexml.ads && ( spacexml.ads.enabled || ( spacexml.ads.top && spacexml.ads.top.enabled ) || ( spacexml.ads.right && spacexml.ads.right.enabled ) || ( spacexml.ads.bottom && spacexml.ads.bottom.enabled ) ) ) ? false : true ) ;// 2016-06-08 : finalement on met la même mention à tout le monde. On inventera un autre moyen pour ne pas l'afficher en cas de demande
	if ( ( window.hostinsteadclub && spacexml && spacexml.infos && spacexml.infos.unshippinghost ) || ( spacexml && spacexml.infos && spacexml.infos.unshippinghost2 ) ) {
		q_alert( qlub_message[ "givingupdomain" ].replace( /%host%/g, "http://" + window.location.host ).replace(/%privatedomain%/g, "http://club.quomodo.com/" + spacexml.infos.privatedomain ), { 
			title : qlub_message[ "givingupdomain_warning" ], 
			icon : "q_alert_warning" } 
		);
	}
	$.datepicker.setDefaults( $.datepicker.regional[ q_lang || "fr" ] );
	if ( ! b && window.client_initweb ) return client_initweb() ;
	var bPopup = quomodo && quomodo.page && quomodo.page.isPopup ;
	if ( ! bPopup ) {
		qlub_menus_events() ;
		qlub_menus_sizeinit() ;
		qlub_pagetitle_init();
		initweb_menumarker() ;
	}
	$( function () {
		qlub_launchPopup();
		quomodo.events.trigger( "finish_init.page" , { mode: "web" } ) ;
		if ( window.initfooter ) initfooter() ;
		finish_initweb() ;
		if ( ge( "qlub_free_pub" ) && ! ( /webmode/ ).test( document.body.className ) ) ge( "q_author_stuff" ).style.marginTop = "280px" ;
		web_fixoldbrowsers() ;
//		qlub_fixmarginbody() ;
		setTimeout( increment_web_counter , 2000 ) ;
		try { templatesiteprepare() ; } catch( err ) {} ;
		if ( window.launchanims ) launchanims() ;
		if ( window.logcookies ) logcookies() ;
		//q_insertGA( ( spacexml.infos && spacexml.infos.gacode ) ? spacexml.infos.gacode : "" );
	} ) ;
}

function finish_initweb() {
	qlub_loadlogin() ;
	web_qsninit() ;
	if ( window.qlub_ads_init ) qlub_ads_init() ;
}

function web_qsninit() {
	var id , h ;
	zindexmax = 0 ;
	var list = qsn_noteidssortedlist() ;
	for ( var i = 0 ; i < list.length ; i++ ) {
		id = list[ i ] ;
		if ( ! ge( id ) ) continue ;
		qsn_doupgradejson( id ) ;
		var sc = qsn_thenotes[ id ].spacedefaults.common ;
		var uc = qsn_thenotes[ id ].user.common ;
		var zindex = parseInt( ( uc.zindex != undefined ) ? uc.zindex : ( ( sc.zindex != undefined ) ? sc.zindex : "0" ) , 10 ) ;
		zindexmax = Math.max( zindex , zindexmax ) ;
		h = false ;
		try { h = qsn_handler( qsn_thenotes[ id ].common.notekind , "qsn_initforweb" , false ) ; } catch( err ) {}
		if ( ! h ) continue ;
		try { h( id ) ; } catch( err ) {}
	}
}

function writetitleandname( ) {
	writecurrsvcname() ;
}

function qlub_loadlogin( options , wantDefault ){
	if ( ! wantDefault && window.client_loadlogin ) return client_loadlogin( options ) ;
	if ( $( "#qlub_login" ).length > 0 ) return;
	if ( window.custom_loadlogin ) return custom_loadlogin();

	//$( "#qlub_login_div" ).parents( "td:first" ).remove();
	
	var searchform = ( spacexml.theme && spacexml.theme.searchform ) ? spacexml.theme.searchform : "true" ;
	var loginbtn = ( spacexml.theme && spacexml.theme.loginbtn ) ? spacexml.theme.loginbtn : "true" ;
	
	var x = $.extend( {
		searchform : "true",
		loginbtn : "true",
		facebookbutton : "false",
		twitterbutton : "false"
	} , ( ( spacexml && spacexml.theme ) || {} ) ) ;
	x = $.extend( { list: [ "facebook", "twitter", "login", "search" ], target: $( "#web_headertable_elem tr:first" ) }, options, x ) ;

	function httpsiteurl(){
		if ( spacexml && spacexml.infos ) {
			if ( spacexml.infos.host ) {
				var re = new RegExp( "/[^/]+$" ) ;
				return "http://" + spacexml.infos.host.replace( re, "" ) ;
			}
			return "http://" + window.location.host + "/" + spacexml.infos.privatedomain ;
		}
		return "http://" + ( ( window.clubhost ) ? clubhost  : window.location.host + "/" + window.clubprivatedomain ) ;
	}

/*
		if ( x.googlebutton == "true" ){
			(function() {
				var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
				po.src = 'https://apis.google.com/js/plusone.js';
				var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
			})();
			var content = '<td align="right" style="padding:0 10px;">'
			content += '<div style="width:110px;position:relative;z-index:0;white-space:nowrap"><g:plusone size="medium" annotation="none"></g:plusone></div></td>';
			$( "#currservicename" ).parents( "td:first" ).after( content );
		}
*/
	var appendbtn = {
		"facebook": { display: function() { return ( x.facebookbutton == "true" ) ; }, appendTo: function( $td ){
			//type = "button_count", "button", "icon_link", ou "icon" selon ce qu'on veut
			//content += '<div style="width:110px;position:relative;z-index:0;white-space:nowrap"><a rel="nofollow" href="http://www.facebook.com/sharer.php" type="button_count" name="fb_share">Partager</a><script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript"></script></div>';
			$td.
				attr( "align", "right" ).
				addClass( "facebookbutton" ).
				css( "padding", "0px 2px" ).
				append( '<iframe src="https:/' + '/www.facebook.com/plugins/like.php?href=' + encodeURIComponent( httpsiteurl() ) + '&amp;send=false&amp;layout=button_count&amp;width=100&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font=lucida+grande&amp;height=21&amp;appId=248280301880468" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:100px; height:21px;" allowTransparency="true"></iframe>' ) ;
		} },
		"twitter": { display: function() { return ( x.twitterbutton == "true" ) ; }, appendTo: function( $td ){
			//data-count = "horizontal" ou "none"
			$td.
				attr( "align", "right" ).
				addClass( "twitterbutton" ).
				css( "padding", "0px 2px" ).
				append( '<div style="width:110px;position:relative;z-index:0;white-space:nowrap"><a rel="nofollow" href="http://twitter.com/share" class="twitter-share-button" data-count="horizontal" data-lang="fr">Tweeter</a><script type="text/javascript" src="https://platform.twitter.com/widgets.js"></script></div>' ) ;
		} },
		"login": { display: function() { return ( ! window.custom_nologinbutton && x.loginbtn != "false" ) ; }, appendTo: function( $td ){
			$td.
				attr( "width", "1%" ).
				addClass( "loginbutton" ).
				html( create_button( { 
					icon : "adminmenu sprite_key_16" , 
					label : ( window.client_qlub_message && client_qlub_message[ "login" ] ) ? client_qlub_message[ "login" ] : qlub_message[ "login" ], 
					notext : window.client_login_notext , 
					title : qlub_message[ "signin" ] ,
					onclick : function(){ 
						// 11_02_24 - Bug lié à la version Beta d'IE9
						//if ( isIE_9 ) return q_alert( "Impossible de vous connecter. <br/><br/>Vous utilisez une <b>version beta d'Internet Explorer 9</b>. L'utilisation de cette version est susceptible d'endommager vos pages. <br/><br/>Merci d'utiliser un autre navigateur tel que Firefox, Internet Explorer 8, Chrome..." );
						club_login_block();
					}
				} ) ) ;
		} },
		"search": { display: function() { return ( x.searchform == "true" ) ; }, appendTo: function( $td ){
			try { $( "#searchtext" ).val( searchres_json.searchtext || "" ) ; } catch( err ){}
			$td.
				attr( "width", "1%" ).
				addClass( "searchbutton" ).
				html( create_button( { 
					icon : "adminmenu sprite_search_16" , 
					html : ( window.client_search_notext ) ? null : '<form id="searchform" name="searchform" class="zero" method="post" action="rien" enctype="multipart/form-data" accept-charset="utf-8" style="margin: 0; padding: 0" onsubmit="qlub_search_submit() ; return false;"><input type="text" name="searchtext" id="searchtext" maxlength="200" onfocus="focusoptional(this, \'Rechercher...\');" onblur="bluroptional(this,\'Rechercher...\');" value="Rechercher..." style="color:#AAA;position:relative;top:1px;height:15px;" onmousedown="q_stopPropagation( event );" onclick="q_stopPropagation( event );"/><input name="q_method" value="cgi" type="hidden" /><input name="mission" value="search" type="hidden" /><input name="service" value="search@fr" type="hidden" /><input name="lang" value="fr" type="hidden" /><input name="privatedomain" value="" type="hidden" /><input name="searchentriesperpage" value="50" type="hidden" /><input name="searchstartnumber" value="0" type="hidden" /></form>',
					notext : window.client_search_notext , 
					onclick : function(){ 
						if ( window.client_search_notext ) window.location.href = "search.html" ;
						else qlub_search_submit() ;
					}
				} ) ) ;
		} }
	} ;
	for ( var i = 0 ; i < x.list.length ; i++ ) {
		var btn = appendbtn[ x.list[ i ] ] ;
		if ( ! btn.display() ) continue ;
		btn.appendTo( x.target.append( '<td width="1%">' ).find( "td:last" ) ) ;
	}
	if ( ! options || ! options.target ) $( "#web_headertable_elem tr:first > td:last" ).css( "padding-right", ( window.quomodoclient && quomodoclient.titleBarPaddingRight ) || "10px" ) ;

	if ( window.qlub_login_nosubscribe ) return $( "#qlub_login_notsubscribed" ).remove();
	try { $( "#qlub_login_notsubscribed" ).attr( "href", "default_index.html?step=subscribe&backurl=" + window.location.pathname ); } catch( err ) {}
}

function q_spacebaseurl( ownerid ) {
	return web_baseurl() ;
	var re = new RegExp( "[^/]*$" ) ;
	return window.location.href.replace( re , "" ) ;
}

function q_fsbaseurl( ownerid, withhttp, relativeurl ) {
	var re = new RegExp( "uploads/(shared/|images/|videos/)?[0-9]+/", "i" ) ;
	if ( ownerid == "quomodo" || ( relativeurl && ! re.test( relativeurl ) ) || ! spacexml || ! spacexml.fileserver ) return web_baseurl() ;
	return window.location.protocol + "//" + spacexml.fileserver + "/" + spacexml.id.replace( /-.*/, "" ) + "/" ;
}

function q_svcisweb( svcid ) {
	if ( ! window.web_svctopages ) return false ;
	for ( var i in web_svctopages ) if ( svcid == web_svctopages[ i ].id ) return ( web_svctopages[ i ].name ) ? true : false ;
	return false ;
}

function q_web_svcweblink( svc ) {
	var splittedsvc = svc.split( "/" ) ;
	if ( splittedsvc.length > 1 ) {
		if ( ! window.webqorp_svctopages || ! webqorp_svctopages[ splittedsvc[ 0 ] ] ) return null ;
		function getsubhost( pseudohost ){
			var re = new RegExp( "^[^/]+(/)?([^/]+)?$" ) ;
			return pseudohost.replace( /club[0-9]+\.quomodo\.com\// , "" ).replace( re , "$2$1" ) ;
		}
		var svcs = webqorp_svctopages[ splittedsvc[ 0 ] ].services ;
		for ( var i = 0 ; i < svcs.length ; i++ ) if ( splittedsvc[ 1 ] == svcs[ i ].id && svcs[ i ].name ) return ( ( getsubhost( spacexml.infos.host || spacexml.infos.privatedomain ) == "" ) ? "" : "../" ) + getsubhost( webqorp_svctopages[ splittedsvc[ 0 ] ].host || webqorp_svctopages[ splittedsvc[ 0 ] ].privatedomain ) + svcs[ i ].name ;
		return null ;
	}
	for ( var i in web_svctopages ) if ( svc == web_svctopages[ i ].id && web_svctopages[ i ].name ) return web_svctopages[ i ].name ;
	var weblink = q_spaceid2svcinfo( svc ) ;
	return weblink ;
}
function openservice( svc , filename1 , forcedefault, nologinblock ) {
	if ( $( "#accept-cookies" ).length > 0 ) q_acceptCookies( true ) ;
	if ( ! forcedefault && window.client_openservice ) return client_openservice( svc , filename1 ) ;
	var spaceidRe = new RegExp( "^[0-9a-fA-F-]+$" ) ;
	var popupRe = new RegExp( "^popup:" ) ;
	var wantPopup = ( popupRe ).test( svc ) ;
	svc = svc.replace( popupRe , "" ) ;
	function gethref(){
		if ( /#artema(page|disq)/.test( svc ) ) {
			if ( window.web_svctopages ) {
				var weblink = q_web_svcweblink( svc ) ;
				if ( weblink ) return { status: true, href: web_baseurl() + weblink.replace( /\.html$/ , "" ) + ".html" } ;
				return { title : qlub_message["restrictedpage_title"], message : qlub_message[ "restrictedpage_message" ] , svcid : svc } ;
			} else return { href: web_baseurl() + "__src/" + svc.replace( /#([0-9]+)#artemapage@intl/ , "_$1_page.html" ) } ;
		} else if ( ( spaceidRe ).test( svc ) ) {
			var weblink = q_web_svcweblink( svc ) ;
			if ( weblink && ! weblink.noaccess ) return { status: true, href: web_baseurl() + weblink.weblink.replace( /\/?$/, "/index.html" ) } ;// 2013-12-30 : ajout de index.html en cas de pré-home de portail
			return { title : qlub_message["restrictedpage_title"], message : qlub_message[ "restrictedpage_message" ] , svcid : svc } ;
		} else return { title : qlub_message["restrictedpage_title"] , message : qlub_message[ "restrictedpage_message" ] , svcid : svc } ;
	}
	var href = gethref() ;
	if ( href.href ) {
		if ( wantPopup ) {
			quomodo.fsm.popup( href.href ) ;
			return false ;
		}
		quomodo.page.href( href.href ) ;
		return ( href.status ) ? true : false ;
	}
	if ( ! nologinblock ) club_login_block( $.extend( { wantPopup: wantPopup }, href ) ) ;
	return false ;
}

function wsg_windowopen( elem ) {
	var x = decodeURI( elem.href ) ;
	var relativeurl = x.replace( /^.*uploads\// , "uploads/" ) ;
	window.open( q_fsbaseurl( memberid, null, relativeurl ) + relativeurl ) ; 
}

function wsg_openfile( elem ) {
	return q_openfile( elem ) ;
}

function mhp_upload( f ) {
	var url = q_fsbaseurl( memberid ) + f.replace( /&apos;/g , "'" ) ;
	window.open( url ) ;
}

function handlenewuser ( x ) {
	if ( document.mainform.sessionid.value != "" ) return ;
	var sid = x [ "q_newsessionid" ] ;
	if ( x.authresult ) {
		document.mainform.sessionid.value = sid ;
		return ;
	}
	if ( ! sid ) return ;
	document.mainform.sessionid.value = sid ;
	document.mainform[ "q_space" ].value = ( x[ "q_newspace" ] ) ? x[ "q_newspace" ] : ( ( document.mainform[ "q_space" ].value ) ? document.mainform[ "q_space" ].value : sid ) ;
	if ( document.cookie ) {
		if ( ( ! getcookie( "uid" ) ) || ( getcookie( "uid" ) != "member" ) ) {
			setcookie( "uid", sid, 15 ) ;
			setcookie( "known", true, 60000 ) ;
		}
	}
}

function web_fixoldbrowsers() {
	if ( ! isie55() ) return ;
	var links = document.body.getElementsByTagName("A") ;
	var a ;
	for ( var i = 0 ; i < links.length ; i++ ) {
		a = links[ i ] ;
		if ( ! a.href ) continue ;
		if ( ! ( /_page($|\?)/.test( a.href ) ) ) continue ;
		a.href = a.href.replace( /_page($|\?)/ , "_page.html$1" ) ;
	}
}

function increment_web_counter() {
	if ( ! window.clubprivatedomain ) return ;
	//count_ajaxsubmit( { mission : "increment" , privatedomain : clubprivatedomain , page : currsvcid.replace( /[^0-9]/g , "" ) } ) ;
	var currentcounters = [ currsvcid ] ;
	if ( q_pagemode() == "view" || q_pagemode() == "web" ) {
		$( "#qlub_topads div[slotid], #qlub_ads_addright_elem div[slotid], #qlub_bottomads div[slotid]" ).each( function () { 		
			currentcounters.push( "#" + $( this ).attr( "slotid" ).replace( "s", "") + "#adsview@intl" ) ;
		} );
	}
	xq_ajaxcount( "binincrement", currentcounters );
}

function count_ajaxsubmit( q_data , callBackFunction , params ) {
	var req = null;
	if ( window.XMLHttpRequest ) {
 		req = new XMLHttpRequest() ;
		if ( req.overrideMimeType )  { req.overrideMimeType( 'text/xml' ) ; }
	} else if ( window.ActiveXObject ) {
		try { req = new ActiveXObject ( "Msxml2.XMLHTTP" ) ; } 
		catch (e )  {
			try { req = new ActiveXObject ( "Microsoft.XMLHTTP" ) ; } 
			catch (e )  {}
		}
	}
	req.open ( "POST" , "/cgi-bin/cgicounter" , true ) ;
	req.setRequestHeader ( "Content-type", "application/x-www-form-urlencoded" ) ; 
	req.onreadystatechange = function() {
		if ( req.readyState != 4 ) return ;
		if ( req.status == undefined ) return badrequest() ;
		if ( req.status == 200 ) req = null ;
	} ;
	req.send( reqAddData ( "data" , q_toplist ( q_data ) ) ) ;
}

function templatesiteprepare() {
	if ( ! window.opener || window.opener.closed || ! window.opener.opentemplatesite ) return ;
	var templatesitehref = window.opener.opentemplatesite( window ) ;
	var re = new RegExp ( "^" + templatesitehref , "i" ) ;
	if ( ! ( re.test( window.location.href ) ) ) return ;
	window.qlub_editsitemap_newpagefromsite = function () {
		var mainw = window.opener ;
		if ( ! mainw || mainw.closed ) return ;
		var tab = { id: "info" , svcid: "#artemapage@intl" , newaccess : "admin" , "newh" : "qlub_newinfo" };
		var servicename = mainw.tabs_message[ tab.id + "_name"  ] ;
		var s = mainw.qorp_message[ "newnameprompt" ] ; qprompt_newpage( s.replace ( /%s/ , servicename ) , mainw.defaultpagename( servicename ) , "qlub_editsitemap_newpagefromsite_promptdone" , [ tab , { q_space : document.mainform.q_space.value , currsvcid : currsvcid } ] ) ;
	} ;
	window.qlub_editsitemap_newpagefromsite_promptdone = function ( newname , tab , templatedata ) {
//		rm( gebcn( ge( "qlub_header" ) , "importerpane" ) ) ;
		var mainw = window.opener ;
		if ( ! mainw || mainw.closed ) return ;
		var div = gebcn( ge( "qlub_header" ) , "qlub_header_content" ) ;
		mainw.qlub_editsitemap_newpage_promptdone( newname , tab , templatedata ) ;
	} ;
}

//#1625
function qlub_webclickinmenu( elem , ee ) {
	window.location.href = gebtn ( elem , "A" ).href ;
}

var broll_message = {
"defaultimagesourceurl" : "Coller ici l'adresse de l'image qui peut être fixe (graphique, photo...) ou animée (webcam...)." ,
"newnoteprompt" : "cliquez ici pour écrire votre message, puis cliquez sur ok" ,
"notextscroll" : "( pas de texte )" ,
"newreplyprompt" : "cliquez ici pour rédiger une nouvelle réponse" ,
"pclocalnotvalidate" : "Vous n'avez pas validé le choix de votre image.\n\nCelle-ci ne va pas être enregistrée." ,
"bagimgextension" : "Le fichier image que vous avez choisi n'a pas la bonne extension.\n\nVeuillez choisir un autre fichier." ,
"fermer" : "fermer" ,
"validateimage" : "Veuillez valider l'image" ,
"inviteusername" : "Veuillez indiquer un nom pour signer votre message." ,
"plug" : "Texte déroulant_Mettez vos messages en valeur en les faisant défiler.",
"selectanimage" : "Veuillez choisir une image sur votre ordinateur:" ,
"uploadtitlenew" : "Affichez une image dans la note" ,
"uploadtitleedit" : "Changez l'image à afficher" ,
"tabscroll" : "Défilement " ,
"broll_direction" : "Direction" ,
"broll_direction0" : "vers le haut" ,
"broll_direction1" : "vers la droite" ,
"broll_direction2" : "vers le bas" ,
"broll_direction3" : "vers la gauche" ,
"broll_speed" : "Vitesse" ,
"broll_speed0" : "lent" ,
"broll_speed1" : "normal" ,
"broll_speed2" : "rapide" ,
"broll_speed3" : "très rapide" ,
"desc" : "(...)"
} ;

var sky = ["Partagez des images et des messages dans un espace Quomodo !" ,
"Chaque membre peut supprimer une note ou une réponse" ,
"Chaque membre peut répondre à un message" ,
"Chaque membre peut modifier les messages ou les réponses qu\'il a rédigées" ];

var broll_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "broll_msgs_fr_js_loaded" ) ;


var broll_json_template = { version: 4 , text : "" , textheight : "200" , textsize : "13" , textfont : "-1" , textstyles: { bold : "false" , uppercase : "false" , italic : "false" , align:"0"} , color : "rgb(100%,100%,100%)" , textmargin: 2 , textcolor : -1 , showsignature: "false" , direction : "0" , speed : "1", header : { display : "true" , text : "" , icon : "" } } ;

function broll_upgradejson( r ) {
	if ( ! r.version ) r.version = 1 ;
	if ( r.version == broll_json_template.version ) return r ;
	if ( r.version < 2 ) r = broll_upgradejsontov2( r ) ;
	if ( r.version < 3 ) r = broll_upgradejsontov3( r ) ;
	if ( r.version < 4 ) r = broll_upgradejsontov4( r ) ;
	r.version = broll_json_template.version ;
	return r ;
}
function broll_upgradejsontov2( r ) {
	return r ;
}
function broll_upgradejsontov3( r ) {
	r.color = "1" ;
	return r ;
}

function broll_upgradejsontov4( r ) {
	r[ "textstyles" ] = { bold : String( r.textbold!=0 ) , uppercase : "false" , italic : String( r.textitalic!=0 ) , align: ( r.textcenter == "1" ) ? "2" : "0" } ;
	delete r.textbold ;
	delete r.textcenter ;
	delete r.textitalic ;
	r.textcolor = -1 ;
	r.showsignature = "false" ;
	r.direction = "0" ;
	r.speed = "0" ;
	r.textmargin = 2 ;
	r.textsize = [ 9 , 11 , 14 ][ parseInt( r.textsize, 10 ) - 1 ] ;
	if ( r.noteheight == "1" ) r.textheight = "85" ;
	else if ( r.noteheight == "2" ) r.textheight = "175" ;
	else if ( r.noteheight == "3" ) r.textheight = "265" ;
	delete r.noteheight ;
	r.header = { display : "false" /*, color: "0"*/, text : "" , icon : "pushpin" } ;
	return r ; 
}

var broll_timers =[] ;
var broll_scroll_suspended = false ;
var broll_scroll_clock = 16 ;
var broll_nominal_speed = 1/50/13 ; // en vitesse normal verticale, 1 pixel en 50ms pour une taille de 13px

function broll_initforweb( id ) {
	q_addwindowblurhandlers( "broll_pauseall" ) ;
	q_addwindowfocushandlers( "broll_resumeall" ) ;
	broll_preparescroll( id ) ; // sinon ça ne fait qu'un tour sous firefox et ie
	broll_launch( id ) ; // je ne comprends pas comment ça démarre sur aubervilliers sans cette ligne
	ge( id ).onmouseover = function() { this.paused = true ;} ;
	ge( id ).onmouseout = function() { this.paused = false ; this.lasttime = new Date().getTime() ; broll_run( this ) ; } ;
}

function broll_launch ( id ) { 
	broll_init_note ( id ) ;
	if ( q_pagemode() == "makeweb" ) return broll_fakedisplay( id ) ;
	var d = new Date() ;
	ge( id ).lasttime = d.getTime() ;
	if ( ! broll_timers[ id ].timer ) broll_timers[ id ].timer = setTimeout ( function() { broll_run ( ge( id ) ) ; } , broll_scroll_clock ) ; 
}

function broll_init_note (noteid) {
	if ( broll_timers[noteid] ) broll_cleartimer( noteid ) ;
	else broll_timers[noteid] = { timer: null, launcher: null , accelere: 0, sens: 1 } ;
}

function broll_preparescroll( noteid ) {
	var elem = gebcn( noteid , "text" ) ;
	var r = qsn_thenotes[ noteid ] ;
	elem.parentNode.h = elem.parentNode.offsetHeight + "px" ;
	elem.style.whiteSpace = "nowrap" ;
	var table = gebcn( noteid , "broll_measuretext" ) ;
	/* 2014-04-08 : sur WebKit le body prend la "largeur" du td mais le hideblock ne l'annule pas.
	var td = table.getElementsByTagName( "TD" )[ 0 ] ;
	$( td ).html( elem.innerHTML ) ;
	showblock( table ) ;
	elem.w = td.offsetWidth ;
	hideblock( table ) ;*/
	var $tmp = $( table ).clone( true ) ;
	$tmp.css( "position", "absolute" ).appendTo( "body" ).show() ;
	$tmp.addClass( "default_font" ) ;
	var $td = $tmp.find( "td:eq(0)" ) ;	$td.html( elem.innerHTML ) ;
	elem.w = $td.width() ;
	$tmp.remove() ;
	
	if ( r.direction == "1" ||  r.direction == "3" ) {
		elem.style.whiteSpace = "nowrap" ;
		elem.parentNode.style.height = Math.round( parseInt( r.textsize , 10 ) * 1.2 ) + "px" ;
		elem.parentNode.style.lineHeight = Math.round( parseInt( r.textsize , 10 ) * 1.2 )  + "px" ;
		$( elem ).css( "width", "" ) ;
	} else {
		elem.style.whiteSpace = "normal" ;
		elem.parentNode.style.height =  elem.parentNode.h ;
	}
	if ( r.direction == 0 ) elem.style.top = ( elem.parentNode.offsetHeight - elem.offsetHeight ) + "px" ;
	if ( r.direction == 3 ) elem.style.left = ( elem.parentNode.offsetWidth - 4 ) + "px" ;
	var div = ge( noteid ) ;
	div.speed = broll_pixelspeed( r ) ;
}

function broll_run( div ) {
	if ( broll_scroll_suspended ) return ;
	if ( isremoved( div ) ) return broll_cleartimer( div && div.id ) ;
	var id = div.id ;
	if ( ! id || ! qsn_thenotes[ id ] ) return ;
	if ( div.paused ) return ;
	var r = qsn_thenotes[ id ] ;
	if ( ! r ) return broll_cleartimer( id ) ;
	if ( qsn_currstate != "edit" && ! q_fsmpresent() ) {
		var value = r.direction ;
		var div = ge( id ) ;
		var elem = gebcn( div , "text" ) ;
		var v = parseInt( r.speed , 10 ) + 1 ;
		//vh : pour éviter de saccader, on déplace toujours de 1px. On se cale donc sur la vitesse la plus rapide pour le timer (broll_scroll_clock) et on saute des tours en fonction de la vitesse.
		var d = new Date() ;
		var now = d.getTime() ;
		var timeinterval = ( div.lasttime ) ? ( now - div.lasttime ) : broll_scroll_clock ;
		var pixelgap = Math.round( div.speed * timeinterval ) ;
		if ( pixelgap != 0 ) {
			div.lasttime = now ;
			switch( value ) {
				case "0" : 
					broll_vmove( elem , -pixelgap ) ; 
					break ;
				case "1" :
					broll_hmove( elem , pixelgap ) ; 
					break ;
				case "2" :
					broll_vmove( elem , pixelgap ) ; 
					break ;
				case "3" :
					broll_hmove( elem , - pixelgap ) ; 
					break ;
			}
		}
	}
	setTimeout ( function() { broll_run ( div ) ; } , broll_scroll_clock ) ;
}

function broll_hmove( elem , value ){
	if ( qsn_currstate == "edit" ) return ; 
	var x = elem.offsetLeft + value ;
	var welem = parseInt( elem.w , 10 ) ;
	var wparent = elem.parentNode.offsetWidth ;
	if ( value > 0 ) {
		if ( x > wparent ) x = - welem - 5 ;
	} else {
		if ( x + welem < 0 ) x = wparent + 5 ;
	}
	elem.style.left = x + "px" ;
}

function broll_vmove( elem , value ){
	if ( qsn_currstate == "edit" ) return ; 
	var y = elem.offsetTop + value ;
	var helem = elem.offsetHeight ;
	var hparent = elem.parentNode.offsetHeight ;
	if ( value > 0 ) {
		if ( y > hparent ) y = - helem - 5 ;
	} else {
		if ( y + helem < 0 ) y = hparent + 5 ;
	}
	elem.style.top = y + "px" ;
}

function broll_pixelspeed( r ) {
	var v = parseInt( r.speed , 10 ) + 1 ;
	var d = ( parseInt( r.direction , 10 ) % 2 ) + 1 ; // vaut 1 si défilement vertical, 2 si horizontal
	var s = parseInt( r.textsize , 10 ) ;
	if ( s < 10 ) s = 10 ;
	return d * v * ( ( d == 1 ) ? 13 : s ) * broll_nominal_speed ;
}

function broll_cleartimer( id ) {
	if ( ! id ) return ;
	if( ! broll_timers[ id ] ) return false ;
	if ( broll_timers[ id ].timer ) clearInterval( broll_timers[ id ].timer ) ;
	broll_timers[ id ].timer = null ;
}

function broll_pauseall() {
	broll_scroll_suspended = true ;
	return ;
	for ( var id in broll_timers ) {
		broll_cleartimer( id ) ;
		broll_clearlauncher( id ) ;
	}
}

function broll_resumeall() {
	broll_scroll_suspended = false ;
	for ( var id in broll_timers ) if ( ge( id ) ) broll_launch( id ) ;
}

function broll_clearlauncher( id ) {
	if( ! broll_timers[ id ] ) return false ;
	if ( broll_timers[ id ].launcher ) clearTimeout( broll_timers[ id ].launcher ) ;
	broll_timers[ id ].launcher = null ;
}


var clock_message = {
"plug" : "Clock_Affichez simplement l'heure de manière graphique sur votre page.",
"displayDate" : "Afficher la date" ,
"displayTime" : "Afficher l'heure" ,
"selectanimage" : "Veuillez choisir une image sur votre ordinateur:" ,
"uploadtitle" : "Nouvelle image de fond", 
"taboptions" : "Options d'affichage", 
"displaydate" : "Afficher la date",
"displayseconds" : "Afficher les secondes",
"tabimage" : "Image de fond", 
"image" : "Image : ",
"otherimage" : "une autre image"
} ;

var clock_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "clock_msgs_fr_js_loaded" ) ;


var clock_json_template = { version : 2, text : "", color : "-1" , header : { display: "false", text : "", icon : ""  } , textstyles: { font : "-1" , bold : "false" , italic : "false" }, textcolor : "1",  displaydate : "true" , displayseconds : "false" , img : { kind : "icon", src : "bckg/globe" } } ;

function clock_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == clock_json_template.version ) ) return r ;
	if ( r.version<2 ) clock_upgradejsontov2( r ) ;
	r.version = clock_json_template.version;
	return r ;
}

function clock_upgradejsontov2( r ) {
	if ( ! r.color ) r.color = clock_json_template.color;
	if ( ! r.header ) r.header = clock_json_template.header;
	if ( ! r.textstyles ) r.textstyles = q_cloneObject( clock_json_template.textstyles ) ;
	r.textstyles.font = ( { "-1" : "0", "1" : "0" , "2" : "1", "3" : "3" } )[ r.textfont ];
	delete r.textfont;
	r.displaydate = ( r.displaydate == "1" ) ? "true" : "false";
	r.displayseconds = ( r.displayseconds == "1" ) ? "true" : "false";
	return r ;
}

var clock_timer = { timer : 0 , ids : [ ] } ;

function clock_initforweb( id ) {
	//q_waitimgloaded( $( "#" + id + " .clock_bckgimage img:eq(0)" ).attr( "src" ) , function( imgSize ) { clock_renderdisplayseconds( id , imgSize ) } , [] , true ) ;
	clock_renderdisplayseconds( id ) ;
}

function clock_renderdisplayseconds( noteid ) {
	var div = ge( noteid ) ;
	if ( ! div ) return ;
	clock_rendertextsize( div ) ;
	if ( qsn_currstate != "edit" ) quomodo.events.addTimerListener( "clocktimer" , function( eventData , eventName ) { clock_refreshdateandtime( this , eventData.now ) } , div ) ;
	else clock_refreshdateandtime( div ) ;
}

function clock_rendertextsize( div, imgSize ) {
	var r = qsn_thenotes[ div.id ] ;
	var img = gebcn( div, "clock_bckgimage" ) ;
	var h = ( qsn_thenotes[ div.id ].displayseconds == "true" ) ? 5 : 3.5 ;
	var wimg = img.offsetWidth ;//2011-09-16, vh : la taille est fixée à la largeur de la note
	var himg = wimg ;
	if ( imgSize ) himg = Math.round( imgSize.height * wimg / imgSize.width ) ;// on calcule la hauteur à partir des dimensions originales
	else if ( r.img.src && r.img.kind != "icon" ) {
		if ( ! r.img.h ) return q_waitimgloaded( $( "#" + div.id + " .clock_bckgimage img:eq(0)" ).attr( "src" ) , function( imgSize ) { clock_rendertextsize( div , imgSize ) } , [] , true ) ;
		himg = Math.round( r.img.h * wimg / r.img.w ) ;// on calcule la hauteur à partir des dimensions originales
	}
	var w = Math.floor( wimg / h ) ;
	var ddate = gebcn( div, "clock_date" ) ;
	var dtime = gebcn( div, "clock_time" ) ;
	dtime.style.fontSize = w + "px" ;
	var x = ( r.displayseconds == "true" ) ? 2 : 3 ;
	ddate.style.fontSize = Math.floor( w/x ) + "px" ;
	gebcn( div , "clock_table" ).style.height = himg + "px" ;
}

function clock_refreshdateandtime( div , thedate ) {// date, optionnel
	var t = thedate || new Date() ;
	var secInteger = t.getSeconds() ;
	var sec = twodigs ( secInteger ) ;
	var sep1 = ( secInteger % 2 ) ? ":" : " " ;
	var sDate = twodigs ( t.getDate() ) + "." + twodigs ( t.getMonth() + 1 ) + "." + t.getFullYear() ;
	var sTime = twodigs ( t.getHours() ) + sep1 + twodigs ( t.getMinutes() ) ;
	var id = div.id ;
	var r = qsn_thenotes[ id ] ;
	gebcn( div, "clock_date" ).innerHTML = sDate ;
	var spans = gebcn( div, "clock_time" ).getElementsByTagName("SPAN") ;
	if ( spans.length ) {
		spans[ 0 ].innerHTML = twodigs ( t.getHours() ) ;
		spans[ 2 ].innerHTML = twodigs ( t.getMinutes() ) ;
		spans[ 4 ].innerHTML = sec ;
		spans[ 1 ].style.visibility = ( secInteger % 2 ) ? "visible" : "hidden" ;
		spans[ 3 ].style.visibility = ( secInteger % 2 ) ? "visible" : "hidden" ;
		spans[ 3 ].style.display = ( r && r.displayseconds == "true" ) ? "inline" : "none" ;			
		spans[ 4 ].style.display = ( r && r.displayseconds == "true" ) ? "inline" : "none" ;	
	} else {
		gebcn( div, "clock_time" ).innerHTML = sTime + ( ( r && r.displayseconds == "true" ) ? sep1 + sec : "" ) ;
	}	
}


var calendar_message = {
"plug" : "Calendrier_Visualisez les événements du club" ,
"desc" : "(...)",
"today" : "aujourd'hui" ,
"ok" : "ok" ,

"tabstyle" : "Style" ,
"taboptions" : "Options du calendrier" , 

"size" : "Taille du calendrier" ,
"size0" : "très petit" , 
"size1" : "petit" , 
"size2" : "moyen" , 
"size3" : "grand" , 
"size4" : "très grand" ,

"chooseeventstype" : "Sélectionner",
"eventstype" : "Événements à afficher",
"birthdays" : "Les anniversaires" ,
"birthday" : "Anniversaire", 
"generals" : "Les événements généraux" ,
"general" : "Événement",
"event" : "Événement",
"matchs" : "Les matchs" ,
"match" : "Match",

"localteam" : "les matchs des équipes" ,
"category" : "les événements généraux",

"preview" : "Afficher un résumé des événements de la journée" ,
"preview_title" : "Aperçu", 
"eventscolor" : "Chaque journée prend la couleur de ses événements", 
"eventscolor_title" : "Couleurs des événements", 
"eventslist" : "Mode Liste",
"eventslist_title" : "Afficher la liste des événements",

"month_1" : "Jan",
"month_2" : "Fev",
"month_3" : "Mar",
"month_4" : "Avr",
"month_5" : "Mai",
"month_6" : "Juin",
"month_7" : "Jui",
"month_8" : "Aou",
"month_9" : "Sep",
"month_10" : "Oct",
"month_11" : "Nov",
"month_12" : "Dec",

"birthdayhtml" : "Anniversaire de : ",
"step" : "Match n°",
"time" : "Heure :",
"comment" : "Commentaire :",
"competition" : "Competition :",
"location" : "Lieu :", 
"home" : "(match à domicile)",
"nothome" : "(match à l'extérieur)"
} ;

var calendar_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "calendar_msgs_fr_js_loaded" ) ;


var calendar_json_template = { version: 5 ,  color : "c1" , textfont : "-1" , margin : 2 , eventstype : [ { kind : "match" } , { kind : "general" } , { kind : "birthday" } ], preview : "false", eventscolor : "true", displaylist : "false", header : { display: "true", text : "", icon: "false" }, template: "aqua" } ;

var calendar_colordesc = {
	"qmc3" : function( r ){
		if ( r.header.icon == "false" ) return "" ;
		return "/services/calendar/images/calendar48.png";
	}
} ; 
var calendar_thsizes = [ "9", "12", "15", "20" , "26" ] ;  // tailles de police des titres
var calendar_thheights = [ "12", "24", "36", "48" , "60" ] ; // heuteur des titres
var calendar_textsize = [ "11", "16", "20", "28" , "40" ] ; // taille de police des cases
var calendar_sizes = [ 20, 40, 60, 80, 100 ]; // taille des cases

var calendar_textdesc = { "qtxt1" : { "font" : "textfont" }, "qtxt2" : { "padding" : "margin", "margin" : "margin" } } ;


function calendar_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == calendar_json_template.version ) ) return r ;
	if ( r.version<2 ) r = calendar_upgradejsontov2( r ) ;
	if ( r.version<3 ) r = calendar_upgradejsontov3( r ) ;
	if ( r.version<4 ) r = calendar_upgradejsontov4( r ) ;
	if ( r.version<5 ) r = calendar_upgradejsontov5( r ) ;
	r.version = calendar_json_template.version;
	return r ;
}

function calendar_upgradejsontov2( r ) {
	if ( ! r.eventscolor ) r.eventscolor = "false" ;
	if ( ! r.preview ) r.preview = "false" ;
	if ( r.tempevents ) delete r.tempevents;
	if ( r.defaultday ) delete r.defaultday;
	if ( r.year ) delete r.year;
	if ( r.month ) delete r.month;
	return r ;
}

function calendar_upgradejsontov3( r ) {
	if ( ! r.displaylist ) r.displaylist = "false" ;
	return r ;
}

function calendar_upgradejsontov4( r ) {
	var e = [] ;
	if ( r.eventstype.matchs.display == "true" ) e.push( { kind : "match" } );
	if ( r.eventstype.birthdays.display == "true" ) e.push( { kind : "birthday" } );
	if ( r.eventstype.general.display == "true" ) e.push( { kind : "general" } );
	r.eventstype = e;
	return r ;
}

function calendar_upgradejsontov5( r ) {
	var w = calendar_sizes[ parseInt( r.size, 10 ) ] * 7 ;
	r.spacedefaults.common.width = w + "px" ;
	r.user.common.width = w + "px" ;
	delete r.size ;
	return r ;
}

/*
function -
function RENDER
*/

function calendar_renderhtml( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[ noteid ] ;

	if ( r.template == "flat-white" ) {
		div.className += " flat-white" ;
		$( "table.calendar_month:eq(0), .calendar_eventslist:eq(0)", div ).removeClass( "bd_bw" ) ;
	}
	
	qsn_container_renderhtml( div , r ) ;
	qsn_settextproperties( noteid ) ;
	qsn_setcolors( noteid ) ;
	
	$( ".calendar_loading:eq(0)", div ).show();
	$( ".calendar_month:eq(0), .calendar_eventslist:eq(0)", div ).hide();
	//qlub_loadevents( "calendar_makevolatileevents", [ noteid , "calendar_renderhtml_callback" ] ) ;
	if ( window.quomodoclient && quomodoclient.buildingmod ) $( ".calendar_chooseevents", div ).hide() ;
	
	div.resized = function( elem, w ) {
		$( div ).data( "w", w ) ;
		calendar_rendersize( div , r );
	} ;
	
	div.growingupdone = function () {
		qsn_setcolors( noteid );
	} ;
	
	if ( q_pagemode() == "makeweb" ) calendar_renderhtml_callback( noteid ) ;
	else calendar_request( noteid ) ;
}
function calendar_request( noteid ){
	var div = ge( noteid ) ;
	var $div = $( div ) ;
	var r = qsn_thenotes[ noteid ] ;
	if ( ! $div.data( "date" ) ) {
		var d = new Date() ;
		$div.data( "date", { month : d.getMonth(), year : d.getFullYear() } );
	}
	
	var e = [].concat( r.eventstype ) ;
	if ( e[ 0 ] ){
		var curryear = $div.data( "date" ).year ;
		var currmonth = $div.data( "date" ).month ;
		var startdate = new Date( curryear, currmonth, 1, 11, 0, 0 ) ; // premier jour du mois à midi
		var enddate ;
		for ( var i = 0 ; i < 4 ; i++ ) {
			enddate = new Date( curryear, currmonth, 31 - i , 11, 0, 0 ) ;// dernier ? jour du mois à midi
			if ( enddate.getMonth() == currmonth ) break ;
		}
		 e[ 0 ].date = $.datepicker.formatDate( "dd-mm-yy", startdate ) + "/" + $.datepicker.formatDate( "dd-mm-yy", enddate ) ;
	}
	q_events_request( function( x ){
		if ( ! isremoved( div ) ){
			div.calendar = x ;
			calendar_makevolatileevents( noteid, "calendar_renderhtml_callback" ) ;
		}
	}, { events: e } ) ;
}

function calendar_makevolatileevents( noteid , callback ) {
	/*var r = qsn_thenotes[ noteid ] ;
	var eventsjson = {} ;
	
	var events = q_events_search( r.eventstype, { output : "xml" } );
	
	$( events ).each( function(){
		var id = $( this ).attr( "id" );
		var kind = $( this ).attr( "kind" );
		var myevent = q_events_getJSON( kind, $( this ) , { realvalues : true } ) ;
		myevent.eventid = id;
		myevent.eventkind = kind; 
		
		var dayid = false;
		switch( kind ){
			case "general" : 
				dayid = q_events_parseDate( myevent.date, true );
				if ( dayid ) dayid = $.datepicker.formatDate( "yy_mm_dd", dayid );
				break;
			case "match" : 
				dayid = q_events_parseDate( myevent.date, true );
				if ( dayid ) dayid = $.datepicker.formatDate( "yy_mm_dd", dayid );
				break;
			case "birthday" : 
				dayid = q_events_parseDate( myevent.day, true );
				if ( dayid ) dayid = $.datepicker.formatDate( "*_mm_dd", dayid );
				break;
			default : 
				break;
		}
		if ( dayid ){
			if ( ! eventsjson[ dayid ] ) eventsjson[ dayid ] = [ ] ;
			eventsjson[ dayid ].push( myevent ) ;
		}
	} );
	$( '#' + noteid ).data( "events", eventsjson );*/
	var events = ge( noteid ).calendar.events ;
	var eventsjson = {} ;
	for ( var i = 0 ; i < events.length ; i++ ){
		var dayid = events[ i ][ "sel:date" ] ;
		if ( dayid ){
			if ( ! eventsjson[ dayid ] ) eventsjson[ dayid ] = [ ] ;
			eventsjson[ dayid ].push( events[ i ] ) ;
		}
	}
	$( '#' + noteid ).data( "events", eventsjson );
	if ( callback ) eval( callback+"('" + noteid + "')");
}

function calendar_renderhtml_callback( noteid ) {
	var div = $( "#" + noteid ) ;
	var d = new Date() ;
	if ( div.data( "changemonth" ) ){
		if ( ! div.data( "date" ) ) div.data( "date", { month : d.getMonth(), year : d.getFullYear() } );
	} else div.data( "changemonth", true );
	calendar_rendermonth( noteid ) ;
	calendar_displaylist( noteid );
	$( ".calendar_loading:eq(0)", div ).hide();
	$( ".calendar_month:eq(0)", div ).show();
}

function calendar_rendermonth( noteid ) {
	var div = $( "#" + noteid ) ;
	var r = qsn_thenotes[ noteid ] ;
	var curryear = ( div.data( "date" ) ) ? div.data( "date" ).year : new Date().getFullYear() ;
	var currmonth = ( div.data( "date" ) ) ? div.data( "date" ).month : new Date().getMonth() ;
	var dref = new Date( curryear, currmonth, 1, 11, 0, 0 ) ; // premier jour du mois à midi
	var d = new Date() ;
	var today = new Date( d.getFullYear(), d.getMonth(), d.getDate(), 11, 0, 0 ).getTime() ; // aujourd'hui midi
	var d1 = dref.getDay() ; // 1er jour
	if ( d1 == 0 ) d1 = 7 ; // dimanche
	var daydate = new Date() ;
	var daytime, dayid ;
	var n = 0 ;
	for ( var j = 1 ; j < 8; j++ ) { // première semaine
		daydate.setTime( dref.getTime() ) ;
		daydate.setDate( (  j >= d1 ) ? dref.getDate() + ( n++ )  : dref.getDate() - ( d1 - j ) ) ;
		daytime = daydate.getTime() ;
		dayid = calendar_dayidfromtime( daytime ) ;
		calendar_renderday( div, 1, j, dayid, daydate.getMonth() == currmonth, daytime == today ) ;
	}
	for ( var i = 2; i < 6; i++ ) { // semaines suivantes
		for ( var j = 1 ; j < 8; j++ ) {
			daydate.setTime( dref.getTime() ) ;
			daydate.setDate( dref.getDate() + ( n++ ) ) ;
			daytime = daydate.getTime() ;
			dayid = calendar_dayidfromtime( daytime ) ;
			calendar_renderday( div, i, j, dayid, daydate.getMonth() == currmonth, daytime == today ) ;
		}
	}
	if ( new Date( daydate.getTime() + 86400000 ).getMonth() == currmonth ) {
		for ( var j = 1 ; j < 8; j++ ) {
			daydate.setTime( dref.getTime() ) ;
			daydate.setDate( dref.getDate() + ( n++ ) ) ;
			daytime = daydate.getTime() ;
			dayid = calendar_dayidfromtime( daytime ) ;
			calendar_renderday( div, 6, j, dayid, daydate.getMonth() == currmonth, daytime == today ) ;
		}
		$( ".calendar_lastweek", div ).show();
	} else $( ".calendar_lastweek", div ).hide();

	var date = div.data( "date" );
	$( '.calendar_button', div ).css( "visibility", ( ! date ||  ! ( ( date.month == d.getMonth() ) && ( date.year == d.getFullYear() ) ) ) ? "visible" : "hidden" );
	//calendar_updatestyle( div, r );

	var monthname = ( mname[ currmonth ].split( '' ).length ) < 7 ? mname[ currmonth ] : mshortname[ currmonth ] + "." ;
	$( ".calendar_monthandyear", div ).html( monthname + " " + curryear ) ;
	div.data( "date" , { year : curryear, month : currmonth } );
	
	calendar_rendersize( div , r ) ;
}

function calendar_renderday( div, i, j, dayid, iscurrmonth, istoday ) {
	var cal =  $( ".calendar_month", div ).get( 0 );
	var td = cal.rows[ i + 1 ].cells[ j - 1 ]  ;
	
	var dayevents = calendar_dayevents( $( div ).attr( "id" ), dayid );
	var hasevent;
	if ( ! dayevents.length ) hasevent = "false";
	else {
		function formatevent( e ){
			var eventkind = e.kind ;
			if ( eventkind == "general" && e.category && e.category.color ) eventkind += "-" + e.category.color ;
			return eventkind ;
		}
		hasevent = formatevent( dayevents[ 0 ] );
		for ( var i = 0; i < dayevents.length; i++ ){
			if ( formatevent( dayevents[ i ] ) == hasevent ) continue;
			else hasevent = "true" ;
		}
	}
	
	$( td ) // jour du mois
		.html( parseInt( dayid.split( "_" )[ 2 ] , 10 ) )
		.attr( {
			"dayid" : dayid,
			"currmonth" : ( iscurrmonth ) ? "true" : "false",
			"currday" : ( istoday ) ? "true" : "false",
			"hasevent" : hasevent,
			"currmonth-hasevent" : ( hasevent != "false" && iscurrmonth ) ? "true" : "false",
			"title" : ""
		} );
}

function calendar_rendersize( div , r ) {
	calendar_updatestyle( div, r ) ;
}

function calendar_updatestyle( div, r ) {
	var calendar = $( div ).find( ".calendar_month:eq(0)" );
	if ( calendar.attr( "q_size" ) ) {
		var calendarwidth = 7 * calendar_sizes[ parseInt( calendar.attr( "q_size" ), 10 ) ] ;
	} else {
		var notemargin = 2*( parseInt( qsn_definepaddings( "calendar" )[ r.margin ].replace( "px", ""), 10  ) ) ;
		var calendarwidth = ( $( div ).data( "w" ) || $( div ).width() ) - notemargin ;
		calendarwidth = Math.max( 105, Math.min( 987, calendarwidth ) ) ;
	}
	calendar.width( calendarwidth ) ;
	calendarwidth = calendarwidth - 1 ; //-1 pour le border-right
	
	var cell_width = Math.floor( calendarwidth / 7 );
	var nb_cells = 7;
	function fontsize( w ) {
		return Math.floor( w * ( 1 - Math.min( 0.15 + 0.015 * w, 0.6 ) ) ) ;
		//return Math.floor( 7 + 0.0386 * cell_width + 0.00143 * cell_width * cell_width ) ;
	}
	
	var hasBgimg = ! r.template || r.template != "flat-white" ;
	var hasColor = hasBgimg ;
	
	calendar.find( "td" ).attr( "class", "" ).css( { "color": "", "background-color": "" } ) ;
	calendar.find( "tr" ).each( function ( index, value ) {
		if ( index > 0 ) {
			var nb_cells = 7;
			var nb_cells_1 = calendarwidth % 7;
			$( this ).find( "td, th.calendar_day").each( function() {
				var $this = $( this ) ;
				$this.removeClass( "w0").removeClass( "w1" );
				if ( $this.is( "td" ) ) {
					$this.
						height( cell_width ).
						css( {
							"background-image": hasBgimg ? "url('/services/calendar/images/cells_v2_" + cell_width + ".png')" : "none",
							"font-size": fontsize( cell_width ) + "px",
							"color": ""
						} ).
						unbind() ;
				} else {
					$this.
						height( Math.floor( cell_width * 0.6 ) ).
						css( {
							"background-image": hasBgimg ? "url('/services/calendar/images/cells_v2_" + cell_width + ".png')" : "none",
							"font-size": fontsize( cell_width * 0.6 ) + "px",
							"background-position": ( ( nb_cells_1 > 0 ) ? - 3 * cell_width : 0 ) + "px " + "0px"
						} ) ;
				}
				if ( nb_cells_1 > 0 ) {
					$this.addClass( "w1" ).width( cell_width + 1 ) ;
					--nb_cells_1;
				} else 
					$this.addClass( "w0" ).width( cell_width );
			} );
		}
	} ) ;
	
	calendar.find( "th.calendar_headerth" ).
		height( Math.floor( cell_width * 0.6 ) ).
		css( {
			"background-image": hasBgimg ? "url('/services/calendar/images/headers_v2_" + cell_width + ".png')" : "none",
			"font-size": fontsize( cell_width * 0.6 ) + "px"
		} ) ;
	
	var nb_cells_1 = calendarwidth % 7;
	calendar.find( "th.calendar_actions" ).
		height( Math.floor( cell_width * 0.6 ) ).
		css( {
			"background-image": hasBgimg ? "url('/services/calendar/images/headers_v2_" + cell_width + ".png')" : "none",
			"background-position": "0px 0px",
			"font-size": fontsize( cell_width * 0.6 ) + "px"
		} ).
		hover( 
			function(){ $( this ).css( "background-position", "0px -" + cell_width + "px" ); },
			function(){ $( this ).css( "background-position", "0px 0px" ); }
		 );

	calendar.find( 'td.w0[currmonth="false"]' ).
		addClass( ( hasColor ) ? "qsn1 text_color5" : "" ).
		css( "background-image", hasBgimg ? "url('/services/calendar/images/calpad_v2_" + cell_width + ".jpg')" : "none" ).
		css( "background-position",  "0px 0px" );
	calendar.find( 'td.w1[currmonth="false"]' ).
		addClass( ( hasColor ) ? "qsn1 text_color5" : "" ).
		css( "background-image", hasBgimg ? "url('/services/calendar/images/calpad_v2_" + cell_width + ".jpg')" : "none" ).
		css( "background-position",  - cell_width + "px " + "0px"   );

	var size1 = ( -0 * ( cell_width + 0 ) - 0 * ( 3 * cell_width ) ) ;	
	calendar.find( 'td.w0[currmonth="true"][currday="false"][hasevent="false"]' ).
		attr( "class", ( hasColor ) ? "qsn1 text_color3" : "" ).
		css( "background-position", size1 + "px " + "0px" ).
		hover( 
			function () { $( this ).css( "background-position", size1 + "px " + "-" + cell_width + "px" ) }, 
			function() { $( this ).css( "background-position", size1 + "px " + "0px" ) }
		); 
	var size2 = ( -0 * ( cell_width + 1) - 1 * (3 * cell_width) );
	calendar.find( 'td.w1[currmonth="true"][currday="false"][hasevent="false"]' ).
		attr( "class", ( hasColor ) ? "qsn1 text_color3" : "" ).
		css( "background-position",  size2 + "px " + "0px" ).
		hover( 
			function () { $( this ).css( "background-position", size2 + "px " + "-" + cell_width + "px"   ) }, 
			function() { $( this ).css( "background-position", size2 + "px " + "0px" ) }
		); 

	var size3 = ( -1 * ( cell_width + 0) - 0 * (3 * cell_width) );
	calendar.find( 'td.w0[currmonth="true"][currday="true"]' ).
		css( "background-position",  size3 + "px " + "0px" ).
		hover( 
			function () { $( this ).css( "background-position", size3 + "px " + "-" + cell_width + "px" ) }, 
			function() { $( this ).css( "background-position", size3 + "px " + "0px" ) }
		); 
		
	if ( hasColor ) calendar.find( 'td.w0[currmonth="true"][currday="true"]' ).css( { "color": "white" } ) ;
		
	var size4 = ( -1 * ( cell_width + 1) - 1 * (3 * cell_width) ) ;
	calendar.find( 'td.w1[currmonth="true"][currday="true"]' ).
		css( "background-position", size4 + "px " + "0px" ).
		hover( 
			function () { $( this ).css( "background-position", size4 + "px " + "-" + cell_width + "px" ) }, 
			function() { $( this ).css( "background-position", size4 + "px " + "0px" ) }
		); 
	
	if ( hasColor ) calendar.find( 'td.w1[currmonth="true"][currday="true"]' ).css( { "color": "white" } ) ;

	var size5 = ( -2 * ( cell_width + 0) - 0 * (3 * cell_width) ) ;
	calendar.find( 'td.w0[currmonth="true"][hasevent!="false"]' ).
		css( "background-position", size5 + "px " + "0px" ).
		hover( 
			function () { $( this ).css( "background-position", size5 + "px " + "-" + cell_width + "px" ) }, 
			function() { $( this ).css( "background-position", size5 + "px " + "0px" ) }
		); 
	var size6 = ( -2 * ( cell_width + 1) - 1 * (3 * cell_width) );
	calendar.find( 'td.w1[currmonth="true"][hasevent!="false"]' ).
		css( "background-position", size6 + "px " + "0px" ).
		hover(
			function () { $( this ).css( "background-position", size6 + "px " + "-" + cell_width + "px" ) }, 
			function() { $( this ).css( "background-position", size6 + "px " + "0px" ) }
		);

	calendar.find( 'td[currmonth="true"][hasevent!="false"]' ).
		mousedown( function( event ) { q_stopPropagation( event ); } ).
		click( function() {
			calendar_alert( $( this ).attr( "dayid" ), $( div ).attr( "id" ), { 
				callback : function( id ) { if ( q_pagemode() == "edit" ) calendar_renderhtml( id ); }, 
				callback_args : $( div ).attr( "id" ) 
			} );
		} );

	if ( q_pagemode() == "edit" && ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) ) {
		calendar.find( 'td[currmonth="true"][hasevent="false"]' )
			.mousedown( function( event ){ q_stopPropagation( event ); } )
			.click( function( ) {
				var _this = this ;
				q_events_request( function() {
					q_eventform_display( "new", "general", "",  "new_" + q_events_newevent++ , { content : { date : $( _this ).attr( "dayid" ) },  callback : calendar_renderhtml, callback_args : $( div ).attr( "id" ) } );
				} , { openselects: "all", type: "xml" } ) ;
			} );
	}
	
	$( '.calendar_month td[currmonth="true"][hasevent!="false"]', div )
		.each( function(){
			var bgcolor = { "birthday" : "#9B3CE8" , "match" : "#FC3B37" , "general" : "#008320" , "true" : "#0064DA" } ;
			var h = ( r.eventscolor == "true" ) ? $( this ).attr( "hasevent" ) : "true" ;
			if ( ( /general-/ ).test( h ) ) $( this ).css( { "color" : bwcolor( h.replace( /general-/ , "" ) ) , "background-color" : h.replace( /general-/ , "" ) } );
			else $( this ).css( { "color" : "white" , "background-color" : bgcolor[ h ]  } );
		} )
		.hover( 
			function(){ 
				if ( r.preview == "true" ) calendar_preview_over( this, $( div ).attr( "id" ) );
			}, 
			function(){ 
				if ( r.preview == "true" ) calendar_preview_out( this );
			}	
		 );
	qsn_setcolors( [ calendar.get( 0 ) ], r.common.noteid ) ;
}

function calendar_dayevents( noteid , dayids, wantdefault ) {
	if ( ! wantdefault && window.quomodoclient && quomodoclient.calendar_dayevents ) return quomodoclient.calendar_dayevents( noteid , dayids ) ;
	var e =$( "#" + noteid ).data( "events" );
	if ( ! e ) return [] ;
	if ( typeof dayids == "string" ) dayids = [ dayids ];
	var events = [];
	for ( var i in dayids ){
		events = events.concat( q_args( e[ dayids[ i ] ] ) );
		events = events.concat( q_args( e[ dayids[ i ].replace( /^[0-9]{4}/ , "*" ) ] ) ) ;
	}
	return events;
}

function calendar_preview_over( elem, noteid ){
	var dayid = $( elem ).attr( "dayid" );
	var events = calendar_dayevents( noteid, dayid );
	if ( ! events.length ) return;
	var recap = {};
	for ( var i in events ){
		if ( ! recap[ events[ i ].kind ] ) recap[ events[ i ].kind ] = 1;
		else recap[ events[ i ].kind ]++;
	}
	var msg = [];
	for ( var j in recap ) msg.push(  '<img src="/services/calendar/images/preview_' + j + '.png" class="png" style="width:16px; height:16px;" title="' + calendar_message[ j + "s" ] + '"/> (' + recap[ j ] + ')' );
	msg = ( msg.length > 1 ) ? msg.join( "  ") : msg[ 0 ];
	$( '<div class="calendar_preview">' )
		.append(  $( '<div>' ).html( msg ) )
		.appendTo( $( elem ) );
}

function calendar_preview_out( elem ){
	$( ".calendar_preview", elem ).remove();
}

function calendar_alert( dayid, noteid, options ){
	var events = calendar_dayevents( noteid, dayid );
	if ( ! events.length ) return;
	var datearray = dayid.split("_");
	var year = parseInt( datearray[ 0 ], 10 );
	var month = parseInt( datearray[ 1 ], 10 );
	var day = parseInt( datearray[ 2 ], 10 );
	var thedate = "" + day + " " + mname[ "" + ( month - 1 ) ] + " " + year ;//new Date( year + "/" + month + "/" + day );
	
	if ( ! options ) options = {};
	var callback = options.callback ;
	var callback_args = options.callback_args;
	var withnew = ( q_pagemode() == "edit" && ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) );
	var width = options.width || ( ( withnew ) ? "700" : "600" ) ; 
	var thesrc = $( '<table cellspacing="0" cellpadding="10" border="0" class="q_fsm_alertevent">' )
		.css( "width", width + "px" )
		.append( $( '<tr>' )
			.append( $( '<td width="90" valign="top" class="q_fsm_alertevent_leftcol">' )
				.append( $( '<div style="padding-bottom:10px;">' )
					.attr( { "class" : "cal",  "day" : day , "month" : month } )
					.append( '<span class="m">' + calendar_message[ "month_" + month ] + '</span>' )
					.append( '<span class="d">' + day + '</span>' ) 
				)
			)
			.append( $( '<td valign="middle" align="left"><div class="q_alertevent_events" onmousedown="q_stopPropagation( event );"></div></td>' ) 
			)
		)
		.append( $( '<tr>' )
			.append( $( '<td colspan="2" align="center">' ).append( create_button( { label : common_message[ "ok" ], onclick : function(){ q_fsm_delete(); } } ) ) )
		);
	
	if ( withnew ) $( ".q_fsm_alertevent_leftcol", thesrc )
		.append( create_button( { label : "nouveau", onclick : function(){
			q_events_request( function() {
				q_eventform_display( "new", "general", "",  "new_" + q_events_newevent++ , { content : { date : dayid },  callback : calendar_renderhtml, callback_args : noteid } );
			} , { openselects: "all", type: "xml" } ) ;
		}, small : true, icon : "adminmenu sprite_symbol_new_16" } ) )
	if ( events.length > 2 ) $( ".q_fsm_alertevent_leftcol", thesrc )
		.append( create_button( { label : "tout plier", onclick : function(){ calendar_alert_foldall( this, "fold" ); }, small : true } ) )
		.append( create_button( { label : "tout déplier", onclick : function(){ calendar_alert_foldall( this, "unfold" ); }, small : true } ) );
		
	var mode = ( q_pagemode() == "edit" && ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) ) ? "edit" : "view";
	qsn_thenotes[ noteid ].changemonth = false;
	q_events_renderevents( $( ".q_alertevent_events", thesrc ), events, { mode : mode, displaydate : false, callback : function(){ q_fsm_delete(); calendar_alert( dayid, noteid, { callback : calendar_renderhtml, callback_args : noteid } );} } );
	var json = { src : thesrc.get( 0 ), title : thedate };
	if ( callback ) json.delete_callback = callback;
	if ( callback_args ) json.delete_args = [ callback_args ];
	q_fsm_reveal( json ) ;
}


function calendar_alert_foldall( elem, status ){
	var div = $( elem ).parents( ".q_fsm_alertevent:first" );
	if ( status == "fold" ){
		var ediv = $( ".q_event", div );
		$( ".q_event_toggle", ediv ).html( "►" );
		$( ".q_event_content", ediv ).slideUp();
	} else {
		var ediv = $( ".q_event", div );
		$( ".q_event_toggle", ediv ).html( "▼" );
		$( ".q_event_content", ediv ).slideDown();
	}
}

function calendar_displaylist( noteid ){
	var div = $( "#" + noteid );
	var r = qsn_thenotes[ noteid ];
	var eventsdiv = $( ".calendar_eventslistdiv:eq(0)", div ).show().empty();
	var eventslist = $( ".calendar_eventslist:eq(0)", div ).toggle( r.displaylist == "true" );
	if ( r.displaylist != "true" ) return;
	
	var curryear = ( div.data( "date" ) ) ? div.data( "date" ).year : new Date().getFullYear() ;
	var currmonth = ( div.data( "date" ) ) ? div.data( "date" ).month : new Date().getMonth() ;
	var dref = new Date( curryear, currmonth, 1, 11, 0, 0 ) ; // premier jour du mois à midi
	var dayids = q_events_yearselect_getdays( "m", dref )
	var theevents = calendar_dayevents( noteid, dayids );
	if ( ! theevents.length ) return eventslist.hide();
	var mode = ( q_pagemode() == "edit" && ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) ) ? "edit" : "view";
	q_events_renderevents( eventsdiv, theevents, { mode : "view", displaydate : true, withdetails : false, displaytype : false, callback : function(){ calendar_renderhtml( noteid ); }  } );
}

/*
function -
function NAVIGATION / TIME
*/

function calendar_nextmonth( x ) {
	var div = $( x ).parents( ".container:first" );
	var date = div.data( "date" )
	if ( date.month == 11 ) {
		div.data( "date", { month : 0, year : date.year + 1 } );
	} else div.data( "date", { month : date.month + 1, year : date.year } );
	//calendar_rendermonth( div.attr( "id" ) ) ;
	//calendar_displaylist( div.attr( "id" ) );
	calendar_request( div.attr( "id" ) ) ;
}

function calendar_prevmonth( x ) {
	var div = $( x ).parents( ".container:first" );
	var date = div.data( "date" )
	if ( date.month == 0 ) {
		div.data( "date", { month : 11, year : date.year - 1 } );
	} else div.data( "date", { month : date.month - 1, year : date.year } );
	//calendar_rendermonth( div.attr( "id" ) ) ;
	//calendar_displaylist( div.attr( "id" ) ) ;
	calendar_request( div.attr( "id" ) ) ;
}

function calendar_currmonth( x ) {
	var d = new Date() ;
	var div = $( x ).parents( ".container:first" ).data( "date", { month : d.getMonth(), year : d.getFullYear() } );
	calendar_request( div.attr( "id" ) );
}

function calendar_dayidfromtime( t ) {
	var d = new Date() ;
	d.setTime( t ) ;
	var dayid = d.getFullYear() + "_" + twodigs( d.getMonth() + 1 ) + "_" + twodigs( d.getDate() ) ;
	return dayid ;
}

function calendar_datefromdayid( x ) {
	var y = x.split( "_" ) ;
	var d = new Date( y[ 0 ], parseInt( y[ 1 ], 10 ), parseInt( y[ 2 ], 10 ), 12, 0, 0 ) ;
	return d ;
}

function calendar_initforweb( id ) {
	calendar_renderhtml( id ) ;
}

function calendar_icalsubscribe() {
	var path = "/services/calendar/ical/dialog_link/index_" + q_lang + ".html" ;
	var options = { 
		json: { baseurl : window.clubprivatedomain + "/" + window.location.host }, 
		callback : function( x ) {	
		}
	} ;
	quomodo.fsm.loadDialog( path, options ) ;
}


var carousel_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Diapo Photos" ,
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "Carrousel_Créez un bandeau de photos ou de logos défilants." ,
"desc" : "La note Carrousel permet de créer un bandeau défilant contenant des photos ou des logos de partenaires",
"upload_title" : "Importer des photos",
"upload_prompt" : "Cliquez sur OK pour sélectionner les photos à importer",
"thefile" : "Cliquez ici pour ouvrir le fichier ",
"nofiles" : "Vous devez sélectionner au moins une image avant de valider.",
"toomanyfiles" : "Trop de fichiers ! Afin de limiter le temps de chargement de la note, le nombre d'images est limité à %s. Merci d'enlever quelques images...",
"confirmdelete" : "Êtes-vous sûr de vouloir enlever cette image ?",
"deletefilealt" : "Supprimer cette image", 
"tabdiapooptions" : "Diaporama",
"autostart" : "Lecture automatique",
"downloadlinks" : "Remplir automatiquement les commentaires et liens avec ceux des images originales",
"loop" : "Lecture en boucle",
"phototimer" : "Délai entre les images : ",
"width" : "Taille",
"widthmin" : "petit",
"widthmax" : "grand",
"direction" : "Orientation du carrousel"
} ;

var carousel_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "carousel_msgs_fr_js_loaded" ) ;

var carousel_json_template = { version: 1 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, images : [], sortoptions : { target: "rank" , order: "down" } , imgratio : "2" , options : { /*autostart : "true", loop : "true", direction : "horizontal", height : 0,*/ phototimer : "1000", width : 100 } , textmargin: 2 } ;

var carousel_textmargins = [ "0px", "5px", "11px", "21px", "31px" ] ;

function carousel_initforweb( id ) {
	q_addwindowblurhandlers( "carousel_pauseall" ) ;
	q_addwindowfocushandlers( "carousel_resumeall" ) ;
	carousel_launch( id ) ;
}

function carousel_ulprepare( div , r ) {
	var ul = $( ".carousel_div ul", div ).get( 0 ) ;
	if ( ul.prepared ) return ;
	if ( ! $( ul ).attr( "all_elts_size" ) ) carousel_prepare( div , r ) ;
	var o = carousel_params( r ) ;
	ul.step = o.step ;
	ul.speed = o.speed ;
	ul.allEltsSize = parseInt( $( ul ).attr( "all_elts_size" ) , 10 ) ;
	ul.startpos = ul.curr = 0 ;
	ul.prepared = true ;
}

function carousel_params( r ) {
	var ref = r.options.width || 100 ;
	var step = 2 ;
	var speed = Math.ceil( step * parseInt( r.options.phototimer , 10 ) / ref ) ;
	var maxspeed = 20 ;
	if ( speed > maxspeed ) {
		step = 1 ;
		speed = Math.ceil( step * parseInt( r.options.phototimer , 10 ) / ref ) ;
	} ;
	return { step : step , speed : speed } ;
}

function carousel_prepare( div , r ) {
	var cardiv = $( ".carousel_div", div ).eq( 0 );
	var o = {
		visible : cardiv.get( 0 ).style.width ,// size of the carousel on the screen. Can be in percent '100%', in pixels '100px', or in images '3' (for 3 images)
		margin : parseInt( carousel_textmargins[ parseInt( r.textmargin, 10 ) ] , 10 )	 ,// margin between images
		start: 0 // position in pixels that the carousel shall start at
	} ;

	function css(el, prop) {
	    return parseInt($.css(el[0], prop)) || 0;
	}

	function width(el) {
	    	return el[0].offsetWidth + css(el, 'marginLeft') + css(el, 'marginRight');
	}

	function height(el) {
	    return el[0].offsetHeight + css(el, 'marginTop') + css(el, 'marginBottom');
	}
	
	var animCss="left", sizeCss="width";
	var ul = $("ul", cardiv), tLi = $("li", ul), tl = tLi.size(), v = o.visible;
	var cssU = (v.toString().indexOf("%") != -1 ? '%' : (v.toString().indexOf("px") != -1) ? 'px' : 'el');
	
	// Calculates the size of the main div according to the given size (can be in percent, in value or in pixels)
	var divSize, cssSize, cssUnity;
	if (cssU == '%'){ // in percent 
		divSize = 0; // We don't have the value in pixels unless we set the percent value first. So 0, and will catch it later
		cssSize = parseInt(v);  
   		cssUnity = "%";
	}
	else if (cssU == 'px'){ // in pixels
		divSize = parseInt(v);
		cssSize = parseInt(v);
		cssUnity = "px";
	} else { // in elements (number of elements to display)
		divSize = liSize * parseInt(v); 
		cssSize = liSize * parseInt(v);
		cssUnity = "px";
	}		  								  

	var allEltsSize = 0 ; // Total size of the elements
	tLi.each( function ( i , x ) {
		allEltsSize += $( "img" , x ).width() + o.margin ;
	} ) ;
	var liSizeV = height($("li img", ul));	// size of the main layer, in its side	  

	// circular mode management
	// we add at the end and at the beginning some fake images to make the circular effect more linear, so it never breaks
	// It is still possible to improve the memory management by adding exactly the number of images requested.
	
	var circularSize = 0 ;
	for ( i = 0 ; circularSize < divSize ; i++ ) {
		var li = $( "li:eq(" + i +")" , ul );
		ul.append( li.clone() ) ;
		circularSize += $( "img" , li ).width() + o.margin ;
	}
	var ulSize = allEltsSize + circularSize ;		   	// size of full ul(total length, not just for the visible items)
		   
	var li = $("li", ul);								// list       
	cardiv.css("visibility", "visible");
	li.css("overflow", "hidden")			// If the list item size is bigger than required
		.css("float", o.vertical ? "none" : "left") // Horizontal list
		.css("margin", "0")
		.css("padding", "0")
		.children().css("overflow", "hidden");	  // If the item within li overflows its size, hide'em
	li.css("display", "inline");		// IE double margin bug - rooo..
	if ( li.children().get(0).tagName.toLowerCase() == 'a' ) li.children().css('float','left');	

	ul.css("margin", "0")			   // Browsers apply default margin 
		.css("padding", "0")			// and padding. It is reset here.
		.css("position", "relative")		// IE BUG - width as min-width
		.css("list-style-type", "none")		 // We dont need any icons representing each list item.
		.css("z-index", "1");			   // IE doesnt respect width. So z-index smaller than div

	cardiv.css("overflow", "hidden")		   // Overflows - works in FF
		.css("position", "relative")		// position relative and z-index for IE
		.css("z-index", "2")			// more than ul so that div displays on top of ul
		.css("left", "0px");			// after creating carousel show it on screen
	
	var liSize = width(li);   // Full li size(incl margin)-Used for animation
	var curr = o.start;   								// Current position in pixels  
	var nbAllElts = li.size();							// Total number of items  
	//var ulSize = liSize * nbAllElts;		   	// size of full ul(total length, not just for the visible items)
	var nbElts = tl;									// number of elements (only visible items)
	var eltsSize = nbElts * liSize;						// size of the visible elements only
	
	// Adjust the start position in case of circular mode
	o.start += (liSize * tl);  						// The start position is one carousel length ahead due to the optical effect
	
	// Adjust the carousel size with the correct values
	ul.css(sizeCss, ulSize + "px")		   	// Width of the UL is the full length for all the images
		.css(animCss, -(o.start));		  	 	// Set the starting item
	cardiv.css(sizeCss, cssSize + cssUnity);			// Width of the DIV. length of visible images
	
	if ( divSize === 0 ) divSize = cardiv.width(); // We didn't have the size in pixels in case of % size. Catch up ! The size is simply the calculated size in pixels
	
	cardiv.css('height', liSizeV + 'px');
	ul.css('height', liSizeV + 'px');	
	li.css( "margin" , "0px" ).css( "margin-right" , o.margin + "px" ) ;
							
	// Calculate the number of visible elements inside (in case of size in percent)							
	if (cssU == '%'){
		v = divSize / li.width();						
		if (v % 1 !== 0){ v +=1; }
		v = parseInt(v);
	}
	
	var divVSize = cardiv.height(); // div height

	ul.hide().show() ;//2011-03-21, vh : sinon bug dans IE7
	ul.attr( "all_elts_size" , allEltsSize ) ;
}

var carousel_timers = {} ;
var carousel_scroll_suspended = false ;

function carousel_launch( id ) { 
	if ( ! carousel_timers[ id ] || ! carousel_timers[ id ].timer ) {
		var div = ge( id ) ;
		carousel_ulprepare( div , qsn_thenotes[ id ] ) ;
		carousel_forward( id , $( ".carousel_div ul", div ).get( 0 ) ) ;
	}
}
function carousel_cleartimer( id ) {
	if ( ! id ) return ;
	if ( ! carousel_timers[ id ] ) return false ;
	if ( carousel_timers[ id ].timer ) clearTimeout( carousel_timers[ id ].timer ) ;
	carousel_timers[ id ].timer = null ;
}

function carousel_pauseall() {
	carousel_scroll_suspended = true ;
	for ( var id in carousel_timers ) carousel_cleartimer( id ) ;
}

function carousel_resumeall() {
	carousel_scroll_suspended = false ;
	for ( var id in carousel_timers ) if ( ge( id ) ) carousel_launch( id ) ;
}

/**
 * Animate the track by moving it forward according to the step size and the speed
 * @param stepsize, the size of the step (optional)
 * @param once, shall the animation continue endlessly until we set running to false ? (optional)
 */
function carousel_forward( id , ul ){
	if ( carousel_scroll_suspended ) return ;
	if ( isremoved( ul ) ) return carousel_cleartimer( id ) ;
    	var s = ul.step ;    	
	ul.style.left = - ( ul.curr + s ) + "px" ;
	ul.curr += s; //Add step size
	//Calculate whether we cross the limit,
	//if so, put the carousel one time backward
	if ( ul.curr >= ul.allEltsSize) {
		ul.style.left = ul.startpos + "px" ;
	    	ul.curr = ul.startpos;
	}
	if ( ! carousel_timers[ id ] ) carousel_timers[ id ] = {} ;
	carousel_timers[ id ].timer = setTimeout ( function() { carousel_forward( id , ul ) ; } , ul.speed ) ; 
}


var comment_message = {
"displayoptions" : "Options",
"comment" : "commentaire",
"comments" : "commentaires",
"newnoteprompt" : "Cliquez ici pour rédiger le message d'invitation des commentaires." ,
"onecomment" : "Un commentaire sur ce sujet" ,
"severalcomments" : "Déjà %s commentaires sur ce sujet" ,
"nocomment" : "(aucun)" ,
"showonecomment" : "Voir le premier commentaire" ,
"showcomments" : "Voir les %s commentaires" ,
"hidecomments" : "Revenir à la page" ,
"firstcomment" : "Soyez le premier à réagir !" ,
"lastcomment-unknown": "Dernier commentaire",
"lastcomment": "%member a dit il y a %duration",
"displaylast": "afficher le dernier commentaire",
"lastcommentless1minute": "%member a dit il y a moins d'une minute",
"morethanoneyear": "%member a dit il y a plus d'un an",
"day": "jour",
"hour": "heure",
"minute": "minute",
"days": "jours",
"hours": "heures",
"minutes": "minutes",
"commentsadministration" : "Administration des commentaires",
"deletecomment" : "supprimer" ,
"confirmdeletecomment" : "Voulez-vous vraiment supprimer ce message ?" ,
"shownewcomment" : "Ajouter un commentaire" ,
"hidenewcomment" : "Masquer le formulaire" ,
"nameinput" : "obligatoire" ,
"emailinput" : "obligatoire, ne sera pas affichée" ,
"commentinput" : "rédigez votre commentaire ici" ,
"website" : "Cliquez pour accéder au site de %s" ,
"missingname" : "Entrez votre nom svp." ,
"missingemail" : "Entrez votre adresse e-mail svp.\n\nElle ne sera pas affichée sur le site mais elle sera transmise à l'admin qui validera votre contribution." ,
"missingcomment" : "Entrez votre commentaire svp." ,
"order0" : "Affichage du plus ancien au plus récent" ,
"order1" : "Affichage du plus récent au plus ancien" ,
"invalidemailaddress" : "Cette adresse e-mail n'est pas valide. Veuillez entrer une adresse valide svp.\n\nVotre adresse ne sera pas affichée sur le site mais elle est requise pour la transmettre à l'admin qui validera votre contribution" ,
"snname" : "Note Commentaire" ,
"plug" : "Commentaire_Proposez à vos visiteurs de s'exprimer sur un sujet, une photo, une actualité de votre site." ,
"desc" : "(...)" ,
"mailobject" : "[Quomodo] - Un commentaire sur la page %p" ,
"headericontitle" : "Icône" ,
"mailbody" : "Un internaute a laissé un commentaire sur la page %p (%a) de votre site %s. Voici les informations qu'il a fournies.\r\r--\rNom: %n\rAdresse e-mail: %e\rSite web: %w\rCommentaire: %c\r--\r\rAdresse IP de l'internaute : [[IP]]\r\rEn tant qu'administrateur du site, vous pouvez si vous le souhaitez supprimer ce commentaire en vous connectant sur la page.\r\rL'équipe Quomodo\r\rPour toute question ou suggestion, rendez-vous sur l'aide de Quomodo:\rhttp://aide.quomodo.com\rVous pouvez également nous contacter en envoyant un mail à:\rcontact@quomodo.com\r" ,
"none" : "sans" ,
"gray" : "gris" ,
"color" : "couleur" ,
"pagetitle" : "Commentaires de la page %s" ,
"messageregistered" : "Merci !\n\nVotre commentaire a bien été enregistré."
} ;

var comment_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "comment_msgs_fr_js_loaded" ) ;


function comment_renderlastcommentdate( div ){
	var $div = $( div ) ;
	var lascommentcontext = $( div ).find( ".comment_last_context:eq(0)" );
	var lastcommentDate = $div.attr( "lastcommentdate" ) ;
	var lastcommentName = $div.attr( "lastcommentname" ) ;
	
	if ( ! lastcommentDate || ! lastcommentName ) {
		lascommentcontext.text( comment_message[ "lastcomment-unknown" ] ) ;
		return ;
	}
	
	function convertMS( ms ) {
		  var d, h, m, s;
		  s = Math.floor(ms / 1000);
		  m = Math.floor(s / 60);
		  s = s % 60;
		  h = Math.floor(m / 60);
		  m = m % 60;
		  d = Math.floor(h / 24);
		  h = h % 24;
		  return { day: d, hour: h, minute: m };
	}
		
	var timeLaps = convertMS( new Date() - new Date( lastcommentDate ) );
	var timeLapsString = "";
	var array = [ "day", "hour", "minute" ] ;
	for ( var i = 0; i < array.length; i++ ) {
		if ( timeLaps[ array[ i ] ] == 0 ) continue;	
		timeLapsString += timeLaps[ array[ i ]  ] + " " ;	
		if ( timeLaps[ array[ i ] ] <= 1 ) timeLapsString += comment_message[ array[ i ]  ] ;
		else timeLapsString += comment_message[ array[ i ] + "s" ] ;
		break;
	}	
	
	if ( timeLapsString == "" ) {
		lascommentcontext.text( comment_message[ "lastcommentless1minute" ].replace( "%member", lastcommentName ) );
	} else if ( timeLaps.day > 365 ) {
		lascommentcontext.text( comment_message[ "morethanoneyear" ].replace( "%member", lastcommentName ) );
	} else {
		lascommentcontext.text( comment_message[ "lastcomment" ].replace( "%member", lastcommentName ).replace( "%duration", timeLapsString ) );
	}
}

function comment_initforweb( id ) {
	if ( qsn_thenotes[ id ].displaylast != "false" ) comment_renderlastcommentdate( ge( id ) ) ;
}



var contact_message = {
"newnoteprompt" : "Indiquez ici les instructions pour les visiteurs." ,
"notetitleprompt" : "Cliquez ici pour donner un titre au formulaire." ,
"labelprompt" : "(sans titre)" ,
"selectprompt" : "Cliquez ici pour ajouter vos options." ,
"addressprompt" : "(tous les admins)" ,
"validationprompt" : "Ex : j'accepte les conditions...",
":" : " : ",
"input" : "texte sur une ligne" ,
"email" : "adresse mail" ,
"textarea" : "texte sur plusieurs lignes" ,
"select" : "liste de choix" ,
"checkboxes" : "cases à cocher" ,
"validationbox" : "case à valider",
"comment" : "commentaire",
"title" : "titre",
"file" : "fichier" ,
"date" : "date" ,
"mandatory" : "champ obligatoire" ,
"optional" : "réponse facultative" ,
"choose" : "Faire un choix", 
"expemail" : "utiliser comme expéditeur" ,
"expemailinfo" : "Le mail envoyé aux administrateurs aura cette adresse comme Expéditeur." ,
"expemailnotunique" : "Vous ne pouvez pas utiliser plusieurs adresses mail comme expéditeur.\n\nSi vous désirez demander plusieurs adresses mail, l'une d'elles seulement peut servir d'adresse d'expédition du message aux administrateurs." ,
"name_label" : "Nom" ,
"firstname_label" : "Prénom" ,
"email_label" : "Adresse mail" ,
"deleteentry" : "Supprimer ce champ" ,
"confirmdeleteentry" : "Voulez-vous vraiment supprimer ce champ ?" ,
"addentry" : "Ajouter un champ" ,
"editlabel" : "Modifier le titre du champ" ,
"missinglabel" : "Information\n\nLe champ %s n'a pas de titre. Cela peut être plus clair de lui en donner un." ,
"missingemailaddress" : "Il faut indiquer une adresse mail pour l'envoi des demandes de contact." ,
"invalidemailaddress" : "L'adresse mail d'envoi des demandes de contact ne semble pas valide. Veuillez indiquer une adresse valide (sans accent ni espace)." ,
"oneinvalidemailaddress" : "Envoi des demandes de contact : la %s adresse mail ne semble pas valide. Veuillez indiquer une adresse valide (sans accent ni espace)." ,
"tomuchemailaddress" : "Vous ne pouvez pas envoyer le message à plus de 3 adresses mail. Veuillez supprimer %s adresse(s)." , 
"emailad1" : "première" ,
"emailad2" : "deuxième" ,
"emailad3" : "troisième" ,
"missingoptions" : "Vous n'avez pas indiqué de choix pour le champ \"%s\". Vous devez proposer au moins un choix." ,
"missinganswer" : "Le champ \"%s\" est obligatoire pour pouvoir valider le formulaire." ,
"missingvalidation" : "Vous devez cocher la case \"%s\" pour pouvoir valider le formulaire." ,
"objectmail" : "[Quomodo] - Message de la page \"%p\" de votre site \"%s\"" ,
"bodyheader" : "Un internaute prend contact depuis la page \"%p\" de votre site :\r%pageurl" ,
"bodyheaderself" : "Vous trouverez ci-dessous une copie de la prise de contact que vous venez d'effectuer.\r\rVous avez pris contact sur la page \"%p\" du site :\r%pageurl" ,
"bodytitle" : "Titre : " ,
"bodydesc" : "Présentation : " , 
"bodyalertreplyok" : "\rNE PAS RÉPONDRE DIRECTEMENT À CE MAIL. Pour contacter l'internaute, écrivez-lui à : %s" ,
"bodyalertreplyokself" : "\rVoici les infos que vous avez indiquées :" ,
"bodyalertdonoreply" : "\rNE PAS RÉPONDRE DIRECTEMENT À CE MAIL." ,
"bodyfooter" : "\r\rL'équipe Quomodo\r\rPour toute question ou suggestion, rendez-vous sur l'aide de Quomodo:\rhttp://aide.quomodo.com\rVous pouvez également nous contacter en envoyant un mail à:\rcontact@quomodo.com\r" ,
"noanswer" : "(aucune réponse)" ,
"nofile_displayed" : "(aucun fichier)" ,
"file_displayed" : "voir fichier joint %s" ,
"mailsent" : "Votre demande a été correctement envoyée." ,
"mailnotsent" : "Un problème est survenu. La demande de contact n'a pas pu être envoyée." ,
"snname" : "Note Contact" ,
"plug" : "Contact_Proposez un formulaire de contact, d'inscription, de commande, etc. à vos visiteurs." ,
"emptylabel" : "champ" ,
"nodatatoexport" : "Aucune donnée à exporter." ,

"export_btn" : "Exporter" ,
"reset_btn" : "Remettre à zéro" ,
"export_reset_title" : "Export vers Excel ou Remise à zéro" ,
"export_reset_desc" : '<div style="text-align: left ; padding: 8px">Vous pouvez :<ul><li>exporter le fichier Excel des réponses</li><li>ou le remettre à zéro</li></ul></div>' ,
"confirm_reset" : "Ceci supprime définitivement toutes les données enregistrées dans le formulaire. Merci de confirmer." ,

"copytosender" : "m'adresser une copie" ,

"desc" : "(...)"
} ;

var contact_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "contact_msgs_fr_js_loaded" ) ;

var contact_json_template = { version : 2 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } ,  textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" }, showsignature : "false" , form: [ ], emails : [ ], common: { left : 20 , top : 0 , width : 450 } } ; 

var contact_formtypes = [ "input", "textarea", "select", "checkboxes", "email", "validationbox", "title", "comment" , "file" , "date" ] ;

var contact_colordesc = {
	"qmc3" : function( r ) {
		if ( r.header.icon == "false" ) return "" ;
		return "/services/contact/images/contact48.png" ;
	}
} ; 
var contact_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "italic" : "textstyles.italic"  , "center" : "textstyles.center" }  };


function contact_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == contact_json_template.version ) ) return r ;
	if ( r.version<2 ) contact_upgradejsontov2( r ) ;
	r.version = contact_json_template.version;
	return r ;
}

function contact_upgradejsontov2(r) {
	r.textstyles = { size: String( Math.max( Math.min( 3 - parseInt( r.textsize , 10 ) , 2 ) , 0 ) ) , bold : "false" , italic : "false" } ;
	var oldfonts = [ 0 , 1 , 3 , 4 ] ;
	r.textstyles.font = oldfonts[ parseInt( r.textfont , 10 ) - 1 ] ;
	r.header.display = String( r.headerdisplay == 1 ) ;
	r[ "showsignature" ] = String( r.signature !=0 ) ;
	delete r.textsize ;
	delete r.textfont ;
	delete r.headerdisplay ;
	delete r.signature ;
	return r ;
}

function contact_datepicker( td ) {
	q_datepicker( $( "input", td ), { datePicker : { changeMonth: true, changeYear: true, yearRange : 'c-99:c+99', dateFormat : "dd/mm/yy", defaultDate : $( "input", td ).val() }, displayFormat: "dd.mm.yy", displayField : $( "div", td ) } ) ;
}

function contact_renderform_view( div, r ) {
	if ( ! r ) r = qsn_thenotes[ div.id ] ;
	var f = r.form ;
	$( ".contact_form_form", div ).attr( "id" , "form_" + div.id ).attr( "name" , "form_" + div.id ) ;
	var t = $( ".contact_form", div ).eq( 0 );
	var tr, td, ff, d, e, ft ;
	var displaymandatory = false ;
	var expemail = false ;
	for ( var i = 0; i < f.length; i ++ ) {
		var id = div.id + "_field_"  + i ;
		ff = f[ i ] ;
		tr = $( '<tr></tr>' )
			.attr( "type", ff.type )
			.attr( "mandatory", ff.mandatory )
			.appendTo( t );
		
		if ( ff.type == "email" && ff.expemail ) expemail = true ;
		// label
		if ( $.inArray( ff.type, [ "title", "comment" ] ) == -1 ) {
			if ( $.inArray( ff.type, [ "checkboxes", "textarea" ] ) == -1 ) td = $( '<td valign="middle" width="40%"></td>' ).appendTo( tr );
			else td = $( '<td valign="top" width="40%"></td>' ).appendTo( tr );
			
			var textField = $.trim( ff.label ).replace( new RegExp("[ \t]*:$"), "" ) ;
			if ( textField && ! ( /\?$/ ).test( textField ) ) textField += contact_message[ ":" ] ;
			td.append( $( '<div class="contact_formelem contact_formlabel qsn1 text_bw qtxt1 all"></div>' )
				.html( textField ) 
			);
			td = $( '<td valign="top"></td>' ).appendTo( tr );
			// type
			if ( ff.type == "select" ) {
				$( '<select class="contact_formelem contact_forminput qtxt1 all"></select>' )
					.appendTo( td )
					.options( [ { name : contact_message[ "choose" ], value : "", disabled : true } ].concat( $.map( ff.options, function( v ){ return { name : v, value : v }; } ) ) );
			} else if ( ff.type == "checkboxes" ) {
				$.each( ff.options, function( i, v ){ td
					.append( $( '<input type="checkbox" id="' + id + i + '" style="margin-right:6px;"/>' ).val( v ) )
					.append( $( '<label for="' + id + i + '" class="contact_formelem qtxt1"></label>' ).html( v ) )
					.append( '<br />' );
				} );
			} else if ( ff.type == "textarea" ) td.append( '<textarea rows="5" class="contact_formelem contact_forminput qsn1 bg_self__text_bw_bd_bw qtxt1 all"></textarea>' );
			else if ( ( ff.type == "input" ) || ( ff.type == "email" ) ) td.append( '<input type="text" class="contact_formelem contact_forminput qsn1 bg_self__text_bw_bd_bw qtxt1 all" />' );
			else if ( ff.type == "validationbox" ) { td
				.append( '<input type="checkbox" id="' + id + '" style="margin-right:6px;" value="valid"/>' )
				.append( '<label for="' + id + '">' + ff.validationtext + '</label>' );
			} else if ( ff.type == "file" ) { td
				.append( '<input type="file" id="file_' + id + '" name="file_' + id + '" style="margin-right:6px;" value="valid"/>' ) ;
			} else if ( ff.type == "date" ) { 
				td.append( '<div class="contact_formdate qsn1 bg_self__text_bw_bd_bw qtxt1 all"> </div><input type="hidden" class="contact_formelem" value="" />' ) ;
				if ( q_pagemode() == "makeweb" ) td.get( 0 ).setAttribute( "onclick" , "contact_datepicker( this )" ) ;
				else td.unbind( "click" ).click( function() { contact_datepicker( this ) ; } ) ;
			}
		} else {
			if ( ff.type == "comment" ){
				$( '<td valign="top" colspan="2" style="font-style:italic;font-size:10px;" align="right"></td>' )
					.html( ff.label )
					.appendTo( tr );
			} else if ( ff.type == "title" ){
				$( '<td valign="top" colspan="2"></td>' )
					.append( $( '<h3 style="border-bottom-style:solid; border-bottom-width: 1px;" class="qsn1 bd_bw"></h3>' ).html( ff.label ) )
					.appendTo( tr );
			}
		}
		
		$( ":input", tr ).mousedown( function( event ) { q_stopPropagation( event ) ; } );
		// options
		tr.append( '<td valign="top" align="center" style="width:14px"><span class="contact_mandatorysign">' + ( ff.mandatory ? "*" : " " ) + '</span></td>' );
		if ( ff.mandatory ) displaymandatory = true ;
	}
	$( ".contact_showmandatory", div ).eq( 0 ).toggle( displaymandatory == true );
	if ( expemail ) {
		$( "input.contact_copytosender:eq(0)" , div ).attr( "id" , div.id + "_cts" ) ;
		$( "label.contact_copytosender:eq(0)" , div ).attr( "for" , div.id + "_cts" ).html( contact_message[ "copytosender" ] ) ;
	} else $( "label.contact_copytosender:eq(0)" , div ).parent( "td" ).remove() ;
}

/*
function -
function MAIL
*/

function contact_sendmessage( x ) {
	if ( ! q_readytosubmit() ) return false ;
	var div = getContainer( x ) ;
	var r = qsn_thenotes[ div.id ] ;

	var validEmails = [] ;
	var trs = $( ".contact_form:eq(0) tr", div ) ;
	var body = "" ;
	var expemail = null ;
	var f, tr, e, v , vdisplayed , vformdisplayed ;
	var withmandatory = false;
	var savedvalues = [] ;
	var formobj = { version : r.common.date , items : [] } ;
	var obj = formobj.items ;
	var currobj = obj ;
	for ( var i=0; i < r.form.length; i++ ) {
		vdisplayed = vformdisplayed = null ;
		f = r.form[ i ] ;
		var datalabel = label = $.trim( f.label.replace( ":", "" ) ) ;
		tr = trs.eq( i );
		e = $( ":input", tr );
		if ( f.type == "select" ) {
			v = e.val() ;
			savedvalues.push( v ) ;
			label += " (" + contact_message[ "select" ] + ")" ;
			if ( ! v || ! v.length ) v = ( f.mandatory ) ? "" : contact_message[ "noanswer" ] ;
		} else if ( f.type == "textarea" ) {
			v = e.val();
			savedvalues.push( v ) ;
		} else if ( f.type == "checkboxes" ) {
			v = $( ":input:checkbox:checked", tr ).map( function( i, va ){ 
				if ( $( va ).next( "span" ).length ) return $( va ).next().html();
				return $( va ).val(); 
			} ).toArray() ;
			savedvalues.push( v ) ;
			v = v.join(", ") ;
			if ( ! v ) v = contact_message[ "noanswer" ] ;
		} else if ( f.type == "validationbox" ) {
			savedvalues.push( null ) ;
			v = vformdisplayed = $( ":input:checkbox:checked", tr ).map( function( i, va ){ return $( va ).val(); } ).toArray().join(", ") ;
			datalabel = f.validationtext || label ;
			if ( v ) v += " -> \"" + f.validationtext + "\"" ;
			else vformdisplayed = "no" ;
		} else if ( $.inArray( f.type, [ "title", "comment" ] ) != -1 ) {
			savedvalues.push( null ) ;
			v = "" ;
		}
		else if ( f.type == "file" ) {
			savedvalues.push( null ) ;
			var re = new RegExp( ".*[:/\\\\]([^:/\\\\]+)$" ) ;
			v = $.trim( e.val().replace( re , "$1" ) ) ;
			if ( v == "" ) vdisplayed = contact_message[ "nofile_displayed" ] ;
			else vdisplayed = contact_message[ "file_displayed" ].replace( /%s/ , v ) ;
		} else {
			v = e.val();
			savedvalues.push( v ) ;
		}

		if ( f.mandatory ) {
			if ( v == "" ) {
				if ( f.type == "validationbox" ) q_alert( contact_message[ "missingvalidation" ].replace( "%s", f.validationtext ) ) ;
				else q_alert( contact_message[ "missinganswer" ].replace( "%s", f.label ) ) ;
				return e.focus() ;
			}
			withmandatory = true;
			body += label + "*" + contact_message[ ":" ] ;
		} else body += label + ( ( label != "" && $.inArray( f.type , [ "title" , "comment" ] ) == -1 ) ? contact_message[ ":" ] : "" ) ;

		if ( f.type == "email" ) {
			if ( ( v != "" ) && ( ! verbosevalidemail( v ) ) ) return e.focus() ;
			validEmails.push( v ) ;
			if ( f.expemail == true ) expemail = v ;
		}
		if ( f.type == "title" ) {
			var k = datalabel || ( contact_message[ "emptylabel" ] + obj.length ) ;
			currobj = {} ;
			currobj[ k ] = [] ;
			obj.push( currobj ) ;
			currobj = currobj[ k ] ;
		} else if ( f.type != "comment" ) {
			var o = {} ;
			o[ datalabel ] = vformdisplayed || vdisplayed || v ;
			currobj.push( o ) ;
		}
		body += ( vdisplayed || v ) + "\n\n" ;
	}
	
	if ( ! expemail && validEmails.length == 1 ) expemail = validEmails[ 0 ] ;
	
	//var club_url = "http://" + ( ( window.clubhost ) ? clubhost : ( window.location.host + "/" + window.clubprivatedomain ) ) + "/";
	var club_url = q_httpsiteurl() + "/" ;
	
	var pagename = "" ;
	if ( q_pagemode() == "web" ) {
		for ( var i in web_svctopages ) if ( currsvcid == web_svctopages[ i ].id ) pagename = web_svctopages[ i ].name ;
	} else pagename = q_currsvcjson().weblink ;

	var m = { 
		frommail :  ( expemail || "nepasrepondre-form@quomodo.com" ),
		objectmail :  contact_message[ "objectmail" ].replace( "%p", q_currsvcname() ).replace( "%s", q_spacename()) ,
		bodymail : contact_message[ "bodyheader" ]
			.replace( "%p", q_currsvcname() )
			.replace( "%pageurl", club_url + pagename ) 
			//+ ( expemail ? contact_message[ "bodyalertreplyok" ].replace( "%s", expemail ) : contact_message[ "bodyalertdonoreply" ] )
			+ ( ! expemail ? contact_message[ "bodyalertdonoreply" ] : "" )
			+ ( ( r.header.text || r.text ) ? "\n\n------\n" : "" )
			+ ( ( r.header.text ) ? ( contact_message[ "bodytitle" ] + r.header.text ) : "" )
			+ ( ( r.header.text && r.text ) ? "\n\n" : "" )
			+ ( ( r.text ) ? ( contact_message[ "bodydesc" ] + r.text ) : "" )
			+ "\n\n------\n" 
			+ body
			+ "------" 
			+ ( ( withmandatory ) ? ( "\n* = (" + contact_message[ "mandatory" ] + ")\n" ) : "\n" )
			/*+ contact_message[ "bodyfooter" ]*/,
		tomail : r.emails.length ? r.emails : "svcadmins",
		svcid : currsvcid,
		noteid : div.id,
		form : formobj
	};
	if ( expemail && $( "input.contact_copytosender:eq(0):checked" , div ).length > 0 ) {
		m.ccmail = expemail ;
		m.frommailself = "nepasrepondre-form@quomodo.com" ;
		m.bodymailself = contact_message[ "bodyheaderself" ]
			.replace( "%p", q_currsvcname() )
			.replace( "%pageurl", club_url + pagename ) 
			+ contact_message[ "bodyalertreplyokself" ]
			+ ( ( r.header.text || r.text ) ? "\n\n------\n" : "" )
			+ ( ( r.header.text ) ? ( contact_message[ "bodytitle" ] + r.header.text ) : "" )
			+ ( ( r.header.text && r.text ) ? "\n\n" : "" )
			+ ( ( r.text ) ? ( contact_message[ "bodydesc" ] + r.text ) : "" )
			+ "\n\n------\n" 
			+ body
			+ "------" 
			+ ( ( withmandatory ) ? ( "\n* = (" + contact_message[ "mandatory" ] + ")\n" ) : "\n" )
	}
	m.bccquomodo = false ;
	q_fsm_wait();
	var callback = function( x ){
		q_fsm_delete();
		if ( x.mailsent == 0 ) return q_alert( contact_message [ "mailnotsent" ] ) ;
		q_bubble( contact_message [ "mailsent" ] , { callback : function(){
			if ( quomodo && quomodo.page && quomodo.page.isPopup ) return quomodo.page.close() ;
			$( ".contact_restore:eq(0)" , div ).show().css( "color" , div.isdark ? "#AAA" : "#666" ).unbind( "click" ).bind( "click" , function(){
				var trs = $( ".contact_form:eq(0) tr", div ) ;
				for ( var i=0; i < r.form.length; i++ ) {
					f = r.form[ i ] ;
					if ( savedvalues[ i ] == null ) continue ;
					tr = trs.eq( i );
					e = $( ":input", tr );
					if ( f.type == "checkboxes" ) {
						$( ":input:checkbox", tr ).each( function(){
							var $this = $( this ) ;
							var v = ( $this.next( "span" ).length ) ? $this.next().html() : $this.val() ;
							if ( $.inArray( v , savedvalues[ i ] ) != -1 ) $this.prop( "checked" , true ) ;
						} ) ;
					} else if ( f.type == "date" ) {
						e.val( savedvalues[ i ] ) ;
						e.prev( "div" ).html( savedvalues[ i ] ) ;
					} else e.val( savedvalues[ i ] ) ;
				}
			} ) ;
			$( ".contact_form", div ).eq( 0 ).empty();
			contact_renderform_view( div, r ) ;
			qsn_settextproperties( div.id ) ;
			qsn_setcolors( div.id ) ;
		} } ) ;
	} ;
	var langsvc = currsvcid.replace( /@intl/ , "@" + q_lang ) ;
	if ( $( "input:file" , div ).map( function(){ return $(this).val() || null ; } ).length ) {
		if ( $( ".contact_form_form input[name=data]" , div ).length == 0 ) $( ".contact_form_form", div ).append( '<input type="hidden" name="data" id="data"/>' ) ;
		$( ".contact_form_form input[name=data]" , div ).val( q_toplist( m ) ) ;
		q_remote_uploadwithoptions( { service : langsvc , mission : "newcontact" } , $( ".contact_form_form", div ).attr( "id" ) , callback ) ;
	} else {
		document.mainform.mission.value = "newcontact" ;
		q_ajaxsubmitwithservice( langsvc , m , callback ) ;
	}
}


var countdown_message = {
"plug" : "Compte à rebours_Décomptez le temps qu'il reste avant un prochain événement.",
"defaultEvent" : "Nouvel Événement",
"defaultEventTitle" : "Réunion",
"dayDoesntExist" : "Ce jour n'existe pas",
"afterYear3000" : "Cette date est trop éloignée dans le temps !",
"lateDate" : "Cette date est déjà passée",
"validDate" : "Cette date est valide !",
"screen_WrittenOn" : "Le ",
"screen_WrittenAt" : " à ",
"screen_WrittenHour" : "h",
"remainingDays" : " jours",
"remainingDay" : " jour",
"remaining" : "Il reste :",
"elapsed" : "...passé depuis :",
"tip_displayLogo" : "afficher le logo",
"tip_hideLogo" : "masquer le logo",
"displayLogo" : "afficher le logo",
"hideLogo" : "masquer le logo",
"logo" : "Logo : ",
"alerts" : "Cloche", 
"announcements" : "Mégaphone",
"around_the_clock" : "Autour du cadran", 
"calendar_events" : "Calendrier", 
"countdown_logo" : "Montre", 
"hour_glass" : "Sablier", 
"launch" : "Fusée", 
"sos" : "Girophare", 
"stopwatch" : "Chronometre", 
"symbol_clock" : "Horloge", 
"symbol_error" : "Important", 
"traffic_light_green" : "Feu Vert"
} ;

var countdown_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "countdown_msgs_fr_js_loaded" ) ;


var countdown_json_template = { version : 3, color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon : "" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "true" } , text : "", common : { width : 340 }, logoIsHidden : 0 , logo : "hour_glass" } ;

var countdown_colordesc = {
	"qmc3" : function( r ){
		if ( ! r.header.icon || r.header.icon == "false" ) return "" ;
		return "/services/wsg/images/icons/" + r.header.icon + ".png" ;
	}
} ;
var countdown_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" }  };



function countdown_upgradejson( r ) {
	if ( ! r.version ) r.version = 1 ;
	if ( r.version == countdown_json_template.version ) return r ;
	if ( r.version < 2 ) r = countdown_upgradejsontov2( r ) ;
	if ( r.version < 3 ) r = countdown_upgradejsontov3( r ) ;
	r.version = countdown_json_template.version ;
	return r ;
}

function countdown_upgradejsontov2( r ) {
	r.color = -1 ;
	delete r.anneeEvenement ; 
	delete r.moisEvenement ; 
	delete r.jourEvenement ; 
	delete r.heureEvenement ; 
	delete r.minuteEvenement ;  
	return r ;
}

function countdown_upgradejsontov3( r ) {
	r.header = countdown_json_template.header;
	r.header.display = "false";
	r.text = r.titreEvenement;
	r.textstyles = countdown_json_template.textstyles;
	r.textstyles.size = "0";
	r.logo = "countdown_logo"; 
	delete r.titreEvenement;
	return r ;
}

function countdown_initforweb( id ) {
	countdown_renderevent( id ) ;
}

function countdown_renderevent( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[ noteid ] ;
	var eventDate = new Date( r.timestampEvenement ) ;
	var annee = eventDate.getFullYear();
	var mois = eventDate.getMonth() ;
	var jour = eventDate.getDate() ;
	var heure = eventDate.getHours() ;
	var minute = eventDate.getMinutes() ;

	$( ".countdown_view_titreEvenement:eq(0)", div ).html( r.text  );
	$( ".countdown_view_dateEvenement:eq(0)", div ).html( countdown_message["screen_WrittenOn"] + jour + "." + ( mois + 1 ) + "." + annee + countdown_message["screen_WrittenAt"] + twodigs( heure ) + countdown_message["screen_WrittenHour"] + twodigs( minute ) + "<br /><br />" );

	if ( qsn_currstate != "edit" ) {
		if ( q_pagemode() == "makeweb" ) countdown_update( noteid ) ;
		else quomodo.events.addTimerListener( "clocktimer" , function( eventData , eventName ) { countdown_update( this.id , eventData.now ) } , div ) ;
	}
}

function countdown_update( noteid , thedate ){
	var t = thedate || new Date() ;
	var petitMessage = "<span>" + countdown_message["remaining"] + "</span><br /><span>";
	
	var remainingSeconds = Math.floor( ( qsn_thenotes[ noteid ].timestampEvenement - t.getTime() ) / 1000 );
	if ( remainingSeconds <= 0 ){
		petitMessage = "<span style=\"font-size: 15px;color: rgb(255,255,255);\">" + countdown_message["elapsed"] + "</span><br /><span style=\"font-size: 20px;color: rgb(255,255,255);\">";

		// fond à rouge mais on garde la couleur dans le json
		var oldc = qsn_thenotes[ noteid ].color ;
		qsn_thenotes[ noteid ].color = "rgb(255,0,0)";
		qsn_setcolors( noteid,  [ "button", "text", "countdown_view_titreEvenement", "countdown_view_dateEvenement", "countdown_view_compteur"] ) ; // 2013-11-13, vh : avant qsn_setnotecolors mais ne mettait pas le fond rouge...
		qsn_thenotes[ noteid ].color = oldc ;
	}
	
	return $( ".countdown_view_compteur:eq(0)", ge( noteid ) ).html( petitMessage + countdown_timestring ( Math.abs(remainingSeconds) ) + "</span>" );
}

function countdown_timestring ( t ) {
	var s = twodigs( t % 60 ) + "s" ;
	t = Math.floor ( t / 60 ) ;

	if ( t == 0 ) return s ;
	s = twodigs( t % 60 ) + "mn " + s ;
	t = Math.floor ( t / 60 ) ;

	if ( t == 0 ) return s ;
	s = twodigs( t % 24 )+ "h " + s ;
	t = Math.floor ( t / 24 ) ;

	if ( t == 0 ) return s ;
	s = "" + ( t ) + ( ( t > 1 ) ? countdown_message["remainingDays"] : countdown_message["remainingDay"] ) + " " + s ;
	return s ;
}


var dropbox_message = {
"snname" : "Note Boite à Photos" ,
"plug" : "Boite à Photos_Laissez vos membres déposer des photos sur votre site, et créez des pages avec celles-ci." ,
"desc" : "(...)" ,
"newnoteprompt" : "Invitez ici les membres du site à déposer leurs photos dans cette note." ,
"login_title" : "Le dépôt de photos est réservé aux membres de l'espace." ,
"login_prompt" : "Si vous êtes membre du site, connectez-vous avec votre identifiant et votre mot de passe. Sinon inscrivez-vous pour devenir membre de ce site." ,
"objectmail" : "[Quomodo] - Dépôt de photos sur votre site \"%s\"" ,
"bodymail" : "%u a déposé de nouvelles photos sur la page %p du site.\r\rAttention : les photos ne sont pas encore en ligne, c'est à vous qu'il revient de les publier.\r\rPour cela, connectez-vous en admin sur la page %p, puis cliquez le lien \"Voir les dépôts\" qui se présente sur la smartnote Dépôt photos.\r\rL'équipe Quomodo\r--\rSupport : contact@quomodo.com\rAide : http://aide.quomodo.com\rNews : http://news.quomodo.com\rAdmins : http://mon.quomodo.com\rQuomodo : http://www.quomodo.com\r\r" ,
"mailsent" : "Votre dépôt a bien été enregistré et les administrateurs du site ont reçu un mail." ,
"mailnotsent" : "Un problème est survenu. Les administrateurs du site n'ont pas été avertis de votre dépôt."
} ;

var dropbox_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "dropbox_msgs_fr_js_loaded" ) ;

var dropbox_json_template = { version : 1 , text : "" , color : "rgb(100%,100%,100%)" , header : { display : "true" , text : "", icon : "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" } , uploads : [ ] } ;

function dropbox_initforweb( id ) {
	$( "#" + id + " .dropbox_viewlink:eq(0)" ).remove() ;
}

function dropbox_qwiz( x ) {
	if ( ! window.web_js_loaded ) {
		var note = getContainer( x ) ;
		qlub_openqwiz( "qwiz_newpage" , { src : "dropbox" , dropboxid : note.id } ) ;
	} else {
		club_login_block( { title: dropbox_message[ "login_title" ], message : dropbox_message[ "login_prompt" ] } ) ;
	}
}


var eqr_message = {
"defaultimagesourceurl" : "Coller ici l'adresse de l'image qui peut être fixe (graphique, photo...) ou animée (webcam...)." ,
"pclocalnotvalidate" : "Vous n'avez pas validé le choix de votre image.\n\nCelle-ci ne va pas être enregistrée." ,
"badimgextension" : "Le fichier image que vous avez choisi n'a pas la bonne extension.\n\nVeuillez choisir un autre fichier." ,
"fermer" : "fermer" ,
"validateimage" : "Veuillez valider l'image" ,
"plug" : "Equipe_L'annuaire de l'équipe, avec plein de fonctions très web." ,
"desc" : "(...)",
"title": "Titre",
"lastname": "Nom",
"forename": "Prénom",
"surname": "Surnom",
"birthday": "Anniversaire",
"birthday_type": "Né(e) le :",
"date": "jj/mm/aaaa",
"posteequipe": " ",
"numerojoueur": " ",
"poidsjoueur": "(en kg)",
"taillejoueur": "(en m)",
"specif_type": "Spécificités :",
"specifjoueur": " ",
"parcours_type": "Parcours :",
"parcoursjoueur": " ",
"poste_type": "Poste :",
"numero_type": "N° :",
"poids_type": "Poids :",
"taille_type": "Taille :",
"type": "Type",
"personname": "Nom",
"of": "sur",
"suppressmember": "Êtes-vous certain de vouloir supprimer ce membre?",
"selectanimage" : "Sélectionnez une image de l'équipe:" ,
"uploadtitlemembernew" : "Ajout d'une image du membre" ,
"uploadtitlememberedit" : "Changement de l'image du membre",
"uploadtitlenew" : "Ajout d'une image de l'équipe" ,
"uploadtitleedit" : "Changement de l'image de l'équipe",
"nomequipe" : "Nom de l'équipe",
"description" : "Description de l'équipe",
"nomember" : "Aucune fiche membre.",
"emptyItem" : "Veuillez renseigner le nom ou le prénom du membre."
} ;

var eqr_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "eqr_msgs_fr_js_loaded" ) ;


var eqr_json_template = { version: 1 , nomequipe: "Liste des membres", description: "", color: "", img: { kind: ""}};

var eqr_json_templatereply = { version: 1 , img: { kind: ""}, items: {name: {lastname: "", forename: ""}, surname: "", birthday: {type: "text", date: ""}, poste: {type: "text", posteequipe: ""}, numero: {type: "text", numerojoueur: ""}, poids: {type: "text", poidsjoueur: ""}, taille: {type: "text", taillejoueur: ""}, specif: {type: "text", specifjoueur: ""}, parcours: {type: "text", parcoursjoueur: ""} } } ;

// var eqr_globaldata = { "template": { mynotes: {}, notesload: {}} };

// var eqr_id="";
// 
var eqr_mynotes={};

var eqr_notesload={};

// var eqr_isimgequip=false;

// var eqr_displaycolor=true;

var eqr_magnetism=60;

var eqr_prepared = false;


function eqr_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == eqr_json_template.version ) ) return r ;
	return r
}


function eqr_additem(itemid){
	var template = ( qsn_currstate=="edit" ) ? "eqr_replytemplate_edit" : "eqr_replytemplate" ;
	var parid=qsn_thenotes[ itemid ].parentid;
	var parentdiv = getelement(parid) ;
	if ( ! parentdiv ) return null ;

	parentdiv=getElementsByClassName(parentdiv,"eqr_preview")[0];
	
	for (var i=0; i<parentdiv.childNodes.length; i++) parentdiv.removeChild(parentdiv.childNodes[i]);
	
	var div=qsn_clonetemplate( itemid , template, parentdiv);

	qsn_renderhtml(itemid) ;
	if (!qsn_isnewnote){
		qsn_thenotes[parid].user["lastitem"]=itemid;
	}

	return div ;
}

function eqr_beginResize( elem , ee , movecallBack , upcallBack ) {
	if (pages_mode() != "edit") return false;
	if (members[memberid].userlevel != "admin") return false;
	if (qsn_edittarget) return false;
		
	var dragbutton=getElementsByClassName(elem,"eqr_dragbutton")[0];
	dragbutton.style.cursor="col-resize";
	var e = ee || window.event ;
	
	if ( ! window.qsn_currstate ) var qsn_currstate = "view" ;	
	if ( ( ( ( new Date() ).getTime() - latestclick.time ) < 700 ) && ( Math.abs ( q_clientX( e ) - latestclick.x ) < 2 ) && ( Math.abs ( q_clientY( e ) - latestclick.y ) < 2 ) && ( elem == latestclick.target ) && ( ! ( /(edit|new)/.test ( qsn_currstate ) ) ) ) return false ;
	latestclick.time = ( new Date() ).getTime() ;
	latestclick.x = q_clientX( e ) ; 
	latestclick.y = q_clientY( e ) ; 
	latestclick.target = elem ;

	var dw = q_clientX( e ) - elem.offsetWidth;
	var clientX0 = q_clientX( e ) ;
	var clientY0 = q_clientY( e ) ;

	function moveHandler( ee ) {
		var em = ee || window.event ;
		if ( qsn_currstate == "tm" ) return ;
		var ew = q_clientX( em ) - dw;
		movecallBack( elem, ew ) ;
		q_stopPropagation( em );
		q_preventDefault( em );
	}
	function upHandler( ee ) {	
		var eu = ee || window.event ; 
		document.onmouseup = null ;
		document.onmousemove = null ;
		var ew = q_clientX( eu ) - dw ;
		var isMove = ( ( parseInt( clientX0 , 10 ) == parseInt( q_clientX( eu ) , 10 ) ) ) ;
		upcallBack( elem , ew ) ;
		elem = null ;
		q_stopPropagation( eu ) ;
		q_preventDefault( eu ) ;
	}
	document.onmousemove = moveHandler ;
	document.onmouseup = upHandler ;
	q_stopPropagation( e );
	// q_preventDefault( e );
	if ( ( window.getSelection ) && ( window.getSelection() == "" ) ) q_preventDefault( e );
	if ( ! window.getSelection ) q_preventDefault( e );
}

function eqr_moveResizeHandler( elem , ew ){
	var leftcolwidth = Math.max ( 420, ew );
	var containerwidth = getContainer(elem).offsetWidth - 22;
	eqr_switchlistitem(getContainer(elem),true);
	if ((containerwidth-eqr_magnetism) <= leftcolwidth){
		leftcolwidth =  containerwidth;
		eqr_switchlistitem(getContainer(elem),false);
	}
	var leftcolmargin = containerwidth - leftcolwidth;
	var preview=getElementsByClassName(getContainer(elem),"eqr_preview_container")[0];
	elem.style.width = leftcolwidth + "px";
	preview.style.width = leftcolmargin + "px";
}

function eqr_upResizeHandler( elem , ew ) {
	elem.style.cursor = "auto" ; // "move" ;
	var y = getContainer( elem ) ;
	var theid = y.id ;
	var sc = qsn_thenotes[ theid ].spacedefaults.common ;
	var uc = qsn_thenotes[ theid ].user.common ;
	if ( ! uc ) {
		qsn_thenotes[ theid ].user.common = {} ;
		uc = qsn_thenotes[ theid ].user.common ;
	}
	var isselected = ( ( qsn_currstate == "view" ) || ( qsn_currstate == "tm" ) ) ;
	if ( qsn_currstate == "tm" ) isselected = tmswitchSelected ( elem ) ;
	if ( isselected ) qsn_puttofront( theid ) ;
	if ( qsn_currstate == "tm" ) return false ;
	var isowner = ( members[memberid].userlevel == "admin" ) ;
	
	if (ew==parseInt(uc.leftcolwidth)){
		var containerwidth = getContainer(elem).offsetWidth - 22;
		var preview=getElementsByClassName(getContainer(elem),"eqr_preview_container")[0];
		if (containerwidth > ew){
			eqr_switchlistitem(getContainer(elem),false);
			elem.style.width = containerwidth + "px";
			preview.style.width = "0px";
			uc.leftcolwidth = "" + elem.offsetWidth + "px" ;
			if ( isowner ) sc.leftcolwidth = "" + elem.offsetWidth + "px" ;
		}
		else{
			if (ew == 420) getContainer(elem).style.width = parseInt(getContainer(elem).style.width) + 300 + "px";
			ew = Math.max ( 420, ew - 300 );
			eqr_switchlistitem(getContainer(elem),true);
			elem.style.width = ew + "px";
			containerwidth = getContainer(elem).offsetWidth - 22;
			preview.style.width = containerwidth - ew + "px";
			uc.leftcolwidth = "" + ew + "px" ;
			uc.width = "" + containerwidth + "px" ;
			if ( isowner ){
				sc.leftcolwidth = "" + ew + "px" ;
				sc.width = "" + containerwidth + "px" ;
			}
		}
	}
	else{
		ew = Math.max ( 420, ew );
		var containerwidth = getContainer(elem).offsetWidth - 22;
		if ((containerwidth-eqr_magnetism) <= ew) ew = containerwidth;
		uc.leftcolwidth = "" + ew + "px" ;
		if ( isowner ) sc.leftcolwidth = "" + ew + "px" ;
	}

	if ( qsn_edittarget != null ) return false ;
	if ( isowner ) {
		qsn_adduserrefreshid( theid ) ;
		qsn_spacedefaultsnotechanged( theid ) ;
	} else {
		qsn_usernotechanged( theid ) ;
	}
}

function eqr_beginDrag( elem , e ) {
	xqsn_beginDrag( elem , e , eqr_moveHandler , eqr_upHandler ) ;
}

function eqr_moveHandler( elem , ex , ey , ew , isGrow , xylimits ) {
	qsn_moveHandler( elem , ex , ey , ew , isGrow , xylimits );
//	qsn_hasmoved = true ;
	if ( isGrow ) {
		var preview=getElementsByClassName(getContainer(elem),"eqr_preview_container")[0];
		var leftcol=getElementsByClassName(getContainer(elem),"eqr_leftcontent")[0];
		ew = Math.max ( 420, ew ) ;
		//ew = Math.max ( leftcol.offsetWidth, ew );
		eqr_switchlistitem(elem,true);
		if (ew<=(leftcol.offsetWidth+eqr_magnetism)){
			ew=leftcol.offsetWidth;
			eqr_switchlistitem(elem,false);
		}
		var xmax = ( ( xylimits ) && ( xylimits.xmax != undefined ) ) ? xylimits.xmax : null ;
		if ( ( xmax != null ) && ( elem.offsetLeft + ew > xmax ) ) ew = xmax - elem.offsetLeft ;
		elem.style.cursor = "e-resize" ;
		elem.style.width = ew + "px";
		preview.style.width =( ew - leftcol.offsetWidth) + "px";
	}
//	else {
//		elem.style.cursor = "move" ; // "default" ;
//		var xmin = ( ( xylimits ) && ( xylimits.xmin != undefined ) ) ? xylimits.xmin : 2 ;
//		var ymin = ( ( xylimits ) && ( xylimits.ymin != undefined ) ) ? xylimits.ymin : 0 ;
//		if ( ex < xmin ) ex = xmin ;
//		if ( ey < ymin ) ey = ymin ;
// 
//		var xmax = ( ( xylimits ) && ( xylimits.xmax != undefined ) ) ? xylimits.xmax : null ;
//		var ymax = ( ( xylimits ) && ( xylimits.ymax != undefined ) ) ? xylimits.ymax : null ;
//		if ( ( xmax != null ) && ( ex > ( xmax - elem.offsetWidth ) ) ) ex = xmax - elem.offsetWidth ;
//		if ( ( ymax != null ) && ( ey > ( ymax - elem.offsetHeight ) ) ) ey = ymax - elem.offsetHeight ;
//		elem.style.left = ex + "px";
//		elem.style.top = ey+ "px";
//	}
//	if ( ( qsn_currstate == "view" ) || ( qsn_currstate == "tm" ) ) if ( ! isGrow ) qsn_puttofront( getContainer( elem ).id ) ;
}

function eqr_upHandler( elem , ex , ey , ew , isGrow , isMove , xylimits ) {
	elem.style.cursor = "auto" ; // "move" ;
	var y = getContainer( elem ) ;
	var theid = y.id ;
	var sc = qsn_thenotes[ theid ].spacedefaults.common ;
	var uc = qsn_thenotes[ theid ].user.common ;
	if ( ! uc ) {
		qsn_thenotes[ theid ].user.common = {} ;
		uc = qsn_thenotes[ theid ].user.common ;
	}
//	var left = ( uc.left ) ? uc.left : sc.left ;
//	var top = ( uc.top ) ? uc.top : sc.top ;
//	if ( ( ! isGrow ) && ( parseInt( clientX0 , 10 ) == parseInt( left , 10 ) ) && ( parseInt( elem.style.top , 10 ) == parseInt( top , 10 ) ) ) {
	var isselected = ( ( qsn_currstate == "view" ) || ( qsn_currstate == "tm" ) ) ;
	if ( qsn_currstate == "tm" ) isselected = tmswitchSelected ( elem ) ;
	if ( isselected ) qsn_puttofront( theid ) ;
	if ( qsn_currstate == "tm" ) return false ;
//	if ( ! ( /note/.test( y.className ) ) ) return false ;
	var isowner = ( members[memberid].userlevel == "admin" ) ; 
	if ( isGrow ) {
		var leftcol=getElementsByClassName(getContainer(elem),"eqr_leftcontent")[0];
		ew = Math.max ( 420, ew ) ;
		ew = Math.max ( leftcol.offsetWidth, ew );
		var xmax = ( ( xylimits ) && ( xylimits.xmax != undefined ) ) ? xylimits.xmax : null ;
		if ( ( xmax != null ) && ( elem.offsetLeft + ew > xmax ) ) ew = xmax - elem.offsetLeft ;
		if (ew>leftcol.offsetWidth && ew<=(leftcol.offsetWidth+eqr_magnetism)) ew=leftcol.offsetWidth;
		uc.width = "" + ew + "px" ;
		if ( isowner ) sc.width = "" + ew + "px" ;
	} else {
		if ( ex < 0 ) ex = 2 ;
		if ( ey < 0 ) ey = 0 ;
		uc.left = "" + ex + "px" ;
		uc.top =  "" + ey + "px"  ;
		if ( isowner ) {
			sc.left = "" + ex + "px" ;
			sc.top =  "" + ey + "px"  ;
		}
	}
	if ( qsn_edittarget != null ) return false ;
	if ( isowner ) {
		qsn_adduserrefreshid( theid ) ;
		qsn_spacedefaultsnotechanged( theid ) ;
	} else {
		qsn_usernotechanged( theid ) ;
	}
}


function eqr_selectItem(div){
	if (qsn_edittarget && qsn_currstate=="edit"){
		if (qsn_edittarget != div){
			return;
			// qsn_saveedit();
		}
	}

	var selecteditems=getElementsByClassName(getContainer(div.parentNode),"eqr_selectedItem");
	if (selecteditems.length>0){
		for (var i=0; i<selecteditems.length; i++){
			if (selecteditems[i]!=div) selecteditems[i].className=selecteditems[i].className.replace(/\beqr_selectedItem\b/g,"");
		}
	}
	div.className=div.className +" eqr_selectedItem";
	eqr_additem(div.className.split(" ")[0].split("__")[0]);
}

function eqr_selectedItem(div){
	var selecteditems=getElementsByClassName(getContainer(div.parentNode),"eqr_selectedItem");
	if (selecteditems.length>0){
		return selecteditems[0].className.split(" ")[0].split("__")[0]
	}
	else return false;
}

function eqr_selectItemimport(div){
	var memb=div.id.split("__")[1];
	var container=getContainer(div);
	var membercontainer=getElementsByClassName(div,"eqr_membercontent")[0];
	if (members[memb].username){
		var name=members[memb].username;
		var namecontainer=getElementsByClassName(container,"eqr_lastname")[0];
		namecontainer=getElementsByClassName(namecontainer,"eqr_editfield")[0];
		namecontainer.value=name;
		eqr_focusdefaultitem(namecontainer);
		eqr_updateEdit(namecontainer);
	}
	if (members[memb].firstname){
		var name=members[memb].firstname;
		var namecontainer=getElementsByClassName(container,"eqr_forename")[0];
		namecontainer=getElementsByClassName(namecontainer,"eqr_editfield")[0];
		namecontainer.value=name;
		eqr_focusdefaultitem(namecontainer);
		eqr_updateEdit(namecontainer);
	}
	if (members[memb].birthdate){
		var name=members[memb].birthdate;
		var namecontainer=getElementsByClassName(container,"eqr_date")[0];
		namecontainer=getElementsByClassName(namecontainer,"eqr_editfield")[0];
		namecontainer.value=name;
		eqr_focusdefaultitem(namecontainer);
		eqr_updateEdit(namecontainer);
	}
	if (members[memb].pict){
		var name=members[memb].pict;
		var namecontainer=getElementsByClassName(container,"eqr_imgcol")[0];
		if (!getElementsByClassName(namecontainer,"eqr_noteimage")[0]){
			var img = document.createElement("img");
			img.className = "eqr_noteimage";
			img.alt = eqr_message["validateimage"];
			var imgperso=getElementsByClassName(namecontainer,"eqr_imgperso")[0];
			imgperso.appendChild(img);
		}
		namecontainer=getElementsByClassName(namecontainer,"eqr_noteimage")[0];
		namecontainer.src = q_spaceabsoluteurl( null , name );
		qsn_thenotes[container.id].img.src=name;
	}
	rm(div.parentNode);
}

function eqr_notesupdate(noteid,vartoupdate){
	var notes;
	if (vartoupdate=="mynotes") notes=eqr_mynotes;
	if (vartoupdate=="load") notes=eqr_notesload;
	if (vartoupdate!="mynotes" && vartoupdate!="load") return;

	if (vartoupdate=="mynotes"){
		if (notes[noteid]!=null) notes[noteid]=null;
		notes[noteid]= new Array();
	}
	else {if (notes[noteid]==null) notes[noteid]= {};}
	for (var itemid in qsn_thenotes){
		if (qsn_thenotes[itemid]!=null){
			if (qsn_thenotes[itemid].parentid && qsn_thenotes[itemid].common.notekind=="eqr"){
				if (qsn_thenotes[itemid].parentid==noteid){
					if (vartoupdate=="mynotes") notes[noteid].push(itemid);
					else{
						if (notes[noteid][itemid]==null) notes[noteid][itemid]=false;
					}
				}
			}
		}
	}
}

function eqr_addnote ( noteid ) {
	var div=document.getElementById("q_author_stuff");
	if ( qsn_thenotes[ noteid ].parentid ){
		var parid=qsn_thenotes[ noteid ].parentid;
		if (qsn_thenotes[parid]==null){
			qsn_thenotes[noteid]=null;
		}
		else{
			if (eqr_notesload[parid]==null){
				if (getelement(parid)) rm(getelement(parid));
				qsn_addnote(parid);
			}
			else{
				if (eqr_notesload[parid][noteid]!=null){
					if (eqr_notesload[parid][noteid]==false) eqr_notesload[parid][noteid]=true;
					else{
						if (getelement(parid)) rm(getelement(parid));
						qsn_addnote(parid);
					}
				}
				else{
					if (getelement(parid)) rm(getelement(parid));
					qsn_addnote(parid);
				}
			}
		}
	}
	else{
		var template = ( qsn_currstate == "edit" ) ? "eqr_notetemplate_edit" : "eqr_notetemplate" ;
		if (qsn_currstate != "edit"){
			eqr_notesupdate(noteid,"load");
			eqr_notesupdate(noteid,"mynotes");
			eqr_sortlistitem(noteid);
		}
		var itemlist=eqr_mynotes[noteid];
		div = qsn_clonetemplate( noteid , template ) ;
		if (qsn_isnewnote){
			div.style.left= qsn_thenotes[noteid].spacedefaults.common.left;
			div.style.top= qsn_thenotes[noteid].spacedefaults.common.top;
			div.style.width= qsn_thenotes[noteid].spacedefaults.common.width;
			var leftcol=gebcn(div,"eqr_leftcontent");
			var preview=gebcn(div,"eqr_preview_container");
			leftcol.style.width= qsn_thenotes[noteid].spacedefaults.common.leftcolwidth;
			preview.style.width= parseInt(qsn_thenotes[noteid].spacedefaults.common.width) - parseInt(qsn_thenotes[noteid].spacedefaults.common.leftcolwidth) + "px";
//			div.style.width= qsn_thenotes[noteid].spacedefaults.common.width;
			div.style.zindex= qsn_thenotes[noteid].spacedefaults.common.zindex;
			var colors=getsncontextualbackgroundcolors(7);
			var i=Math.round(6*Math.random());
			qsn_thenotes[div.id].color=colors[i];
			div.style.backgroundColor=colors[i];
		}
		
		qsn_renderhtml( noteid ) ;
	}

	return div ;
}

function eqr_renderhtml( noteid ) {
	var div = getelement ( noteid ) ;
	var r = qsn_thenotes[ noteid ] ;
	eqr_rendertext( div , r );
	if (! r.parentid){
		if (qsn_currstate!="edit"){
/*
			if (r.user["lastitem"] && qsn_thenotes[r.user["lastitem"]]) {setTimeout(function (){eqr_additem(r.user['lastitem']);},500);}
			else{
				if (eqr_mynotes[noteid].length>0) {setTimeout(function (){eqr_additem(eqr_mynotes[noteid][0]);},500);}
			}
*/
			eqr_renderlistitem(div,true);
			qsn_setnotecolors(noteid,["linkinnote","eqr_nomequipe","eqr_description"]);
			var buttons=getElementsByClassName(div,"eqr_buttonsleft")[0];
			buttons.style.display="none";
		}
		else{
			eqr_renderlistitem(div,false);
			qsn_setnotecolors(noteid,["linkinnote"]);
		}
	}
	else{
		if ( qsn_currstate == "edit" ) {
			var x=getElementsByClassName(div,"eqr_items")[ 0 ];
			var fields=getElementsByClassName(x,"eqr_editfield");
			var n_fields=fields.length;
			var i=0;
			for (i=0;i<n_fields;i++){
				eqr_blurdefaultitem(fields[i]);
			}
		}
	}
	eqr_renderimg( div , r );
	if (! r.parentid){
		if ( qsn_currstate!="edit" ) {
			if ( r.user.lastitem && qsn_thenotes[ r.user.lastitem ] ) eqr_additem( r.user.lastitem ) ;
			else if (eqr_mynotes[noteid].length>0) eqr_additem(eqr_mynotes[noteid][0]);
		}
	}
}


function eqr_rendertext( div , r ) {
	if (r.parentid){
		if ( r.items == undefined ) return ;

		if (qsn_currstate=="edit"){
			var linkadd=getElementsByClassName(div,"eqr_imgmembadd")[0];
			var linkmodif=getElementsByClassName(div,"eqr_imgmembmodif")[0];
			var linkdelete=getElementsByClassName(div,"eqr_imgmembdelete")[0];
			if (!r.img.src || r.img.src==""){
				linkmodif.style.display="none";
				linkdelete.style.display="none";
			} 
			else linkadd.style.display="none";
		}

		var x=getElementsByClassName(div,"eqr_items")[0];
		var field=getElementsByClassName(x,"eqr_field")[0];
		var containfield=getElementsByClassName(field,"eqr_containfield")[0];
		if (qsn_currstate=="edit") var inputfield=getElementsByClassName(containfield,"eqr_editfield")[0];

		var rr=r.items;
		var rrr=eqr_json_templatereply.items;

		for (var tag in rrr){
			var clone=q_CloneFromNode(field);
			clone.className= "eqr_"+ tag +" "+ clone.className;
			if (qsn_currstate == "edit"){
				var editfield=getElementsByClassName(clone,"eqr_editfield")[0];
				editfield.className= "eqr_"+ tag +" "+ editfield.className;
			}
			var item=x.appendChild(clone);
			item.style.display="none";
			for (var i=0; i<item.childNodes.length; i++) item.removeChild(item.firstChild);
			if (rrr[tag] instanceof Object){
				for (var tag2 in rrr[tag]){
						var clonefield=q_CloneFromNode(containfield);
						clonefield.className= "eqr_"+ tag2 +" eqr_containfield_"+ tag2 +" "+ clonefield.className;
						var duplicatedfield=item.appendChild(clonefield);
						if (qsn_currstate!="edit"){
							var renderfield=getElementsByClassName(duplicatedfield,"eqr_renderfield")[0];
							if (tag2!="type"){
								var content=rr[tag][tag2];
								if (tag=="poids" && content!="") content=rr[tag][tag2]+" kg";
								if (tag=="taille" && content!="") content=rr[tag][tag2]+" m";
								if (content!="") renderfield.innerHTML = wiqi_text2HTML(content);
								else if (tag!="address") renderfield.innerHTML ="&nbsp;";
							}
							else {renderfield.innerHTML=eqr_message[tag+"_type"];}
						}
						else{
							var inputfield_bis=getElementsByClassName(duplicatedfield,"eqr_editfield")[0];
							if (tag2!="type"){
								inputfield_bis.className="eqr_"+ tag2 +" "+ inputfield_bis.className;
								inputfield_bis.value=rr[tag][tag2];
							}
							else{
								rm(inputfield_bis);
								var renderfield=document.createElement("div");
								renderfield.className="eqr_"+ tag2 +" eqr_renderfield eqr_relative";
								renderfield.innerHTML=eqr_message[tag+"_type"];
								duplicatedfield.appendChild(renderfield);
							}
						}
				}
			}
			else{
				var clonefield=q_CloneFromNode(containfield);
				clonefield.className= "eqr_"+ tag +" eqr_containfield_"+ tag +" "+ clonefield.className;
				var duplicatedfield=item.appendChild(clonefield);
				if (qsn_currstate != "edit"){
					var renderfield=getElementsByClassName(duplicatedfield,"eqr_renderfield")[0];
					var content=rr[tag];
					if (tag=="surname" && content!="") content='"'+rr[tag]+'"';
					if (content!="") renderfield.innerHTML = wiqi_text2HTML(content);
					else renderfield.innerHTML ="&nbsp;";
				}
				else{
					var inputfield_bis=getElementsByClassName(duplicatedfield,"eqr_editfield")[0];
					inputfield_bis.className="eqr_"+ tag +" "+ inputfield_bis.className;
					inputfield_bis.value=rr[tag];
				}
			}
		item.style.display="block";
	}
	x.removeChild(field);
	}
	else{
		var leftcol=gebcn(div,"eqr_leftcontent");
		var preview=gebcn(div,"eqr_preview_container");
		var rr=r.spacedefaults.common;
		leftcol.style.width= rr.leftcolwidth;
		preview.style["width"]= parseInt(rr.width) - parseInt(rr.leftcolwidth) + "px";
		
		if (qsn_currstate!="edit"){
			var linkadd=getElementsByClassName(div,"eqr_imgadd")[0];
			var linkmodif=getElementsByClassName(div,"eqr_imgmodif")[0];
			var linkdelete=getElementsByClassName(div,"eqr_imgdelete")[0];
			if (!r.img.src || r.img.src==""){
				linkmodif.style.display="none";
				linkdelete.style.display="none";
			}
			else linkadd.style.display="none";
		
			var nomequipe=getElementsByClassName(div,"eqr_nomequipe")[0];
			nomequipe.innerHTML=wiqi_text2HTML(r.nomequipe);
			var description=getElementsByClassName(div,"eqr_description")[0];
			description.innerHTML=wiqi_text2HTML(r.description);
		}
		else{
			var nomequipe=getElementsByClassName(div,"eqr_nomequipe")[0];
			var inputfield=getElementsByClassName(nomequipe,"eqr_editfield")[0];
			inputfield.value=r.nomequipe;
			var description=getElementsByClassName(div,"eqr_description")[0];
			var inputfield2=getElementsByClassName(description,"eqr_editfield")[0];
			if (r.description) inputfield2.value=r.description;
			else eqr_blurdefaultitem(inputfield2);
		}
	}
}

function eqr_renderimg( div , r ) {
	if ( ! div ) div = qsn_edittarget ;
	if ( ! r ) r = qsn_thenotes[ div.id ] ;
	var img ;
	var cnode ;
	if (r.parentid){
		img = div.getElementsByTagName( "img" )[ 0 ] ;
		if ( ( r.img ) && ( r.img.src ) ) {
			if ( ! img ) {
				cnode = getElementsByClassName( div , "eqr_img" )[ 0 ] ;
				img = document.createElement("img");
				img.className = "eqr_noteimage";
				img.alt = eqr_message["validateimage"];
				if (pages_mode() == "edit"){
					img.onclick=function(){eqr_editimg(this); return false;};
					img.style.cursor="pointer";
				}
				img = cnode.appendChild( img ) ;
				cnode = null ;
			}
			img.src = q_spaceabsoluteurl( null , r.img.src ) ;
		}
		// else {
		// 	if (div.className.match(/\beqr_itemnote\b/g)){
		// 		if ( ! img ) {
		// 			cnode = getElementsByClassName( div , "eqr_img" )[ 0 ] ;
		// 			img = document.createElement("img") ;
		// 			img.className = "eqr_noteimage" ;
		// 			img.alt = eqr_message["validateimage"] ;
		// 			if (!window.web_js_loaded){
		// 				if (members[memberid].userlevel == "admin"){
		// 					img.onclick=function(){eqr_editimg(this); return false;};
		// 					img.style.cursor="pointer";
		// 				}
		// 			}
		// 			img = cnode.appendChild( img ) ;
		// 			cnode = null ;
		// 		}
		// 		img.src="../services/eqr/images/int.png";
		// 		img.className = img.className + " png" ;
		// 	}
		// }
		else{
			rm(img);
		}
	}
	else{
		var leftcont=getElementsByClassName(div,"eqr_leftcontent")[0];
		img = leftcont.getElementsByTagName( "img" )[ 0 ] ;
		if ( ( r.img ) && ( r.img.src ) ) {
			if ( ! img ) {
				cnode = getElementsByClassName( div , "eqr_imgequip" )[ 0 ] ;
				img = document.createElement("img");
				img.className = "eqr_noteimage";
				img.alt = eqr_message["validateimage"];
				if (pages_mode() == "edit"){
					img.onclick=function(){eqr_editimg(this); return false;};
					img.style.cursor="pointer";
				}
				img = cnode.appendChild( img ) ;
				cnode = null ;
			}
			img.src = q_spaceabsoluteurl( null , r.img.src ) ;
			// img.style.width="100%";
		}
		else{
			rm(img);
		}
	}
}


function eqr_displaysettings(){
	if (!eqr_prepared && !qsn_thenotes[qsn_edittarget.id].parentid){
		eqr_prepared=true;
		qsn_colorblock(true,false,eqr_setnotecolor);
	}
	if (eqr_prepared && qsn_thenotes[qsn_edittarget.id].parentid){
		eqr_prepared=false;
		var elem=ge("eqr_colorblock");
		elem.innerHTML="";
	}
}

function eqr_setnotecolor(x,c){
	var r=qsn_thenotes[qsn_edittarget.id];
	r.color = c ? c : x.style.backgroundColor ;
	qsn_setnotecolors(qsn_edittarget.id,["linkinnote"]);
}


function eqr_canceledit(id) {
	if (qsn_isnewnote){
		if (qsn_thenotes[id].parentid){
			if (eqr_selectedItem(ge(id)) != false) var selectedId=eqr_selectedItem(ge(id));
		}
	}
		
	var zindex = qsn_getzindex( id ) ;
	var div = getelement( id ) ;
	rm ( div ) ;

	if ( qsn_isnewnote ){
		qsn_thenotes[ id ] = null;
		if (selectedId){
			qsn_currstate = "view" ;
			eqr_additem(selectedId);
		}
	}
	else {
		var newdiv;
		qsn_thenotes[ id ] = q_cloneObject( qsn_thenotes[ qsn_backupid( id ) ] ) ;
		qsn_thenotes[ qsn_backupid( id ) ] = null ;
		qsn_currstate = "view" ;
		if (qsn_thenotes[id].parentid) newdiv=eqr_additem(id);
		else qsn_addnote( id );
	}
	qsn_finishedit();
}

function eqr_saveedit(id) {
	if (qsn_thenotes[id].parentid) var parentid=qsn_thenotes[id].parentid;
	
	if (parentid){
		if (qsn_thenotes[id].items.name.lastname == "" && qsn_thenotes[id].items.name.forename == ""){
			alert(eqr_message["emptyItem"]);
			return false;
		}
	}
	
	if ( ! q_readytosubmit() ) return false ;
	qsn_currstate = "view" ;
	var zindex ;
	if ( ! qsn_isnewnote ) qsn_thenotes[ qsn_backupid( id ) ] = null ;

	zindex = qsn_getzindex( id ) ;

	rm ( qsn_edittarget ) ;

	if (! parentid) var div=qsn_addnote( id ) ;
	else {
		var div=eqr_additem(id);
		// eqr_globaldata[parentid].id=id;
	}
	// qsn_notechanged( id , ( qsn_isnewnote ) ? "newnote" : "notechanged" , eqr_cb_itemlist) ;
	qsn_notechanged( id , ( qsn_isnewnote ) ? "newnote" : "notechanged");

	if (parentid && !qsn_isnewnote ){
		var parentdiv=getelement(parentid);

		eqr_sortlistitem(parentid);
		eqr_updatelistitem(parentdiv);
	}

	qsn_finishedit() ;
}


function eqr_applynewnoterefresh(newid,oldid){
	if (newid){
		var parentid=qsn_thenotes[newid].parentid;
		
		// if (!parentid){
		// 	eqr_globaldata[ newid ] = eqr_globaldata[ oldid ] ;
		// 	eqr_globaldata[ oldid ] = null ;
		// }
		// else eqr_globaldata[parentid].id="";
	}
	// else{
	// 	if (eqr_id!=""){
	// 		// var parid=qsn_thenotes[eqr_id].parentid;
	// 		// qsn_usernotechanged(parid);
	// 		eqr_id="";
	// 	}
	// }
	if (parentid){
		var parentdiv=getelement(parentid);

		eqr_notesupdate(parentid,"mynotes");
		eqr_sortlistitem(parentid);

		qsn_thenotes[parentid].user["lastitem"]=newid;
		// qsn_usernotechanged(parentid);
		qsn_notechanged(parentid);

		eqr_updatelistitem(parentdiv);
	}
}

function eqr_compare(a,b){
	var res=0;
	var a_bis=qsn_thenotes[a].items.name.lastname.toLowerCase();
	var b_bis=qsn_thenotes[b].items.name.lastname.toLowerCase();
	if (a_bis < b_bis) res=-1;
	if (a_bis > b_bis) res=1;

	if (res==0){
		var a_ter=qsn_thenotes[a].items.name.forename.toLowerCase();
		var b_ter=qsn_thenotes[b].items.name.forename.toLowerCase();
		if (a_ter < b_ter) res=-1;
		if (a_ter > b_ter) res=1;
	}
	return res;
}

function eqr_sortlistitem(noteid){
	eqr_mynotes[noteid].sort(eqr_compare);
}

function eqr_updatelistitem(div){
	var template = ( qsn_currstate == "edit" ) ? "eqr_notetemplate_edit" : "eqr_notetemplate" ;
	template=getElementsByClassName(getelement(template),"eqr_listitem")[0];
	var newdiv=q_CloneFromNode(template);
	var olddiv=getElementsByClassName(getContainer(div),"eqr_listitem")[0];
	olddiv.style.display="none";
	var listitem= olddiv.parentNode.insertBefore(newdiv,olddiv);
	listitem.className=olddiv.className;

	rm(olddiv);

	eqr_renderlistitem(div,true);

	return div ;
}

function eqr_renderlistitem(div,full){
	if (qsn_currstate!="edit"){
		var listitem=getElementsByClassName(div,"eqr_listitem")[0];
		var itemname_container=getElementsByClassName(listitem,"eqr_itemname_container")[0];
		var itemname=getElementsByClassName(listitem,"eqr_itemname")[0];
		var itemlist=eqr_mynotes[div.id];
		for (var j=0; j<itemlist.length; j++){
			var authorName=qsn_thenotes[itemlist[j]].items.name.lastname;
			var authorForename=qsn_thenotes[itemlist[j]].items.name.forename;
			var authorBirthday=qsn_thenotes[itemlist[j]].items.birthday.date;
			var authorPoste=qsn_thenotes[itemlist[j]].items.poste.posteequipe;
			if (authorPoste=="") authorPoste=qsn_thenotes[itemlist[j]].items.numero.numerojoueur;
			var itemname_clone=q_CloneFromNode(itemname_container);
			var name=document.createTextNode(authorName);
			var forename=document.createTextNode(authorForename);
			var birthday=document.createTextNode(authorBirthday);
			var poste=document.createTextNode(authorPoste);
			var item_clone=getElementsByClassName(itemname_clone,"eqr_itemname")[0];
			var item_clone2=q_CloneFromNode(item_clone);
			var item_clone3=q_CloneFromNode(item_clone);
			var item_clone4=q_CloneFromNode(item_clone);
			item_clone2.appendChild(name);
			item_clone.appendChild(forename);
			item_clone3.appendChild(birthday);
			item_clone4.appendChild(poste);
			itemname_clone.appendChild(item_clone2);
			itemname_clone.appendChild(item_clone3);
			itemname_clone.appendChild(item_clone4);
			itemname_clone.className = itemlist[j] + "__id " + itemname_clone.className;
			listitem.appendChild(itemname_clone);
		}
		if (itemlist.length==0){
			var nomember=document.createTextNode(eqr_message["nomember"]);
			listitem.appendChild(nomember);
		}
		itemname_container.parentNode.removeChild(itemname_container);
		
		var r=qsn_thenotes[getContainer(div).id];
		var linkadd=getElementsByClassName(div,"eqr_imgadd")[0];
		var linkmodif=getElementsByClassName(div,"eqr_imgmodif")[0];
		var linkdelete=getElementsByClassName(div,"eqr_imgdelete")[0];
		if (!r.img.src || r.img.src==""){
			linkmodif.style.display="none";
			linkdelete.style.display="none";
		}
		else linkadd.style.display="none";
	}
	if(qsn_thenotes[div.id].spacedefaults.common.width==qsn_thenotes[div.id].spacedefaults.common.leftcolwidth){
		eqr_switchlistitem(div,false);
	}
}

function eqr_switchlistitem(div,show){
	var listitem=getElementsByClassName(div,"eqr_border_top")[0];
	if (show==true) listitem.style.display="block";
	else listitem.style.display="none";
}

function eqr_newitem( x ) {
	var id = qsn_makenewjson( "eqr" ) ;

	qsn_thenotes[ id ] = q_cloneObject( eqr_json_templatereply , qsn_thenotes[id] ) ;
	qsn_currstate = "edit" ;
	var container=getContainer( x );
	qsn_thenotes[ id ].parentid = container.id ;
	qsn_thenotes[ id ].common.width = "auto" ;

	var sc = qsn_thenotes[ container.id ].spacedefaults.common ;
	var uc = qsn_thenotes[ container.id ].user.common ;
	
	var isowner = ( members[memberid].userlevel == "admin" ) ;
	
	var preview=getElementsByClassName(container,"eqr_preview_container")[0];
	if ( parseInt(preview.style.width) == "0"){
		var containerwidth = container.offsetWidth - 22;
		var ew = containerwidth;
		var elem=getElementsByClassName(container,"eqr_leftcontent")[0]
	
		ew = Math.max ( 420, ew - 300 );
		eqr_switchlistitem(container,true);
		elem.style.width = ew + "px";
		preview.style.width = containerwidth - ew + "px";
		uc.leftcolwidth = "" + ew + "px" ;
		if ( isowner ) sc.leftcolwidth = "" + ew + "px" ;
			
		if ( isowner ) {
			qsn_adduserrefreshid( container.id ) ;
			qsn_spacedefaultsnotechanged( container.id ) ;
		} else {
			qsn_usernotechanged( container.id ) ;
		}
	}
	
	eqr_additem(id);
	qsn_entereditmode( id ) ;
}

function eqr_closenote( id ){
	if (eqr_mynotes[id]){
		for (var i=0; i<eqr_mynotes[id].length; i++) rm(eqr_mynotes[id][i]);
	}	
	qsn_closenote(id,true);
}

function eqr_newnote() {
	var id = qsn_makenewjson("eqr") ;
	
	// eqr_globaldata[id] = eqr_globaldata["template"];
	
	eqr_buildnewPosition( qsn_thenotes[ id ] ) ;
	q_cloneObject( eqr_json_template , qsn_thenotes[ id ] ) ;
	
	var div=qsn_addnote( id ) ;
	
	// qsn_notechanged( id , "newnote", eqr_cb_newnote ) ;
	qsn_notechanged(id,"newnote");
}

function eqr_buildnewPosition( n ) {
	n.spacedefaults.common.left = ( rndab(10,50) +  q_windowscrollX() ) + "px" ;
	n.spacedefaults.common.top = ( rndab(20,100) +  q_windowscrollY() ) + "px" ;
	n.spacedefaults.common.width = rndab(700,750) + "px";
	n.spacedefaults.common.leftcolwidth = "420px";
	n.user.common.zindex = "" + ( ++zindexmax ) ;
}

function eqr_focusdefaultitem( x ) {
	var id = getContainer( x ).id ;
	focusdefault(x, eqr_message[x.parentNode.className.split(" ")[0].split("_")[1]], "#444444" ) ;
}

function eqr_blurdefaultitem( x ) {
	var id = getContainer( x ).id ;
	blurdefault(x, eqr_message[x.parentNode.className.split(" ")[0].split("_")[1]] , ( qsn_thenotes[ id ].color == "4" ) ? "#FAA" : q_blue , "#444444" ) ;
}

function eqr_updateEdit( x ) {
	var parentdiv=x.parentNode;
	var parentdiv2=parentdiv.parentNode;
	var json;
	if (qsn_thenotes[getContainer(x).id].items) json=qsn_thenotes[getContainer(x).id].items;
	else json=qsn_thenotes[getContainer(x).id];
	if (parentdiv2.className.split(" ")[0].split("_")[1]!=parentdiv.className.split(" ")[0].split("_")[1]) json[parentdiv2.className.split(" ")[0].split("_")[1]][parentdiv.className.split(" ")[0].split("_")[1]]= ( x.value ) ? x.value : "" ;
	else json[parentdiv.className.split(" ")[0].split("_")[1]] = ( x.value ) ? x.value : "" ;
}

function eqr_text_edit_blocks() {
	return [ 'eqr_eb_img' ] ;
}


var eqr_upload_request = {
	"callerid" : "" ,
	"uploadkind" : "image",
	"title" : "" ,
	"prompt" : "" ,
	"multiple" : false,
	"extensions" : ["jpg" , "jpeg" , "png" , "gif" , "tiff" , "tif" ] ,
	"namingdata" : { "wantname" : true },
	"formats" : "halfscreen",
	"callback" : "",
	"cancel": { "callback" : "eqr_cancelimageedit", "args" : [] },
	"reveal": { "anim" : true },	
	"resize" : true ,
 	"resize_option" : { "ratio" : "image" }
}

function eqr_cancelimageedit(){
	var div=qsn_edittarget;
	if (!qsn_thenotes[div.id].parentid) qsn_canceledit();
}

function eqr_launch_upload( x ) {
	eqr_upload_request.callback = "eqr_" + x + "_pc_img_done";
	var id = qsn_edittarget.id ;
	eqr_upload_request.callerid = id ;
	eqr_upload_request.prompt = eqr_message[ "selectanimage" ] ;
	if (qsn_thenotes[qsn_edittarget.id].parentid) eqr_upload_request.title = eqr_message[ "uploadtitlemember" + x ] ;
	else eqr_upload_request.title = eqr_message[ "uploadtitle" + x ] ;
	qdyn_qorgload('qu_reveal',[eqr_upload_request],'qu');
}

function eqr_deleteimg(div){
	if (qsn_currstate!="edit") qsn_editnote(div);
	qsn_thenotes[ qsn_edittarget.id ].imgbk = null ;
	qsn_thenotes[ qsn_edittarget.id ].img.src = null ;
	
	var img = qsn_edittarget.getElementsByTagName( "img" )[ 0 ] ;
	
	rm(img);
	
	if (!qsn_thenotes[ qsn_edittarget.id ].parentid) qsn_saveedit();
}

function eqr_editimg(div){
	var parentdiv=getContainer(div);
	var parid=parentdiv.id;
	
	var typeupload="";
	// eqr_displaycolor=false;
	if (qsn_currstate!="edit") qsn_editnote(div);
	else{
		if (qsn_edittarget!=parentdiv) return;
	}
	
	// eqr_displaycolor=true;
	
	var r=qsn_thenotes[parid];
	if (!r.img.src || r.img.src=="") typeupload="new_pc_img";
	else typeupload="edit_pc_img";
	
	eqr_editimage(typeupload);
}

function eqr_editimage( s ) {
	if ( s == "new_pc_img" ) {
		eqr_launch_upload( "new" ) ;
		return ;
	}
	if ( s == "edit_pc_img" ) {
		eqr_launch_upload( "edit" ) ;
		return ;
	}
	qsn_thenotes[ qsn_edittarget.id ].imgbk = q_cloneObject( qsn_thenotes[ qsn_edittarget.id ].img ) ;
}

function eqr_suppress_img( editblockid ) {
	qsn_thenotes[ qsn_edittarget.id ].imgbk = null ;
	qsn_thenotes[ qsn_edittarget.id ].img.src = null ;
	var img = qsn_edittarget.getElementsByTagName( "img" )[ 0 ] ;
	hideshowblock( [ editblockid ,  'eqr_eb_imgoptions' , 'eqr_eb_imgfinished' ] , eqr_text_edit_blocks() ) ;
	eqr_displaysettings() ;
	
	if (qsn_edittarget.className.match(/\beqr_note\b/g)) qsn_saveedit();
	return false ;
}

function eqr_setimagefromfile( t ) {
	if ( ! q_checkimgextensionfile( t ) ) {
		alert( eqr_message[ "badimgextension" ] ) ;
		return false ;
	}
	qsn_thenotes[ qsn_edittarget.id ].img.src = "file://" + t.value ;
	qsn_thenotes[ qsn_edittarget.id ].img.kind = "pc_local" ;
	eqr_renderimg( qsn_edittarget , qsn_thenotes[ qsn_edittarget.id ] ) ;
	return false ;
}

function eqr_suppress_pc_img() {
	return eqr_suppress_img( "eqr_edit_pc_img" ) ;
}

function eqr_validate_new_pc_img() {
	return eqr_validate_pc_img( "eqr_new_pc_img" ) ;
}

function eqr_validate_edit_pc_img() {
	return eqr_validate_pc_img( "eqr_edit_pc_img" ) ;
}

function eqr_validate_pc_img( editblockid ) {
	if ( ! q_checkimgextensionfile( editblockid + "_file" ) ) {
		alert( eqr_message[ "bagimgextension" ] ) ;
		return false ;
	}
	q_remote_upload( editblockid + "_form" , eval( editblockid + "_done" ) ) ;
	hideshowblock( editblockid , 'eqr_wait_pc_img' ) ;
	return false ;
}

function eqr_new_pc_img_done( x ) {
	return eqr_pc_img_done( "eqr_new_pc_img" , x ) ;
}

function eqr_edit_pc_img_done( x ) {
	return eqr_pc_img_done( "eqr_edit_pc_img" , x ) ;
}

function eqr_pc_img_done( editblockid , x ) {
	qsn_thenotes[ qsn_edittarget.id ].imgbk = null ;
	if (qsn_edittarget.className.match(/\beqr_itemnote\b/g)) qsn_thenotes[ qsn_edittarget.id ].img.src = x.files[0].formats["halfscreen"];
	if (qsn_edittarget.className.match(/\beqr_note\b/g)) qsn_thenotes[ qsn_edittarget.id ].img.src = x.files[0].formats["halfscreen"];
	qsn_thenotes[ qsn_edittarget.id ].img.kind = "pc" ;
	eqr_renderimg( qsn_edittarget , qsn_thenotes[ qsn_edittarget.id ] ) ;
	
	if (qsn_edittarget.className.match(/\beqr_note\b/g)) qsn_saveedit();
	return false ;
}

function eqr_terminateimg() {
	if ( qsn_thenotes[ qsn_edittarget.id ].img.kind == "pc_local" ) {
		if ( ! confirm( eqr_message["pclocalnotvalidate"] ) ) return false ;
		qsn_thenotes[ qsn_edittarget.id ].img = q_cloneObject( qsn_thenotes[ qsn_edittarget.id ].imgbk ) ;
		qsn_thenotes[ qsn_edittarget.id ].imgbk = null ;
		eqr_renderimg( qsn_edittarget , qsn_thenotes[ qsn_edittarget.id ] ) ;
	}
	hideshowblock( [ 'eqr_new_web_img' , 'eqr_new_pc_img' , 'eqr_edit_web_img' , 'eqr_edit_pc_img' , 'eqr_eb_imgfinished' ] , eqr_text_edit_blocks() ) ;
	eqr_displaysettings() ;
	return false ;
}

function eqr_entereditmode(id) {
	if (qsn_thenotes[id].parentid){
		var parentdiv=getelement(qsn_thenotes[id].parentid);
		var x = getelement( id ) ;
		if ( ! qsn_isnewnote ) {
			rm( x ) ;
			qsn_thenotes[ qsn_backupid( id ) ] = q_cloneObject( qsn_thenotes[ id ] ) ;
			eqr_additem(id);
			qsn_edittarget = getelement( id ) ;
		}
		else qsn_edittarget = x ;
		qsn_showsettings(id) ;
		qsn_dimothers( id ) ;
		qsn_puttofront ( ( qsn_thenotes [ qsn_edittarget.id ].parentid ) ? qsn_thenotes [ qsn_edittarget.id ].parentid : id ) ;
	}
	else{
		qsn_entereditmode(id,true);
	}
}

function eqr_switchitemvalidation(parentdiv,display){
	var buttons=getElementsByClassName(parentdiv,"eqr_editionbuttons")[0];
	var itemvalidation=getElementsByClassName(parentdiv,"eqr_itemvalidation")[0];
	if (display==false){
		buttons.style.display="block";
		itemvalidation.style.display="none";
	}
	else{
		itemvalidation.style.display="block";
		buttons.style.display="none";
	}
}

function eqr_suppressnote(x){
	if (qsn_thenotes[x].itemslist){
		for (var i=0; i<qsn_thenotes[x].itemslist.length; i++) qsn_thenotes[qsn_thenotes[x].itemslist[i]]= null;
	}
	qsn_suppressnote(x,true);
}

function eqr_allowsuppress( id ) {
	if (qsn_thenotes[ id ].parentid){
		return ( ( qsn_thenotes[ id ].common.ownerid == "quomodo" ) || ( confirm( eqr_message[ "suppressmember" ] ) ) );
	}
	else return qsn_allowsuppress(id, true);
}

function eqr_suppressitem(x){
	var container=getContainer(x);
	if (getElementsByClassName(container,"eqr_selectedItem")[0]){
		selecteditems=getElementsByClassName(container,"eqr_selectedItem");
		var noteid=selecteditems[0].className.split(" ")[0].split("__")[0];
		qsn_suppressnote(noteid,true);
	}
	else{
		if (getElementsByClassName(container,"eqr_itemnote")[0]){
			var itemnote=getElementsByClassName(container,"eqr_itemnote")[0];
			var noteid=itemnote.id;
			qsn_suppressnote(noteid,true);
		}
	}
	
	if (noteid){
		var parid=container.id;

		var itemlist=eqr_mynotes[parid];
		var j;
		var test=false;
		for (var i=0; i<itemlist.length; i++){
			if (itemlist[i]==noteid){
				j=i;
				test=true;
			}
		}

		if (test==true){
			eqr_notesupdate(parid,"mynotes");
		
			itemlist=eqr_mynotes[parid];		
			if (j!=0){
				if (j!=itemlist.length) eqr_additem(itemlist[j]);
				else eqr_additem(itemlist[j-1]);
			}
			else{
				if (itemlist.length>0) eqr_additem(itemlist[j]);
			}
			eqr_updatelistitem(container);
		}
	}
}

function eqr_edititem(x){
	if (pages_mode() != "edit") return false;
	if (members[memberid].userlevel != "admin") return false;
	var container=getContainer(x);
	if (gebcn(container,"eqr_selectedItem")){
		var selecteditem=getElementsByClassName(container,"eqr_selectedItem")[0];		
		var id=selecteditem.className.split(" ")[0].split("__")[0];
	}
	else{
		if (getElementsByClassName(container,"eqr_itemnote")[0]){
			var itemnote=getElementsByClassName(container,"eqr_itemnote")[0];
			var id=itemnote.id;
		}
	}
	if (id){
		qsn_isnewnote = false;
		qsn_currstate = "edit";
		qsn_entereditmode(id);
	}
}

function eqr_importmember(div){
	div.style.display = "none";
	
	var container=getElementsByClassName(getContainer(div),"notecontent")[0];
	var importcontainer=document.createElement('div');
	importcontainer.className="eqr_membercontent eqr_membercontentedit eqr_importcontainer";
	for (var memb in members){
		var linecontainer=document.createElement('div');
		linecontainer.className="eqr_importline";
		linecontainer.id="eqr_member__" + memb;
		linecontainer.onclick=function(){eqr_selectItemimport(this); return false;};
		var name="";
		if (members[memb].username){
			name=name + members[memb].username;
			if (members[memb].firstname) name=name + ", ";
		}
		if (members[memb].firstname) name=name + members[memb].firstname;
		var namenode=document.createTextNode(name);
		linecontainer.appendChild(namenode);
		if (members[memb].username!="Quomodo") importcontainer.appendChild(linecontainer);
	}
	container.appendChild(importcontainer);
}


function eqr_buttonsSwitch(div){
	var buttons=getElementsByClassName(getContainer(div),"eqr_buttonsleft")[0];
	if (buttons.style.display=="none") buttons.style.display="block";
	else buttons.style.display="none";
}

function eqr_widthinfo(){
	return {wfixed: true};
}

function eqr_initforweb( id ) {
	$.getScript( "/services/eqr/scripts/eqr_msgs_" + q_lang + ".js" , function () {
		$.getScript( "/services/eqr/scripts/eqr.js" );
	} );
}


var events_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Événements" ,
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "Evenements_Affichez les événements passés ou à venir de votre site." ,
"desc" : "La note Événements permet d'afficher simplement une liste d'événements (matchs, anniversaires...) liés à la vie du site.",
"nbtodisplay" : "Nb. d'événements à afficher",
"sortorder" : "Ordre d'affichage", 
"asc" : "Par date croissante", 
"desc" : "Par date décroissante",
"samecolor": "Utiliser la couleur du texte pour les événements"
} ;

var events_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "events_msgs_fr_js_loaded" ) ;


var events_json_template = { version: 2 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon : "" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" } , eventstype : [ { kind : "match" , date : "td/7daysf" } , { kind : "general" , date : "td/7daysf" } , { kind : "birthday" , date : "td/7daysf" } ], textcolor : "-1", samecolor : "false", nbtodisplay : 10, sortorder : "asc" } ;

var events_oldjson_template = {
"1": { version: 1 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon : "" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" } , eventstype : [ { kind : "match" , date : "td/7daysf" } , { kind : "general" , date : "td/7daysf" } , { kind : "birthday" , date : "td/7daysf" } ], nbtodisplay : 10, sortorder : "asc" }
} ;

function events_upgradejson( r ) {
	if ( ! r.version ) r.version = 1 ;
	if ( r.version == events_json_template.version ) return r ;
	if ( r.version < 2 ) r = events_upgradejsontov2( r ) ;
	r.version = events_json_template.version ;
	return r ;
}

function  events_upgradejsontov2( r ) {
	r.textcolor = "-1" ;
	r.samecolor = "false" ;
	return r ;
}

var events_colordesc = { 
	"qmc3" : function( r ) {
		if ( ! r.header.icon || r.header.icon == "false" ) return "" ;
		return "/services/wsg/images/icons/" + r.header.icon + ".png" ;
	}
} ; 

var events_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" }  };


function events_renderhtml( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[ noteid ] ;
	
	if ( qsn_currstate == "edit" ) $( ".events_desc", div ).val( r.text );
	else $( ".events_desc", div ).eq( 0 ).texthtml( r.text ) ;
	
	qsn_container_renderhtml( div , r ) ;
	qsn_settextproperties( noteid ) ;
	qsn_setcolors( noteid ) ;

	if ( qsn_currstate == "edit" ) qsn_blurdefault ( gebcn( div , "events_desc" ), "notedescprompt") ;

	$( ".events_loading:eq(0)", div ).show();
	$( ".events_events:eq(0)", div ).hide();

	//qlub_loadevents( "events_rendereventstable", [ noteid ] ) ;
	var ar = [] ;
	var ar2 = [] ;
	for ( var i = 0 ; i < r.eventstype.length ; i++ ){
		ar.push( $.extend( {}, r.eventstype[ i ] ) ) ;
		if ( $.inArray( ar[ i ].date, [ "all", "beg/end" ] ) == -1 ) continue ;
		ar[ i ].date = ( r.sortorder == "desc" ) ? "beg/yd" : "td/end" ;
		/*if ( r.eventstype[ i ].kind != "birthday" ) {
			ar2.push( $.extend( {}, r.eventstype[ i ] ) ) ;
			ar2[ ar2.length - 1 ].date = ( r.sortorder == "desc" ) ? "td/end" : "beg/yd" ;
		}*/
	}
	q_events_request( function( x ){
		if ( ! isremoved( div ) ){
			div.calendar = x ;
			events_rendereventstable( noteid ) ;
			// comparer nbdisplay et events.length et relancer la requête avec ar2
		}
	}, { events: ar, from: 1, to: r.nbtodisplay, order: ( r.sortorder == "desc" ) ? "descending" : "ascending" } ) ;
}

function events_rendereventstable( noteid ){
	var div = $( "#" + noteid );
	var r = qsn_thenotes[ noteid ];
	
	var thediv = $( ".events_events:eq(0)", div ).empty() ;
	/*var ar = [] ;
	var ar2 = [] ;
	for ( var i = 0 ; i < r.eventstype.length ; i++ ){
		ar.push( $.extend( {}, r.eventstype[ i ] ) ) ;
		if ( ar[ i ].date != "all" ) continue ;
		ar[ i ].date = ( r.sortorder == "desc" ) ? "beg/yd" : "td/end" ;
		if ( r.eventstype[ i ].kind != "birthday" ) {
			ar2.push( $.extend( {}, r.eventstype[ i ] ) ) ;
			ar2[ ar2.length - 1 ].date = ( r.sortorder == "desc" ) ? "td/end" : "beg/yd" ;
		}
	}
	var theevents = q_events_search( ar, { sorted : r.sortorder } );
	theevents = theevents.slice( 0, r.nbtodisplay );
	if ( theevents.length < r.nbtodisplay ) {
		var theevents2 = q_events_search( ar2, { sorted : r.sortorder } );
		var j = Math.max( 0, theevents2.length - r.nbtodisplay + theevents.length ) ;
		for ( var i = theevents2.length ; i > j ; i-- ) theevents.unshift( theevents2[ i - 1 ] ) ;
	}*/
	
	var theevents = div.get( 0 ).calendar.events ;
	var mode = ( qsn_currstate == "edit" && ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) ) ? "edit" : "view";
	q_events_renderevents( thediv, theevents, { mode : mode, displaydate : true, withdetails : false, displaytype : false, callback : function(){ events_rendereventstable( noteid ); } } );
		
	var $titles = $( ".q_event_title", thediv ) ;
	$titles.css( "border-bottom", "solid 1px" );
	if ( r.samecolor == "true" ) $titles.css( "color", "" ).css( "border-color", "" ).addClass( "qsn5_qsn1 text_self_bw__bd_self_bw" ) ;
	else $titles.addClass( "qsn1 bd_bw qtxt1 all" ) ;
		
	if ( qsn_currstate == "view" ) $( "div.q_event", thediv )
		.css( "cursor", "pointer" )
		.unbind( "click" )
		.click( function( event ){ 
			/*var event = {
				eventid : $( this ).attr( "qid" ),
				eventkind : $( this ).attr( "qkind" )
			};
			$.extend( event, q_events_getJSON( $( this ).attr( "qkind" ), $( "event[id='" + $( this ).attr( "qid" ) + "']" , clubevents ),{ realvalues : true } ) );
			q_events_alert( [ event ] ); */
			q_events_alert( [ theevents[ $( this ).attr( "qid" ) ] ] );
		} );
		
	$( ".events_loading:eq(0)", div ).hide();
	$( ".events_events:eq(0)", div ).show();

	qsn_settextproperties( noteid ) ;
	qsn_setcolors( noteid ) ;
};

function events_initforweb( id ) {
	events_renderhtml( id ) ;
}

function events_modifysamecolor( id ) {
	var r = qsn_thenotes[ id ] ;
	var $events = $( "#" + id ).find( ".q_event" ) ;
	var re = new RegExp( "\\b(qsn5_qsn1 text_self_bw__bd_self_bw|qsn1 bd_bw)\\b" ) ;
	$events.each( function() {
		var $this = $( this ) ;
		var $titles = $this.find( ".q_event_title" ) ;
		$titles.each( function() {
			this.className = this.className.replace( re, "" ) ;
		} ).css( "border-color", "" ) ;
		if ( r.samecolor == "true" ) {
			$titles.css( "color", "" ).addClass( "qsn5_qsn1 text_self_bw__bd_self_bw" ) ;
		} else {
			$titles.css( "color", events_prototypes[ $this.attr( "qkind" ) ].color ).addClass( "qsn1 bd_bw" ) ;
		}
	} ) ;
	qsn_setcolors( id ) ;
}


//var ffbb_json_template = { version : 1 , color : "#ACD2EA" , textsize : "2" , textfont : "1" , headerdisplay : "1" , header : { color: "0" } , signature : "0" } ;
//var ffbb_json_template = { version : 2 , color : "#ACD2EA" , textstyles: { size : "1" , font : "-1" }, header : { display: "true", text : "Actualités de la FFBB", icon: "false" }} ;
var ffbb_json_template = { version : 3 , color : "rgb(100%,100%,100%)" , margin: 10, textsize: 12,  textstyles: { font : "-1" }, header : { display: "true", text : "Actualités de la FFBB", icon: "false" } } ;

var ffbb_rss_url = "http://www.ffbb.com/rss2.xml" ;
var ffbb_rss_displaycount = 5 ;
var ffbb_timers = { };

function ffbb_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == ffbb_json_template.version ) ) return r ;
	if ( r.version<2 ) ffbb_upgradejsontov2( r ) ;
	if ( r.version<3 ) ffbb_upgradejsontov3( r ) ;
	r.version = ffbb_json_template.version;
	return r ;
}

function ffbb_upgradejsontov2( r ) {
	r.textstyles = { size: String( Math.max( Math.min( 3 - parseInt( r.textsize , 10 ) , 2 ) , 0 ) ) } ;
	var oldfonts = [ "0" , "1" , "3" , "4" ] ;
	r.textstyles.font = oldfonts[ parseInt( r.textfont , 10 ) - 1 ] ;
	r.header.display = String( r.headerdisplay == 1 ) ;
	delete r.textsize ;
	delete r.textfont ;
	delete r.headerdisplay ;
	delete r.signature ;
	return r ;
}

function ffbb_upgradejsontov3(r){
	r.margin = 10 ;
	var sizes = qsn_definefontsizes( r.common.notekind ) ;
	r.textsize = parseInt( sizes[ r.textstyles.size ], 10 ) ;
	delete r.textstyles.size ;
	return r;
}

function ffbb_version( notekind ) {
	return { margin: 1 } ;
}

var ffbb_colordesc = {
	"qmc3" : function( r ){
		if ( r.header.icon == "false" ) return "" ;
		return "/services/ffbb/images/ffbb48.png" ;
	}
} ; 
var ffbb_textdesc = { "qtxt1" : {  "slider" : "textsize" , "font" : "textstyles.font" }  };

function ffbb_initforweb( id ) {
	ffbb_refresh( id, true ) ;
}

function ffbb_refresh( noteid, forceRefresh ){
	if ( qsn_currstate == "edit" || ( ! forceRefresh && q_fsmpresent() ) ) return ;
	var div;
	var r;
	div = ge( noteid ) ;
	if ( isremoved( div ) ) return clearInterval(ffbb_timers[noteid]) ;
	hideshowblock(gebcn(div, "ffbb_content"), gebcn(div, "ffbb_loading"));	
	r = qsn_thenotes[div.id];
	ffbb_getitems( div, r, forceRefresh );
	hideblock(gebcn(div, "ffbb_filtered"));
}

function ffbb_getitems( div, r, forceRefresh ){
	div.ffbbPageContainer = div.ffbbContainer = null;
	var ar= [] ;
	for ( var i = 0; i < ffbb_rss_displaycount; i++ ) ar.push( null );

	hideshowblock( gebcn( div, "ffbb_content" ), gebcn( div, "ffbb_loading" ) );

	ffbb_load( div, forceRefresh ) ;
	/*	
 else {
		hideshowblock( gebcn( div, "ffbb_loading" ), gebcn( div, "ffbb_content" ) );

		ffbb_renderitems( div, ar );
	}	*/
}

function ffbb_nav( elem ) {
	$( elem ).parents( ".ffbb_div_resize" ).find( "a.ffbb_an_item" ).get( 0 ).click() ;
}
function ffbb_renderitems( div, items){ //view mode
	var ffbb_debug = 0 ;
	var img_wrappers = [] ;
	try {
		if ( isremoved( div ) ) return ;
		var noteid = div.id;
		var r = qsn_thenotes[ div.id ] ;
		var list = gebcn( div , 'ffbb_items' );
		if ( ! list ) {
			// debugmail( "ffbb_renderitems, got null list" ) ;
			div = ge( noteid ) ;
			if ( isremoved( div ) ) return ;
			list = gebcn( div , 'ffbb_items' );
			if ( ! list ) return ; //2012-02-15, vh : ça arrive... alors pas besoin d'envoyer un mail debugmail( "ffbb_renderitems, could not fix null list" ) ;
		}
		$( list ).empty();
		if ( !items ) { return; }

		ffbb_debug++;
		var firstItem = true ; 
		for (var i = 0; i < items.length; i++){
			var item = items[ i ];
			if ( ! item ) continue;
			var tr = $( '<tr></tr>' ).appendTo( list );
			var td = $( '<td class="ffbb_item qsn1 bd_bw qtxt1 all" style="border-bottom: 1px solid #000000; padding-top:10px; padding-bottom:10px"></td>' ).appendTo( tr ).css( "padding-top", firstItem ?  "0px" : r.margin + "px" ).css( "padding-bottom", r.margin + "px" );
			firstItem = false ;
			var ffbb_rss_template = $( ".ffbb_rss_template div:eq(0)", div ).clone();
			td.hover( function( event ){ 
				this.className = "ffbb_item qtxt1 all qsn1 " + ( ( event.type == "mouseenter" ) ?  "bg_contrast9__bd_bw" : "bg_self__bd_bw " ); 
				qsn_setcolors( [ this ] ); 
			} );
			
			var tmp = $( '<div></div>' ).html( item.Content ) ;
			var src = tmp.find( "img" ).attr( "href" ).replace( /https?:\/\//, "https://" ) ;
			//On ajoute pas l'image directement, sinon elle prend beaucoup de place et modifie la largeur et donc fausse le ellipsis
			ffbb_rss_template.find( ".ffbb_image_wrapper" ).html( '<img src="/images/blank.gif"/>' ).data( "src", src ) ;
			tmp.find( "img" ).remove() ;
			ffbb_rss_template.find( ".ffbb_description" ).html( tmp.html() ) ;
			ffbb_rss_template.find( ".ffbb_description" ).data( "text", ffbb_rss_template.find( ".ffbb_description" ).html() );
			ffbb_rss_template.find( ".title a" ).html( item.Title );
			ffbb_rss_template.find( ".title a" ).attr( "href", item.Url );
			var array = item.Time.split( "-" ) ;
			try {
				var date = $.datepicker.parseDate( "mm/dd/yy", $.trim( array[ 0 ] ) ) ;
			} catch( err ) {
				try {
					var date = $.datepicker.parseDate( "DD, d. MM yy", $.trim( array[ 0 ] ) ) ;
				} catch( err ) {
					var date = $.datepicker.parseDate( "DD, d MM yy", $.trim( array[ 0 ] ) ) ;
				}
			}
			ffbb_rss_template.find( ".date" ).html( $.datepicker.formatDate( "dd.mm.yy", date ) + " " + $.trim( array[ 1 ] ) ) ;
			ffbb_rss_template.find( ".title a" ).
				mousedown( function ( event ) { q_stopPropagation( event ) ; } ).
				data( "item", item );
			ffbb_rss_template.appendTo( td ).get(0).widthrule = function ( w ) { return Math.max( 0 , w - 30 - 2 ) ; } ;
		}

		var img_wrappers = [] ; ;

		$( list ).find( ".ffbb_image_wrapper" ).each( function() {
			img_wrappers.push( $( this ).get( 0 ) ) ;	
		} ) ;

		function resize_image_wrapper( wrapper ) {
			var $wrapper = $( wrapper ) ;
			var totalHeight = $wrapper.height();

			var $title = $wrapper.parents( ".ffbb_div_resize" ).first().find( ".title" );
			var $date = $wrapper.parents( ".ffbb_div_resize" ).first().find( ".date" );
			var $comment = $wrapper.parents( ".ffbb_div_resize" ).first().find( ".ffbb_description" );

			$date.show();
			$comment.show() ;
			$comment.html( $comment.data( "text" ) ) ;

			var titleHeight = $title.outerHeight( true );
			var dateHeight = $date.outerHeight( true ) ;
			$date.toggle( ( ( titleHeight + dateHeight ) <= totalHeight ) ) ;
			$comment.ellipsis( { height:  totalHeight - ( titleHeight + dateHeight ) } );
			var commentHeight = $comment.outerHeight( true );
			$comment.toggle( ( ( titleHeight + dateHeight + commentHeight ) <= totalHeight ) ) ;
		}

		for ( var i = 0; i < img_wrappers.length  ; i++ ) {
			img_wrappers[ i ].widthrule = function ( w ) {
				return Math.round( w / 4 ) ;
			} ;

			img_wrappers[i].resized = function ( elem ) { 
				if ( ! elem ) return;
				var $elem = $( elem ) ;
				var w = $elem.width() ; 
				$elem.height( w ) ;
				var $img = $elem.find( "img" ) ;
				$img.css( "position", "relative" );
				function cropImg() { 
					var x = $img.data( "naturalDims" ) ;
					if ( ! x ) return q_hsetimgsrc(
						[ $img.get( 0 ), $elem.data( "src" ) ], 
						function( x ) {
							//if ( ! x ) return ;
							$img.data( "naturalDims", { width: x && x.width, height: x && x.height } ) ;
							cropImg() ;
						}, 
						null, 
						true 
					) ;
					if ( ! x.width ) return ;
					if ( x.width > x.height ) {
						var imgW = Math.round( x.width * w / x.height ) ;
						$img.height( w ) ;
						$img.css( "left", '-' + Math.round( ( imgW - w ) / 2 ) + "px" ) ;
						$img.width( imgW ) ;
					} else if ( x.height > x.width ) {
						var imgW = Math.round( x.height * w / x.width ) ;
						$img.width( w ) ;
						$img.css( "top", '-' + Math.round( ( imgW - w ) / 2 ) + "px" ) ;
					}
				} 
				resize_image_wrapper( elem ); 
				cropImg() ;
			}
		}

		div.growingupdone = function () {  
			$( ".ffbb_image_wrapper", div ).each( function() {
				resize_image_wrapper( this ) ;
			} ) ;
		} ;

		div.toresize = function () {
			var x = img_wrappers ;
			x = x.concat( qsn_container_toresize( this ) ) ;
			return x ;
		} ;

		for ( var i = 0; i < img_wrappers.length  ; i++ ) {
			img_wrappers[i].widthrule = function ( w ) {
				return Math.round( w / 4 ) ;
			} ;
		}

		if ( qsn_currstate != "edit" ) {
			$( ".ffbb_image_wrapper", div ).css( "margin-right", r.margin + "px" ) ;
		}


		ffbb_debug++;
		var pc = div.ffbbPageContainer;
		if ( pc ){
			$( ".ffbb_pre, .ffbb_pre_new", div ).toggle( ! pc.IsFirstPage() ) ;
			$( ".ffbb_next, .ffbb_next_new", div ).toggle( ! pc.IsLastPage() ) ;
		} else $( ".ffbb_pre, .ffbb_next, .ffbb_pre_new, .ffbb_next_new", div ).hide();

		ffbb_debug++;
		qsn_setcolors( noteid ) ;
		ffbb_debug++;
		qsn_settextproperties( noteid ) ;
		ffbb_debug++ ;
		q_changedwidth( div , parseInt( qsn_width( div.id ) , 10 ) ) ;
		var noteid = div.id ;
		var r = qsn_thenotes[ noteid ] ;
		/*div.toresize = function () {
			var x = $( ".ffbb_div_resize" , this ).get() ;
			x = x.concat( qsn_container_toresize( this ) ) ;
			return x ;
		} ;*/
	} catch ( e ) { debugmail("in ffbb/ffbb_renderitems (debug v.2012-08-07) for " + noteid + " step " + ffbb_debug + " : " + e.message + "\r" + "club_menubariconsize=" + window.club_menubariconsize + " - club_sitecolorpalette=" +window.club_sitecolorpalette + " - club_siteelemscolor=" +window.club_siteelemscolor + " - qlub0_checked=" +window.qlub0_checked ); }
}

function ffbb_load( div, forceRefresh ){
	if ( qsn_currstate == "edit" || ( ! forceRefresh && q_fsmpresent() ) ) return ;
	if ( isremoved( div ) ) return ;
	var noteid = div.id;
	var r = qsn_thenotes[noteid];
	if ( ! r ) r = qsn_thenotes[q_idalias[noteid]];

	ffbb_ajaxget( "/cgi-bin/cgixml?url="+ encodeURIComponent( ffbb_rss_url ) , function ( xml ) {
		//determination des bon descripteurs :
		hideshowblock(gebcn(div, "ffbb_loading"), gebcn(div, "ffbb_content"));
		var ffbb_conteneur = "item";
		var ffbb_title = "title";
		var ffbb_description = "description";
		var ffbb_link = "link";
		var ffbb_date = "pubDate";	
		var currmax = 0 ;
		var currindex = 0 ;

		var item, author, link, title, description, date, ffbbItem;
		var ffbb_debug = 0 ;
		try{
			if ( $( "title" , xml ).length > 0 ) author = ffbb_getcdata( $( "title" , xml ).get( 0 ) ) ;
			var items = $( ffbb_conteneur , xml );
			var ffbbItems = [];
			ffbb_debug++ ;
			$( ffbb_conteneur , xml ).each( function ( i , item ) {
				link = title = description = date = '';
				try { link = $( ffbb_link , item ).eq( 0 ).text() ;} catch( e ) {}
				try{ title = ffbb_getcdata( $( ffbb_title , item ).get( 0 ) ); }catch( e ){}
				try{
					description = ffbb_getcdata( $( ffbb_description , item ).get( 0 ) );
					description = description.replace(/\r\n/,'<br />').replace(/\n/,'<br />');
				} catch( e ){}
				var date = $( ffbb_date , item ).eq( 0 ).text() ;
				ffbbItem = new FfbbItem(author, link ,title, description, date);
				ffbbItems.push(ffbbItem);
			} ) ;
			ffbb_debug++ ;
			if ( !div.ffbbContainer) div.ffbbContainer = ffbbItems;
			else div.ffbbContainer = div.ffbbContainer.concat(ffbbItems);
			ffbb_debug++ ;
			var content = div.ffbbContainer ;
			ffbb_debug++ ;
			//ffbb_sortbydate(content);
			var pc;
			if (!div.ffbbPageContainer) {
				pc = new PageContainer(content, ffbb_rss_displaycount);
				div.ffbbPageContainer = pc;
			} else {
				pc = div.ffbbPageContainer;
				pc.SetContent(content);
			}
			//ffbb_rendercount(div, pc.GetCount());	
			ffbb_debug++ ;
			ffbb_renderitems(div, pc.GetFirstPage());
			ffbb_debug++ ;
			if ( q_pagemode() == "makeweb" && r.makewebdisplay && $( div ).data( "resumepause" ) == 1 && window.ASresumepause_dec ) {
				$( div ).data( "resumepause" , 0 ) ;
				ASresumepause_dec() ;
			}
		}
		catch( e ){ debugmail("in ffbb/HandleXML for " + noteid + " step " + ffbb_debug + " : " + e.message);}
	} ).complete( function () {
		//hideshowblock(gebcn(div, "ffbb_loading"), gebcn(div, "ffbb_content"));
	} ) ;
};

function FfbbItem(site, url, title, content, time){
	this.Site = site;
	this.Url = url;
	this.Title = title;
	this.Content = content;
	this.Time = time;
}

function ffbb_sortbydate(items){
	if (!items)	return;

	var j,temp;
	var exchanged;
	for (var i = 0; i < items.length; i++){
		exchanged = false;
		for (j = 0; j < items.length - i - 1; j++){
			if (items[j].Time < items[j + 1].Time){
				temp = items[j];
				items[j] = items[j + 1];
				items[j + 1] = temp;
				exchanged = true;
			}
		}
		if (!exchanged) break;
	}
}

function ffbb_pre(x){
	if ( qsn_currstate != "view" ) return ;
	var div = getContainer(x);
	var pc = div.ffbbPageContainer;
	ffbb_renderitems(div, pc.GetPrePage());
}

function ffbb_next(x){
	if ( qsn_currstate != "view" ) return ;
	var div = getContainer(x);
	var pc = div.ffbbPageContainer;
	ffbb_renderitems(div, pc.GetNextPage());
}

function ffbb_managerefresh(noteid){
	if (ffbb_timers[noteid] != null) clearInterval(ffbb_timers[noteid]);
	ffbb_timers[noteid] = setInterval("ffbb_refresh('"+noteid + "')", 300000);
}

function ffbb_getcdata(element){
	var s = '' ;
	function trim(myString){
		return myString.replace(/^\s+/g,'').replace(/\s+$/g,'');
	} 
	for (var i = 0; i < element.childNodes.length; i++){
		if ( element.childNodes[i].nodeType == 1 ) s += ffbb_getcdata(element.childNodes[i]);
		if ( element.childNodes[i].nodeName == '#cdata-section') s += element.childNodes[i].nodeValue;
		else if (element.childNodes[i].nodeName == '#text' && trim(element.childNodes[i].nodeValue) != "") s+= element.childNodes[i].nodeValue;
	}
	return s;
}

function PageContainer(content,pageSize){
	this.PageIndex = 0;
	this.Content = content;
	this.PageSize = pageSize;
}
PageContainer.prototype.GetPageIndex = function(){return this.PageIndex;};
PageContainer.prototype.GetCount = function(){ return (this.Content == null) ? 0 : this.Content.length ; };
PageContainer.prototype.GetPageNum = function(){return Math.ceil(this.GetCount() / this.PageSize) ; };
PageContainer.prototype.IsLastPage = function(){ return this.PageIndex == ( this.GetPageNum() - 1 ) || this.GetPageNum() == 0 ; };
PageContainer.prototype.IsFirstPage = function(){ return this.PageIndex == 0 ; };
PageContainer.prototype.GetPage = function(index){
	if (index > this.GetPageNum() - 1 || index < 0) return null;
	this.PageIndex = index;
	if (index < this.GetPageNum() - 1){
		var result = [];
		for (var i = 0 ; i < this.PageSize ; i ++) result[i] = this.Content[this.PageIndex * this.PageSize + i] ;
		return result;
	} else {
		var result = [];
		for (var i = 0 ; i < this.Content.length - this.PageSize * index ; i ++) result[i] = this.Content[this.PageIndex * this.PageSize + i] ;
		for (var i = this.Content.length - this.PageSize * index ; i < this.PageSize ; i ++) result[i] = null;
		return result;
	}
};
PageContainer.prototype.GetFirstPage = function(){return this.GetPage(0);};
PageContainer.prototype.GetLastPage = function(){return this.GetPage(this.GetPageNum() - 1);};
PageContainer.prototype.GetNextPage = function(){return this.GetPage(this.PageIndex + 1);};
PageContainer.prototype.GetPrePage = function(){return this.GetPage(this.PageIndex - 1);};
PageContainer.prototype.GetCurrentPage = function(){return this.GetPage(this.PageIndex);};
PageContainer.prototype.SetPageSize = function(pageSize) {this.PageSize = pageSize;};
PageContainer.prototype.SetContent = function(content){this.Content = content;};
/*PageContainer End*/

function ffbb_ajaxget( url , callback ) {
	//correction de l'url pour du à safari (remplace http par feed)
	var re = new RegExp("feed://" , "g" ) ;
	url = url.replace( re , "http://" ) ;
	/*
			var xml = jqXHR.responseXML ;
			if ( ! xml && ( /<\?xml/ ).test( jqXHR.responseText ) ) {
				var s = jqXHR.responseText.substring( 0 , 1 ) == '\n' ? jqXHR.responseText.substring ( 1 ) : jqXHR.responseText ;

				if ( window.DOMParser) {
					var parser=new DOMParser();
					xml=parser.parseFromString( s,"text/xml" );
				} else { // Internet Explorer
					xml=new ActiveXObject("Microsoft.XMLDOM");
					xml.async="false";
					xml.loadXML( s ); 
				}
			}
*/

	return $.get( url , function ( data ) {
		//var xml = $.parseXML( data.replace( /(<\/?)[^ >:]+:/g, "$1" ) ) ;
		var xml = $.parseXML( data ) ; // 2018-01-18 : changement du rss visiblement, on revient à une version plus standard
		callback.apply( this , [ xml ] );
	} , "text" ) ;
}


var files_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Documents" ,
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "Documents_Affichez les documents de votre choix et proposez une archive ZIP." ,
"desc" : "La note Documents permet de stocker et de télécharger des documents dans une page",
"upload_title" : "Importer des documents",
"upload_prompt" : "Cliquez sur OK pour sélectionner les documents à importer",
"thefile" : "Cliquez ici pour ouvrir le fichier ",
"nofiles" : "Vous devez sélectionner au moins un fichier avant de valider.",
"confirmdelete" : "Êtes-vous sûr de vouloir supprimer ce fichier ?",
"deletefilealt" : "Supprimer ce fichier", 
"suppressnote" : "Êtes-vous certain de vouloir supprimer cette note ?\n\nATTENTION : ceci ne supprime pas les fichiers de votre espace de stockage. Pour libérer l'espace de stockage qui est occupé par vos fichiers, ouvrez votre panneau « Fichiers chargés sur le site » et supprimez les fichiers.",
"suppressnote_bubble" : "Pour libérer de l'espace de stockage, ouvrez votre panneau « Fichiers chargés sur le site ».",
"ziping" : "Le fichier est en cours de préparation. Merci de bien vouloir patienter..." ,
"dlall" : "Télécharger tout" ,
"dlone" : "Télécharger",
"displaydownloadbutton" : "Afficher le bouton \"Tout télécharger\""
} ;

var files_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "files_msgs_fr_js_loaded" ) ;


var files_json_template = { version: 3 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, files : [], sortoptions : { target: "rank" , order: "up" } , displaydownloadbutton : "true" } ;


function files_upgradejson( r ) {
	if ( ! r.version ) r.version = 1 ;
	if ( r.version == files_json_template.version ) return r ;
	if ( r.version < 2 ) r = files_upgradejsontov2( r ) ;
	if ( r.version < 3 ) r = files_upgradejsontov3( r ) ;
	r.version = files_json_template.version ;
	return r ;
}

function files_upgradejsontov2( r ) {
	if ( r.headerdisplay ) { 
		r.header.display = (r.headerdisplay == "1") ? "true" : "false";
		delete r.headerdisplay;
	}	
	r.textstyles = { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" } ;
	return r ;
}

function files_upgradejsontov3( r ) {
	if ( ! r.displaydownloadbutton ) r.displaydownloadbutton = "true";
	return r ;
}

function files_zipall(elem) {
	var div = getContainer(elem);
	var r = qsn_thenotes[ div.id ];
	q_fsm_wait() ;
	document.mainform.mission.value = "zipfiles" ;
	q_ajaxsubmitwithservice( "common@fr" , r , function( x ) { 
		var path = "/services/dialogs/waitforfile/index_" + q_lang + ".html";
		var options = {
			json: { downloadsrc: x.href },
			callback: function( x ) {}
		} ;
		q_fsm_delete() ;
		quomodo.fsm.loadDialog( path, options );
	} );
}


var flickr_message = {
"newnoteprompt" : "cliquez ici pour créer une nouvelle note Flickr" ,
"plug" : "Flickr_Affichez dans votre espace des photos stockées chez Flickr." ,
"desc" : "La note Flickr permet d'afficher très simplement des photos issues de site de partage de photos Flickr",
"notetitleprompt" : "Entrez le titre de la note",
"back" : "précédent",
"next" : "suivant",
"on" : " sur ",
"page" : "page ",
"nokeywords" : "Aucun mot-clé n'a été entré", 
"nophoto" : "Aucune photo ne correspond à la recherche",
"sortby" : "Trier par : ",
"interest" : "interêt",
"interestingnesstitle" : "Cliquez ici pour afficher les images classées par interet",
"date" : "date",
"recentnesstitle" : "Cliquez ici pour afficher les images classées par date depuis la plus récente",
"relevance" : "pertinence",
"relevancenesstitle" : "Cliquez ici pour afficher les images classées par pertinence", 
"originalphototitle" : "Cliquez ici pour télécharger l'original de la photo",
"originalphoto" : "Télécharger l'original",
"backtolist" : "retour à la liste",
"search_display" :  "afficher la recherche",
"search_hide" : "masquer la recherche", 
"flickroptions" : "Affichage", 
"ppp" : "Nb d'images par page :", 
"taboptions" : "Options de la note",
"usernotfound" : "Aucun utilisateur ne correspond à ce nom d'utilisateur"
} ;

var flickr_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "flickr_msgs_fr_js_loaded" ) ;


var flickr_json_template = { version: 3 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display:"true", color: "c1", text : "" } , ppp : 9 , lastsearch : { keywords : "", option : "text", sorting : "" , page : 1 } , laststate : { state : "" , photo_id : "" } , searchvisible : true } ;


function flickr_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == flickr_json_template.version ) ) return r ;
	if ( ! r.header ) r.header = flickr_json_template.header ;
	if ( r.headerdisplay ) { 
		r.header.display = ( r.headerdisplay == "1" ) ? "true" : "false" ;
		delete r.headerdisplay ;
	}
	return r ;
}

function flickr_initforweb( id ) {
	$.getScript( "/services/flickr/scripts/flickr_msgs_" + q_lang + ".js" , function () {
		$.getScript( "/services/flickr/scripts/flickr.js" , function () { flickr_renderhtml( id ); } );
	} );
}


var fv_json_template = { version: 4 , text : "" , fv : { kind : "", xmlconfig: "", width:400, height:300, version: 0 } , color : "rgb(100%,100%,100%)" , textstyles : { size : "12" , font : "-1" , bold : "false" , center : "false" , italic : "false" } , textcolor : -1, notemargin: 10, options : {autoplay : "false", loop : "false", showplayer : "autohide", controls : "normal"}, header : { display : "false" , text : "" , icon : "" } } ;

function fv_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == fv_json_template.version ) ) return r ;
	if ( r.version < 2 ) fv_upgradejsontov2( r ) ;
	if ( r.version < 3 ) fv_upgradejsontov3( r ) ;
	if ( r.version < 4 ) fv_upgradejsontov4( r ) ;
	r.version = fv_json_template.version ;
	return r ;
}

function fv_upgradejsontov2( r ) {
	if ( ! r.notemargin ) r.notemargin = 1 ;
	if ( r.textcolor == undefined ) r.textcolor = -1 ;
	if ( ! r.textstyles ) r.textstyles = { size : r.textsize , font : r.textfont , bold : String( r.textbold != "0" ) , center : String( r.textcenter != "0" ) , italic : String( r.textitalic != "0" ) } ;
	if ( ! r.options ) r.options = fv_json_template.options ;
	return r ;
}

function fv_upgradejsontov3( r ) {
	r.notemargin = parseInt( qsn_definepaddings( "fv" )[ r.notemargin ] , 10 ) ;
	r.textstyles.size = "" + parseInt( qsn_definefontsizes( "fv" )[ r.textstyles.size ] , 10 ) ;
	return r ;
}

function fv_upgradejsontov4( r ) {
	r.header = fv_json_template.header ;
	return r ;
}

function fv_initforweb( id ) {
	fv_renderplayer( id, ge( id ) ) ;
}

function fv_renderplayer( noteid, div ) {
	var r = qsn_thenotes[ noteid ] ;
	var theplayercode = '';
	if ( q_pagemode() != "makeweb" && ! swfobject.hasFlashPlayerVersion("1") ) {
		// check if SWF hasn't been removed
		gebcn( div,  'fv_video' ).innerHTML = "" ;
		if ( ! ! document.createElement('canvas').getContext ) {			
			theplayercode = $( '<video controls>' ).
				attr( "src", q_spaceabsoluteurl( r.common.ownerid , r.fv.videofolder + "video.mp4" ) ).
				attr( "autoplay",  ( r.options.autoplay == "true" ) ? true : false ).
				attr( "loop", ( r.options.loop == "true" ) ? true : false ).
				attr( "poster", q_spaceabsoluteurl( r.common.ownerid , r.fv.videofolder + "preview.jpg" ) ).
				attr( "height", "100%" ).
				attr( "width", "100%" ) ;
				$( ".fv_video", div ).append( theplayercode );
				return ;
		}
	}
	if ( q_pagemode() == "web" ) return ;
	var rgbcol1 = qsn_selfclasscolor( qsn_colorvalue( noteid , "qsn1" ) , "color" , true )[0] ;
	var col1 = fv_rgb2hexa( rgbcol1 ) ;
	var c = qsn_colorvalue( noteid , "qmc2_qsn1" ) ;
	var rgbcol2 = ( c[ 0 ] ) ? qsn_selfclasscolor( c[ 0 ] , "color" , true )[0] : rgbcontrastcolor( rgbcol1 , 150 ) ;
	var col2 =fv_rgb2hexa( rgbcol2 ) ;
	var hsv2 = rgb2hsv( rgbcol2 ) ;
	rgbcol2 = hsv2rgb( [ hsv2[ 0 ] , 25 , 100 ]) ;
	var col3 =fv_rgb2hexa( rgbcol2 ) ;
	theplayercode = "<object type='application/x-shockwave-flash' data='"+q_spaceabsoluteurl( r.common.ownerid , r.fv.videofolder+'video_player.swf' )+"' width='100%' height='100%'><param name='movie' value='"+q_spaceabsoluteurl( r.common.ownerid , r.fv.videofolder+'video_player.swf' )+"' /><param name='wmode' value='transparent' /><param name='allowFullScreen' value='true' />";
	theplayercode += "<param name='FlashVars' value='configxml="+q_spaceabsoluteurl( r.common.ownerid , r.fv.videofolder+'video_config.xml?v='+r.fv.version )+"&amp;startimage="+q_spaceabsoluteurl( r.common.ownerid , r.fv.videofolder+'preview.jpg?v='+r.fv.version )+"&amp;playercolor="+col2+"&amp;iconplaybgcolor="+col2+"&amp;videobgcolor="+col1+"&amp;bgcolor="+col1+"&amp;bgcolor1="+col1+"&amp;bgcolor2="+col1+"&amp;slidercolor1="+col1+"&amp;slidercolor2="+col2+"&amp;sliderovercolor="+col2 ;
	theplayercode += ( r.options.autoplay == "true" ) ? "&amp;autoplay=1" : "" ;
	theplayercode += ( r.options.loop == "true" ) ? "&amp;loop=1" : "" ;
	theplayercode += "&amp;showplayer=" + ( r.options.showplayer ) ;
	
	var showstop = ( r.options.controls == "simple")  ? "0" : "1" ;
	var showtime = ( r.options.controls == "simple" || r.options.controls == "normal" ) ? "0" : "1" ;
	var showvolume = ( r.options.controls == "simple" || r.options.controls == "normal" ) ? "0" : "1" ;
	var showfullscreen = ( r.options.controls == "simple" )  ? "0" : "1" ;
 
	theplayercode += "&amp;showstop=" + showstop ;
	theplayercode += "&amp;showtime=" + showtime ;
	theplayercode += "&amp;showvolume=" + showvolume ;
	theplayercode += "&amp;showfullscreen=" + showfullscreen ;
		
	theplayercode += "' /></object>" ;	
	gebcn( div,  'fv_video' ).innerHTML = theplayercode ;
}


var gm_message = {
"editAPIkey" : "modifier la clé API",
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"newcommentprompt" : "Cliquez ici pour ajouter un commentaire." ,
"notedescprompt" : "Indiquez votre description.",
"markersinfo": "Pour ajouter un point, cliquez sur la carte.",
"shapesinfo" : "Pour ajouter une forme, cliquez longuement, puis déplacez la souris et cliquez à nouveau. Double-clic pour terminer. Clic droit pour supprimer.",
"linesinfo" : "Pour ajouter un circuit, cliquez longuement, puis déplacez la souris et cliquez à nouveau. Double-clic pour terminer. Clic droit pour supprimer.",
"taboptions" : "Options de la carte", 
"visitorinteraction" : "Fonctions activées :",
"static" : "Aucune",
"move" : "Déplacement + zoom",
"dynamic" : " + option Plan / Satellite",
"search": " + Recherche autorisée",
"kmloverlay" : "Fond de carte :",
"kmlzoom" : "Centrer sur le département",
"trafficoptions" : "Trafic : ",
"displaytraffic" : "Afficher le trafic",
"add_dep" : "Indiquez l'adresse que vous recherchez",
"add_arr" : "Indiquez l'adresse d'arrivée",
"street": "Rue",
"zipcode": "CP",
"city": "Ville",
"country": "Pays",
"error_dep_empty": "Vous n'avez indiqué aucune adresse. Impossible d'afficher la carte.",
"error_arr_empty": "Vous n'avez indiqué aucune adresse d'arrivée. Impossible d'afficher l'itinéraire.",
"go": "Aller ici ?",
"leave": "Partir d'ici ?",
"hideform" : "Cacher le formulaire",
"printform" : "Afficher le formulaire",
"hidemap" : " Masquer la carte",
"printmap" : "Afficher la carte",
"hidepanel" : "Masquer l'itinéraire",
"printpanel" : "Afficher l'itinéraire",
"direction" : "Itinéraire",
"map" : "Plan",
"start" : "Départ :",
"address" : "Adresse ou code postal :",
"shrink" : "réduire",
"enlarge" : "agrandir",
"plug" : "Cartes_Affichez une carte, des points d'intérêt ou un itinéraire, avec les Cartes Google." ,
"notfound" : "L'adresse que vous avez indiquée dans la Google Map est introuvable. Essayez en précisant davantage.",
"add" : "Ajouter", 
"addmarker" : "Ajouter un point",
"addline" : "Tracer une ligne", 
"addshape" : "Dessiner une forme",
"chooseicon" : "Choisissez une icône :",
"confirmdeletemarker" : "Êtes-vous sûr de vouloir supprimer ce marqueur ?",
"deletemarker" : "Supprimer le marqueur",
"editmarker" : "Informations concernant ce point",
"title" : "Titre",
"title_v3" : "Titre :",
"properties" : "Propriétés",
"mapoptions" : "Options de la carte",
"didyoumean" : "Vouliez-vous dire ?",
"resultsfound" : "résultats trouvé(s)",
"found" : "Trouvé : "
} ;

var gm_errors={
	"200" :  ["G_GEO_SUCCESS", "Succès"],
	"400" :  ["G_GEO_BAD_REQUEST", "Requête rejetée : votre demande n'a pas pu aboutir. Merci de contacter le service technique."],
	"500" :  ["G_GEO_SERVER_ERROR" , "Erreur du serveur : votre demande n'a pas pu être traitée correctement. Merci de contacter le service technique."],
	"601" :  ["G_GEO_MISSING_QUERY" , "Adresse manquante : l'adresse est manquante ou vide."],
	"602" :  ["G_GEO_UNKNOWN_ADDRESS" , "Adresse inconnue : aucune position géographique n'a pu être trouvée à l'adresse donnée."],
	"603" :  ["G_GEO_UNAVAILABLE_ADDRESS" , "Adresse indisponible : la position géographique n'a pas pu être fournie pour des raisons légales ou contractuelles."],
	"604" :  ["G_GEO_UNKNOWN_DIRECTIONS" , "Itinéraire indisponible : impossible de calculer l'itinéraire entre les adresses indiquées."],
	"610" :  ["G_GEO_BAD_KEY" , "Clé invalide : merci de contacter le service technique en recopiant ce message."],
	"620" :  ["G_GEO_TOO_MANY_QUERIES", "Trop de requêtes : le nombre maximum de requêtes par jour a été atteint pour ce site. Merci de contacter le service technique."],
	"ZERO_RESULTS" : ["ZERO_RESULTS", "Cette adresse n'a pas été reconnue. Vérifiez que le code postal est valide."]
	
};


var gm_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "gm_msgs_fr_js_loaded" ) ;


var gm_json_template = { version: 4 , text : "" , color : "rgb(100%,100%,100%)" ,  header : { display: "true", text : "", icon: "false" } , type : "map", add_dep : "" , add_arr : "" , coords : "", center : "", maptype: "m", interacttype : "dynamic" , zoom : 13 , markers : [], lines : [], shapes : [] , kml : "", kmlzoom : "false", traffic : "false", common : {width : 450} } ;

function gm_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == gm_json_template.version ) ) return r ;
	if ( r.version<3 ) gm_upgradejsontov3( r ) ;
	if ( r.version<4 ) gm_upgradejsontov4( r ) ;
	r.version = gm_json_template.version;
	return r ;
}

function gm_upgradejsontov3( r ) {
	if ( ! r.header ) r.header = gm_json_template.header ;
	if ( ! r.interacttype ) r.interacttype = gm_json_template.interacttype ;
	if ( ! r.coords ) r.coords = gm_json_template.coords ;
	if ( ! r.center ) r.center = gm_json_template.center ;
	if ( ! r.maptype ) r.maptype = gm_json_template.maptype ;
	if ( ! r.markers ) r.markers = gm_json_template.markers ;
	if ( ! r.lines ) r.lines = gm_json_template.lines ;
	if ( ! r.shapes ) r.shapes = gm_json_template.shapes ;
	if ( ! r.kml ) r.kml = gm_json_template.kml ;
	if ( ! r.kmlzoom ) r.kmlzoom = gm_json_template.kmlzoom ;
	if ( ! r.traffic) r.traffic = gm_json_template.traffic ;
	if ( r.headerdisplay) { 
		r.header.display = (r.headerdisplay == "1") ? "true" : "false" ;
		delete r.headerdisplay;
	}
	if (r.displaytype) delete r.displaytype;
	return r ;
}

function gm_upgradejsontov4(r) {
	r.kmlzoom = ( r.kmlzoom ) ? "true" : "false" ;
	r.traffic = ( r.traffic ) ? "true" : "false" ;
	return r ;
}

function gm_initforweb( id ) {
	var div = ge( id ) ;
	var obj_map = gebcn( div , "map_canvas") ;
	div.toresize = function () { return [ obj_map ] ; } ;
	gm_loadmap( ge( id ) , qsn_thenotes[ id ] ) ;
}

function gm_markeroptions( div ) {
	var $map = $( ".map:eq(0)", div ) ;
	$map.find( 'iframe' ).get(0).trigger( "newmarker" ) ;
	xq_bubble( $ ( div ).find( ".richtarget" ), gm_message[ "markersinfo" ] );
}

function gm_lineoptions( div ) {
	var $map = $( ".map:eq(0)", div ) ;
	$map.find( 'iframe' ).get( 0 ).trigger( "newline" ) ;
	xq_bubble( $ ( div ).find( ".richtarget" ), gm_message[ "linesinfo" ] );
}

function gm_shapeoptions( div ) {
	var $map = $( ".map:eq(0)", div ) ;
	$map.find( 'iframe' ).get( 0 ).trigger( "newshape" ) ;
	xq_bubble( $ ( div ).find( ".richtarget" ) , gm_message[ "shapesinfo" ] );
}

function gm_loadmap( div, r ) {
	var $map = $( ".map:eq(0)", div ) ;
	$map.empty() ;
	$map.appendQIframe( "/services/dialogs/gmap/index_" + q_lang + ".html", { "attach": { json: gm_Gmapjson( r.common.noteid ) } } ) ;
	//if ( q_pagemode() != "makeweb" ) $map.appendQIframe( "/services/dialogs/gmap/index_" + q_lang + ".html", { "attach": { json: gm_Gmapjson( r.common.noteid ) } } ) ;
	//else $map.appendQIframe( "/services/qblank.html" ) ;
	$map.find( 'iframe' ).before( '<div class="waitmap" style="position:absolute;width:100%;height:100%;display:none; background : url( \'/images/blank.gif\' ) repeat"></div>' );
	gm_installresize( div , r ) ;
	q_changedwidth( div ) ;
}

function gm_Gmapjson ( noteid ) {	
	var r = qsn_thenotes[ noteid ];
	var gmap_mode = ( ( window.web_js_loaded || ( document.mainform && document.mainform.pagemode && document.mainform.pagemode.value == "view" ) ) ? "view" : "edit" ) ;

	var json = {
		start: r.add_dep,
		end: r.add_arr,
		coords: r.coords,
		markers: q_cloneObject( r.markers || [] ),
		shapes:  q_cloneObject( r.shapes || [] ),
		lines:  q_cloneObject(  r.lines || [] ),
		kml: r.kml,
		kmlzoom: r.kmlzoom,
		type: r.type,
		traffic: ( r.traffic =="true" ) ? true : false,
		center: r.center,
		maptype: ( r.maptype || "m" ),
		interact: ( r.interacttype || "dynamic" ),
		zoom: r.zoom,
		gm_mode: gmap_mode
	};
	if ( gmap_mode == "edit" ) json.events = {
		"onSaveLines": function( x ) {
			gm_saveLines( noteid, x );
		},
		"onSaveShapes": function ( x ) {
			gm_saveShapes( noteid, x );
		},
		"onSaveMarkers": function ( x ) {
			gm_saveMarkers( noteid, x );		
		},	
		"onSaveCenter": function ( x ) {
			gm_saveCenter( noteid, x );	
		},
		"onSaveCoords": function ( x ) {
			gm_saveCoords( noteid, x );	
		},
		"onSaveZoom": function ( x ) {
			gm_saveZoom( noteid, x );	
		},
		"onSaveMapType": function ( x ) {
			gm_saveMapType( noteid, x );	
		}
	} ;
	return json;
}

function gm_url( r ) {
	if ( window.q_makeweb && ! window.web_js_loaded ) return "" ;
	var depart = r.add_dep;
	if ( r.add_dep_france ) depart += ", France, France" ;
	var myURL = "/services/gm/iframe_gmapv3.html?start=" + encodeURIComponent(depart);

	if ( r.type =="directions") {
		var arrive = r.add_arr;
		myURL += "&end=" + encodeURI(arrive);
	}
	if (r.coords) {
		myURL += "&coords=" + r.coords;
	}

	if (r.markers) {
		myURL += "&markers=" + r.markers.length;
		for ( var i = 0; i < r.markers.length; i++) { 
			myURL += "&marker_" + i + "_coords=" + encodeURIComponent(r.markers[i].coords);
			myURL += "&marker_" + i + "_title=" + encodeURIComponent(r.markers[i].title);
			myURL += "&marker_" + i + "_icon=" + encodeURIComponent(r.markers[i].icon);
		}
	}
	if (r.lines) {
		myURL += "&lines=" + r.lines.length;
		for ( var i = 0; i<r.lines.length; i ++) { 
			myURL += "&line_" + i + "_color=" + encodeURIComponent(r.lines[i].color);
			myURL += "&line_" + i + "_levels=" + encodeURIComponent(r.lines[i].levels);
			myURL += "&line_" + i + "_numlevels=" + encodeURIComponent(r.lines[i].numLevels);
			myURL += "&line_" + i + "_opacity=" + encodeURIComponent(r.lines[i].opacity);
			myURL += "&line_" + i + "_points=" + encodeURIComponent(r.lines[i].points);
			myURL += "&line_" + i + "_weight=" + encodeURIComponent(r.lines[i].weight);
			myURL += "&line_" + i + "_zoomfactor=" + encodeURIComponent(r.lines[i].zoomFactor);
		}
	}

	if (r.shapes) {
		myURL += "&shapes=" + r.shapes.length;
		for ( var i = 0; i<r.shapes.length; i ++) { 
			myURL += "&shape_" + i + "_color=" + encodeURIComponent(r.shapes[i].color);
			myURL += "&shape_" + i + "_levels=" + encodeURIComponent(r.shapes[i].levels);
			myURL += "&shape_" + i + "_numlevels=" + encodeURIComponent(r.shapes[i].numLevels);
			myURL += "&shape_" + i + "_opacity=" + encodeURIComponent(r.shapes[i].opacity);
			myURL += "&shape_" + i + "_points=" + encodeURIComponent(r.shapes[i].points);
			myURL += "&shape_" + i + "_weight=" + encodeURIComponent(r.shapes[i].weight);
			myURL += "&shape_" + i + "_zoomfactor=" + encodeURIComponent(r.shapes[i].zoomFactor);
		}
	}
	if (r.kml != "" ){
		myURL += "&kml=" + r.kml;
		myURL += "&kmlzoom=" + r.kmlzoom;
	}
	if (r.traffic == "true"){
		myURL += "&traffic=" + r.traffic;
	}
	myURL += "&center=" + r.center;
	myURL += "&maptype=" + ( r.maptype || "m");
	myURL += "&interact=" + ( r.interacttype || "dynamic") ;
	myURL += "&zoom=" + ( r.zoom || 13 ) ;
	myURL += "&noteid=" + r.common.noteid ;
	myURL += "&gm_mode=" + ( ( window.web_js_loaded || ( document.mainform && document.mainform.pagemode && document.mainform.pagemode.value == "view" ) ) ? "view" : "edit" ) ;
	return myURL ;
}

function gm_getservername() { 
	return document.domain ;
}
	
function gm_installresize( div , r ) {
	if ( qsn_currstate == "edit" ) return ;
	
	var obj_map = $( ".map:eq(0) div:eq(0)", div ).get( 0 ) ;
	var obj_iframe = $( ".map:eq(0) iframe", div ).get( 0 ) ;
	obj_map.toresize = function () { return [ obj_iframe ] ; } ;
	div.toresize = function () { return [ obj_map ].concat( qsn_container_toresize( this ) ) ; } ;
	div.dragupdone = function () { gm_finishresize( this ); } ;

	obj_map.widthrule = function ( w ) { return Math.max( w - 20 , 1 ) ; } ;
	function resizedMap( elem , w ) {
		//if ( elem.innerHTML == "" ) return ;
		var height = Math.round( w * 3 / 5 + 10 ) ;
		var maptype = r.type ;
		if ( maptype == "directions" ) height = ( height * 2 ) + 5 ;
		if ( maptype == "directions" ) {
	//				if ( ( height / w ) < 1.25 ) elem.style.height = height + "px";
			elem.style.height = height + "px";
		} else {
	//				if ( ( height / w ) < 0.6 ) elem.style.height = height + "px";
			elem.style.height = height + "px";
		}
	}
	obj_map.resized = resizedMap ;
	obj_iframe.resized = resizedMap ;
}


var gmlist_message = {
"editAPIkey" : "modifier la clé API",
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Liste de Points" ,
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "Liste de Points_Affichez une liste de points remarquables sur une carte." ,
"desc" : "La note Liste de Points permet d'afficher des points sur une carte, avec un lien, une icone et un commentaire",

"importCSV" : "Ajouter une liste de points depuis des données CSV (Excel)",
"importCSV_noselect_title" : "Informations concernant les points", 
"importCSV_error_incorrectaddress" : "L'adresse '%v' n'a pas été reconnue.",
"importCSV_name" : "Nom" ,
"importCSV_address" : "Adresse" ,
"importCSV_comment" : "Commentaire" ,
"importCSV_link" : "Lien web" ,
"importCSV_confirm" : "Vous pouvez, soit indiquer un fichier .csv (export Excel par exemple), soit procéder par copier-coller depuis Excel.<br/><br/>Colonnes obligatoires : Nom, Adresse.<br/>Colonnes optionnelles : Commentaire, Lien web.<br/><br/>Cliquez sur OK pour poursuivre.",

"display" : "Affichage :",
"displaylist" : "Afficher la liste des points", 
"displaymap" : "Afficher la carte",
"kmlbackground" : "Fond de carte :",
"zoom" : "La carte s'ajuste :",
"zoom0" : "aux points présents", 
"zoom1" : "au fond de carte (si fond de carte sélectionné)",
"zoom2" : "aux frontières françaises",

"imgratio0" : "Très allongée" ,
"imgratio1" : "Allongée" ,
"imgratio2" : "Normale" ,
"imgratio3" : "Carrée" ,
"imgratio4" : "Etroite" ,
"imgratio5" : "Très étroite" ,
"imgratio" : "Forme de la carte",

"nomarker" : "Aucun point n'est affiché.",
"marker_editbutton" : "Modifier ce point",
"marker_suppressbutton" : "Supprimer ce point",
"marker_suppressconfirm" : "Voulez-vous vraiment supprimer le point : ",
"marker_edit" : "Modifier un point",
"marker_add" : "Ajouter un point à la liste",
"marker_checkerror" : "Problème durant la vérification de l'adresse. Merci de vérifier celle-ci.",
"marker_checkok" :  "L'adresse a bien été validée.",
"specifyname" : "Vous devez choisir un nom pour le point.",
"specifyaddress" : "Vous devez indiquer une adresse pour le point.",
"specifyaddresscheck" : "Merci de valider l'adresse en cliquant sur le bouton \"Tester l'adresse\".",

"linkpagetitle" : "Cliquez pour accéder à la page",
"popuppagetitle" : "Cliquez pour voir","linkfiletitle" : "Cliquez pour télécharger le fichier",
"linkbroken" : "La page vers laquelle pointait ce lien a été supprimée.",

"default" : "Icone par défaut",
"flag_black" : "Drapeau Noir",
"flag_red" : "Drapeau Rouge",
"flag_blue" : "Drapeau Bleu",
"flag_green" : "Drapeau Vert",
"flag_yellow" : "Drapeau Jaune",
"flag_starter" : "Drapeau à damiers",
"push_pin" : "Punaise",
"car" : "Voiture",
"bus" : "Bus",
"home" : "Maison",
"bed" : "Lit d'hotel",
"forkandknife" : "Restaurant",
"chef" : "Bon restaurant",
"photo" : "Appareil Photo",
"stopwatch" : "Chronomètre",
"trophy" : "Trophée",
"foot" : "Ballon de Football",
"basket" : "Ballon de BasketBall", 
"cycle" : "Vélo",
"petanque" : "Boule de Pétanque",
"savate" : "Combattant",
"danse" : "Danseuse",
"tabletennis" : "Raquette de Tennis de Table",
"volant" : "Volant (badminton)"
} ;

var gmlist_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "gmlist_msgs_fr_js_loaded" ) ;


var gmlist_json_template = { version: 1 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, markers : [], imgratio : "2", displaymap : "true", displaylist : "true", kml : "", zoom : "0" } ;

var gmlist_colordesc = {
	"qmc3" : function( r ) {
		if ( r.header.icon == "false" ) return "" ;
		return "/old/v1/services/gmlist/images/gmlist48.png" ;
	}
} ; 
var gmlist_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" }  };


var gmlist_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded( "gmlist_js_loaded" ) ;



var hello_intl_json_template = { version: 1 , text : "hello !\nbonjour !\ngoeiedag !\nmirë dita !\nhallo !\nguàtertag !\nsalam !\nbarev !\nsunchhen !\nidh-iyessbhène !\nmingalar pa !\nhalo !\ndemat !\nдобър ден\nnǐ hăo !\nannyǒng hashimnikka !\ndobar dan !\nhej !\nhola !\nsaluton !\ntere !\nhey !\npäivää !\ngoede morgen !\nbondi !\nhallo !\nDia duit !\nola !\nhylo !\ngamarjoba !\nkalimera !\nmba'éichapa !\nshalom !\nnamaste !\nszia !\nhalló !\nbuongiorno !\nkonnichi wa !\nazzoul !\ntcheripsou !\nsilav !\nlabdien !\nmbote !\nlaba diena !\ndobarden !\nmanahoana !\nmerħba !\nkia ora !\nСайн байна уу\nne y yibeoogo !\nbuïjort !\ngod dag !\nsalâm !\ndzień dobry !\nbom dia !\nlatcho divès !\nbună ziua !\nДобрый день\ndobar dan !\nhej !\nia orana !\ndobrý den !\ngünaydin !\npryvit !\nchào !", n : 8 } ;

/*
function -
function RENDER
*/

var fonts= new Array("Arial, sans-serif", "Arial Black, sans-serif", "Helvetica, sans-serif", "Verdana, sans-serif", "Univers, sans-serif", "Futura, sans-serif", "MS Trebuchet, sans-serif", "Times New Roman, serif", "Times, serif", "Georgia, serif", "Bodoni, serif", "Garamond, serif", "Zapf-Chancery, cursive", "Script, cursive", "Brush, cursive", "Courier, monospace", "MS Courier New, monospace", "Prestige, monospace", "Western, fantasy", "Critter, fantasy") ;

function hello_intl_rendertext( div , r ) {
	if ( qsn_currstate != "edit" ) {
		var m = r.text.split("\n") ;
		var t = "" ;
		for (var i=0; i<r.n; i++) {
			var h = m[randInt(0, (m.length)-1)];
			var f = "font-family:" + fonts[randInt(0, (fonts.length)-1)] + ";" ;
			var c = "color:rgb(" + randInt(0, 255) + "," + randInt(0, 255) + "," + randInt(0, 255) + ");" ;
			var s = "font-size:" + randInt(11, 40) + "px;" ;
			var a = "float:" + ((randInt(0, 10) < 5) ? "left;" : "right;") ;
			if (i == 0) var p = "margin:0px" ;
			else var p = "margin:" + randInt(0, randInt(5, 50)) + "px " ;
			t += "<div style=\"" + f + c + s + a + p + "\">"+ h + "</div>" ;
		}
		$( ".text:eq(0)" , div ).empty().html( t ) ;
	} else {
		$( ".hello_intl_n:eq(0)" , div ).empty().html( hello_intl_smartDisplay( parseInt( r.n ) ) ) ;
		$( ".text:eq(0)" , div ).val( r.text ) ;
	}
}

function randInt(a, b) {
	return Math.round(Math.random() * (b-a)+a);
}

function hello_intl_initforweb( id ) {
	hello_intl_rendertext( ge( id ) , qsn_thenotes[ id ] ) ;
}



var live_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note En direct" ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "En direct_Envoyez des infos sur votre site directement depuis votre mobile." ,
"desc" : "La note En direct ajoute en direct sur votre site les messages envoyés depuis les téléphones des membres du site.",
"displayfirstname" : "Afficher le prénom",
"displayusername" : "Afficher le nom de famille",
"displaydate" : "Afficher la date",
"deletelive" : "Etes-vous sûr de vouloir supprimer le commentaire ?",
"deletelive_error" : "Erreur durant la suppression du commentaire",
"addreporters_title" : "Options du reportage",
"deletereporter" : "Supprimer le reporter : ",
"asc" : "Du plus vieux au plus récent", 
"desc" : "Du plus récent au plus vieux",

"nomessage" : "Aucun message à supprimer.",
"cleanup" : "Faites votre choix :<ul><li>vider les messages contenus dans le Direct pour le prochain Direct</li><li>vider les messages du Direct et les archiver pour laisser un compte rendu sur votre site</li></ul>",
"cleanuponly" : "vider",
"cleanupandsave" : "vider + archiver + nouveau message",
"wsg_title" : "Direct du %s",

"nolive" : "(aucun message pour le moment)"
} ;

var live_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "live_msgs_fr_js_loaded" ) ;


var live_json_template = { version: 1 ,  text : "" , textheight : 350 , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, live : [], reporters : [], displayfirstname : "true", displayusername : "false", displaydate : "true", order : "desc" } ;

var live_colordesc = { 
	"qmc3" : function( r ) {
		if ( r.header.icon == "false" ) return "" ;
		return "/services/live/images/live48.png" ;
	} 
};
var live_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" }  };


/*
function -
function ANIM FUNCTIONS
*/


var live_timers = {}; 

function live_pauseall() {
	for ( var id in live_timers ) if ( live_timers[ id ] ) live_cleartimer( id ) ;
}

function live_resumeall() {
	if ( qsn_currstate == "edit" ) return ;
	for ( var id in live_timers ) if ( ge( id ) ) live_program( ge( id ) , 1 ) ; 
}

function live_checkupdate( div , forcecallback ){
	if ( qsn_currstate == "edit" ) return live_program( div );
	function update( x ){
		$( div ).data( "liveupindex" , x ) ;
		if ( forcecallback ) forcecallback() ;
		else if ( div.callback ) {
			q_ajaxobjgetppty("live", "", "whole", function( x ){
				$( div ).data( "live" , x.whole );	
				div.callback() ;
			} )
		} else live_refresh( div , { program : false } ) ;
	}
	$.get( q_spacebaseurl() + "custom/liveupindex?d=" + ( new Date() ).getTime() , function( data ){
		if ( data != $( div ).data( "liveupindex" ) ) update( data ) ;
		live_program( div );
	} ).error( function(){
		if ( forcecallback ) update( -1 ) ;
		else live_program( div );
	} ) ;
}
function live_refresh( div , options ){
	if ( $( div ).data( "liveupindex" ) == undefined ) return live_checkupdate( div , function() { live_refresh( div , options ) ; } ) ;
	var opt = $.extend( { program : true , wait : false } , options ) ;
	if ( opt.wait ) {
		$( ".live_table", div ).hide();
		$( ".live_wait", div ).show();
	}
	q_ajaxobjgetppty("live", "", "whole", function( x ){
		$( div ).data( "live" , x.whole );
		live_renderlivetable( div, qsn_thenotes[ div.id ] );
		qsn_settextproperties( div.id ) ;
		qsn_setcolors( div.id ) ;
		if ( opt.wait ) {
			$( ".live_wait", div ).hide();
			$( ".live_table", div ).show();
		}
		if ( opt.program ) live_program( div );
	} );
}

function live_program( div , t ) {
	if ( q_pagemode() == "makeweb" ) return ;
	live_cleartimer( div.id ) ;
	live_timers[ div.id ] = setTimeout( function() { live_checkupdate( div ) ; } , t ? t : 5000 ) ;	
}

function live_cleartimer( id ) {
	if ( ! live_timers[ id ] ) return ;
	clearTimeout( live_timers[ id ] ) ;
	live_timers[ id ] = null ;
}

/*
function -
function SUPPRESS FUNCTIONS
*/

function live_allowsuppress( noteid ) {
	if ( ! confirm( qsn_message[ "suppressnote" ] ) ) return false ;
	live_cleartimer( noteid ) ;
	return true ;
}

/*
function -
function RENDER FUNCTIONS
*/

function live_renderhtml( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[ noteid ] ;
	
	qsn_container_renderhtml( div , r ) ;
	
	if ( qsn_currstate == "edit" ) {
		$( "button", div ).button();
		$( ".live_desc", div ).val( r.text );
		
		qsn_blurdefault ( gebcn( div , "live_desc" ), "notedescprompt") ;
		live_renderreporters( div );
	} else {
		div.toresize = function(){ return [ $( ".live_table:eq(0)" , this ).get( 0 ) ] ; }
		$( ".live_table:eq(0)" , div ).get( 0 ).widthrule = function ( w ) { return Math.max( 0 , w - 16 - 20 ) ; } ; // 16 pou l'ascenseur, 20 pour le padding
		q_changedwidth( div ,  Math.max( 100 , parseInt( qsn_width( noteid ) , 10 ) ) + q_deltawidth( div ) ) ;
		$( ".live_desc", div ).eq( 0 ).texthtml( r.text ) ;
		live_refresh( div , { wait : true } ) ;
		$( ".live_overflow:eq(0)", div ).height( r.textheight || 200 ) ;
		div.VDragTarget = $( ".live_overflow", div ).get( 0 ) ;
	}
	qsn_settextproperties( div.id ) ;
	qsn_setcolors( div.id ) ;
	q_addwindowfocushandlers( "live_resumeall" ) ;
	q_addwindowblurhandlers( "live_pauseall" ) ; 
}

function live_renderlivetable( div , r , mode ){
	return live_xrenderlivetable( $( div ).data( "live" ), div , r , mode ) ;
}

function live_xrenderlivetable( datalive, div , r , mode ){
	if ( mode == "wsg" ) var t = $( "<div>" ) ;
	else var t = $( ".live_table:eq(0) tbody", div ).empty();
	if ( ! datalive || ! datalive.length ) {
		if ( mode == "wsg" ) return "" ;
		else return t
			.append(
				$( "<tr></tr>" ).append( '<td align="center" style="font-style:italic;">' + live_message[ "nolive" ]+ '</td>' )
			) ;
	}
	for ( var i=0; i < datalive.length; i++ ){
		var l =  ( r.order == "desc" ) ? datalive[ datalive.length - i -1 ] : datalive[ i ];
		var content = "";
		if ( r.displayfirstname == "true" || r.displayusername == "true" || r.displaydate == "true"  ) content += '<i class="qsn1 text_contrast150">'
		if ( r.displayfirstname == "true" && l.firstname ) content += l.firstname;
		if ( r.displayusername == "true" && l.username ){
			if ( r.displayfirstname == "true" ) content += " ";
			content += l.username;
		}
		if ( r.displaydate == "true" ) {
			if ( r.displayfirstname == "true" || r.displayusername == "true" ) content += " - ";
			content +=	 ( ( l.d && l.d != "" ) ? q_isot2string( q_events_parseDate( l.d ) ) : "" );
		}
		if ( r.displayfirstname == "true" || r.displayusername == "true" || r.displaydate == "true"  ) content += "</i> - ";
		content += escapeHTML( l.t ) ;
		
		if ( mode == "wsg" ) {
			$( '<div></div>' ).appendTo( t ).html( content );
			$( "<hr/>" ).appendTo( t ) ;
		} else {
			var tr = $( '<tr></tr>' ).appendTo( t );
			tr.append( $( '<td style="border-bottom-style:solid; border-bottom-width: 1px; height:18px;" valign="middle"></td>' ).html( content ) ) ;
		}
	}
	if ( mode == "wsg" ) return t.html() ;
};


function live_initforweb( id, options ) {
	live_refresh( ge( id ) , options || { wait : true } ) ;
	setTimeout( function(){ q_addwindowfocushandlers( "live_resumeall" ) ; q_addwindowblurhandlers( "live_pauseall" ) ; } , 5000 ) ;
}

var live_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "live_js_loaded" ) ;

var matchnext_message = {
"notetitleprompt" : "Titre de la note" ,
"newnoteprompt" : "Cliquez ici pour ajouter un commentaire général" ,
"newcommentprompt" : "Cliquez ici pour ajouter un commentaire." ,
"delete" : "Supprimer ce match" ,
"add" : "Ajouter un nouveau match" ,
"nomatch" : "Aucun match" ,
"onematch" : "1 match" ,
"severalmatch" : "%s matchs" ,
"severalmatch2" : "<span class='matchnext_currentindex'>%current</span>/%total matchs" ,
"confirmdelete" : "Voulez-vous vraiment supprimer ce match ?" ,
"matchline" : "%date% : %team1% vs %team2%" ,
"snname" : "Note Matchs et Résultats" ,
"plug" : "Matchs_Affichez les matchs joués ou à venir de toutes ou partie de vos équipes." ,
"atTIME" : " à " ,
"playedDATE" : "Joué " ,
"desc" : "(...)",
"seecomment" : "voir le commentaire",
"commentitle" : "Commentaire du match",
"showicons" : "Afficher les smileys",
"noteoptions" : "Options de la note",
"tabselecttemplate" : "Choix du modèle",
"standard-small" : "Petit",
"standard-medium" : "Moyen",
"standard-large" : "Grand",
"hidingControlBar" : "Masquer la barre du lecteur",
"list" : "Tableau"
} ;

var matchnext_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "matchnext_msgs_fr_js_loaded" ) ;

var matchnext_json_template = { version : 5 ,  text : "" , color : "rgb(100%,100%,100%)" , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , "center" : "false"}, header : { display: "true", text : "", icon: "false" }  , showsignature : "false" , eventstype : [ { kind : "match" } ] , displayframes : "1", model : "standard-medium", hiding: "false" } ; 

var matchnext_colordesc = {
	"qmc3" : function( r ) {
		if ( r.header.icon == "false" ) return "" ;
		return "/services/matchnext/images/matchnext48.png" ;
	}
} ; 
var matchnext_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "italic" : "textstyles.italic", "center" : "textstyles.center" }  };


var matchnext_timers = { } ;
var matchnext_height = 137 ;
var matchnext_starthidingdelay = 1000;
var matchnext_formatDate = "dd.mm.y" ; // "dd M yy"

function matchnext_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == matchnext_json_template.version ) ) return r ;
	if ( r.version<2 ) r = matchnext_upgradejsontov2( r ) ;
	if ( r.version<3 ) r = matchnext_upgradejsontov3( r ) ;
	if ( r.version<4 ) r = matchnext_upgradejsontov4( r ) ;
	if ( r.version<5 ) r = matchnext_upgradejsontov5( r ) ;
	r.version = matchnext_json_template.version;
	return r ;
}

function matchnext_upgradejsontov2(r) {
	r.textstyles = { size: String( Math.max( Math.min( 3 - parseInt( r.textsize , 10 ) , 2 ) , 0 ) ) , bold : "false" , italic : "false", center : "false" } ;
	var oldfonts = [ 0 , 1 , 3 , 4 ] ;
	r.textstyles.font = oldfonts[ parseInt( r.textfont , 10 ) - 1 ] ;
	r.header.display = String( r.headerdisplay == 1 ) ;
	r[ "showsignature" ] = String( r.signature !=0 ) ;
	delete r.textsize ;
	delete r.textfont ;
	delete r.textcenter;
	delete r.textbold;
	delete r.textitalic;
	delete r.headerdisplay ;
	delete r.signature ;
	return r ;
}

function matchnext_upgradejsontov3(r) {
	r.showicons = "true";
	return r ;
}

function matchnext_selecttemplate_modifynote( id ) {
	var r = qsn_thenotes[ id ] ;
	$( "#matchnext_editblock > div" ).last().find( ".leftcoltab_content div:eq(0)" ).toggle( ! ( r.model == "list" ) ) ;
}

function matchnext_upgradejsontov4(r) {
	var o = { kind : "match" , filter : { "localteam" : r.displayteams } } ;
	
	if ( r.displaymode == 0 ) {
		o.filter.matchselector = [ "l", "n", "ln" ][ r.options.dateselect ];
	} else {
		o.date = [ "-1", "td", "w", "lw", "m" ][ r.options.timeselect ];
		o.filter.matchselector = [ "toplay", "played", "-1" ][ r.options.scoreselect ] ;
	}	
	r.eventstype = [ o ];
	delete r.displayteams;
	delete r.displaymode;
	delete r.options;
	return r ;
}

function matchnext_upgradejsontov5(r) {
	if ( ! r.model ) r.model = "standard-small" ;
	if ( ! r.hiding ) r.hiding = "true" ;
	return r ;
}

/*
function -
function RENDER
*/

function matchnext_renderhtml( noteid ) {
	var div = ge( noteid ) ;
	var $div = $( div ) ;
	noteid = div.id ;//2012-04-13, vh : au cas où on est appelé avec un id temporaire
	var r = qsn_thenotes[ noteid ] ;
	var t = $( ".matchnext_text", div  ) ;
	if ( ! $div.hasClass( "matchnext_" + r.model ) ) $div.addClass( "matchnext_" + r.model ) ;

	if ( qsn_currstate != "edit" ) {
		t.parent().toggle( r.text != "" ) ;
		t.texthtml( r.text ) ;

		$( ".matchnext_matchstable .matchnext_matchslist", div ).css( "height", matchnext_height * parseInt( r.displayframes, 10 ) + "px"  );
		if ( r.hiding == "false" ) $( " .matchnext_matchslist", div ).css( "height", matchnext_height * parseInt( r.displayframes, 10 ) + "px"  );
		else $( " .matchnext_matchslist", div ).css( "height", ( matchnext_height * parseInt( r.displayframes, 10 ) ) - $( ".matchnext_listbar:eq(0)", div ). height() + "px"  );
	} else {
		t.val( r.text );
		qsn_blurdefault( t.get(0) ) ;
	}
	$( ".matchnext_matchstable, .matchnext_matchslist", div ).hide();
	$( ".matchnext_wait", div ).show();
	qsn_container_renderhtml( div , r ) ;
	qsn_settextproperties( noteid ) ;
	qsn_setcolors( noteid ) ;
	var model = r.model ;
	
	function launchEvents() {
		$( ".matchnext_wait", div ).height( $( "#matchnext_" + r.model, "#q_author_stuff" ).attr( "_h" ) ).show();
		q_events_request( function( x ){
			if ( ! isremoved( div ) ){
				div.calendar = x ;
				matchnext_rendermatchs( noteid ) ;
			}
		}, { events: r.eventstype } ) ;
		if ( qsn_currstate != "edit" ) div.toresize = function() {
			$( "div[_widthrule]", div ).each( function() {
				this.widthrule = function( w ) { return eval( this.getAttribute( "_widthrule" ) ) ; } ;
			} ) ;
			return $( "div[_widthrule]", div ).get() ;
		} ;
	} ;
	if ( $( "#matchnext_" + model ).length == 0 ) {
		loadcss( "/services/matchnext/templates/" + model.replace( "-", "/"  ) + "/css/style.css" ) ;
		if ( model.split( "-" ).length > 1 ) loadcss( "/services/matchnext/templates/" + model.split( "-" )[ 0 ] + "/_common/css/style.css" ) ;
		$( "<div></div>" ).appendTo( "#q_author_stuff" ).load( "/services/matchnext/templates/" + model.replace( "-", "/"  ) + "/template_" + q_lang +".html #matchnext_" + model, function( response, status, xhr ) {
			if ( status == "success" ) launchEvents() ;
		} ) ;
		return ;
	} else {
		launchEvents() ;
	}
}

function matchnext_showlist( x, v ) {
	var div = getContainer( x ) ;
	var id = div.id ;
	$( div ).attr( "notestate",  v ? "LIST" : "PLAYER" ) ;

	$( ".matchnext_playerbar:eq(0)", div ).toggle( ! v ) ;
	$( ".matchnext_listbar:eq(0)", div ).toggle( v ) ;
	var links = $( ".matchnext_infos_list a", div );
	links.eq( 0 ).toggle( ! v );
	links.eq( 1 ).toggle( v );
	$( ".matchnext_matchstable", div ).toggle( ! v );
	$( ".matchnext_matchslist", div ).toggle( v ) ;
	$( ".matchnext_infos_new", div ).toggle( v && ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) && q_pagemode() == "edit" );
	if ( v ) matchnext_stopanim( div );
	else { 
		if ( $( div ).attr( "playerstate") == "PLAY" ) {
			matchnext_program( div ) ; 
			matchnext_playerbar( div, "PLAY" ) ;
		}
	}
}

function matchnext_rendermatchs( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[ noteid ] ;
	if ( qsn_currstate != "edit" ) matchnext_rendermatchs_view( div, r ) ;
	
	$( ".matchnext_wait", div ).hide();
	$( ".matchnext_matchstable, .matchnext_matchslist", div ).show();
	matchnext_showlist( div, false ) ;// pour gérer convenablement l'édition des matchs en mode view
}

function matchnext_rendermatchs_view( div, r ) {
	var model = r.model ;
	var noteid = div.id ;
	//var selmatchs = q_events_search( r.eventstype ) ;
	var selmatchs = div.calendar.events ;
	
	var viewnextmatchtemplate, d ;
	var template = $( "#matchnext_" + r.model + "_content" ).html() ;
	
	if ( r.model != "list" ) {
		$ ( ".matchnext_nav_placeholder", div ).html( $( "#matchnext_" + r.model + "_controlbar" ).html() ) ;

		// info bar
		if ( selmatchs.length == 0 ) {
			$( ".matchnext_infos_number", div ).html( matchnext_message[ "nomatch" ] ) ;
			$( ".matchnext_controlbar" , div ).hide();
		} else if ( selmatchs.length == 1 ) {
			$( ".matchnext_infos_number", div ).html( matchnext_message[ "onematch" ] ) ;
			$( ".matchnext_controlbar" , div ).hide();
		} else {
			$( ".matchnext_listbar:eq(0) .matchnext_infos_number", div ).html( matchnext_message[ "severalmatch" ].replace( "%s", selmatchs.length )  ) ;
			$( ".matchnext_playerbar:eq(0) .matchnext_infos_number", div ).html( matchnext_message[ "severalmatch2" ] .replace( "%current", "1" ).replace( "%total", selmatchs.length  ) ) ;
		}
	
		// matchs
		d = $( ".matchnext_matchstrack", div ).empty();
		var h = parseInt( $( "#matchnext_" + r.model ).attr( "_h" ), 10 ) ;
		$( ".matchnext_matchstrack", div ).attr( "_h", h );
		$( ".matchnext_matchstable", div ).css( "height", h * parseInt( r.displayframes, 10 ) + "px"  );
		if ( r.hiding == "false" ) $( " .matchnext_matchslist", div ).css( "height",  h * parseInt( r.displayframes, 10 ) + "px"  );
		else $( " .matchnext_matchslist", div ).css( "height",  h * parseInt( r.displayframes, 10 ) - $( ".matchnext_listbar:eq(0)", div ). height() + "px"  );		
		h = parseInt( $( ".matchnext_matchstable", div ).css( "height" ), 10 ) ;
		viewnextmatchtemplate = "<div class=\"matchnext_viewmatchdiv qsn1 bg_self\" style=\"width: 100% ; height: " + h + "px\" >" + template  + "</div>" ;
	} else {
		viewnextmatchtemplate = template ; 
		$( ".matchnext_matchstable", div ).empty().append( '<table class="matchnext_matchstrack" cellpadding="0" cellspacing="0" border="0"><tbody></tbody></table>' );
		d = $( ".matchnext_matchstrack", div ) ;
	}
	
	var dhtmls = [];
	var listdiv = $( ".matchnext_matchslist", div ).empty();
	
	for ( var i=0; i < selmatchs.length; i++ ) {
		var id = selmatchs[ i ].id;
		var hometeam = selmatchs[ i ].hometeam() ;
		var visitorteam = selmatchs[ i ].visitorteam() ;
		var matchdone = ( selmatchs[ i ].homescore && selmatchs[ i ].homescore != "" && selmatchs[ i ].vsscore && selmatchs[ i ].vsscore != "" );
		var onedhtml = $( viewnextmatchtemplate );
		onedhtml.attr( "index", i ) ;
		// club qui reçoit affiché en premier : avant le vs en mode liste
		var val = $.datepicker.formatDate( matchnext_formatDate, q_events_parseDate( selmatchs[ i ][ "date" ] ) );
		if ( matchdone ) val = matchnext_message[ "playedDATE" ] + val ;

		listline = matchnext_message[ "matchline" ].
			replace( "%team1%", escapeHTML( hometeam.name ) ).
			replace( "%team2%", escapeHTML( visitorteam.name ) ).
			replace( "%date%", escapeHTML( val ) ) ;

		// properties
		onedhtml.find( '[q_data]' ).each( function() {
			var val = "";
			var $q_data = $( this ).attr( "q_data" ) ;
			
			if ( $q_data == "competition_name" ) {
				var tmp = [] ;
				if ( selmatchs[ i ][ "competition" ] ) tmp.push( selmatchs[ i ][ "competition" ] ) ;
				if ( selmatchs[ i ][ "step" ] ) tmp.push( selmatchs[ i ][ "step" ] ) ;
				$( this ).html( tmp.join( " - " ) ) ;
			}
			
			if ( $q_data == "dateAndTime" ) {
				val = selmatchs[ i ][ "date" ] ;
				val = $.datepicker.formatDate( matchnext_formatDate, q_events_parseDate( val ) );
				if ( selmatchs[ i ][ "sel:time" ] != "" && selmatchs[ i ][ "sel:time" ]  != "00" ) val +=" - " + selmatchs[ i ][ "sel:time" ] ;
				$( this ).html( val ) ;
			}
			
			if ( $q_data == "date" ) {
				val = selmatchs[ i ][ "date" ] ;
				val = $.datepicker.formatDate( matchnext_formatDate, q_events_parseDate( val ) );
				$( this ).html( val ) ;
			}
			
			if ( $q_data == "time" ) {
				if ( selmatchs[ i ][ "sel:time" ] != "" && selmatchs[ i ][ "sel:time" ]  != "00" ) val = selmatchs[ i ][ "sel:time" ] ;
				$( this ).html( val ) ;
			}
			if ( $q_data == "home_team" ) $( this ).html( hometeam.name || "" ) ;
			if ( $q_data == "visitor_team" ) $( this ).html( visitorteam.name || "" ) ;
			if ( $q_data == "home_logo33" ) $( this ).attr( "src",  hometeam.logo33 ) ;
			if ( $q_data == "home_logo100" ) $( this ).attr( "src",  hometeam.logo100 ) ;
			if ( $q_data == "visitor_logo33" ) $( this ).attr( "src",  visitorteam.logo33 ) ;
			if ( $q_data == "visitor_logo100" ) $( this ).attr( "src",  visitorteam.logo100 ) ;
			if ( $q_data == "toggle_comment" && ! selmatchs[ i ][ "comment" ] ) $( this ).css( "visibility", "hidden" ) ;
			if ( $q_data == "toggle_matchdone" && ! matchdone ) $( this ).hide() ;
			if ( $q_data == "toggle_matchtoplay" && matchdone ) $( this ).hide() ;
			if ( $q_data == "location.name" ) $( this ).html( selmatchs[ i ].location.name || "" ) ;
			if ( $q_data == "location.city" ) $( this ).html( selmatchs[ i ].location.city || "" ) ;
			if ( matchdone ) {		
				if ( $q_data == "home_score" ) $( this ).html( hometeam.score ) ;
				if ( $q_data == "visitor_score" ) $( this ).html( visitorteam.score ) ; 
			} 
		} ) ;

		dhtmls.push( onedhtml.wrap( "<div></div>" ).parent().html() ) ;
		
		if ( r.model != "list" ) {
			// Mode liste
			var newline = $( '<div class="matchnext_listline" matchindex="' + ( i + 1 ) + '\" >' )
				.attr( "eid", id )
				.appendTo( listdiv )
				.append( '<div style="padding-left:20px;">' + listline + '</span>' );

			if ( q_pagemode() == "edit" && ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) ) {
				$( '<div class="adminmenu sprite_edit_16" style="cursor:pointer; float:left;margin-top: 5px;"></div>' )
					.attr( "title", q_events_msgs[ "edit" ] )
					.attr( "eid", id )
					.mousedown( function( event ){ q_stopPropagation( event ); } )
					.click( function(){
						var eid = $( this ).attr( "eid" ) ;
						q_events_request( function(){
							q_eventform_display( "edit", "match", "", eid, { callback : matchnext_renderhtml, callback_args : noteid } ) ;
						}, { openselects: "all", eventid: eid, type: "xml" } ) ;
						return false;
					} )
					.prependTo( newline );
			}
		}
	}
	
	if ( r.model != "list" ) {
		if ( dhtmls.length ) d.html( dhtmls[ 0 ] );
		$( "#" + noteid ).data( { "currindex" : 0 , dhtml : dhtmls } );

		$( ".matchnext_listline", listdiv )
			.hover( 
				function(){ $( this ).attr( "class", "matchnext_listline qsn1 bg_contrast13" ); qsn_setcolors( [ this ] ); }, 
				function(){ $( this ).attr( "class", "matchnext_listline qsn1 bg_self" ); qsn_setcolors( [ this ] ); } 
			)
			.click( function(){ matchnext_scrollanimto( getContainer( this ) , $( this ).attr( "matchindex" ) ) ; } );
			
		if ( r.hiding == "true" ) {
			$( ".matchnext_nav_placeholder:eq(0)", div ).addClass( "undocked" ) ;
			$( ".matchnext_playerbar:eq(0) .matchnext_nav", div ).addClass( "matchnext_nav_undocked" ).show() ;
			$ ( ".matchnext_playerbar:eq(0) .matchnext_nav", div ).delay( matchnext_starthidingdelay ).fadeToggle("slow", "linear" );
			$( div ).hover( 
				function(){ $( ".matchnext_playerbar:eq(0) .matchnext_nav", div ).stop(true, true).fadeIn( "fast", "linear" ); },
				function(){ $( ".matchnext_playerbar:eq(0) .matchnext_nav", div ).stop(true, true).fadeOut( "fast", "linear" ); } 
				) ;
		} else {
			$( ".matchnext_nav_placeholder:eq(0)", div ).addClass( "docked" ) ;
			$( ".matchnext_nav", div ).addClass( "matchnext_nav_docked" ) ;
		}
	} else d.find( "tbody" ).append( dhtmls.join( "\n" ) ) ;
	
	qsn_settextproperties( div.id ) ;
	qsn_setcolors( div.id );
	q_changedwidth( div ) ;
	// anim
	if ( r.model != "list" ) matchnext_startanim( div ) ;
}

function matchnext_ondisplaycomment( elem ) {
	var index = parseInt( $( elem ).parents( ".matchnext_viewmatchdiv:eq(0)" ).attr( "index" ), 10 ) ;
	var div = getContainer( elem ) ;
	matchnext_displaycomment( div, index ) ;
}
function matchnext_displaycomment( div, id ) {
	var data = div.calendar.events[ id ] ;
	q_alert( data[ "comment" ].replace( /(\n|\r)/g, "<br/>") , { title : matchnext_message[ "commentitle" ] , icon : "matchnext_commenticon", width:"500" } );
}

function matchnext_selectevents(){
	var div = qsn_edittarget;
	var r = qsn_thenotes[ div.id ];
	
	q_events_select( { 
		types : [ "match" ],
		values : r.eventstype,
		callback : function( x ){
			r.eventstype = x;
		}
	} );
}

/*
function -
function ANIMATION
*/

function matchnext_doanim( div, fromTo ) {
	var id = div.id ;
	var op = fromTo ;
	
	if ( fromTo == 0 ) {
		matchnext_program( div ) ;
		qsn_settextproperties( id ) ;
		qsn_setcolors( id );
		return ;
	}
	
	if ( qsn_currstate == "edit" || q_fsmpresent() ) return matchnext_program( div ) ;
	var pane = gebcn( div , "matchnext_matchstrack" ) ;
	
	if ( ! pane ) return ;
	var dhtmls = $( "#" + id ).data( "dhtml" );
	var currindex = $( "#" + id ).data( "currindex" ) ;
	if ( dhtmls == undefined || ! dhtmls || dhtmls.length < 2 ) return ;

	$( "#" + id ).data( "currindex", ( dhtmls.length + op + currindex ) % dhtmls.length );
	$( ".matchnext_currentindex", div ).html( $( "#" + id ).data( "currindex" ) + 1 ) ;
	
	matchnext_playerbar( div ) ;
	
	$( pane ).stop( true, true ) ;// évite les problèmes d'affichage en cas de clics multiples
	if ( op != -1 ) {
		pane.innerHTML += dhtmls[ $( "#" + id ).data( "currindex" ) ] ;
		$ ( pane ).css( "top", "0px");
	} else {
		var temp = pane.innerHTML ; 
		pane.innerHTML = dhtmls[ $( "#" + id ).data( "currindex" ) ] + temp ;

		$ ( pane ).css( "top", "-" + $( pane ).attr( "_h" ) + "px" ) ;
	}
	q_changedwidth( div ) ;
	var position = ( op == -1 ? "+=" : "-=" ) +  $( pane ).attr( "_h" )  + "px" ;
	
	$( pane ).animate( { top: position }, 800, function() {
		if ( isremoved ( div ) ) return ;
		var pane = $( this ).get( 0 );
		if ( op != -1 ) {
			pane.firstChild.innerHTML = pane.firstChild.nextSibling.innerHTML ;
			pane.firstChild.style.backgroundColor = pane.firstChild.nextSibling.style.backgroundColor ;
			pane.style.top = "0px" ;
			rm( pane.firstChild ) ;
		} else {
			pane.firstChild.nextSibling.innerHTML = pane.firstChild.innerHTML ;
			pane.firstChild.nextSibling.style.backgroundColor = pane.firstChild.style.backgroundColor ;
			pane.style.top = "0px" ;
			rm( pane.firstChild.nextSibling ) ;
		}

		if ( $( getContainer( div ) ).attr( "playerstate" ) == "PLAY" ) matchnext_program( div ) ;
		qsn_settextproperties( id ) ;
		qsn_setcolors( id );
	} ) ;
}

function matchnext_startanim( x , fast ) {
	var div = getContainer( x ) ;
	$( div ).attr( "playerstate",  "PLAY" );
	matchnext_playerbar( div,  "PLAY" ) ;
	matchnext_program( div , fast ? 10 : 2500 ) ;
}

function matchnext_play( x ) {
	var div = getContainer( x ) ;
	$( div ).attr( "playerstate",  "PLAY" );
	matchnext_playerbar( div,  "PLAY" ) ; 
	matchnext_doanim( div, 0 ) ;
}

function matchnext_stopanim( x ) {
	var div = getContainer( x ) ;
	if ( $( div ).attr( "notestate" ) != "LIST" ) {
		$( div ).attr( "playerstate", "PAUSE" ) ;
		matchnext_playerbar( div,  "PAUSE" ) ; 
	}
	matchnext_cleartimer( div.id ) ;
}

function matchnext_next( x ) {
	var div = getContainer( x ) ;
	matchnext_doanim( div, 1 ) ;
}

function matchnext_prev( x ) {
	var div = getContainer( x ) ;
	matchnext_doanim( div, -1 ) ;
}

function matchnext_playerbar( div, action ) {
	if ( action == "PLAY" || action == "PAUSE" ) {
		$ ( ".matchnext_pause", div ).toggle( ! ( action == "PAUSE" )  ) ;
		$ ( ".matchnext_play", div ).toggle( ! ( action == "PLAY" )  ) ;		
	}
}

function matchnext_scrollanimto( div, x ) {
	var noteid = div.id ;
	var n = parseInt( x , 10 ) - 1 ;
	matchnext_cleartimer( noteid ) ;
	$( "#" + noteid ).data( "currindex", n );
	$( ".matchnext_matchstrack", div ).html( $( "#" + noteid ).data( "dhtml" )[ n ] );
	q_changedwidth( div ) ;
	matchnext_showlist( div, false ) ;
}

/*
function -
function TOOLBAR
*/

function matchnext_toolbaroptions( elem ) {
	return qsn_toolbaroptions( elem , true ).concat( ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) ? [ "addevent" ] : [] ) ;
}

function matchnext_addeventnote( div ) {
	matchnext_newmatch( div ) ;
}

/*
function -
function TIMERS
*/

function matchnext_pauseall () {
	for ( var id in matchnext_timers ) if ( matchnext_timers[ id ] ) matchnext_cleartimer( id ) ;
}

function matchnext_resumeall () {
	if ( qsn_currstate == "edit" ) return ;
	for ( var id in matchnext_timers ) { 
		var smartnote = $( ge( id ) ) ;
		if ( smartnote.attr( "notestate") == "PLAYER" && smartnote.attr( "playerstate" ) == "PLAY" ) matchnext_program( ge( id ) ) ; 
	}
}

function matchnext_cleartimer( id ) {
	if ( ! matchnext_timers[ id ] ) return ;
	clearTimeout( matchnext_timers[ id ] ) ;
	matchnext_timers[ id ] = null ;
}

function matchnext_program( div , t ) {
	if ( q_pagemode() == "makeweb" ) return ;
	matchnext_cleartimer( div.id ) ;
	matchnext_timers[ div.id ] = setTimeout( function() { matchnext_doanim( div, 1 ) ; } , t ? t : 5000 ) ;	
}

function matchnext_initforweb( id ) {
	var $div = $ ( ge( id ) ) ;
	if ( $div.find( "#matchnext_nav_placeholder" ).length == 0 ) {
		$div.find( ".matchnext_infos" ).remove() ;
		$div.find( ".matchnext_matchslist" ).after( '<div id="matchnext_nav_placeholder"></div>' ) ;
	}
	matchnext_renderhtml( id ) ;
	setTimeout( "q_addwindowfocushandlers( 'matchnext_resumeall' ) ; q_addwindowblurhandlers( 'matchnext_pauseall' ) ; " , 5000 ) ;
}


var menu_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Menu" ,
"plug" : "Menu Vertical_Affichez un menu à la verticale sur vos pages." ,
"displayweb" : "Afficher les pages web", 
"displayprivate" : "Afficher les pages privées",
"displaylinks" : "Afficher les liens externes"
} ;

var menu_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "menu_msgs_fr_js_loaded" ) ;


var menu_json_template = { version: 2 ,  text : "" , color : "rgb(100%,100%,100%)", textstyles: { font : "-1", bold : "false" , italic : "false" , uppercase : "false", spacing : "1" , align : "0" },  displayprivate: "true", displayweb : "true", displaylinks : "true" } ;

var menu_textdesc = { "qtxt1" : { "font" : "textstyles.font" , "bold" : "textstyles.bold" , "italic" : "textstyles.italic" , "uppercase" : "textstyles.uppercase"  , "spacing" : "textstyles.spacing" , "align" : "textstyles.align" } } ;


function menu_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == menu_json_template.version ) ) return r ;
	if ( r.version<2 ) menu_upgradejsontov2( r ) ;
	r.version = menu_json_template.version;
	return r ;
}

function menu_upgradejsontov2( r ) {
	r.displaylinks = "true";
}

/*
function -
function RENDER
*/

function menu_renderhtml( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[ noteid ] ;
	qsn_container_renderhtml( div , r ) ;

	div.toresize = function() { return $( "div.qlub_tab_title", div ).get(); } ;
	menu_create( div, r ) ;
	menu_addevents( div, r );
	q_changedwidth( div, parseInt( qsn_width( noteid ), 10 ) );
	qsn_settextproperties( div.id ) ;
	qsn_setcolors( div.id ) ;
}

/*
function -
function MENUS
*/

var menu_tablespaceing = 5 ;
var menu_paddingleft = 5 ;

function menu_create( div, r ){
	$( ".menu_menu" , div ).attr( "cellspacing" , menu_tablespaceing ) ;
	$( ".menu_menu" , div ).eq( 0 ).empty();
	for ( var j = 0; j < spacexml.sitemap.length; j++ ) {
		$( ".menu_menu" , div ).eq( 0 ).append( menu_mainmenu( div.id, "info", spacexml.sitemap[ j ], j ) ) ;
	}
	var toresize = $( "div.qlub_tab_title", div ).get();
	for ( var i = 0 ; i < toresize.length ; i++ ) {
		toresize[ i ].widthrule = function( w ) { return w - 2*menu_tablespaceing - menu_paddingleft ; } ;
	}
}

function menu_mainmenu( noteid, type, sm, path ) {
	var r = qsn_thenotes[ noteid ] ;
	var menu_options = {
		svcfromid : function( svcid ) { return menu_svcfromid( svcid ) ; } ,
		svcisvisible : function( svcid ) { return menu_svcisvisible( noteid, svcid ) ; } ,
		linkisvisible : function() { return ( r.displaylinks == "true" ) ; }
	} ;
	//var table = $( '<table cellpadding="0" cellspacing="0" border="0" width="100%">' );

	var tr = $( '<tr>' )
		//.append( '<td class="qlub_menubarcorner_td" valign="top"><div class="qlub_menubarleft"></div></td>' )
		.append( '<td class="qlub_menubarinter" valign="top">' )
		//.append( '<td class="qlub_menubarcorner_td" valign="top"><div class="qlub_menubarright"></div></td>' )
		//.appendTo( table );
	var div =  $( '<div class="qlub_tab_td" style="position:relative;padding-left:' + menu_paddingleft + 'px;">' ).appendTo( $( ".qlub_menubarinter", tr )  );	
	
	var iscurrtab = false ;
	if ( ! sm.items && sm.href ){
		if ( r.displaylinks != "true" ) return null ;
		var htmlcontent = sm.name;
		div.attr( { "rel" : "link" } );
		$( '<div class="qlub_tab_title" style="overflow:hidden; white-space:nowrap; text-overflow:ellipsis;">' )
			.append( $( '<a></a>',  { "class" : "qlub_tab_title qtxt1 all", "target" : ( ( sm.target ) ? sm.target : "_self" ) , "href" : sm.href } ).append( htmlcontent ) )
			
			.appendTo( div );
	} else if ( ! sm.items && sm.id ) {
		if ( ! menu_svcisvisible( noteid, sm.id ) ) return null ;
		var svc = menu_svcfromid( sm.id ) ;
			
		if ( svc.icon ) var htmlcontent = $( '<table cellspacing="0" cellpadding="0" border="0" style="font-style:italic;">' ).append( 
			$( '<tr>' )
				.append( $( '<td>', { "class" : "qlub_menuicon", "valign" : "middle" } ).append( '<div>', { "class" : sm.icon } ) )
				.append ( $( '<td style="padding-left:8px;">' ).append( $( '<div style="white-space:nowrap">' ).html( q_svcname( svc ) ) ) )
			);
		else var htmlcontent = q_svcname( svc ) ;
		iscurrtab = ( sm.id == currsvcid );
		
		div.attr( { "rel" : "page" , "svcid" : sm.id } );
		
		$( '<div class="qlub_tab_title" style="overflow:hidden; white-space:nowrap; text-overflow:ellipsis;">' )
			.append( $( '<a></a>',  { "class" : "qlub_tab_title qtxt1 all", "href" : ( ( window.q_makeweb ) ? svc.weblink : "#" ) } ).append( htmlcontent ) )
			.appendTo( div );
				
	} else if ( sm.items ){
		if ( ! qlub_menus_menuisvisible( sm ) ) return null; 
		$( '<div class="qlub_tab_title" style="padding-right:25px;">' )
			.append( sm.name )
			.append( '<span style="position:absolute; right:0px;padding-right:9px;">►</span>' )
			.appendTo( div );
		
		var menu = $( "#qlub_menu_template" )
			.clone().removeAttr( "id" )
			.attr( "align" , "left")
			.css( { "position" : "absolute", "top" : "-13px", "right" : "0px" } ).show();
		// contenu du menu
		var ul = $( ".qlub_menu_content", menu ).empty();
		for ( var i = 0; i < sm.items.length; i++ ) {
			if ( ! sm.items[ i ].items && sm.items[ i ].id ) {
				if ( menu_svcisvisible( noteid, sm.items[ i ].id ) ) ul.append( qlub_menus_page( menu_svcfromid( sm.items[ i ].id ) ) ) ;
			} else if ( ! sm.items[ i ].items && sm.items[ i ].href ) {
				if ( r.displaylinks == "true" ) ul.append( qlub_menus_link( sm.items[ i ] , menu_options ) ) ;
			} else if ( sm.items[ i ].items ) {
				if ( qlub_menus_menuisvisible( sm ) ) ul.append( qlub_menus_submenu( sm.items[ i ], [ path ].concat( [ i ] ) , menu_options ) ) ;
			}
		}
		if ( ( q_pagemode() == "edit" ) && q_getuserlevel( memberid ) == "admin" ) qlub_menus_addgroupnewsvclink( ul ) ;
		var currpath = q_sitemap_getpath( currsvcid );
		iscurrtab = ( currpath && currpath.shift() == path );
		if ( $( "li" , menu ).length == 0 ) return null ;
		div.attr( { "rel": "menu", "menuindex" : q_tostring( [ path ]  ) } ).append( menu );
	}
	
	if ( iscurrtab ) div.prepend( '<div class="qlub_tab_marker">' );
	//return table;
	return tr;
}

function menu_svcfromid( svcid ){
	return q_svcfromid( svcid ) || q_web_svcfromid( svcid ) ;
}
function menu_svcisvisible( noteid, svcid ){
	var r = qsn_thenotes[ noteid ];
	if ( r.displayprivate == "false" && ! q_svcisweb( svcid ) ) return false;
	if ( r.displayweb == "false" && q_svcisweb( svcid ) ) return false;
	return qlub_menus_svcisvisible( svcid ) ;
}

/*
function -
function MENUS EVENTS
*/

function menu_addevents( div, r ){
	// hover et click des tabs principales
	$(  "div.qlub_tab_td", div )
		.hover( 	
			function(){
				if ( q_pagemode() == "web" ) {
					var $note = $( this ).parents( ".container" ).eq( 0 ) ;
					if ( $note.css( "z-index" ) != zindexmax ) {
						zindexmax++ ;
						$note.css( "z-index" , zindexmax ) ;
						if ( isie() ) $( "#ghost_" + $note.attr( "id" ) ).css( "z-index" , zindexmax ).hide().show() ;
					}
				}
				$( this ).css( "z-index", "1" ).addClass( "over" );
				if ( $( this ).offset().left + $( this ).outerWidth() + 318 > qlub_menupaneposition_maxwidth() + $( "#q_author_stuff" ).offset().left ) var left = - 292 ;
				else var left = $( this ).outerWidth() ;
				$( ".qlub_menupane", this ).parent().css( "left", left + "px" );
				$( ".qlub_menupane", this ).show();
			},function(){ 
				$( this ).css( "z-index", "0" ).removeClass( "over" );
				$( ".qlub_menupane", this ).hide();
			}
		)
		.unbind( "click" )
		.click( function(){ 
				var rel = $( this ).attr( "rel" );
				if ( rel == "page" ) return qlub_menus_click_svclink( this );
				else if ( rel == "link" ) return true;
			 });
	
	// hover et click des li sans items
	$(  "div.qlub_tab_td li[rel!='menu']", div )
		.hover( 
			function(){ $( this ).addClass( "over" );}, 
			function(){ $( this ).removeClass( "over" );}
		);
		
	$(  "div.qlub_tab_td li[rel='menu']", div )
		.hover( 
			function(){ 
				$( this ).addClass( "over" );
				if ( $( this ).offset().left + 318 > qlub_menupaneposition_maxwidth() ) var left = -282;
				else var left = 303;
				$( 'div:first', this ).css( "left", left + "px" ).show(); 
			}, function(){ 
				$( this ).removeClass( "over" );
				$( 'div:first', this ).hide();
			}
		);

	$( "div.qlub_tab_td li[rel='page']", div ).unbind( "click" ).click( function(){ return qlub_menus_click_svclink( this ); } );
	$( "div.qlub_tab_td li[rel='new']", div ).unbind( "click" ).click( function(){ qlub_menus_click_newlink( this ); } );

}

function menu_initforweb( id ) {
	menu_renderhtml( id );
}


var meteo_message = {
"newnoteprompt" : "cliquez ici pour créer une nouvelle note météo" ,
"plug" : "Météo_Affichez dans vos pages la météo de votre ville." ,
"desc" : "La note météo permet d'afficher la météo de la ville la plus proche de chez vous",
"noresults" : "Aucun résultat pour la recherche",
"results" :  " résultat(s) trouvé(s)", 
"resultsdesc" : "Cliquez sur l'une des villes pour la sélectionner :",
"nocity" : "Vous n'avez pas sélectionné de ville, ou la ville que vous avez sélectionnée n'est pas reconnue. Merci de sélectionner une autre ville.",
"noaccess" : "Suite à un incident, il nous est impossible d'afficher la météo pour le moment. Rechargez la page ultérieurement pour voir si l'incident est terminé. Merci de votre compéhension.",
"gotoTWC" : "Consulter la météo directement sur The Weather Channel ®",
"date" : "date",
"tabcolor" : "Couleur de la note",
"forecasttype" : "Affichage",
"tabstyle": "Style",
"forecasttypep" : "prévisions, images seules" ,
"forecasttypes" : "prévisions avec températures" ,
"forecasttypem" : "prévisions et temps actuel" ,
"forecasttypel" : "toutes les infos" ,
"forecastnumbertitle" : "Prévisions :" ,
"forecastnumber0" : "aujoud'hui",
"forecastnumber1" : "à 1 jour",
"forecastnumber2" : "à 2 jours",
"forecastnumber3" : "à 3 jours",
"forecastnumber4" : "à 4 jours",
"parameters" : "Paramètres" ,
"unitstitle" : "Unités" ,
"unitsm" : "Métriques (C°)" ,
"unitss" : "USA (F°)" ,
"unit_SI" : "° C" ,
"unit_US" : "° F" ,
"imagesizetitle" : "Taille des images" ,
"imagesize31" : "Petites" ,
"imagesize61" : "Moyennes" ,
"imagesize93" : "Grandes" ,
"imagesize0" : "Pas d'image" ,

"tempressentie" : "Temp. ressentie :",
"wind_dir" : "",
"wind_speed" : ", ",
"reported" : "Mise à jour ",
"reported_time" : "",

"sunrise" : "Lever",
"sunset" : "Coucher", 
"humidity" : "Humidité :",
"humidity_short" : "Humid",
"visibility" : "Visibilité :",
"ppcp" : "Chance de précipitations",
"ppcp_short" : "Précip",
"pression" : "Baromètre :",
"dewp" : "Point de rosée :",
"wind" : "Vent :",
"uv" : "Indice UV :",

"Very Low" : "Très Bas",
"Low" : "Bas",
"Moderate" : "Modéré",
"High" : "Élevé",
"Very High" : "Très élevé",
"Extreme" : "Extrême",

"falling" : "en chute",
"rising" : "en hausse",
"steady" : "stable",
"calm" : "calme",

"N" : "N", 
"NNW" : "N-NO", 
"NW" : "NO", 
"WNW" : "O-NO",
"W" : "O", 
"WSW" : "O-SO",
"SW" : "SO", 
"SSW" : "S-SO", 
"S" : "S", 
"SSE" : "S-SE", 
"SE" : "SE", 
"ESE" : "E-SE",
"E" : "E", 
"ENE" : "E-NE",
"NE" : "NE", 
"NNE" : "N-NE", 
"VAR" : "VAR",

"mintemp" : "Min",
"maxtemp" : "Max",

"today" : "Aujourd'hui",
"tomorrow" : "Demain", 
"Monday" : "Lun",
"Tuesday" : "Mar", 
"Wednesday" : "Mer", 
"Thursday" : "Jeu",
"Friday" : "Ven", 
"Saturday" : "Sam",
"Sunday" : "Dim",
"gday_mon" : "Lun",
"gday_tue" : "Mar", 
"gday_wed" : "Mer", 
"gday_thu" : "Jeu",
"gday_fri" : "Ven", 
"gday_sat" : "Sam",
"gday_sun" : "Dim",
"gday_lun" : "Lun",
"gday_mar" : "Mar", 
"gday_mer" : "Mer", 
"gday_jeu" : "Jeu",
"gday_ven" : "Ven", 
"gday_sam" : "Sam",
"gday_dim" : "Dim",

"Jan" : "Jan",
"Feb" : "Fév",
"Mar" : "Mar",
"Apr" : "Avr",
"May" : "Mai", 
"Jun" : "Juin",
"Jul" : "Juil",
"Aug" : "Août",
"Sep" : "Sep",
"Oct" : "Oct",
"Nov" : "Nov",
"Dec" : "Déc",

"AM" : "le matin",
"PM" : "après midi",
"Early" : "en matinée",
"Late" : "en soirée",

"Blustery" : "Très venteux",
"Clear" : "Beau",
"Cloudy" : "Nuageux",
"Clouds": "Nuages",
"Cold" : "Froid",
"Drifting Snow" : "Tempête de Neige",
"Drizzle" : "Bruine",
"Dust" : "Nuage de poussière",
"Fair" : "Belles éclaircies",
"Few Showers" : "Quelques averses",
"Few Snow Showers" : "Quelques chutes de neige",
"Flurries" : "Averses",
"Fog" : "Brouillard",
"Foggy" : "Brumeux",
"Freezing Drizzle" : "Bruine givrante",
"Freezing Rain" : "Pluie glaçante",
"Hail" : "Grêle",
"Haze" : "Brume",
"Heavy Rain" : "Forte pluie",
"Heavy Snow" : "Forte neige",
"Hot" : "Chaleur",
"Hurricane" : "Ouragan",
"Isolated T-Storms" : "Orages isolés",
"Isolated Thunderstorms" : "Orages isolés",
"Light Drizzle" : "Légère bruine",
"Light Rain" : "Légère pluie",
"Light Rain with Thunder" : "Légère pluie et tonnerre",
"Light Snow Showers" : "Légères chutes de neige",
"Light Snow" : "Légère neige",
"Light Wintry Mix" : "Légère neige",
"Mist" : "Brume",
"Mixed Precipitation" : "Variable avec averses",
"Mixed Rain and Hail" : "Pluie et grêle",
"Mixed Rain and Sleet" : "Pluie et neige fondue",
"Mixed Rain and Snow" : "Pluie et neige",
"Mostly Clear" : "Assez dégagé",
"Mostly Cloudy" : "Assez nuageux",
"Mostly cloudy and windy" : "Assez nuageux et venteux",
"Mostly Sunny" : "Assez ensoleillé",
"N/A" : "N/A",
"Partly Cloudy and Windy" : "Nuages épars et vent",
"Partly Cloudy" : "Nuages épars",
"Rain" : "Pluie",
"Scattered Showers" : "Averses localisées",
"Scattered Snow Showers" : "Tempêtes de neige localisées",
"Scattered T-Storms" : "Orages localisés",
"Scattered Thunderstorms" : "Orages localisés",
"Severe Thunderstorms" : "Orages Violents",
"Showers Early" : "Pluie en matinée",
"Showers in the Vicinity" : "Pluie aux alentours",
"Showers" : "Averses",
"Sleet" : "Neige fondue",
"Smoke" : "Fumée",
"Snow Flurries" : "Averses de neige",
"Snow Showers" : "Averses de neige",
"Snow" : "Neige",
"Sun" : "Soleil",
"Sunny" : "Ensoleillé",
"T-Showers" : "Pluies orageuses",
"T-Storms" : "Orages",
"Thunder" : "Tonnerre",
"Thunder Showers" : "Orages",
"Thunderstorms" : "Orageux",
"Tornado" : "Tornade",
"Tropical Storm" : "Tempête Tropicale",
"Wind" : "Vent",
"Windy" : "Venteux",

"395": "Forte neige et tonnerre",
"392": "Faible neige et tonnerre",
"389": "Fortes pluies et tonnerre",
"386": "Faibles pluies et tonnerre",
"377": "Fortes chutes de grêle",
"374": "Faibles chutes de grêle",
"371": "Fortes chutes de neige",
"368": "Faible chute de neige",
"365": "Fortes chutes de neige fondue",
"362": "Faibles chutes de neige fondue",
"359": "Pluies torrentielles",
"356": "Fortes pluies",
"353": "Faibles pluies",
"350": "Chutes de grêle",
"338": "Fortes chutes de neige",
"335": "Fortes chutes de neige locales",
"332": "Chutes de neige",
"329": "Chutes de neige locales",
"326": "Faibles chutes de neige",
"323": "Faibles chutes de neige locales",
"320": "Fortes chutes de neige fondue",
"317": "Faibles chutes de neige fondue",
"314": "Fortes pluies verglassantes",
"311": "Faibles pluies verglassantes",
"308": "Fortes pluies",
"305": "Fortes pluies intermittentes",
"302": "Pluie",
"299": "Pluies intermittentes",
"296": "Faibles pluies",
"293": "Faibles pluies locales",
"284": "Forte bruine verglassante",
"281": "Bruine verglassante",
"266": "Faible bruine",
"263": "Faibles bruines locales",
"260": "Brouillard givrant",
"248": "Brouillard",
"230": "Blizzard",
"227": "Tempête de neige",
"200": "Violents orages",
"185": "Bruines verglassantes locales",
"182": "Chutes locales de neige fondue",
"179": "Chutes locales de neige",
"176": "Pluies locales",
"143": "Brume",
"122": "Couvert",
"119": "Nuageux",
"116": "Partiellement nuageux",
"113": "Ensoleillé / Nuit claire",

"0": "Ensoleillé / Nuit claire",
"1": "Partiellement nuageux",
"2": "Nuageux",
"3": "Couvert",
"10": "Brume",
"21": "Pluies locales",
"22": "Chutes locales de neige",
"23": "Chutes locales de neige fondue",
"24": "Bruines verglassantes locales",
"29": "Possibilité de violents orages",
"38": "Tempête de neige",
"39": "Blizzard",
"45": "Brouillard",
"49": "Brouillard givrant",
"50": "Faibles bruines locales",
"51": "Faible bruine",
"56": "Bruine verglassante",
"57": "Forte bruine verglassante",
"60": "Faibles pluies locales",
"61": "Faibles pluies",
"62": "Pluies intermittentes",
"63": "Petites pluies",
"64": "Fortes pluies intermittentes",
"65": "Fortes pluies",
"66": "Faibles pluies verglassantes",
"67": "Fortes pluies verglassantes",
"68": "Faibles chutes de neige fondue",
"69": "Fortes chutes de neige fondue",
"70": "Faibles chutes de neige locales",
"71": "Faibles chutes de neige",
"72": "Chutes de neige locales",
"73": "Chutes de neige",
"74": "Fortes chutes de neige localement",
"75": "Fortes chutes de neige",
"79": "Chutes de grêle",
"80": "Petites averses",
"81": "Fortes averses",
"82": "Averses torrentielles",
"83": "Faibles averses de neige fondue",
"84": "Fortes averses de neige fondue",
"85": "Faibles averses de neige",
"86": "Fortes averses de neige",
"87": "Faibles averses de grêle",
"88": "Fortes averses de grêle",
"91": "Faibles pluies et tonnerre localement",
"92": "Fortes pluies et tonnerre",
"93": "Faible neige et tonnerre localement",
"94": "Forte neige et tonnerre"
} ;

var meteo_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "meteo_msgs_fr_js_loaded" ) ;


var meteo_json_template = { version: 4 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display : "true", text : "", icon : "false" } , textstyles: { font : "-1" } , cityname: "", cityid : "", forecasttype : "s" , forecastnumber : 3, unit : "m" , "imagesize" : 93 } ;

var meteo_oldjson_template = {
"2" : { version: 2 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display : "true" , color: "c1", text : "", icon : "meteo" } , cityname: "", cityid : "", forecasttype : "s" , forecastnumber : 3, unit : "m" , "imagesize" : 93 },
"3" : { version: 3 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display : "true", text : "", icon : "false" } , cityname: "", cityid : "", forecasttype : "s" , forecastnumber : 3, unit : "m" , "imagesize" : 93 }
} ;

function meteo_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == meteo_json_template.version ) ) return r ;
	if ( r.version<2 ) meteo_upgradejsontov2( r ) ;
	if ( r.version<3 ) meteo_upgradejsontov3( r ) ;
	if ( r.version<4 ) meteo_upgradejsontov4( r ) ;
	r.version = meteo_json_template.version;
	return r ;
}

function meteo_upgradejsontov2( r ) {
	r.header.display = String( r.headerdisplay == 1 ) ;
	delete r.headerdisplay ;
	return r ;
}

function meteo_upgradejsontov3( r ) {
	r.forecastnumber = Math.min( parseInt( r.forecastnumber , 10 ) , 4 ) ;
	if ( r.forecasttype == "l" ) r.forecasttype = "m" ;
	return r ;
}

function meteo_upgradejsontov4( r ) {
	if ( ! r.textstyles ) r.textstyles = { font: "-1" };  
	return r ;
}

var meteo_key;
var meteo_partnerID;

var meteo_icons = {
	"day" : {
		"0" : "wsymbol_0001_sunny",
		"1" : "wsymbol_0002_sunny_intervals",
		"2" : "wsymbol_0003_white_cloud",
		"3" : "wsymbol_0004_black_low_cloud",
		"10" : "wsymbol_0006_mist",
		"21" : "wsymbol_0009_light_rain_showers",
		"22" : "wsymbol_0011_light_snow_showers",
		"23" : "wsymbol_0013_sleet_showers",
		"24" : "wsymbol_0009_light_rain_showers",
		"29" : "wsymbol_0016_thundery_showers",
		"38" : "wsymbol_0011_light_snow_showers",
		"39" : "wsymbol_0012_heavy_snow_showers",
		"45" : "wsymbol_0007_fog",
		"49" : "wsymbol_0007_fog",
		"50" : "wsymbol_0009_light_rain_showers",
		"51" : "wsymbol_0009_light_rain_showers",
		"56" : "wsymbol_0009_light_rain_showers",
		"57" : "wsymbol_0009_light_rain_showers",
		"60" : "wsymbol_0009_light_rain_showers",
		"61" : "wsymbol_0009_light_rain_showers",
		"62" : "wsymbol_0009_light_rain_showers",
		"63" : "wsymbol_0009_light_rain_showers",
		"64" : "wsymbol_0010_heavy_rain_showers",
		"65" : "wsymbol_0010_heavy_rain_showers",
		"66" : "wsymbol_0009_light_rain_showers",
		"67" : "wsymbol_0009_light_rain_showers",
		"68" : "wsymbol_0013_sleet_showers",
		"69" : "wsymbol_0021_cloudy_with_sleet",
		"70" : "wsymbol_0011_light_snow_showers",
		"71" : "wsymbol_0011_light_snow_showers",
		"72" : "wsymbol_0019_cloudy_with_light_snow",
		"73" : "wsymbol_0019_cloudy_with_light_snow",
		"74" : "wsymbol_0012_heavy_snow_showers",
		"75" : "wsymbol_0020_cloudy_with_heavy_snow",
		"79" : "w6icon_0014_light_hail_showers",
		"80" : "wsymbol_0009_light_rain_showers",
		"81" : "wsymbol_0010_heavy_rain_showers",
		"82" : "wsymbol_0020_cloudy_with_heavy_snow",
		"83" : "wsymbol_0013_sleet_showers",
		"84" : "wsymbol_0021_cloudy_with_sleet",
		"85" : "wsymbol_0011_light_snow_showers",
		"86" : "wsymbol_0020_cloudy_with_heavy_snow",
		"87" : "w6icon_0014_light_hail_showers",
		"88" : "w6icon_0015_heavy_hail_showers",
		"91" : "wsymbol_0017_cloudy_with_light_rain",
		"92" : "w6icon_0018_cloudy_with_heavy_rain",
		"93" : "w6icon_0019_cloudy_with_light_snow",
		"94" : "w6icon_0020_cloudy_with_heavy_snow"
	},
	"night" : {
		"0" : "wsymbol_0008_clear_sky_night",
		"1" : "wsymbol_0004_black_low_cloud",
		"2" : "wsymbol_0004_black_low_cloud",
		"3" : "wsymbol_0004_black_low_cloud",
		"10" : "wsymbol_0006_mist",
		"21" : "wsymbol_0025_light_rain_showers_night",
		"22" : "wsymbol_0027_light_snow_showers_night",
		"23" : "wsymbol_0029_sleet_showers_night",
		"24" : "wsymbol_0025_light_rain_showers_night",
		"29" : "wsymbol_0032_thundery_showers_night",
		"38" : "wsymbol_0027_light_snow_showers_night",
		"39" : "wsymbol_0028_heavy_snow_showers_night",
		"45" : "wsymbol_0007_fog",
		"49" : "wsymbol_0007_fog",
		"50" : "wsymbol_0025_light_rain_showers_night",
		"51" : "wsymbol_0025_light_rain_showers_night",
		"56" : "wsymbol_0025_light_rain_showers_night",
		"57" : "wsymbol_0025_light_rain_showers_night",
		"60" : "wsymbol_0025_light_rain_showers_night",
		"61" : "wsymbol_0025_light_rain_showers_night",
		"62" : "wsymbol_0025_light_rain_showers_night",
		"63" : "wsymbol_0025_light_rain_showers_night",
		"64" : "wsymbol_0026_heavy_rain_showers_night",
		"65" : "wsymbol_0026_heavy_rain_showers_night",
		"66" : "wsymbol_0025_light_rain_showers_night",
		"67" : "wsymbol_0025_light_rain_showers_night",
		"68" : "wsymbol_0029_sleet_showers_night",
		"69" : "wsymbol_0037_cloudy_with_sleet_night",
		"70" : "wsymbol_0027_light_snow_showers_night",
		"71" : "wsymbol_0027_light_snow_showers_night",
		"72" : "wsymbol_0035_cloudy_with_light_snow_night",
		"73" : "wsymbol_0035_cloudy_with_light_snow_night",
		"74" : "wsymbol_0028_heavy_snow_showers_night",
		"75" : "wsymbol_0036_cloudy_with_heavy_snow_night",
		"79" : "w6icon_0038_cloudy_with_light_hail_night",
		"80" : "wsymbol_0025_light_rain_showers_night",
		"81" : "wsymbol_0026_heavy_rain_showers_night",
		"82" : "wsymbol_0036_cloudy_with_heavy_snow_night",
		"83" : "wsymbol_0029_sleet_showers_night",
		"84" : "wsymbol_0037_cloudy_with_sleet_night",
		"85" : "wsymbol_0027_light_snow_showers_night",
		"86" : "wsymbol_0036_cloudy_with_heavy_snow_night",
		"87" : "w6icon_0038_cloudy_with_light_hail_night",
		"88" : "w6icon_0039_cloudy_with_heavy_hail_night",
		"91" : "wsymbol_0033_cloudy_with_light_rain_night",
		"92" : "wsymbol_0034_cloudy_with_heavy_rain_night",
		"93" : "wsymbol_0035_cloudy_with_light_snow_night",
		"94" : "wsymbol_0036_cloudy_with_heavy_snow_night"
	}
} ;

function meteo_initforweb( id ) {
//	meteo_renderhtml( id ); // vh : renderhtml bug pour les vieilles notes qui n'avaient pas le container. Seule la requête ci-dessous est nécessaire
	var div = ge( id ) ;
	var r = qsn_thenotes[ id ] ;
	$( ".meteo_content:eq(0)" , div ).hide();
	$( ".meteo_wait:eq(0)", div ).show() ;
	meteo_searchmeteo( div, r );
}

function meteo_defineGlobals(){
	meteo_key = "bb8be7be7251b0b0";
	meteo_partnerID = "1058922955";
};

function meteo_searchmeteo( elem, r ){
	var note = ge( elem );

	if ( ! r.coords || ! r.coords.latitude ) {
		if ( ! r.cityname ) return ;
		return q_include( { urls : [ "/services/gmap/scripts/gmap_msgs_" + q_lang + ".js", "/services/gmap/scripts/gmap_utils.js" ] } , function(){
			gmap_getLatLng( r.cityname, function( gmapCoords ){
				if ( ! gmapCoords ) return ;
				if ( gmapCoords.splice ) gmapCoords = gmapCoords[ 0 ] ;
				if ( ! r.coords ) r.coords = {} ;
				r.coords.latitude = gmapCoords.latitude ;
				r.coords.longitude = gmapCoords.longitude ;
				r.coords.name = gmapCoords.name ;
				meteo_searchmeteo( elem, r ) ;
			} , { noalert : true, multiple : true } ) ;
		} ) ;
	}
	//var request = "http://free.worldweatheronline.com/feed/weather.ashx?format=xml&num_of_days=5&key=6eca8d2ade163135122808";
	//var key = ( ( /quomodo\.com/ ).test( window.location.host ) ) ? "23mxbcqymxg53nwzpkdpqvpj" : "w5em3yd23bk96e5zr6vnrwdj" ;
	
	/*
	var key = "23mxbcqymxg53nwzpkdpqvpj" ;
	var request = "http://api.worldweatheronline.com/free/v1/weather.ashx?format=xml&num_of_days=5&key=" + key ;
	request += "&q=" + r.coords.latitude + "," + r.coords.longitude ;
	*/
	
	var key = "dbc4cfe0d354b9eae1e013bc1d2e8a94" ;
	var appid = "8f998b20" ;
	//var request = "http://api.weatherunlocked.com/api/forecast/" + r.coords.latitude + "," + r.coords.longitude + "?app_id=" + appid + "&app_key=" + key ;
	var request = r.coords.latitude + "," + r.coords.longitude ;
	
	function meteo_getcolor( r ){
		var color = parseInt( r.color,10);
		color = (color == -1) ?  "transparent" : (color < 10) ? getsncontextualbackgroundcolors(7)[ color - 1 ] : r.color;
		return color;
	}

	function meteo_isdark(color){
		var isdark = (color == "transparent" ) ? false : ( rgb2brightness( color ) < 50 ) ;
		return isdark;
	}

/*
function -
function USEFUL FUNCTIONS
*/

	function meteo_getTranslation(text) { return meteo_message[ text ] || text ; }

	function meteo_prepareText(text){
		var result = "";
		text = text || "" ;
		var temp = text.split( " / " );
		for (var i = 0; i < temp.length; i++ ){
			if ( i  >0 ) result += meteo_getTranslation(" / ") ;
			
			if ( temp[ i ].match(/AM (.+)/) ){
				var t = temp[ i ].replace( "AM ", "" );
				if ( q_lang == "fr" ) result += meteo_getTranslation( t ) + " " + meteo_message["AM"];
				else result += meteo_message["AM"] + " " + meteo_getTranslation( t );
			}
			else if ( temp[ i ].match(/PM (.+)/)){
				var t = temp[ i ].replace("PM ", "");
				if ( q_lang == "fr" ) result += meteo_getTranslation( t ) + " " + meteo_message["PM"];
				else result += meteo_message["PM"] + " " + meteo_getTranslation( t );
			}
			else if ( temp[ i ].match(/(.+) Early/) ){
				var t = temp[ i ].replace(" Early", "");
				result += meteo_getTranslation( t ) + " " + meteo_message["Early"];
			}
			else if ( temp[ i ].match(/(.+) Late/) ){
				var t = temp[i].replace(" Late", "");
				result += meteo_getTranslation( t ) + " " + meteo_message["Late"];
			}
			else result += meteo_getTranslation( temp[ i ] );
		}
		return result;
	}

/*
function -
function GET METEO FUNCTIONS
*/

	function meteo_getunits(noteid){
		var unit = qsn_thenotes[noteid].unit;
		var units = {};
		
		if (unit == "s"){
			units.temp = "° F";
			units.distance = "miles";
			units.speed = "mph"; 
			units.precip = "in";
			units.pression = "in";
		}else{
			units.temp = "° C";
			units.distance = "km";
			units.speed = "km/h";
			units.precip = "mm";
			units.pression = "millibars";	
		}
		return units;
	}

	function meteo_getday($node){
		var thedate = $node.find( "> date" ).text() ;
		var high = $node.find( "> temp_max_c" ).text() ;
		var low = $node.find( "> temp_min_c" ).text() ;
		var $timeframes = $node.find( "Timeframe" ) ;
		var code = "0" ;
		$timeframes.each( function() {
			if ( $( this ).find( "time" ).text() == "1300" ) {
				code = $( this ).find( "wx_code" ).text() ;
				return false ;
			}
		} ) ;
		return { "date" : thedate, "dateday" : [ "sun", "mon", "tue", "wed", "thu", "fri", "sat" ][ $.datepicker.parseDate( "dd/mm/yy", thedate ).getDay() ], "high" : high, "low" : low , "code" : code };
	}
	
	function meteo_getpart( $node ){
		//var part_id = node.attributes.p.nodeValue;
		var text = $( "t:eq(0)" , $node ).text();
		var icon = $( "icon:eq(0)" , $node ).text();
		
		var vent_dir = $( "wind:eq(0) d:eq(0)" , $node ).text();
		var vent_speed = $( "wind:eq(0) s:eq(0)" , $node ).text();
		var vent_text = $( "wind:eq(0) t:eq(0)" , $node ).text();

		var humidite = $( "hmid:eq(0)" , $node ).text();
		var precipitation_chance = $( "ppcp:eq(0)" , $node ).text();
		
		result = { "text" : text, "icon" : icon, "vent" : { "dir" : vent_dir, "speed" : vent_speed , "text" : vent_text } , "humidite" : humidite, "precipitation_chance" : precipitation_chance };
		return result;
	}
	
	function meteo_getloc($node){
		var theid = $node.attr("id");
		var name =  $( "dnam:eq(0)" , $node ).text() ;
		var time =  $( "tm:eq(0)" , $node ).text();
		var latitude = $( "lat:eq(0)" , $node ).text();
		var longitude =  $( "lon:eq(0)" , $node ).text();
		var sunrise = $( "sunr:eq(0)" , $node ).text();
		var sunset =  $( "suns:eq(0)" , $node ).text();
		var zone =  $( "zone:eq(0)" , $node ).text();
		var result = { "id" : theid, "name" : name , "time" : time , "latitude" : latitude , "longitude" : longitude, "sunrise" : sunrise, "sunset" : sunset , "zone" : zone};
		return result;
	}

	function meteo_getcc( $node ){
		var last_updated = $( "lsup:eq(0)" , $node ).text();
		var obs_station= $( "obst:eq(0)" , $node ).text();
		var temp = $( "tmp:eq(0)" , $node ).text();
		var ressentie=$( "flik:eq(0)" , $node ).text(); 
		var text = $( "t:eq(0)" , $node ).text();
		var icon = $( "icon:eq(0)" , $node ).text();
		
	/*
		var pression = node.getElementsByTagName("bar")[0];
		var pression_value = node.getElementsByTagName("r")[0].firstChild.nodeValue;
		var pression_text = node.getElementsByTagName("d")[0].firstChild.nodeValue;
	*/
		var pression_value = $( "bar:eq(0) r:eq(0)" , $node ).text();
		var pression_text = $( "bar:eq(0) d:eq(0)" , $node ).text();
		
		var vent_dir = $( "wind:eq(0) d:eq(0)" , $node ).text();
		var vent_speed = $( "wind:eq(0) s:eq(0)" , $node ).text();
		var vent_text = $( "wind:eq(0) t:eq(0)" , $node ).text();
		
		var humidite = $( "hmid:eq(0)" , $node ).text();
		var visibilite = $( "vis:eq(0)" , $node ).text();
		var pointrosee = $( "dewp:eq(0)" , $node ).text();
		
		var uv_value = $( "uv:eq(0) i:eq(0)" , $node ).text();
		var uv_text  = $( "uv:eq(0) t:eq(0)" , $node ).text();
		var moon_icon = $( "moon:eq(0) icon:eq(0)" , $node ).text();
		var moon_text = $( "moon:eq(0) t:eq(0)" , $node ).text();
		
		var result = { "last_updated" : last_updated , "obs_station" : obs_station, "temp" : temp , "ressentie" : ressentie, "text" : text , "icon" : icon , "pression" : { "value" : pression_value , "text" : pression_text } , "vent" : { "dir" : vent_dir , "speed" : vent_speed , "text" : vent_text } , "humidite" : humidite , "visibilite" : visibilite , "pointrosee" : pointrosee , moon : { "icon" : moon_icon , "text" : moon_text } , uv : { "value" : uv_value , "text" : uv_text } };
		return result;
	}

/*
function -
function DISPLAY METEO FUNCTIONS
*/

	function meteo_displayimg( noteid, day, size, mode ){
		thesize = size ? size : qsn_thenotes[ noteid ].imagesize;
		if ( thesize == 32 ) thesize = 31;
		if ( thesize == 64 ) thesize = 61;
		if ( thesize == 128 ) thesize = 93;
		if ( thesize == 0 ) return $( "<br/>" );
		else {
			return $( '<img class="png"/>' )
				.attr( "src" , "/services/meteo/images/" + thesize + "x" + thesize + "/" + meteo_icons[ mode || "day" ][ day.code ].replace( /wsymbol/ , day.style || "w6icon" ) + ".png" )
				.attr( "title", meteo_prepareText( day.condition ) )
				.css( { width : thesize + "px", height : thesize + "px"} );
		}
	}
	function meteo_displayday( noteid, $xml ){
		var note = ge( noteid );
		var r = qsn_thenotes[ noteid ];
		var units = meteo_getunits( noteid );
		var meteotable = $( '<table cellspacing="0" cellpadding="0" border="0" width="100%" class="qsn1 bg_self qtxt1 font meteoresult_days"></table>' );
		var now = $.datepicker.formatDate( "yy-mm-dd", new Date() ) ;
		var thedays = $xml.find( "Days > Day" ) ;
		var daysdata = [];
		thedays.each( function() {
			var data = meteo_getday( $( this ) ) ;
			//if ( data.date != now ) daysdata.push( data ) ;
			daysdata.push( data ) ;// 2012-08-30, vh : on affiche y compris les prévisions pour la journée en cours
		} ) ;

		var meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
		function formatday( gday ){
			return meteo_message[ "gday_" + gday.toLowerCase().replace( /\./g , "" ) ] ;
		}
		var nforecast = parseInt( r.forecastnumber , 10 ) ;
		for ( var i = 0; i < nforecast; i++) {
			$( '<td colspan="2" align="center" style="font-weight:bold; font-size:12px"></td>' ).
				css( "width", ( Math.round(100 / nforecast ) + "%" ) ).
				html( formatday( daysdata[ i ].dateday ) ).
				appendTo( meteodaytr );
		}

		if ( r.forecasttype == "m" || r.forecasttype == "l" ) {
			if ( r.imagesize == 0 ) imagesize = 0;
			else if ( r.imagesize <= 64 ) imagesize = 31;
			else if ( r.imagesize >= 93 ) imagesize = 61;
		} else imagesize = r.imagesize ;
			  
		meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
		for ( var i = 0; i < nforecast; i++) {
			$( '<td colspan="2" align="center"></td>' )
				.appendTo( meteodaytr )
				.append( meteo_displayimg( noteid, daysdata[ i ], imagesize ) );
		}
			
		if ( r.forecasttype != "p" ){
			meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
			for ( var i = 0; i < nforecast; i++) {
				$( '<td colspan="2" valign="top" class="meteo_weathertext" align="center"></td>' )
					.appendTo( meteodaytr )
					.html( meteo_prepareText( daysdata[ i ].code ) );
			}
			
			meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
			for (var i = 0; i < nforecast; i++) {
				$( '<td colspan="2" align="center" class="qsn1 text_bw meteo_maxdeg" style="font-size:16px; font-weight:bold;"></td>' )
					.appendTo( meteodaytr )
					.html( ( daysdata[ i ].high != "N/A") ? ( daysdata[ i ].high + units.temp ) : ""  )
					.attr( "title", meteo_message["maxtemp"] + " : " + daysdata[ i ].high + units.temp );
			}
			
			meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
			for ( var i = 0; i < nforecast; i++) {	
				$( '<td colspan="2" align="center" style="font-size:14px; font-weight:bold;" class="meteo_mindeg"></td>' )
					.appendTo( meteodaytr )
					.html( ( daysdata[ i ].low != "N/A") ? ( daysdata[ i ].low + units.temp ) : "" )
					.attr( "title", meteo_message["mintemp"] + " : " + daysdata[i].low + units.temp );
			}
		}

/*
		if ( r.forecasttype == "l" ){
			meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
			for ( var i = 0; i < thedays.length; i++) {	
				$( '<td align="right" style="font-weight:bold;"></td>' )
					.html( meteo_message["sunrise"] + " : " )
					.appendTo( meteodaytr );

				$( '<td align="left"></td>' )
					.html( daysdata[ i ].sunrise )
					.appendTo( meteodaytr );
			}
		
			meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
			for ( var i = 0; i < thedays.length; i++) {	
				$( '<td align="right" style="font-weight:bold;"></td>' )
					.html( meteo_message["sunset"] + " : " )
					.appendTo( meteodaytr );

				$( '<td align="left"></td>' )
					.html( daysdata[ i ].sunset )
					.appendTo( meteodaytr );
			}
			
			meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
			for ( var i = 0; i < thedays.length; i++) {	
				$( '<td align="right" style="font-weight:bold;"></td>' )
					.html( meteo_message["ppcp_short"] + " : " )
					.appendTo( meteodaytr );

				$( '<td align="left"></td>' )
					.html( daysparts[ i ].precipitation_chance + "%" )
					.appendTo( meteodaytr );
			}
			
			meteodaytr = $( '<tr></tr>' ).appendTo( meteotable );
			for ( var i = 0; i < thedays.length; i++) {
				$( '<td align="right" style="font-weight:bold;"></td>' )
					.html( meteo_message["humidity_short"] + " : " )
					.appendTo( meteodaytr );

				$( '<td align="left"></td>' )
					.html( daysparts[i].humidite + "%" )
					.appendTo( meteodaytr );
			}
		}
*/
		return meteotable;
	}

	function meteo_displaycurrentday( noteid, $xml ){
		var note = ge( noteid );
		var r = qsn_thenotes[ noteid ];
		var units = meteo_getunits( noteid );
		function $currattr( attr , $currentday ){
			return $currentday.find( attr ).text() || "" ;
		}
		function $meteoRow( html1 , html2 ) {
			return $( '<tr></tr>' )
					.append( $( '<td class="meteo_section"></td>' ).html( html1 ) )
					.append( $( '<td></td>' ).html( html2 ) ) ;
		}
		function isTimeSup( t1, t2 ) {
			var hh1 = parseInt( t1.split( ":" )[ 0 ], 10 ) ;
			var hh2 = parseInt( t2.split( ":" )[ 0 ], 10 ) ;
			if ( hh1 > hh2 ) return true ;
			else if ( hh1 < hh2 ) return false ;
			else {
				var mm1 = parseInt( t1.split( ":" )[ 1 ], 10 ) ;
				var mm2 = parseInt( t2.split( ":" )[ 1 ], 10 ) ;
				if ( mm1 > mm2 ) return true ;
				else return false ;
			}
		}
		var $currentday = $xml.find( "Days Day:eq(0) Timeframes Timeframe:eq(0)" ) ;
		var $timeframes = $xml.find( "Days Day:eq(0) Timeframes Timeframe" ) ;
		var now = new Date() ;
		var thehour = String( now.getHours() ) + ( now.getMinutes().length == 1 ? "0" + String( now.getMinutes() ) : String( now.getMinutes() ) ) ;
		var ecartmin = Math.abs( parseInt( thehour, 10 ) - parseInt( $currattr( "time", $currentday ), 10 ) ) ;
		var ecartmin2 = parseInt( $currattr( "time", $currentday ), 10 ) - parseInt( thehour, 10 ) ;
		if ( ecartmin2 < 0 ) {
			$timeframes.each( function() {
				var ecart = Math.abs( parseInt( thehour, 10 ) - parseInt( $currattr( "time", $( this ) ), 10 ) ) ;
				var ecartmin2 = parseInt( $currattr( "time", $( this ) ), 10 ) - parseInt( thehour, 10 ) ;
				if ( ecartmin2 > 0 ) {
					$currentday = $( this ) ;
					return false ;
				}
				if ( ecart < ecartmin ) {
					$currentday = $( this ) ;
					ecartmin = ecart ;
				}
			} ) ;
		}
		
		var mode = "day" ;
		var time_now = now.getHours() + ":" + now.getMinutes() ;
		var time_sunrise = $xml.find( "sunrise_time" ).text() ;
		var time_sunset = $xml.find( "sunset_time" ).text() ;
		if ( ! isTimeSup( time_now, time_sunrise ) || isTimeSup( time_now, time_sunset ) ) mode = "night" ;

		return $( '<table cellspacing="0" cellpadding="0" border="0" width="100%" class="qsn1 bg_self"></table>' )
			.append( $( '<tr></tr>' )
				.append( $( '<td align="center"></td>' )
					.append( meteo_displayimg( noteid, { code : $currattr( "wx_code" , $currentday ) }, null, mode ) )
					.append( '<br/>' )
					.append( meteo_prepareText( $currattr( "wx_code" , $currentday ) ) )
					.append( $( '<div class="qsn1 text_bw" style="padding:5px; font-size:16px; font-weight:bold;"></div>' ).html( ( $currattr( "temp_c" , $currentday ) ) + units.temp ) )
				)
				.append( $( '<td></td>' )
					.append( $( '<table cellspacing="0" cellpadding="0" border="0"></table>' )
						.append( $meteoRow( meteo_message["wind"] , meteo_message["wind_dir"] + meteo_message[ $currattr( "winddir_compass" , $currentday ) ] + meteo_message["wind_speed"] + $currattr( "windspd_kmh" , $currentday ) + units.speed ) )
						.append( $meteoRow( meteo_message["humidity"] , $currattr( "humid_pct" , $currentday ) ) )
					)
				)
			) ;
	} 

	$.get( "/cgi-bin/cgimeteoxml2?url="+ request , function ( content ) {
		if ( isremoved( note ) ) return ;
		var noteid = note.id;
		var meteodiv = $( ".meteoresult", note ).eq( 0 ).empty();

		if ( $( "error msg" , content ).length ) {
			$( '<div>' + meteo_message["noaccess"] + '<br/><br/></div>' )
				.css( { "font-size" : "12px", "font-style" : "oblique" } )
/*				.append( $( '<a style="text-decoration:underline;">' + meteo_message["gotoTWC"] + '</a>' )
					.attr( "href", "http:/"  + "/www.weather.com/weather/local/" + r.cityid )
					.css( "color", meteo_isdark( meteo_getcolor( r ) ) ? "#FFF" : "#333" )
				)
				.append( '<br/>' )
				.append( '<img title="' + meteo_message["gotoTWC"] + '" src="/services/meteo/images/logos/TWClogo_64px.png" class="png" border="0" />' )*/
				.appendTo( meteodiv );
		} else {
			if ( r.forecasttype == "m" ) meteodiv.append( meteo_displaycurrentday( noteid, $( content ) ) );
			meteodiv.append( meteo_displayday( noteid, $( content ) ) );
			qsn_settextproperties( noteid ) ;
		}
		meteodiv.html( meteodiv.html().replace( /N\/A/g , "" ) ) ;
		$( ".meteo_wait" , note ).eq( 0 ).hide();
		$( ".meteo_content", note ).eq( 0 ).show();
	} , "xml" ).error( 	function() { setTimeout( function () { meteo_searchmeteo( note , r ); }, 2000 ); } ) ;
}

var meteo_textdesc = { "qtxt1" : { "font" : "textstyles.font" }  };


var music_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Musique" ,
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "Musique_Ajoutez votre musique sur votre site." ,
"desc" : "La note Musique permet de jouer des morceaux de musique sur votre page",
"upload_title" : "Importer des morceaux",
"upload_prompt" : "Cliquez sur OK pour sélectionner les morceaux à importer",
"thefile" : "Cliquez ici pour ouvrir le fichier ",
"nofiles" : "Vous devez sélectionner au moins un morceau avant de valider.",
"suppressnote" : "Êtes-vous certain de vouloir supprimer cette note ?\n\nATTENTION : ceci ne supprime pas vos musiques de votre espace de stockage. Pour libérer l'espace de stockage qui est occupé par vos musiques, ouvrez votre panneau « Fichiers chargés sur le site » et supprimez les musiques.",
"suppressnote_bubble" : "Pour libérer de l'espace de stockage, ouvrez votre panneau « Fichiers chargés sur le site ».",
"confirmdelete" : "Êtes-vous sûr de vouloir enlever ce morceau ?",
"deletefilealt" : "Supprimer ce morceau", 
"taboptions" : "Options de la note",
"autostart" : "Lecture automatique",
"autoreplay" : "Lecture en boucle",
"randomplay" : "Lecture aléatoire",
"showtime" : "Temps affiché en min:sec",
"nopointer" : "Pas de curseur",
"showslider" : "Afficher le barre de lecture", 
"showlist" : "Afficher la liste des morceaux",
"controltype" : "Type de boutons", 
"simple" : "Simple", 
"normal" : "Normal", 
"extended" : "Complet"
} ;

var music_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "music_msgs_fr_js_loaded" ) ;


var music_json_template = { version: 1 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, files : [] , options : {autostart : "true", autoreplay : "false", randomplay : "false", controls : "normal"} } ;

var music_colordesc = {
	"qmc3" : function( r ){
		if ( r.header.icon == "false" ) return "" ;
		return "/services/music/images/music48.png" ;
	}
} ; 
var music_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" }  };

function music_initforweb( id ) {
	music_renderplayer( ge( id ) , qsn_thenotes[ id ] );
}

function music_renderplayer(div, r) {
	if ( q_pagemode() == "makeweb" ) return ;
	var thediv = gebcn(div, "music_player") ;
	var noteid = div.id;
	
	var musicfiles = "";
	var musictitles = "";
	var indexArray = [] ;
	for ( var i = 0 ; i < r.files.length ; i++ ) {
		if ( r.files[ i ].filename.match(/\.mp3$/i) ) {
			indexArray.push( i ) ;
			musicfiles +=  q_fsbaseurl( memberid ) + encodeURI( r.files[ i ].filename.replace( /^.*\/(uploads\/.*)$/ , "$1" ) );
			musictitles +=  encodeURI( r.files[ i ].linkname );
			if ( i != r.files.length -1) {musicfiles += "|";musictitles += "|"; }
		}
	}
	musicfiles = encodeURIComponent( musicfiles ) ;
	
	var theplayercode = '';
	var trackindex = 0 ;
	var randomArray = [].concat( indexArray ) ;

	if ( q_pagemode() != "makeweb" && ! swfobject.hasFlashPlayerVersion("1") ) {
		// check if SWF hasn't been removed
		if ( ge( div.id + "_swfelem" ) ) swfobject.removeSWF( div.id + "_swfelem" ) ;
		gebcn( div,  'music_player' ).innerHTML = "" ;
		if ( ! ! document.createElement('canvas').getContext ) {			
			theplayercode = $( '<audio controls>' ).
				/*attr( "autoplay",  ( r.options.autostart == "true" ) ? true : false ).
				attr( "loop", ( r.options.loop == "true" ) ? true : false ).*/
				attr( "height", "100%" ).
				attr( "width", "100%" ) ;

			function nexttrack() {
				var n = randomArray.length ;
				if ( n == 0 ) return -1 ;
				var i = ( r.options.randomplay == "true" ) ? Math.floor( n * Math.random() ) % n : 0 ;
				var j = randomArray[ i ] ;
				randomArray.splice( i, 1 ) ;
				return j ;
			}

			trackindex = nexttrack() ;

			$( ".music_player", div ).width( "auto" ).append( theplayercode ) ;
			var audio = theplayercode.get( 0 ) ;
			audio.src = q_spaceabsoluteurl( r.common.ownerid , r.files[ trackindex ].filename ) ;
			if ( r.options.autostart == "true" ) audio.play() ;

			$( ".music_player", div ).find( "audio" ).bind( "ended", function() {
				trackindex = nexttrack() ;
				var b = trackindex == -1 ;
				if ( b ) { // on est arrivé au bout de la liste. On prépare le prochain track si l'utilisateur clique sur play ou pour le mode autoplay
					randomArray = [].concat( indexArray ) ;
					trackindex = nexttrack() ;
				}
				var audio = $( this ).get( 0 ) ;
				audio.src = q_spaceabsoluteurl( r.common.ownerid , r.files[ trackindex ].filename ) ;
				if ( ! b || r.options.autoreplay != "false" ) audio.play() ;
                   	 } ) ;
			return ;
		}
	}
	
	var playeraddress = (r.files.length > 1) ? "/services/music/player/player_mp3_multi.swf" : "/services/music/player/player_mp3_maxi.swf";
	
	var rgbcol1 = qsn_selfclasscolor( qsn_colorvalue( noteid , "qsn1" ) , "color" , true )[0] ;
	rgbcol1 = rgbcontrastcolor(rgbcol1, 19);
	var hsvcol1 = rgb2hsv( rgbcol1 );
	var hexcol1 = rgb2hex( rgbcol1 ).replace(/#/g,"");
	var rgbcol2 = hsv2rgb( [ hsvcol1[ 0 ] , 50 , 100 ]);
	rgbcol2 = rgbcontrastcolor(rgbcol1, 19);
	var hexcol2 = rgb2hex( rgbcol2 ).replace(/#/g, "");
	var hexcoltext = ( rgb2brightness( rgbcol1 ) > 50 ) ? "333333" : "FFFFFF";
	var hexcoltext2 = ( rgb2brightness( rgbcol1 ) > 50 ) ? "000000" : "DDDDDD";
	
	var autostart = (r.options.autostart == "true") ? "1" : "0";
	var autoreplay = (r.options.autoreplay == "true") ? "1" : "0";
	var randomplay = (r.options.randomplay == "true") ? "2" : "0";
	var showstop = ( r.options.controls == "simple")  ? "0" : "1" ;
	var showlist = ( r.options.controls == "simple" || r.options.controls == "normal" ) ? "0" : "1" ;
	var showvolume = ( r.options.controls == "simple" || r.options.controls == "normal" ) ? "0" : "1" ;
	var showslider = ( r.options.controls == "simple" )  ? "0" : "1" ;
	var playerheight = (r.files.length > 1 && r.options.controls == "extended") ? "100" : "20";

	var playerdata = { mp3 :  musicfiles };
	playerdata.title = musictitles;
	playerdata.loop = autoreplay;
	playerdata.autoplay = autostart;
	playerdata.shuffle = randomplay;
	playerdata.showstop = showstop ;
	playerdata.showlist = showlist ;
	playerdata.showvolume = showvolume ;
	playerdata.showslider = showslider ;
	
	playerdata.bgcolor1 = hexcol1;
	playerdata.bgcolor2 = hexcol1;
	playerdata.slidercolor1 = hexcoltext;
	playerdata.slidercolor2 = hexcoltext;
	playerdata.sliderovercolor = hexcoltext2;
	playerdata.buttoncolor = hexcoltext;
	playerdata.buttonovercolor = hexcoltext2;
	playerdata.textcolor = hexcoltext;
	playerdata.playlistalpha = "10";

	var params = { wmode: "transparent", allowFullScreen: "true", allowScriptAccess : "always"};
	
	// check if SWF hasn't been removed, if this is the case, create a new alternative content container
	if ( ge( div.id + "_swfelem" ) ){ swfobject.removeSWF( div.id + "_swfelem"); }
	gebcn( div, "music_player").appendChild( create_elem( "DIV", { id : div.id + "_swfelem" } ) );
	swfobject.embedSWF( playeraddress, div.id + "_swfelem" ,"200", playerheight, "9.0.0", false, playerdata, params);

	//var thedata = "<object type=\"application/x-shockwave-flash\" data=\"" + playeraddress + "\" width=\"200\" height=\"" + playerheight + "\"><param name=\"movie\" value=\"" + playeraddress + "\" /><param name=\"wmode\" value=\"transparent\" /><param name=\"FlashVars\" value=\"" + playerdata+ "\" /></object>";
	//thediv.innerHTML = thedata;
}
		

var navig_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Navigation" ,
"plug" : "Navigation_Ajouter de boutons de navigation sur votre site." ,

"taboptions" : "Options de la note", 
"buttonstodisplay" : "Boutons à afficher", 
"prev" : "Bouton Page Précédente", 
"choosepage" : "Bouton Choisir une page",
"home" : "Bouton Page d'accueil", 
"top" : "Bouton Haut de page",
"clubmap" : "Bouton Plan du site", 
"next" : "Bouton Page Suivante",

"btndesign" : "Apparence du bouton" ,
"btnstyle" : "Style" ,
"btnstyle0" : "classique" ,
"btnstyle1" : "gélatine" ,
"btnstyle2" : "en creux" ,
"btnsize" : "Taille" ,
"btnsize0" : "grand" ,
"btnsize1" : "normal" ,
"btnsize2" : "petit",

"linksdisabled" : "Les liens ne sont pas actifs en mode édition."
} ;

var navig_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "navig_msgs_fr_js_loaded" ) ;


var navig_json_template = { version: 2 , text : "" ,  style : "0" , size : "1" , menucolor : "1", textstyles : { size : "1" , font : "-1" , bold : "false" , italic : "false" , uppercase : "false" } , options : { prev : "true", next : "true", clubmap : "true", choosepage : "false", home : "false", top : "false" } } ;

function navig_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == navig_json_template.version ) ) return r ;
	if ( r.version<2 ) navig_upgradejsontov2( r ) ;
	r.version = navig_json_template.version;
	return r ;
}

function navig_upgradejsontov2( r ) {
	r.options.home = "false"; 
	r.options.top = "false";
	r.menucolor = r.color;
	delete r.color;
}


/*
function -
function NAVIGATION
*/

function navig_getpagesbyorder( t, sm ){
	if ( ! sm ) sm = spacexml.sitemap;
	for ( var i in sm ){
		if ( ! sm[ i ].items ){ if ( sm[ i ].id ) t.push( sm[ i ].id ); }
		else navig_getpagesbyorder( t, sm[ i ].items );
	}
	return t;	
}

function navig_prev( id ) {
	return navig_navig( id , "prev" ) ;
}
function navig_next( id ) {
	return navig_navig( id , "next" ) ;
}

function navig_navig( id , direction ) {// direction = "prev" ou "next"
	if ( qsn_currstate == "edit" ) return q_alert( navig_message[ "linksdisabled" ] );
	if ( ! id ) id = currsvcid;
	var pages = navig_getpagesbyorder( [] );
	var pos = $.inArray( id, pages );
	if ( pos == -1 ) return ;
	function donavig(){
		pos = pos + ( ( direction == "next" ) ? 1 : -1 ) ;
		var newid = pages[ pos ];
		if ( ! newid ) return ;
		if ( q_pagemode() == "web" ){
			if ( window.web_svctopages ) {
				for ( var i in web_svctopages ) {
					if ( newid == web_svctopages[ i ].id ) {
						if ( web_svctopages[ i ].name == undefined ) return donavig() ;
						return openservice( newid );
					}
				}
				if ( id != newid ) return navig_navig( newid , direction );
			} 
		} else openservice( newid );
	}
	donavig() ;
}

function navig_choosepage(){
	if ( qsn_currstate == "edit" ) return q_alert( navig_message[ "linksdisabled" ] );
	q_select( "page", { callback : function( x ){
		if ( ! x.length ) return;
		try{ openservice( x[ 0 ] ); } catch( e ){}
	} } );
}

function navig_clubmap(){
	if ( qsn_currstate == "edit" ) return q_alert( navig_message[ "linksdisabled" ] );
	var targetLinkValue = "_blank" ;
	if ( q_pagemode() == "web" && ! isiniframe() ) targetLinkValue = "_self" ;
	window.open( "clubmap.html", targetLinkValue ) ;
}

function navig_home(){
	if ( q_pagemode() == "web" ) window.open( "http://" + ( ( window.clubhost ) ? clubhost  : window.location.host + "/" + window.clubprivatedomain )  + "/" , ( isiniframe() ) ? "_blank" : "_self" ) ;
	else {
		function homesvcid( s ){
			if ( ! s ) s = { items : spacexml.sitemap };
			if ( ! s.items ) return null ;
			for ( var i = 0 ; i < s.items.length ; i++ ){
				if ( s.items[ i ].id && s.items[ i ].home && s.items[ i ].home == true ) return s.items[ i ].id;
				else return homesvcid( s.items[ i ] );
			}
			return null ;
		}
		var svcid = homesvcid() ;
		if ( ! svcid ) svcid = spacexml.services[ 0 ].id ;
		openservice( svcid ) ;
	}
}

function navig_top(){
	  $( 'html,body' ).animate( { scrollTop : 0 } );
}


var niceclock_message = {
"plug" : "Nice clock_Pour ceux qui choisissent de balader l'heure là où ils en ont envie sur le bureau.", "displayDate" : "Afficher la date", "displayTime" : "Afficher l'heure"
} ;

var niceclock_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "niceclock_msgs_fr_js_loaded" ) ;


var niceclock_json_template = {version : 1, text : "", textsize : "1", textfont : "1", displayTime : 1 } ;

var niceclock_timer = null ;
var niceclock_noteids = " " ;

function niceclock_initforweb( id ) {
	if ( niceclock_noteids.indexOf ( " " + id + " " ) == -1 ) niceclock_noteids += id + " " ;
	if ( ! niceclock_timer ) niceclock_timer = setInterval ( niceclock_refreshall , 1000 ) ;
}

function niceclock_refreshlist() {
	niceclock_noteids = " " ;
	for ( var id in qsn_thenotes ) if ( qsn_thenotes [ id ] ) if ( qsn_thenotes [ id ].common.notekind == "niceclock" ) if ( getelement ( id ) ) niceclock_noteids += id + " " ;
	if ( niceclock_noteids == " " ) clearInterval ( niceclock_timer ) ; 
}

function niceclock_refreshall () {
	if ( qsn_currstate == "edit" || q_fsmpresent() ) return ;
	var id ;
	var shouldrefresh = false ;
	var allNotes = niceclock_noteids.split ( " " ) ;
	if ( allNotes.length == 2 ) {
		clearInterval ( niceclock_timer ) ; 
		niceclock_timer = null ;
		return ;
	}
	for ( var i = 1 ; i < (allNotes.length - 1) ; i++ ) {
		id = allNotes [ i ] ;
		if ( ( ! qsn_thenotes [ id ] ) || ( ! getelement ( id ) ) ) shouldrefresh = true ;
		else if ( ( ! qsn_edittarget ) || ( id != qsn_edittarget.id ) ) niceclock_update ( id ) ;
	}
	if ( shouldrefresh ) niceclock_refreshlist() ; // next time it's OK
}

function niceclock_update (noteid) {
	var divNote = getelement ( noteid ) ;

	var aujourdhui = new Date();

	var divTime = getElementsByClassName(divNote,'niceclock_vueHorloge')[0];
	var divDate = getElementsByClassName(divNote,'niceclock_vueDate')[0];

	var annee = aujourdhui.getFullYear() - 2000;
	annee = "0" + annee;
	var mois = twodigs ( aujourdhui.getMonth() + 1 );
	var jour = twodigs ( aujourdhui.getDate() );
	var heure = twodigs ( aujourdhui.getHours() );
	var minute = twodigs ( aujourdhui.getMinutes() );
	var seconde = twodigs ( aujourdhui.getSeconds() );

	if (seconde % 2) divTime.innerHTML = heure + ":" + minute + ":" + seconde;//We want the dots to flash
	else divTime.innerHTML = heure + " " + minute + " " + seconde;
	
	if (seconde % 2) divDate.innerHTML = jour + "/" + mois + "/" + annee;//We want the slashes to flash
	else divDate.innerHTML = jour + " " + mois + " " + annee;
}


var nl_message = {
"default_text" : "Pour vous inscrire à nos actualités, indiquez votre adresse mail :",
"newnoteprompt" : "Texte d'invitation à s'inscrire à vos news." ,
"plug" : "Inscription à une Liste de Diffusion_Invitez vos visiteurs à s'inscrire à vos actualités.",
"emptynote" : "(aucun message)" ,
"desc" : "(...)",
"tabstyle" : "Style" ,
"tip_edit" : "modifier la note", 
"choice" : "Veuillez sélectionner une option" ,
"chooselist" : "Veuillez choisir une liste de diffusion.",
"alreadysubscribed" : "Votre adresse e-mail est déjà inscrite à cette newsletter." ,
"subscribeok" : "Votre adresse e-mail a été inscrite à cette newsletter." ,
"mail" : "votreadresse@example.com",
"errorsubscribe" : "Problème lors de l'inscription, votre adresse n'a pas pu être inscrite. Veuillez contacter les responsables du site.",

"listnotfound" : "Cette liste de diffusion n'existe plus." ,
"mailobject" : "[Quomodo] - Nouvelle inscription sur la liste de diffusion \"%n%\"" ,
"mailbody" : "Bonjour,\r\rVotre liste de diffusion \"%n%\" vient de recevoir, sur la page \"%p%\", l'inscription d'un nouveau destinataire :\r\r%e%\r\rLa liste \"%n%\" comporte maintenant %nb% adresses valides.\r\rL'équipe Quomodo\r\rPour toute question ou suggestion, rendez-vous sur l'aide de Quomodo:\rhttp://aide.quomodo.com\rVous pouvez également nous contacter en envoyant un mail à:\rcontact@quomodo.com\r"
}

var nl_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "nl_msgs_fr_js_loaded" ) ;


var nl_json_template = { version: 2 ,  text : "" , textsize : 14 , textfont : "-1" , textcolor : "-1" , textstyles: { bold : "false" , italic : "false" , uppercase : "false" } , textalign : "0" , color : "rgb(100%,100%,100%)" , listid:"" , header : { display: "true", text : "", icon : "" } } ;


function nl_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == nl_json_template.version ) ) return r ;
	if ( r.version<2 ) nl_upgradejsontov2( r ) ;
	r.version = nl_json_template.version;
	return r ;
}

function nl_upgradejsontov2(r) {
	if ( r.textopacity < 0.5 ) r.color = "-1";
	r.header = { display: "false", color: "0", text : "", icon : "pencil" } ;
	delete r.textopacity ;
	delete r.textspacing ;
	delete r.textmargin ;
	return r;
}

function nl_subscribe( x ){
	var div = getContainer( x ) ;
	var elem = $( '.nl_inputmail' , div ) ;
	var mail = elem.val();
	if ( mail == nl_message["mail"] ) mail = "" ;
	if ( ! verbosevalidemail( mail ) ) return elem.focus().select();
	q_fsm_wait();
	var listid = qsn_thenotes[ div.id ].listid ;
	var emaildata = {
		"objectmail" : nl_message[ "mailobject" ],
		"bccquomodo": false,
		"bodymail" : nl_message[ "mailbody" ]
			.replace( /%e%/g, mail )
			.replace( /%p%/g, q_currsvcname() )
	};
		
	document.mainform.mission.value = "nlsubscribe" ;
	q_ajaxsubmitwithservice( "common@" + q_lang , { mail:mail, listid : listid, emaildata : emaildata , langsvcid : document.mainform.service.value }, function ( x ) {
		q_fsm_delete();
		if ( x.status == "alreadysubscribed" ) {
			$( ".nl_inputmail" , div ).focus().select();
			q_alert( nl_message[ "alreadysubscribed"] ) ;
		} else if ( x.status == "ok" ) {
			$( ".nl_inputmail" , div ).val( "" );
			q_alert( nl_message[ "subscribeok" ] ) ;
		} else q_alert( nl_message[ "errorsubscribe" ] );
	} ) ;
}

function nl_focusdefault( x ) {
	var div = getContainer( x ) ;
	var r = qsn_thenotes[ div.id ] ;
	if ( x.tagName == "INPUT" && x.value == nl_message[ "mail" ] ) x.value = "" ;
	else if ( x.value == nl_message["newnoteprompt"] ) x.value="" ;
}

function nl_blurdefault( x ) {
	var div = getContainer( x ) ;
	var r = qsn_thenotes[ div.id ] ;
	if ( x.tagName == "INPUT" && x.value == "" ) x.value = nl_message["mail"] ;
	else if ( ( x.value == "" ) || ( x.value == nl_message["newnoteprompt"] ) ) x.value = nl_message["newnoteprompt"] ;
}


var nws_message = {
"snname" : "Note À la une" ,
"plug" : "À la une_Présentez les dernières actualités en texte et en images." ,
"newsid" : "News %n" ,
"imgratio0" : "Trés allongées" ,
"imgratio1" : "Allongées" ,
"imgratio2" : "Normales" ,
"imgratio3" : "Carrées" ,
"imgratio4" : "Etroites" ,
"imgratio5" : "Trés étroites" ,
"imgratio" : "Forme des images" ,
"displayoptions" : "Options" ,
"showthumbs" : "Vignettes" ,
"showthumbs0" : "Masquer les vignettes" ,
"showthumbs1" : "Afficher les vignettes" ,
"maskcolor" : "Couleur du masque" ,
"asthenote" : "Comme la note",
"tabstyle" : "Style" ,
"newstimer" : "Défilement",
"editmodeclick" : "Les liens sont désactivés en mode édition. Pour activer les liens, passez en mode visiteur. N'oubliez pas de publier d'abord la page si nécessaire !",
"noimage" : "(image par défaut)" ,
"notitle" : "(sans titre)" ,
"confirmerasenews" : "Voulez-vous vraiment supprimer cette news ?" ,
"selectimage" : "Veuillez sélectionner une image." ,
"uploadtitle" : "Insertion d'une image" ,
"desc" : "(...)" ,
"active" : "activer" ,
"desactive" : "désactiver",
"clickhere" : "Cliquez pour en savoir plus.",
"noactivenews" : "Vous devez avoir au moins une news sélectionnée pour afficher la note.",
"starttype":"Démarrage",
"randomstart": "Aléatoire"
} ;

var nws_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "nws_msgs_fr_js_loaded" ) ;

var nws_json_template = { version : 4 , text : "" , color : "rgb(100%,100%,100%)" , header : { display : "true" , text : "", icon : "" } , textstyles: { font : "-1" } , showthumbs : "1" , news : [ ],  textmargin: 2 , imgratio : "2", maskcolor : "true", timer : 3000, randomstart:"false" } ;

var nws_maskcolor_rgbalevel = 3 ; 
var nws_maskcolor_hover_rgbalevel = 2 ;

function nws_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == nws_json_template.version ) ) return r ;
	if ( r.version<2 ) nws_upgradejsontov2( r ) ;
	if ( r.version<3 ) nws_upgradejsontov3( r ) ;
	if ( r.version<4 ) nws_upgradejsontov4( r ) ;
	r.version = nws_json_template.version;
	return r ;
}

function nws_upgradejsontov2( r ) {
	if ( ! r.timer ) r.timer = nws_json_template.timer ;
}

function nws_upgradejsontov3( r ) {
	for ( var i in r.news ) {
		if ( ! r.news[ i ].link ) continue;
		if ( r.news[ i ].link.mode == "none" ) r.news[ i ].link = { kind : 0 };
		else if ( r.news[ i ].link.mode == "web" ) r.news[ i ].link = { kind : 1, address : r.news[ i ].link.url };
		else if ( r.news[ i ].link.mode == "page" ) r.news[ i ].link = { kind : 2, pagelink : r.news[ i ].link.page };
	}
}

function nws_upgradejsontov4( r ) {
	if ( ! r.maskcolor ) r.maskcolor = "false" ;
}

//var nws_timers = { } ;

function nws_initforweb( id ) {
	var activenewsids = $.map( qsn_thenotes[ id ].news, function( v, i ){ if ( v.active ) return i } ) ;
	var div = ge( id ) ;
	$( ".nws_maintable:eq(0) .nws_news", div ).each( function ( i , v ) {
		if ( ! $( v ).attr( "newsindex" ) ) $( v ).attr( "newsindex" , i ) ;
		$( ".nws_img" , v ).css( { "opacity" : "1" , filter : "" } ) ;
	} ) ;// Compatibilité anciennes notes
	$( ".nws_thumbstable:eq(0) td:has(img)", div ).each( function ( i , v ) { if ( ! $( v ).hasClass( "nws_thumb" ) ) $( v ).addClass( "nws_thumb" ).attr( "newsindex" , i ) ; } ) ;// Compatibilité anciennes notes
	nws_fitimages( div ) ;
	$( div ).data( "activenewsids", activenewsids );
	var startnewsindex = 0;
	if ( qsn_thenotes[ id ].randomstart == "true" ) startnewsindex = Math.min( Math.floor( Math.random() * ( activenewsids.length ) ), activenewsids.length - 1 ) ;
	$( div ).data( "currentnews", ( activenewsids.length ) ? activenewsids[ startnewsindex ] : -1 );
	nws_addevents( div ) ;
	if ( activenewsids.length ) nws_displaymainnews( div, activenewsids[ startnewsindex ] ).fadeIn( 1 ) ;
	nws_program( div ) ;
	//setTimeout( "q_addwindowfocushandlers( 'nws_resumeall' ) ; q_addwindowblurhandlers( 'nws_pauseall' ) ; " , 5000 ) ;
}

/*
function -
function TIMERS
*/

/*function nws_pauseall () {
	for ( var id in nws_timers ) if ( nws_timers [ id ] ) nws_cleartimer( id ) ;
}

function nws_resumeall () {
	if ( qsn_currstate == "edit" ) return ;
	for ( var id in nws_timers ) if ( ge( id ) ) nws_program( ge( id ) ) ;
}

function nws_cleartimer( id ) {
	if ( ! nws_timers[ id ] ) return ;
	clearTimeout( nws_timers[ id ] ) ;
	nws_timers[ id ] = null ;
}*/

function nws_program( div , t ) {
	/*nws_cleartimer( div.id ) ;
	nws_timers[ div.id ] = setTimeout( function() { nws_doanim( div ) ; } , t ? t : qsn_thenotes[ div.id ].timer ) ;*/
	if ( qsn_currstate != "edit" ) quomodo.events.addTimerListener( "clocktimer" , function( eventData , eventName ) {
		var t = parseInt( qsn_thenotes[ div.id ].timer, 10 ) / 1000 ;
		if ( eventData.count == 0 || eventData.count % t != 0 ) return ;
		nws_doanim( this ) ;
	} , div ) ;
}

/*
function -
function ANIMATION
*/

function nws_doanim( div ) {
	if ( isremoved( div ) ) return ;
	//if ( qsn_currstate == "edit" || q_fsmpresent() ) return nws_program( div ) ;
	if ( div.suspended ) return ;
	var r = qsn_thenotes[ div.id ] ;
	var activenewsids = $( div ).data( "activenewsids" ) ;
	if ( activenewsids.length < 2 ) return ;
	var curr = $( div ).data( "currentnews" ) ;
	$( ".nws_maintable:eq(0) .nws_news[newsindex='" + curr + "'] .nws_img", div ).fadeOut( 200, function(){ 
		var ind = $.inArray( curr, activenewsids );
		var newselected = activenewsids[ ( ind + 1 ) % activenewsids.length ] ;
		nws_displaymainnews( div, newselected ).fadeIn( 200 );
		/*nws_displaymainnews( div, newselected ).fadeIn( 200 , function(){
			nws_timers[ div.id ] = setTimeout( function() { nws_doanim( div ) ; }, r.timer ) ; 
		} );*/
	} );
}

function nws_addevents( div ){
	$( ".nws_thumbstable:eq(0) .nws_img", div ).removeAttr( "onmouseover" ).removeAttr( "onmouseout" ).removeAttr( "onclick" ) // Compatibilité anciennes notes
	$( ".nws_thumbstable:eq(0)", div ).removeAttr( "onmouseover" ).removeAttr( "onmouseout" ).removeAttr( "onclick" ) // Compatibilité anciennes notes
	$( ".nws_maintable:eq(0)", div ).removeAttr( "onmouseover" ).removeAttr( "onmouseout" ).removeAttr( "onclick" ) // Compatibilité anciennes notes
	$( ".nws_thumbstable:eq(0) tr .nws_thumb", div ).
	click( function(){
		nws_displaymainnews( getContainer( this ), parseInt( $( this ).attr( "newsindex" ) , 10 ) ).fadeIn( 200 ) ;
		div.suspended = true ;
		//nws_program( div ) ;
	} ).
	bind( "mouseleave", function(){	
		getContainer( this ).suspended = false ;
	} ) ;
	$( ".nws_maintable:eq(0) .nws_news", div ).click( function(){ 
		if ( q_pagemode() == "edit" ) {
			if ( nws_alertlinksdone ) return ;
			else {
				nws_alertlinksdone = true ; 
				return q_alert( nws_message[ "editmodeclick" ] );
			}
		}
		var div = getContainer( this ) ;
		var r = qsn_thenotes[ div.id ] ;
		var link = r.news[ parseInt( $( this ).attr( "newsindex" ) , 10 ) ].link ;
		var l = q_link_getproperties( link );
		if ( l.onclick ) l.onclick();
		return false ;
	} ).hover( function( event ){	
		var i = $( this ).attr( "newsindex" );
		var div = getContainer( this );
		var r = qsn_thenotes[ div.id ];
			
		if ( r.news[ i ].link && r.news[ i ].link.kind != 0 ) {
			if ( r.maskcolor == "false" ) {
		 		$( ".nws_overimgbckg", this ).css( "background-color", ( event.type == "mouseenter" ) ? q_contextualcolor( 2 , 7 ) : "#000" ) ;
		 	} else {  
				$( ".nws_overimgbckg", this ).css( "background-color", ( event.type == "mouseenter" ) ? rgb2levelcolor( getrealcolor( r.color ) , nws_maskcolor_hover_rgbalevel ) : rgb2levelcolor( getrealcolor( r.color ), nws_maskcolor_rgbalevel ) ) ;	
			}
		}

		if ( event.type == "mouseenter" ) div.suspended = true ;//nws_cleartimer( div.id ) ;
		else div.suspended = false ;//nws_program( div ) ;
	} ) ;
}

function nws_displaymainnews( div, newsindex ) {
	var r = qsn_thenotes[ div.id ];
	$( div ).data( "currentnews", newsindex );

	for ( var i = 0 ; i < r.news.length ; i++ ) {
		$( ".nws_news[newsindex='" + i + "']:eq(0)", div ).toggle( i == newsindex ); 
		$( ".nws_thumbstable:eq(0) td[newsindex='" + i + "'] .nws_img", div ).css( "border-width", ( i == newsindex ) ? "1px 1px 4px 1px" : "1px" );
	}
	//nws_fitimages( div ) ;
	return $( ".nws_maintable:eq(0) .nws_news[newsindex='" + newsindex + "'] .nws_img", div ) ;
}

// Toute la suite = compatibilité anciennes notes

function nws_fitimages( div ) {
	var r = qsn_thenotes[ div.id ] ;
	var w, h, d, img ;
	var maintable = $( ".nws_maintable:eq(0)", div ) ;
	var thumbstable = $( ".nws_thumbstable:eq(0)", div );

	// THUMBS all news
	if ( r.showthumbs != "0" ) {
		var nbnews = Math.max( 4 , $( "td.nws_thumb", thumbstable ).length ) ;
		var o = fixedWidthIntervals( maintable.width(), 7, nbnews ) ;
		//w = Math.round( ( maintable.width() -  ( 7 * ( nbnews - 1 ) ) ) / nbnews ) ;
		w = o.width ;
		if ( w > 5 ) {
			thumbstable.show() ;
			h = Math.round( w * nws_getimgratio( r ) ) ;
			var j = 0 ;
			$( "td.nws_thumb", thumbstable ).each( function( i, v ){
				var i = $( this ).attr( "newsindex" );
				var img = $( ".nws_img", this );
				nws_fitimage( img , w, h, r.news[ i ] ) ;
				$( img ).css( "visibility", ( r.news[ i ].active ) ? "visible" : "hidden" ) ;
				if ( r.news[ i ].active ) {
					if ( j > 0 ) $( this ).css( "padding-left", o.gaps[ j - 1 ] + "px" ) ;
					j++ ;
				}
			} );
		} else thumbstable.hide() ;
	}
			
	// LARGE IMAGE main news
	w = maintable.width();
	h = Math.round( w * nws_getimgratio( r ) ) ;
	$( ".nws_img", maintable ).each( function( i, v ){
		var i = $( this ).parent().parent().attr( "newsindex" );
		nws_fitimage( this , w, h, r.news[ i ] ) ;
		$( this ).css( "visibility", ( r.news[ i ].active ) ? "visible" : "hidden" );
		var d = $( ".nws_overimg", this ) ;
		d.css( "top", h - d.height() + "px" );
	} );


/*
	var curr = $( div ).data( "currentnews" )
	var selectednews = $( ".nws_news[newsindex='" + curr + "']", maintable );
	nws_fitimage( $( ".nws_img", selectednews ), w, h, r.news[ curr ] ) ;
	d = $( ".nws_overimg", selectednews );
	d.css( "top", h - d.height() + "px" )
*/
}

function nws_fitimage( d, w, h, news ) {
	d = $( d );
	var div = getContainer( d.get( 0 ) ) ;
	var r = qsn_thenotes[ div.id ] ; 
	
	d.parent().parent().width( w ).height( h ); // td
/*
	ATTENTION : Firefox ne connaît pas .css( "border-style" ) ou .css( "border-width" ) il faut obligatoirement ajouter top, left, right ou bottom
*/	
	if ( d.parent().css( "border-left-style" ) != "none" && parseInt( d.parent().css( "border-left-width" ), 10 ) == 1 ) {
		h = h-2 ;
		w = w-2;
	}
	d.parent().width( w ).height( h ); // div absolute
	if ( d.css( "border-left-style" ) != "none" && parseInt( d.css( "border-left-width" ), 10 ) == 1 ) {
		h = h-2 ;
		w = w-2;
	}
	d.width( w );
	d.height( h );

	var img = $( "img", d );
	
	var imgw = parseInt( news.img.width, 10 ) ;
	var imgh = parseInt( news.img.height, 10 ) ;

	if ( imgh / imgw >= nws_getimgratio( r ) ) { // image + verticale que le ratio
		var k = ( imgh / imgw ) * ( w / h ) ;
		var dh = ( k - 1 ) * h ;	
		img.css( { "width" : w +"px" , "margin-left" : "0px" } );
		switch( parseInt( news.img.position, 10 ) ) {
			case( 0 ) :
			case( 1 ) :
			case( 2 ) :
				img.css( "margin-top", "0px" );
				break ;
			case( 3 ) :
			case( 4 ) :
			case( 5 ) :
				img.css( "margin-top", -Math.round( dh / 2 ) + "px" );
				break ;
			case( 6 ) :
			case( 7 ) :
			case( 8 ) :
				img.css( "margin-top", -Math.round( dh ) + "px" );
				break ;
		}
	} else { // image + horizontale que le ratio
		var k = ( imgw / imgh ) * ( h / w ) ;
		var dw = ( k - 1 ) * w ;		
		img.css( { "width" : ( Math.round( ( 1 + k * 100 ) * w / 100 ) ) + "px", "margin-top" : "0px" } );
		switch( parseInt( news.img.position, 10 ) ) {
			case( 0 ) :
			case( 3 ) :
			case( 6 ) :
				img.css( "margin-left", "0px" );
				break ;
			case( 1 ) :
			case( 4 ) :
			case( 7 ) :
				img.css( "margin-left", -Math.round( dw / 2 ) + "px" );				
				break ;
			case( 2 ) :
			case( 5 ) :
			case( 8 ) :
				img.css( "margin-left", -Math.round( dw ) + "px" );				
				break ;
		}
	}
}

function nws_getimgratio( r ) {
	return [ 0.25 , 0.5 , 0.75 , 1 , 1.25 , 1.5 ][ parseInt( r.imgratio , 10 ) ] ; 
}

function nws_mouseovermainnews() {}
function nws_mouseovernews() {}
//function nws_mouseoutmainnews() {}
function nws_clickinmainnews() {}
function nws_rendermainnews() {}


var pimg_message = {
"newnoteprompt" : "cliquez ici pour écrire votre message, puis cliquez sur ok" ,
"fermer" : "fermer" ,
"plug" : "Image_Ajoutez rapidement une photo (cliquable ou non) sur votre page.",
"desc" : "(...)",
"selectanimage" : "Veuillez sélectionner une image.",
"uploadtitle" : "Insertion d'une image",
"selectanimage_fo" : "Sélectionnez une image." ,
"pages_toolarge" : "La taille de l'image originale est trop grande. Vous ne pouvez pas utiliser cette option pour cette image.",
"delete" : "supprimer" ,
"reducing_margins" : "Le nouveau réglage de marge faisait déborder l'image. Le réglage a été modifié à la plus proche valeur valide.",
"link" : "Indiquez l'adresse du lien ici : http:// etc",
"background" : "Fond" ,
"tabmargin" : "Marge" ,
"margin0" : "aucune" ,
"margin1" : "fine" ,
"margin2" : "normale" ,
"margin3" : "large" ,
"margin4" : "très large" ,
"linkpagetitle" : "Cliquez pour accéder à la page",
"popuppagetitle" : "Cliquez pour voir",
"linkfiletitle" : "Cliquez pour télécharger le fichier",
"changeimg" : "Changer l'image..." ,
"usetrueimg" : "utiliser l'image originale" ,
"helptrueimg" : "Cette option donne la meilleure qualité d'image disponible mais empêche de la redimensionner.<br />Pour redimensionner la note, l'option doit être désactivée." ,
"enablezoom" : "autoriser le zoom" ,
"helpzoomimg" : "Cette option permet aux visiteurs de voir l'image en grand en cliquant sur la loupe en haut à gauche." ,
"clicktoclose" : "Cliquez pour fermer l'image et revenir à la page." ,
"suppressnote" : "Êtes-vous certain de vouloir supprimer cette note ?\n\nATTENTION : ceci ne supprime pas l'image de votre espace de stockage. Pour libérer l'espace de stockage qui est occupé par votre image, ouvrez votre panneau « Fichiers chargés sur le site » et supprimez l'image.",
"suppressnote_bubble" : "Pour libérer de l'espace de stockage, ouvrez votre panneau « Fichiers chargés sur le site ».",
"linkbroken" : "La page vers laquelle pointait ce lien a été supprimée."
} ;

var pimg_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "pimg_msgs_fr_js_loaded" ) ;


var pimg_json_template = { version: 2 , img : { src : "" , downloadsrc : "" } , margin: "1" , color : "rgb(100%,100%,100%)" , linkdata : { kind: 0, address : "", pagelink : "" } , enablezoom : false, header : { display : "false" , text : "" , icon : "" } } ;


function pimg_upgradejson( r ) {
	if ( r.version == pimg_json_template.version ) return r ;
	if ( r.version < 2 ) r = pimg_upgradejsontov2( r ) ;
	r.version = pimg_json_template.version ;
	return r ;
}

function pimg_upgradejsontov2( r ) {
	r.header = $.extend( true, {}, pimg_json_template.header ) ;
	return r ;
}

/*
function -
function RENDER IN FULL SCREEN MASK
*/

function pimg_mouseoverimg( x ) {
	var div = getContainer( x ) ;
	$( ".pimg_zoombutton:eq(0)", div ).toggle( qsn_thenotes[ div.id ].enablezoom == true );
}

function pimg_mouseoutimg( x ) {
	var div = getContainer( x ) ;
	$( ".pimg_zoombutton:eq(0)", div ).hide();
}

function pimg_renderimg_fsm( x ) {
	var holder = window ;
	if ( window.quomodo && quomodo.page && quomodo.page.popupid == "old" ) holder = parent ;
	var r = qsn_thenotes[ getContainer( x ).id ] ;
	var src = ( r.img.kind == "web" ) ? r.img.src : q_spaceabsoluteurl( r.common.ownerid , r.img.formats.screen ) ;
	var fsm = holder.ge( "q_fullscreenmask" ) ;
	holder.showblock( "q_fullscreenmask" ) ;//pour que l'image soit réellement affichée et qu'on puisse en mesurer les dimensions
	var div = fsm.appendChild( holder.create_elem( "DIV", { id: "pimg_fsm" } ) ) ;
	var img = div.appendChild( holder.create_elem( "IMG", { title: pimg_message[ "clicktoclose" ] } ) ) ;
	div.style.visibility = "hidden" ;
	img.onclick = function() { pimg_removeimg_fsm( ); } ;
	holder.q_hsetimgsrc( [ img , src ] , function( imgSize ) { pimg_renderimg_fsmfinish( src , imgSize ) ; } , [] , true ) ;
}

function pimg_renderimg_fsmfinish( src , imgSize ) {
	var holder = window ;
	if ( window.quomodo && quomodo.page && quomodo.page.popupid == "old" ) holder = parent ;
	var div = holder.ge( "pimg_fsm" ) ;
	var img = holder.gebtn( div, "IMG" ) ;
	var imgw = ( imgSize ) ? imgSize.width : img.offsetWidth ;
	var imgh = ( imgSize ) ? imgSize.height : img.offsetHeight ;
	var ww = holder.$( holder ).width() ;
	if ( isie6() && ( holder.pages_mode || holder.pages_mode() != "edit" ) ) ww = Math.min( ( holder.pages_maxwidthpage && holder.pages_maxwidthpage() ) || 1002 , ww ) ;// vh : sur IE6 le fullscreenmask en mode view ne prend pas toute la largeur de la fenêtre.
	var wh = holder.$( holder ).height() ;
	var h = Math.round( wh * 0.9 ) ; // 90% de la hauteur de la fenêtre
	var w = Math.round( h * imgw / imgh ) ;
	if ( w > Math.round( ww * 0.9 ) ) {
		w = Math.round( ww * 0.9 ) ; // 90% de la largeur de la fenêtre
		h = Math.round( w * imgh / imgw ) ;
	}
	img.style.height = h + "px" ;
	img.style.width = w + "px" ;
	var m = 8 ; // padding
	div.style.top = ( wh - ( 2*m + h ) ) / 2 + "px" ;
	div.style.left = ( ww - ( 2*m + w ) ) / 2 + "px" ;
	div.style.visibility = "visible" ;
}

function pimg_removeimg_fsm( ) {
	var holder = window ;
	if ( window.quomodo && quomodo.page && quomodo.page.popupid == "old" ) holder = parent ;
	holder.rm( "pimg_fsm" ) ;
	holder.hideblock( "q_fullscreenmask" ) ;
}



var poll_message = {
"poll" : "Sondage" ,
"results" : "Résultats" ,
"votes" : "Voir les choix" ,
"resultstitle" : "Cliquez pour voir les résultats des votes" ,
"votestitle" : "Cliquez pour revenir aux choix proposés" ,
"newnoteprompt" : "Cliquez ici pour rédiger le message de ce sondage" ,
"delete" : "Supprimer cette option" ,
"clicktovalidate" : "Cliquez pour cocher ou décocher cette réponse" ,
"editmodeclickoption" : "Pour voter, passez en mode membre ou visitez la page en mode visiteur. N'oubliez pas de publier d'abord la page si nécessaire !",
"editmodeshowresults" : "Pour consulter les résultats, passez en mode membre ou visitez la page en mode visiteur. N'oubliez pas de publier d'abord la page si nécessaire !",
"choiceneedtovote" : "Vous devez choisir avant de voter" ,
"snname" : "Note Sondage" ,
"plug" : "Sondage_Réalisez un sondage avec choix multiples auprès de vos visiteurs." ,
"desc" : "(...)" , 
"fixedchoice" : "%c choix possibles" ,
"multiplechoice" : "Plusieurs choix possibles" ,
"simplechoice" : "Un seul choix possible" ,
"any" : "(indifférent)" ,
"votedone" : "Vous avez déjà participé à ce sondage le %date. Vous ne pouvez plus voter." ,
"nooptions" : "Vous devez au moins proposer un choix pour afficher la note.",
"displayresults" : "Les visiteurs peuvent consulter les réponses."
} ;

var poll_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "poll_msgs_fr_js_loaded" ) ;

var poll_json_template = { version : 4 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display : "true", text : "", icon : "false" } , showsignature : "false" , options: { } , multiplechoice : "true" , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, displayresults : "true" } ; 

function poll_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == poll_json_template.version ) ) return r ;
	if ( r.version<2 ) poll_upgradejsontov2( r ) ;
	if ( r.version<3 ) poll_upgradejsontov3( r ) ;
	if ( r.version<4 ) poll_upgradejsontov4( r ) ;
	r.version = poll_json_template.version;
	return r ;
}

function poll_upgradejsontov2( r ) {
	r.textstyles = { size: String( Math.max( Math.min( 3 - parseInt( r.textsize , 10 ) , 2 ) , 0 ) ) , font:r.textfont, bold : String( r.textbold !=0 ) , center : String( r.textcenter != 0 ) , italic : String( r.textitalic !=0 ) } ;
	r.header.display = String( r.headerdisplay == 1 ) ;
	r[ "showsignature" ] = String( r.signature !=0 ) ;
	delete r.textsize ;
	delete r.textfont ;
	delete r.textbold ;
	delete r.textcenter ;
	delete r.textitalic ;
	delete r.headerdisplay ;
	delete r.signature ;
	return r ;
}

function poll_upgradejsontov3( r ) {
	r.textstyles.size = String( Math.max( Math.min( parseInt( r.textstyles.size , 10 ) , 2 ) , 0 ) ) ;
	return r ;
}

function poll_upgradejsontov4( r ) {
	r.displayresults = "true";
	return r ;
}

function poll_initforweb( id ) {
	var div = ge( id );
	$( ".poll_vote_done:eq(0)", div ).hide();
	
	if ( qsn_thenotes[ id ].displayresults != "true" ) {
		$( ".poll_resultsbtn:eq(1)", div ).parent().remove();
		$( ".poll_btntd:eq(0)", div ).attr( { "colspan" : "2", "align" : "center" } );
	}	
		
	$( ".tablenotecontent:eq(0) .poll_an_option", div ).each( function( i,v ){
		$( v )
			.attr( "class", "poll_option_off poll_an_option" )
			.hover( function( event ){
				if ( event.type == "mouseenter" ) q_mouseoverbutton( $( "tr:eq(0) td:eq(0) div:eq(0)", this ).get( 0 ) ) ;
				else if ( event.type == "mouseleave" ) q_mouseoutbutton( $( "tr:eq(0) td:eq(0) div:eq(0)", this ).get( 0 ) ) ;
			} )
			.click( function(){ 
				q_mouseoutbutton( $( "tr:eq(0) td:eq(0) div:eq(0)", this ).get( 0 ) ) ; 
				poll_clickoption( this ) ; 
			} );
	} );
}

function poll_clickoption( x ) {
	if ( document.mainform.pagemode && document.mainform.pagemode.value == "edit" ) return q_alert( poll_message[ "editmodeclickoption" ] ) ;	
	var div = getContainer( x ) ;
	var noteid = div.id ;
	var r = qsn_thenotes[ noteid ] ;
	var memberoptions = r.members[ memberid ] ;
	if ( $( x ).hasClass( "poll_option_off" ) ) {
		if ( r.multiplechoice == "true" ) {
			$( x ).attr( "class", "poll_option_on poll_an_option" );
		} else if ( r.multiplechoice == "false" || r.multiplechoice == "1" ) {
			$( x ).parent().find( "table" ).each( function( i, v ){
				$( v ).attr( "class", ( v == x ) ? "poll_option_on poll_an_option" : "poll_option_off poll_an_option" );
			} );
		} else if ( r.multiplechoice > 1 ) {
			if ( $( ".poll_option_on", div ).length >= r.multiplechoice ) return ;
			$( x ).attr( "class", "poll_option_on poll_an_option" );
		}
	} else $( x ).attr( "class", "poll_option_off poll_an_option" );
	
	if ( isie6( ) ) {
		var optionToCheck = "" ;
		$( x ).parent().find( "table" ).each( function( i, v ){
			if ( $( v ).hasClass( "poll_option_on poll_an_option" ) ) optionToCheck = optionToCheck + " " + v.id ;
		} );
		poll_xrenderoptions( div, qsn_thenotes[ div.id ] , optionToCheck ) ;
	}
}

function poll_xrenderoptions( div, r, optionToCheck ) {
	if ( ! r ) r = qsn_thenotes[ div.id ] ;
	var options = poll_sortoptionsbyid( r.options ) ;
	if ( qsn_currstate != "edit" ) $( ".poll_results:eq(0)", div ).hide();
	$( ".poll_options:eq(0)", div ).empty().show();
	
	for ( var i = 0; i < options.length; i++ ) xpoll_appendoption( div, qsn_currstate, options[ i ][ 0 ], options[ i ][ 1 ] , optionToCheck ) ;
}

function poll_sortoptionsbyid( opt ) {  // tri des options dans l'ordre des ids
	var options = [ ] ;
	for ( var o in opt ) options[ options.length ] = [ o, opt[ o ] ] ;
	return options.sort( function( a, b ){ return ( a[ 0 ] - b[ 0 ] ) ; } ) ;
}

function poll_hideshowresults( x ) {
	//if ( q_pagemode() == "edit" ) return q_alert( poll_message[ "editmodeshowresults" ] ) ;
	var div = getContainer( x ) ;
	var targetmode = $( x ).attr( "targetmode" ) || "results" ;
	if ( targetmode == "results" ) {
		poll_renderresults( div ) ;
		$( ".poll_btntd:eq(0)", div ).hide();
		$( x ).attr( "targetmode" , "votes" ) ;
		targetmode = "votes" ;
	} else {
		if ( window.web_js_loaded ) {
			$( ".poll_results:eq(0)", div ).hide();
			$( ".poll_options:eq(0)", div ).show();
		} else poll_renderoptions( div ) ;
		$( ".poll_btntd:eq(0)", div ).show();
		$( x ).attr( "targetmode" , "results" ) ;
		targetmode = "results" ;
	}
	$( x ).html( poll_message[ targetmode ] ).attr( "title", poll_message[ targetmode + "title" ] );
}

function poll_renderresults( div, r ) {
	if ( ! r ) r = qsn_thenotes[ div.id ] ;
	var n = poll_sortoptionsbyid( r.options ).length ;
	
	$( ".poll_options:eq(0)", div ).hide();
	$( ".poll_wait:eq(0)", div ).css( "height", Math.max( 30 * n , 30 ) + "px" ).show();

	document.mainform.mission.value = "getdataSNweb" ;
	q_ajaxsubmit( { noteid : r.common.noteid }, function( x ){
		var options = poll_sortoptionsbyid( r.options ) ;
		$( ".poll_wait:eq(0)", div ).hide();
		var res = $( ".poll_results:eq(0)", div ).empty().show();

		var t = $( '<table cellspacing="0" cellpadding="0" border="0" width="100%"></table>' ).appendTo( res );
		for ( var i=0; i<options.length; i++ ) {
			$( '<tr></tr>' )
				.appendTo( t )
				.append( $( '<td height="30" valign="middle"></td>' )
					.append( poll_appendresult( x , options[ i ][ 0 ] ) ) 
				);
		}
		$( ".poll_scorebar" , t ).each( function( i , v ) { 
			var $e = $( v ) ;
			var pourcent = $e.data( "pourcent" ) ;
			$e.animate( { width : pourcent + "%" } , 1500 * pourcent / 100 ) ;
		} ) ;
	} ) ;
}

function poll_appendresult( x , voteoption ) {	
	var pourcent = ( ( x.votecount > 0 ) && ( x.options[ voteoption ] ) ) ? Math.round( ( x.options[ voteoption ] / x.votecount ) * 100 ) : 0 ;
	return $( '<table class="poll_result" cellspacing="0" cellpadding="0" border="0" width="100%"></table>' )
		.mousedown( function( event ){ q_stopPropagation( event ); } )
		.append( $( '<tr></tr>' )
			.append( $( '<td class="pngscale poll_scorebckg" width="100%"></td>' )
				.append( $( '<div class="pngscale poll_scorebar" style="width:0%;"></div>' )
					.data( "pourcent" , pourcent )
				)
				.append( $( '<div class="poll_scoretext"></div>' )
					.html(  "(" + pourcent + "% ~ " + ( ( x.options && x.options[ voteoption ] ) ? x.options[ voteoption ] : 0 ) + "/" + x.votecount + ") " + qsn_thenotes[ x.noteid ].options[ voteoption ] )
				)
			)
		);
}

/*
function -
function VOTES
*/


function poll_vote( x ) {
	if ( ! document.mainform ) return ;
	if ( document.mainform.pagemode && document.mainform.pagemode.value == "edit" ) return q_alert( poll_message[ "editmodeclickoption" ] ) ;
	
	var div = getContainer( x );
	var id = div.id ;
	
	var cookieid = ( document.mainform.q_space.value.substring( 0 , 8 ) ) + "-" + /#([0-9]*)#/.exec(currsvcid)[1] + id ;
	var cook = getcookie( cookieid ) ;
     	if ( cook ) {
		var thedate = new Date( ) ;
		thedate.setTime( cook ) ;
		thedate = twodigs(thedate.getDate()) + "." + twodigs( 1 + thedate.getMonth()) + "." + thedate.getFullYear() ;
		return q_alert( poll_message[ "votedone" ].replace( /%date/ , thedate ) ) ;
	}
	//on récupére la liste des options (class radio)
	var t = gebcn( id , "poll_options" ) ;
	var r = qsn_thenotes[ id ] ;
	var radio = getElementsByClassName( t , "poll_an_option" ) ;
	var radio_on = getElementsByClassName( t , "poll_option_on"  ) ;
	var n = radio_on.length ;
	if ( n == 0 ) return q_alert( poll_message[ "choiceneedtovote" ] ) ; 
	var memberoptions = "" ;
	for ( var i = 0 ; i < n ; i++ ) memberoptions += ( ( i == 0 ) ? "" : "-" ) + radio_on[ i ].id ;
	//cookie pour ne pas pouvoir revoter.
	setcookie( cookieid, new Date().getTime(), 30 ) ;
	document.mainform.mission.value = "updatedataSNweb" ;
	q_ajaxsubmit( { noteid : id , theids : memberoptions.split("-") } ) ; 			
	r.members[ memberid ] = memberoptions ;
	if ( ! window.web_js_loaded ) qsn_notechanged( id , "viewnotechanged" ) ;
	
	//On supprime l'interface de vote et on affiche un remerciment
	$( ".poll_resultsbtn:eq(0)", div ).hide();
	$( ".poll_vote_done:eq(0)", div ).show();
}


var pronos_message = {
	"podium" : "Podium" ,
	"ranking" : "Classement" ,
	"ranking_week" : " de la semaine" ,
	"ranking_lastweek" : " de la semaine dernière" ,
	"ranking_month" : " du mois" ,
	"ranking_all" : " général" ,
	"matchToday" : "Aujourd'hui" ,
	"selectScoreTeam" : "Pronostiquer le score de " ,
	"selectWinnerTeam" : "Pronostiquer la victoire de " ,
	"draw" : "Pronostiquer le match nul",
	"notedescprompt" : "Cliquez ici pour annoncer votre concours de pronostics",
	"gamerulesprompt" : "Cliquez ici pour ajouter une règle du jeu (par exemple, sur l'attribution des lots)",
	"turningDay" : "Jour de bascule",
	"mon" : "lundi",
	"tue" : "mardi",
	"wed" : "mercredi",
	"thu" : "jeudi",
	"fri" : "vendredi",
	"sat" : "samedi",
	"sun" : "dimanche",
	"qsn_recipNotif" : "Destinataire des notifications",
	"currently" : "Actuellement : ",
	"rulesTitle" : "Règles du jeu",
	"login_title" : "Le concours de pronostics est réservé aux membres de l'espace" ,
	"login_prompt" : "Si vous êtes membre du site, connectez-vous avec votre identifiant et votre mot de passe. Sinon inscrivez-vous pour devenir membre de ce site.",
	"isPronoSaved" : "<div align=\"center\">Merci pour votre pronostic !<br/>Que le meilleur gagne !</div>",
	"isPronoErased" : "Pronostic supprimé",
	"close" : "Fermer",
	"lastPerfs" : "Dernières performances",
	"noResultForThisTeam" : "Aucun résultat enregistré pour cette équipe",
	"noMatchThisWeek" : "Pas de match à pronostiquer cette semaine", 
	"last5matchs": "5 derniers matchs : ",
	"allTheMatches" : "Tous les matchs : ",
	"pronosTrends" : "Tendances des pronostics", 
	"pronoNotPossible" : "Pronostic clôturé",
	"pronoNotPossible-alert" : "Le pronostic de ce match est clôturé.",
	"emptyRanking" : "Classement vide",
	"defaultRules" : "<div class=\"pronos_rules_title\">Ce qu'il faut savoir pour participer aux Pronostics</div> • La participation est réservée aux membres du site. En acceptant de participer à ce concours de pronostics, vous acceptez qu'une miniature de votre photo puisse être affichée sur le podium ainsi que dans les différents classements. On parie sur les rencontres d'une ou plusieurs équipes. L'organisateur du concours décide qu'on pourra parier soit sur le résultat des matchs (qui va gagner ?), soit sur le score (combien chacun va-t-il marquer ?). <br/>• On a chaque semaine jusqu'à la veille de chaque rencontre pour parier dessus. <br/>• On peut être nommé gagnant de la semaine, du mois, ou au classement général.<br/><br/><div class=\"pronos_rules_title\">Le calcul des points</div> • En mode \"pari sur le résultat\", les gagnants remportent 20 points, les autres 0. <br/>• En mode \"pari sur le score\", on calcule d'abord les points qu'on a gagnés pour le bon résultat + pour chacun des deux 1/2 scores + pour l'écart de score, puis on fait la somme de ces points. <br/>• le bon résultat ( 1 ou N ou 2 ) donne 8 points. <br/>• chaque 1/2 score, ainsi que l'écart de points, gagne 4 points pour un pronostic exact, ou 2 points pour un pronostic à 10% près, ou encore 1 point pour un pronostic à 20% près. <br/>• le pourcentage d'erreur sur l'écart de points est évalué par rapport à la moyenne des deux 1/2 scores réels. <br/><br/><a title=\"Exemples de Pari sur le score\" class=\"\" href=\"#\" onclick=\"pronos_rules_showExample(); return false;\">Exemples de Pari sur le score</a>",
	"exempleRulesTitle" : "Exemples de Pari sur le score",
	"exampleRules" : "<div class=\"pronos_rules_title\">Pronostic de 3 - 2 / résultat de 5 - 2</div>Le résultat est le bon : 8 points.<br/>Le pronostic \"3\" pour le 1/2 score \"5\" ne gagne rien car 3 est trop éloigné de 5 (-40%).<br/>Le pronostic \"2\" pour le 1/2 score \"2\" gagne les 4 points.<br/>L'écart de points pronostiqué est de 1. L'écart réel est de 3, soit une erreur de 2. La moyenne des 1/2 scores est ( 5 + 2 ) / 2 = 3,5 dont 20% ne font que 0,7 donc l'écart ne gagne rien.<br/>Total : 12<br/><br/><div class=\"pronos_rules_title\">Pronostic de 50 - 66 / résultat de 50 - 30</div>Le résultat n'est pas bon : 0 point de résultat.<br/>Le pronostic \"50\" est exact : il gagne 4 points.<br/>Le pronostic \"66\" est faux de largement plus que 20% par rapport à \"30\" : il gagne 0 point.<br/>L'écart de points pronostiqué est de -16, pour un écart réel de 20, soit une erreur de 36. A comparer à la moyenne des 1/2 scores qui est de ( 50 + 30 ) / 2 soit 40 points. L'erreur de 36, rapportée à 40, est de 90% : là encore, erreur beaucoup trop élevée, aucun point remporté.<br/>Total : 4",
	"customRulesTitle" : "<div class=\"pronos_rules_title\">Règles complémentaires du club</div>",
	"razcounter" : "Le concours de pronostics a été remis à zéro.",
	"razcounter_confirm" : "Voulez-vous vraiment remettre à zéro le concours de pronostics ?"
} ;

var pronos_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "pronos_msgs_fr_js_loaded" ) ;

var pronos_json_template = { version : 1 , intro : "" , turningDay : "mon", customrules : "" , eventstype : [ { filter : {}, kind : "match" } ], typePronos : "score", textheight : 350 , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" } , common : { width : 600 } } ;

var pronos_textShadowPrepared = false ;

function pronos_textShadowPrepare(){
	if ( pronos_textShadowPrepared ) return ;
	(function($) {
		$.fn.textShadow = function(option) {
			if( !$.browser.msie) return;
			var IE6 = $.browser.version < 7;
			return this.each(function() {
				var el = $( this );
				var shadow = el.textShadowParse(this.currentStyle[ "text-shadow" ] );
				shadow = $.extend(shadow, option);

				el.textShadowRemove();

				if( shadow.x == 0 && shadow.y == 0 && shadow.radius == 0) return;

				if( el.css("position")=="static") {
					el.css({position:"relative"} );
				}
				el.css({zIndex:"0"} );
				if( IE6) {
					el.css({zoom:"1"} );
				}
				
				var span=document.createElement("span");
				$(span).addClass("jQueryTextShadow");
				$(span).html(el.html());
				$(span).css({
					padding:		this.currentStyle[ "padding" ],	
					width:		el.width(),
					position:	"absolute",
					zIndex:		"-1",
					color:		shadow.color!=null?shadow.color:el.css("color"),
					left:			(-parseInt(shadow.radius)+parseInt(shadow.x))+"px",
					top:			(-parseInt(shadow.radius)+parseInt(shadow.y))+"px"
				} );
				
				if( shadow.radius != 0) {
					if( shadow.opacity != null) {
						$(span).css("filter", "progid:DXImageTransform.Microsoft.Blur(pixelradius="+parseInt(shadow.radius)+", enabled='true', makeShadow='true', ShadowOpacity="+shadow.opacity+")");
					} else {
						$(span).css("filter", "progid:DXImageTransform.Microsoft.Blur(pixelradius="+parseInt(shadow.radius)+", enabled='true')");
					}
				}	
				el.append(span);
			
		  } );
		};
		
		$.fn.textShadowParse = function(value) 
		{
			value = String(value)
				.replace(/^\s+|\s+$/gi, '')
				.replace(/\s*!\s*important/i, '')
				.replace(/\(\s*([^,\)]+)\s*,\s*([^,\)]+)\s*,\s*([^,\)]+)\s*,\s*([^\)]+)\s*\)/g, '($1/$2/$3/$4)')
				.replace(/\(\s*([^,\)]+)\s*,\s*([^,\)]+)\s*,\s*([^\)]+)\s*\)/g, '($1/$2/$3)')
		
			var shadow = {
				x      : 0,
				y      : 0,
				radius : 0,
				color  : null
			};

			if( value.length > 1 || value[ 0 ].toLowerCase() != 'none') {
				value = value.replace(/\//g, ',');
				var color;
				if( value.match(/(\#[0-9a-f]{6}|\#[0-9a-f]{3}|(rgb|hsb)a?\([^\)]*\)|\b[a-z]+\b)/i) && (color = RegExp.$1) ) {
					shadow.color = color.replace(/^\s+/, '');
					value = value.replace(shadow.color, '');
				}

				value = value.
					replace(/^\s+|\s+$/g, '').
					split(/\s+/) ;
				value = $.map( value, function( item ) {
					return ( item || '' ).replace(/^0[a-z]*$/, '') ? item : 0 ;
				} );

				switch (value.length)
				{
					case 1:
						shadow.x = shadow.y = value[ 0 ];
						break;
					case 2:
						shadow.x = value[ 0 ];
						shadow.y = value[ 1 ];
						break;
					case 3:
						shadow.x = value[ 0 ];
						shadow.y = value[ 1 ];
						shadow.radius = value[2];
						break;
				}
				if( (!shadow.x && !shadow.y && !shadow.radius) || shadow.color == 'transparent') {
					shadow.x = shadow.y = shadow.radius = 0;
					shadow.color = null;
				}
			}

			return shadow;
		};

		$.fn.textShadowRemove = function() {
			if( !$.browser.msie) return;
			return this.each(function() {
				$( this ).children("span.jQueryTextShadow").remove();
			} );
		};
	} )( jQuery ) ;
	pronos_textShadowPrepared = true ;
}

/*
if( typeof Array.prototype.map == 'undefined' ) {
	Array.prototype.map = function( fnc ) {
		var a = new Array( this.length );
		for ( var i = 0; i < this.length; i++ ) {
			a[ i ] = fnc( this[ i ] );
		}
		return a;
	}
}
*/

function pronos_initforweb( id ) {
	var r = qsn_thenotes[ id ] ;
	var div = ge( id ) ;
	$( "img.pronos_logoMembre", div ).attr( "width", "28px" ).attr( "height", "28px" ) ;//2013-04-19, vh : mis à jour du podium pour fixer les pages déjà publiées
	var theTurningDay = $.inArray( r.turningDay , pronos_week_arr ) ;
	q_events_request( function( x ){
		if ( ! isremoved( div ) ){
			div.calendar = x ;
			pronos_rendermatchs( id ) ;
		}
	}, { events: [ $.extend( { date : "w-" + theTurningDay } , r.eventstype[ 0 ] ) ] } ) ;
	//qlub_loadevents( "pronos_rendermatchs", [ id ] ) ;
}

var pronos_colordesc = { 
	"qmc3" : function( r ) {
		if ( r.header.icon == "false" ) return "" ;
		return "/services/pronos/images/pronos48.png" ;
	}
};
var color_grey = "#929292";
var pronos_week_arr = [ "mon", "tue", "wed", "thu", "fri", "sat", "sun" ];
var pronos_rankingTitle_arr = [];
//var pronos_rankingTitle_num = 0;
var pronos_widthScoreMax = 28;
var pronos_inTextInput = false;
var pronos_rankingPeriod_arr = [ "week", "month", "all" ];
var pronos_memberGroup_nb = 5;
var pronos_previousScoreSaved = "";

var pronos_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" }  };
var pronos_leftcol_description = [
{ what : "notecolor" , tabname : "tabcolor" , visible : true , elems : [ 
	{ handler : "qsn_addqlubcolorblock" , params : { jsonpath : "color" , others : true ,  transparent:true , title:false , menuseparator: false , modifynote : "qsn_setcolors"  } } 
	] } , 
{ what : "bandeau" , tabname : "tabheader" , visible : false , elems : [    
		{ handler : "qsn_addheaderhideshow" },
		{ handler : "qsn_addheaderstyles" },
		{ handler : "qsn_addheadernoicon" }
	] } , 
{ what : "textstyles" , tabname : "tabtext" , visible : false , elems : [ 
	{ handler : "qsn_addfontfsizes" , params : { jsonpath : "textstyles.size" , ncols : 2  } } , 
	{ handler : "qsn_addfontfamilies", params : { jsonpath : "textstyles.font" , ncols : 2  } } , 
	{ handler : "qsn_addtextoptions", params : { jsonpath : "textstyles" , ncols : 2 , opts : [ "bold" , "center" , "italic"  ] } }
	] },
{ what : "options" , tabname  : "taboptions" , visible : false , elems : [ 
	{ handler : "qsn_addselect" , params : { title : "turningDay", jsonpath : "turningDay" , selects : pronos_week_arr } } 
	] }
] ;

/*
function -
function RENDER
*/	

var pronos_members;
var pronos_members_queue = [] ;
var pronos_members_loading = false ;
function pronos_loadmembers( callback ) {
	if ( ! pronos_members ) {
		pronos_members_queue.push( callback ) ;
		if ( pronos_members_loading ) return ;
		pronos_members_loading = true ;
		function done( x ){
			pronos_members = x ; 
			
			for ( var i = 0; i< pronos_members_queue.length; i++ ) pronos_members_queue[ i ]();
			
			pronos_members_queue = [] ;
			pronos_members_loading = false ;
		}
		if ( q_pagemode() != "web" ) q_ajaxgetppty( "members?svcid=all&svcmode=pict" , function( x ){ 
			done( x[ "members?svcid=all&svcmode=pict" ] ) ;
		} );
		else done( ( spacexml && spacexml.publicmembers ) || {} ) ;
		
	} else callback();
}

var pronos_rankings = {} ;
function pronos_renderhtml( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[noteid] ;
	
	qsn_container_renderhtml( div , r ) ;
	
	$( ".pronos_desc", div ).text( r.intro );
		
	if( qsn_currstate == "edit" ) {
		var i;
		for( i = 0; i < 3; i++) $( ".pronos_typePronos", div ).eq( i ).next( "label" ).attr( "for", $( ".pronos_typePronos", div ).eq( i ).attr( "id" ) );
		
		$( ".pronos_gamerules", div ).val( r.customrules );
		$( ".pronos_typePronos", qsn_edittarget ).filter( "[value=" + r.typePronos + " ]" ).prop( "checked", true );
		qsn_blurdefault ( gebcn( div , "pronos_desc" ), "notedescprompt" ) ;
		qsn_blurdefault ( gebcn( div , "pronos_gamerules" ), "gamerulesprompt" );	
	} else {
		$( ".pronos_wait", div ).show();	
		if( r.intro == "" ) {	
			$( ".pronos_desc", div ).hide();
		}
		var theTurningDay = $.inArray( r.turningDay , pronos_week_arr ) ;
		q_events_request( function( x ){
			if ( ! isremoved( div ) ){
				div.calendar = x ;
				pronos_rendermatchs( noteid ) ;
			}
		}, { events: [ $.extend( { date : "w-" + theTurningDay } , r.eventstype[ 0 ] ) ] } ) ;
		//qlub_loadevents( "pronos_rendermatchs", [noteid] ) ;
	}
	qsn_setcolors( noteid ) ;
	qsn_settextproperties( noteid ) ;
	pronos_setResizable( div ) ;
	q_changedwidth( div , parseInt( qsn_width( r.common.noteid ) , 10 ) ) ;
}
function pronos_setResizable( div ){
	div.toresize = function () {
		var x = $( ".pronos_podium_bg_container", div ).get() ;
		x = x.concat( qsn_container_toresize( this ) ) ;
		return x ;
	} ;
	$( ".pronos_podium_bg_container", div ).each( function(){ this.widthrule = function( w ) { return Math.ceil( ( w ) / 3 ); } } );
}
function pronos_setPodium( noteid, theRanking, theRankingPeriodNumber ) {
	var div = ge( noteid ) ;
	noteid = div.id ;
	var r = qsn_thenotes[noteid] ;
	
	pronos_rankingTitle_arr = [pronos_message[ "podium" ] + pronos_message[ "ranking_week" ], pronos_message[ "podium" ] + pronos_message[ "ranking_month" ], pronos_message[ "podium" ] + pronos_message[ "ranking_all" ]];
	var theRankingPeriod = pronos_rankingPeriod_arr[theRankingPeriodNumber];
	
	pronos_rankingTitle_arr[0] = pronos_message[ "podium" ] + pronos_message[ "ranking_lastweek" ];
	
	$( ".pronos_podium_menutitle", div ).text( pronos_rankingTitle_arr[theRankingPeriodNumber] );
	
	
	var newWidth1 = $( ".pronos_podium_bg1_img", div ).width() - $( ".pronos_podiumMembrePos1", div ).width()  ; 
	$( ".pronos_memberNamePos1", div ).width( Math.round( newWidth1 / 2 ) ) ;
	
	var newWidth2 = $( ".pronos_podium_bg2_img", div ).width() - $( ".pronos_podiumMembrePos2", div ).width()  ; 
	$( ".pronos_memberNamePos2", div ).width( Math.round( newWidth2 / 2 ) ) ;
	
	var newWidth3 = $( ".pronos_podium_bg3_img", div ).width() - $( ".pronos_podiumMembrePos3", div ).width()  ; 
	$( ".pronos_memberNamePos3", div ).width( Math.round( newWidth3 / 2 )) ;
	
	if( theRanking ) {
		var i;
		for ( i=0; i < 3; i++ ) {
			var theMemberInPodium = theRanking[theRankingPeriod][ 0 ][ i ];
			var thePosRanking = parseInt( i + 1 );
			if( pronos_members[theMemberInPodium] != undefined ) {
				if( pronos_members[theMemberInPodium].pict != "" && pronos_members[theMemberInPodium].pict != undefined ) {
					$( ".pronos_logoMembre" + thePosRanking, div ).attr( "src", q_fsbaseurl() + pronos_members[theMemberInPodium].pict );
				} else {
					$( ".pronos_logoMembre" + thePosRanking, div ).attr( "src", "/services/pronos/images/no-photo.gif" );
				}
				$( ".pronos_memberNamePos" + thePosRanking, div ).
					text( pronos_getMemberName( theMemberInPodium ) ).
					addClass( "qtxt1 font" ).
					attr( "title", pronos_getMemberName( theMemberInPodium ) ) ;
			} else {
				$( ".pronos_logoMembre" + thePosRanking, div ).attr( "src", "/services/pronos/images/no-photo.gif" );
				$( ".pronos_memberNamePos" + thePosRanking, div ).text( "" );
			}
		}
	}
	qsn_settextproperties( [div] , noteid );
}

function pronos_manageButtons( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[ noteid ] ;
		
	$( ".pronos_tab_btn", div ).mouseover( function() {
		if( qsn_currstate != "edit"  && (q_pagemode() == "view" || q_pagemode() == "web" )) {
			if( !$( this ).hasClass( "pronos_betSaved" ) ) {
				if( !$( this ).hasClass( "pronos_tabLocked" ) ) {
					if( !$( this ).hasClass( "pronos_tabScore" ) ) {
						$( this ).css( { "border-width": "2px", "border-color": pronos_getColorUser( div, false ), "margin": "0px" } );
					}
				}
			}
		}
	} );
	$( ".pronos_tab_btn", div ).mouseout( function() {
		if( qsn_currstate != "edit"  && (q_pagemode() == "view" || q_pagemode() == "web" )) {
			if( !$( this ).hasClass( "pronos_betSaved" ) ) {
				if( !$( this ).hasClass( "pronos_tabLocked" ) ) {
					if( !$( this ).hasClass( "pronos_tabScore" ) ) {
						$( this ).css( { 'border-width': '1px', 'border-color': color_grey, 'margin': '1px' } );
					}
				}
			}
		}
	} );
	$( ".pronos_matchDone", div ).find( ".pronos_logoEquipe, .pronos_tableauAffichage" ).unbind( "click" ).click( function() {
		q_alert( pronos_message[ "pronoNotPossible-alert" ] ) ;
	} ) ;
	$( ".pronos_tab_btn", div ).unbind( "click" ).click( function() {
		if( qsn_currstate != "edit"  && q_pagemode() == "web" ) {
			club_login_block( { title: pronos_message[ "login_title" ], message : pronos_message[ "login_prompt" ] } ) ;
		} else if( qsn_currstate != "edit"  && q_pagemode() == "view" ) {
			if( !$( this ).hasClass( "pronos_tabLocked" ) ) {
				//modes 1-2 / 1-N-2
				if( !$( this ).hasClass( "pronos_tabScore" ) ) {
					//if( !$( this ).hasClass( "pronos_betSaved" ) ) {
						var isPronoSaved = ! $( this ).hasClass( "pronos_betSaved" );
						
						$( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tab_btn" )
							.css( { 'border-width': '1px', 'border-color': color_grey, 'margin': '1px' } )
							.removeClass( "pronos_betSaved" );
						
						var theProno = "";
						if( isPronoSaved ) {
							$( this ).css( { 'border-width': '2px', 'border-color': pronos_getColorUser( div, false ), 'margin': '0px' } );
							$( this ).addClass( "pronos_betSaved" );
							if( $( this ).hasClass( "pronos_tab1_btn" ) ) {
								theProno = "1";
							} else if( $( this ).hasClass( "pronos_tabN_btn" ) ) {
								theProno = "N";
							} else if( $( this ).hasClass( "pronos_tab2_btn" ) ) {
								theProno = "2";
							}
						}
						
						var pronos_event_id = $( this ).parents( ".pronos_table_match:eq(0)" ).attr( "eid" );
						
						q_ajaxobjsetppty( "pronos" , "prono?id=" + encodeURIComponent(currsvcid + "/" + noteid) + "&mid=" + memberid + "&eid=" + pronos_event_id, {"kind" : r.typePronos, "prono" : theProno }, function() { q_bubble( displaySavedMessage( isPronoSaved ), { delay: 1500 } ); } );
					//}
				} else { //mode Score
					pronos_previousScoreSaved = $( ".pronos_score_txt", this ).text();
					if( !pronos_inTextInput ) {
						pronos_inTextInput = true;
						$( ".pronos_score_txt", this ).hide();
						$( ".pronos_tabScoreInput", this )
						.show()
						.select()
						.focus();
					}
				}
			}
		}
	} );
	
	$( ".pronos_tabScoreInput", div ).blur( function() {
		if( qsn_currstate != "edit"  && q_pagemode() == "view" ) {
			if( !$( this ).hasClass( "pronos_tabLocked" ) ) {
				if( $( this ).hasClass( "pronos_tabScore" ) ) {
					//if( pronos_inTextInput ) {
						//var thePronoScore1 = "0";
						//var thePronoScore2 = "0";
						var thePronoScore1 = "";
						var thePronoScore2 = "";

						if( $( this ).parent().hasClass( "pronos_tab1_btn" ) ) {
							thePronoScore1 = String( parseInt( $( this ).val(), 10 ) );
							thePronoScore2 = String( parseInt( $( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tableauAffichage_right" ).find( ".pronos_score_txt" ).html(), 10 ) );
							
							/*if( thePronoScore2 == "NaN" && thePronoScore1 == "NaN" ) {
								thePronoScore2 = "";
								thePronoScore1 = "";
							} else if( ( thePronoScore1 == "" || thePronoScore1 == "NaN" ) && thePronoScore2 != "NaN" ) {
								thePronoScore1 = 0;
								thePronoScore2 = String( parseInt( thePronoScore2, 10 ) );
							} else if( ( thePronoScore2 == "" || thePronoScore2 == "NaN" ) && thePronoScore1 != "NaN" ) {
								thePronoScore2 = 0;
								thePronoScore1 = String( parseInt( thePronoScore1, 10 ) );
							}*/
							if( thePronoScore1 == "NaN" ) thePronoScore1 = "";
							else thePronoScore1 = String( parseInt( thePronoScore1, 10 ) );
							if( thePronoScore2 == "NaN" ) thePronoScore2 = "";
							else thePronoScore2 = String( parseInt( thePronoScore2, 10 ) );
							
							$( this ).val( thePronoScore1 );
							$( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tableauAffichage_right" ).find( ".pronos_score_txt" ).val( thePronoScore2 );						
						} else if( $( this ).parent().hasClass( "pronos_tab2_btn" ) ) {
							thePronoScore2 = String( parseInt( $( this ).val(), 10 ) );
							thePronoScore1 = String( parseInt( $( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tableauAffichage_left" ).find( ".pronos_score_txt" ).html(), 10 ) );
							
							/*if( thePronoScore2 == "NaN" && thePronoScore1 == "NaN" ) {
								thePronoScore2 = "";
								thePronoScore1 = "";
							} else if( ( thePronoScore1 == "" || thePronoScore1 == "NaN" ) && thePronoScore2 != "NaN" ) {
								thePronoScore1 = 0;
								thePronoScore2 = String( parseInt( thePronoScore2, 10 ) );
							} else if( ( thePronoScore2 == "" || thePronoScore2 == "NaN" ) && thePronoScore1 != "NaN" ) {
								thePronoScore2 = 0;
								thePronoScore1 = String( parseInt( thePronoScore1, 10 ) );
							}*/
							if( thePronoScore1 == "NaN" ) thePronoScore1 = "";
							else thePronoScore1 = String( parseInt( thePronoScore1, 10 ) );
							if( thePronoScore2 == "NaN" ) thePronoScore2 = "";
							else thePronoScore2 = String( parseInt( thePronoScore2, 10 ) );
							
							$( this ).val( thePronoScore2 );
							$( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tableauAffichage_left" ).find( ".pronos_score_txt" ).val( thePronoScore1 );				
						}			
						
						var isPronoSaved = false;
						var thePronoScore;
						if( thePronoScore1 == "" && thePronoScore2 == "" ) { thePronoScore = ""; isPronoSaved = false; }
						else { thePronoScore = thePronoScore1 + " " + thePronoScore2; isPronoSaved = true; }
						var pronos_event_id = $( this ).parents( ".pronos_table_match:eq(0)" ).data( "event" ).id;
						
						if( ( thePronoScore1 != "" && thePronoScore2 != "" ) || ( thePronoScore1 == "" && thePronoScore2 == "" ) ) {
						if( String( parseInt( $( this ).val(), 10 ) ) != pronos_previousScoreSaved ) q_ajaxobjsetppty( "pronos" , "prono?id=" + encodeURIComponent(currsvcid + "/" + noteid) + "&mid=" + memberid + "&eid=" + pronos_event_id, { "kind" : "s", "prono" : thePronoScore }, function() { q_bubble( displaySavedMessage( isPronoSaved ) ); } );
						}
						
						pronos_inTextInput = false;
						$( this ).hide();
						$( this ).parent().children( ".pronos_score_txt" )
						.html($( this ).val())
						.show();
					}
				//}
			}
		}
	} );
	
	function displaySavedMessage( isSaved ) {
		return isSaved ? pronos_message[ "isPronoSaved" ] : pronos_message[ "isPronoErased" ];
	}
	
	function inputDigitsOnly( e, input ) {
		var chrTyped, chrCode=0, evt=e?e:event;
		if( evt.charCode != null ) chrCode = evt.charCode;
		else if( evt.which != null ) chrCode = evt.which;
		else if( evt.keyCode != null ) chrCode = evt.keyCode;

		if( $( input ).val().match(/\D/)) $( input ).val( $( input ).val().replace(/\D/g,'') );

		if( chrCode == 0 ) chrTyped = 'SPECIAL KEY';
		else chrTyped = String.fromCharCode( chrCode );

		//Digits, special keys & backspace [\b] work as usual:
		if( chrTyped.match(/\d|[\b]|SPECIAL/) ) return true;
		if( evt.altKey || evt.ctrlKey || chrCode<28 ) return true;

		//Any other input? Prevent the default response:
		if( evt.preventDefault ) evt.preventDefault();
		evt.returnValue=false;
		return false;
	}
	$( ".pronos_tabScoreInput", div ).keypress( function( e ) {
		 if( qsn_currstate != "edit"  && q_pagemode() == "view" ) {
			if( e.which == 13 ) {
				e.stopPropagation();
				$( this, div ).blur();
			} else if( e.which == 0 ) {
				e.preventDefault();
				pronos_inTextInput = true;
				$( this, div ).blur();
				
				if( $( this ).parent().hasClass( "pronos_tab1_btn" ) ) {
					$( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tableauAffichage_right" ).find( ".pronos_score_txt" ).hide();
					$( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tableauAffichage_right" ).find( ".pronos_tabScoreInput" )
					.show()
					.select()
					.focus();
				} else {
					$( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tableauAffichage_left" ).find( ".pronos_score_txt" ).hide();
					$( this ).parents( ".pronos_table_match:eq(0)" ).find( ".pronos_tableauAffichage_left" ).find( ".pronos_tabScoreInput" )
					.show()
					.select()
					.focus();
				}
			}
			return inputDigitsOnly( e, $( this ) );
		}
	} );
	
	/*$( ".pronos_gray_rect", div ).mouseover( function() {
		$( this ).prev( ".pronos_table_match" ).mouseover();
	} );
	
	$( ".pronos_gray_rect", div ).mouseout( function() {
		$( this ).prev( ".pronos_table_match" ).mouseout();
	} );*/
	
	$( ".pronos_table_match", div ).mouseover( function() {
		if( qsn_currstate != "edit"  && (q_pagemode() == "view" || q_pagemode() == "web" )) {
			$( ".pronos_icons_group", this).show();
			$( ".pronos_resultB", this ).hide();
			/*if( $( this ).hasClass( "pronos_matchDone" ) ) {
				$( this ).next( ".pronos_gray_rect" ).width( $( div ).width() - $( this ).find( ".pronos_td_small" ).width() );
			}*/
		}
		if( ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) && q_pagemode() == "edit" ) {
			$( ".pronos_modifScore", this ).show();
			/*if( $( this ).hasClass( "pronos_matchDone" ) ) {
				$( this ).next( ".pronos_gray_rect" ).width( 0 );
			}*/
		}
	} );
	$( ".pronos_table_match", div ).mouseout( function() {
		if ( qsn_currstate != "edit"  && ( q_pagemode() == "view" || q_pagemode() == "web" ) ) {
			$( ".pronos_icons_group", this ).hide();
			$( ".pronos_resultB", this ).show();
		}
		if ( ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) && q_pagemode() == "edit" ) {
			$( ".pronos_modifScore", this ).hide();
		}
		/*if( $( this ).hasClass( "pronos_matchDone" ) ) {
			$( this ).next( ".pronos_gray_rect" ).show();
			$( this ).next( ".pronos_gray_rect" ).width( $( div ).width() );
		}*/
	} );
	
	$( ".pronos_modifScore", div ).unbind( "click" ).click( function() {
		var pronos_event_id = $( this ).parents( ".pronos_table_match:eq(0)" ).data( "event" ).id;
		q_events_request( function() { 
			q_eventform_display( "edit", "match", "", pronos_event_id, { callback : pronos_rendermatchs_view, callback_args : [ div, r, $( div ).data( "theBet") ] } ) ;
		} , { openselects: "all", eventid: pronos_event_id, type: "xml" } ) ;
		return false;
	} );
	
	$( ".pronos_equipeA", div ).mouseover( function() {
		$( this ).parents( ".pronos_table_match:eq(0)" ).find( "td.pronos_tableauAffichage_left" ).find( "div.pronos_tab_btn" ).mouseover();
	} );
	$( ".pronos_equipeA", div ).mouseout( function() {
		$( this ).parents( ".pronos_table_match:eq(0)" ).find( "td.pronos_tableauAffichage_left" ).find( "div.pronos_tab_btn" ).mouseout();
	} );
	$( ".pronos_equipeA", div ).unbind( "click" ).click( function() {
		$( this ).parents( ".pronos_table_match:eq(0)" ).find( "td.pronos_tableauAffichage_left" ).find( "div.pronos_tab_btn" ).click();
	} );
	
	$( ".pronos_equipeB", div ).mouseover( function() {
		$( this ).parent().parent().prev( "td.pronos_tableauAffichage_right" ).children( "div.pronos_tableauAffichage_bg" ).children( "div.pronos_tab_btn" ).mouseover();
	} );
	$( ".pronos_equipeB", div ).mouseout( function() {
		$( this ).parents( ".pronos_table_match:eq(0)" ).find( "td.pronos_tableauAffichage_right" ).find( "div.pronos_tab_btn" ).mouseout();
	} );
	$( ".pronos_equipeB", div ).unbind( "click" ).click( function() {
		$( this ).parents( ".pronos_table_match:eq(0)" ).find( "td.pronos_tableauAffichage_right" ).find( "div.pronos_tab_btn" ).click();
	} );
	
	//////////POPUPS//////////	
	$( ".pronos_close_btn", div ).unbind( "click" ).click( function() {
		q_fsm_delete();
	} );
	
	$( ".pronos_rules_btn", div ).unbind( "click" ).click( function() {
		pronos_openRules( noteid );
	} );

	
	$( ".pronos_perfs_btn", div ).unbind( "click" ).click( function() {
		var event = $( this ).parents( ".pronos_table_match:eq(0)" ).data( "event" ) ;
		var localteamid = event.__localteam ;
		//var selmatchs = q_events_search( [ { kind: "match", filter: { matchselector: "played", localteam: localteamid } } ] ) ;
		q_fsm_wait() ;
		q_events_request( function( x ){
			q_fsm_delete() ;
			var selmatchs = x.events ;
			var i;
			var nbMatchPlayed, scoreLocalTeam, scoreVsTeam, nbMatchWon, nbMatchLost, nbMatchDraw, last5matchs;
			nbMatchPlayed = scoreLocalTeam = scoreVsTeam = nbMatchWon = nbMatchLost = nbMatchDraw = 0;
			last5matchs = "";
			
			nbMatchPlayed = selmatchs.length;
			var nameTeam = event.localteam.name;
			var logoTeam = pronos_logourl( event.localteam.logo, "local" ) ;

			var i;
			for ( i=0; i < nbMatchPlayed; i++ ) {
				scoreLocalTeam = selmatchs[ i ].homescore;
				scoreVsTeam = selmatchs[ i ].vsscore;
				if( parseInt( scoreLocalTeam ) > parseInt( scoreVsTeam ) ) {
					nbMatchWon++;
					if( i >= ( selmatchs.length - 5 ) ) {
						last5matchs += '<div class="pronos_stats_result pronos_stats_result_v">V </div>';
					}
				} else if( parseInt( scoreLocalTeam ) < parseInt( scoreVsTeam ) ) {
					nbMatchLost++;
					if( i >= ( selmatchs.length - 5 ) ) {
						last5matchs += '<div class="pronos_stats_result pronos_stats_result_d">D </div>';
					}
				} else {
					nbMatchDraw++;
					if( i >= ( selmatchs.length - 5 ) ) {
						last5matchs += '<div class="pronos_stats_result pronos_stats_result_n">N </div>';
					}
				}
			}		
			
			var popup_html = "";
			popup_html += '<div class="pronos_popups ' + qsn_container_classstyle( r ) + '">';
			popup_html += '<div class="pronos_popup_perfs qsn2_qsn1 bg_self__isdark_self">';
			popup_html += '<div class="pronos_menutitle qsn3_qsn2_qsn1 text_self_bw">';
			popup_html += '<img class="pronos_menutitle_gloss" src="/services/pronos/images/menu_bg.png" width="100%" height="25px" />';
			popup_html += '<div class="pronos_menutitle_txt">' + pronos_message[ "lastPerfs" ] + '</div>';
			popup_html += '<div class="pronos_btn_bg_close qsn2_qsn1 isdyndark_icon">';
			popup_html += '<div class="pronos_btn_bg qsn3_qsn2_qsn1 text_self_bw">';
			popup_html += '<div title="' + pronos_message[ "close" ] + '" class="pronos_btns pronos_close_btn pronos_icons" onclick="q_fsm_delete(); return false;"></div>';
			popup_html += '</div>';
			popup_html += '</div>';
			popup_html += '</div>';
			popup_html += '<div class="pronos_popup_container">';
			popup_html += '<div class="pronos_popup_stats_logo_bg pronos_cadreBlancLogoEquipe_bg">';
			popup_html += '<img width="33px" height="33px" src="' + escapeattribute(logoTeam) + '" class="pronos_logoEquipe pronos_logoEquipeA" />';
			popup_html += '</div>';
			popup_html += '<div class="pronos_team_name pronos_team_name_stats qtxt1 font">' + escapeHTML(nameTeam) + '</div>';
			if( nbMatchPlayed == 0 ) {
				popup_html += '<div class="pronos_stats_result pronos_stats_result_n pronos_stats_noresult qtxt1 font">' + pronos_message[ "noResultForThisTeam" ] + '</div>';
			} else {
				popup_html += '<div class="pronos_perfs_subtitle qtxt1 font">' + pronos_message[ "last5matchs" ] + last5matchs + '</div>';
				popup_html += '<div class="pronos_perfs_subtitle qtxt1 font">' + pronos_message[ "allTheMatches" ] + '</div>';
				popup_html += '<table class="pronos_allPerfs">';
				popup_html += '<tr>';
				if( nbMatchWon > 0 ) popup_html += '<td colspan="' + nbMatchWon + '" class="pronos_stats_result_td"><div class="pronos_stats_result pronos_stats_result_v qtxt1 font">' + nbMatchWon + '</div></td>';
				if( nbMatchDraw > 0 ) popup_html += '<td colspan="' + nbMatchDraw + '" class="pronos_stats_result_td"><div class="pronos_stats_result pronos_stats_result_n qtxt1 font">' + nbMatchDraw + '</div></td>';
				if( nbMatchLost > 0 ) popup_html += '<td colspan="' + nbMatchLost + '" class="pronos_stats_result_td"><div class="pronos_stats_result pronos_stats_result_d qtxt1 font">' + nbMatchLost + '</div></td>';
				popup_html += '</tr>';
				popup_html += '<tr>';
				var i;
				for( i=0;i<nbMatchPlayed;i++ ) {
					if( i < nbMatchWon ) {
						popup_html += '<td width="' + Math.floor( 100/nbMatchPlayed ) + '%" class="pronos_stats_case pronos_case_won"></td>';
					} else if( i < (nbMatchWon + nbMatchDraw) ) {
						popup_html += '<td width="' + Math.floor( 100/nbMatchPlayed ) + '%" class="pronos_stats_case pronos_case_draw"></td>';
					} else {
						popup_html += '<td width="' + Math.floor( 100/nbMatchPlayed ) + '%" class="pronos_stats_case pronos_case_lost"></td>';
					}
				}
				popup_html += '</tr>';
			}		
			popup_html += '</table>';
			popup_html += '</div>';
			popup_html += '</div>';
			popup_html += '</div>';
			
			q_fsm_reveal( {
				src: popup_html,
				hideheader: true,
				padding: 0,
				reveal_callback: function( div , json ){
					qsn_setcolors( [div] , noteid ) ;
					qsn_settextproperties( [div] , noteid );
				}
			} );
		}, { events: [ { kind: "match", filter: { matchselector: "played", localteam: localteamid } } ] } ) ;
		
	} );
	
	$( ".pronos_tendances_btn", div ).unbind( "click" ).click( function() {
		var event = $( this ).parents( ".pronos_table_match:eq(0)" ).data( "event" ) ;
		logoTeam = pronos_logourl( event.localteam.logo, "local" ) ;
		logoVsTeam = pronos_logourl( event.vsteam.logo, "vs" ) ;
		nameTeam = event.localteam.name ;
		nameVsTeam = event.vsteam.name ;
		matchAtHome = event.__home ;
		
		var logoTeamLeft = "";
		var logoTeamRight = "";
		var nameTeamLeft = "";
		var nameTeamRight = "";
		var legend_rect_right = "";
		var legend_rect_left = "";
		if( matchAtHome == "0") {
			logoTeamLeft = logoTeam;
			nameTeamLeft = nameTeam;
			logoTeamRight = logoVsTeam;
			nameTeamRight = nameVsTeam;
			legend_rect_left = "pronos_stats_square_result_v";
			legend_rect_right = "pronos_stats_square_result_d";
		} else {
			logoTeamLeft = logoVsTeam;
			nameTeamLeft = nameVsTeam;
			logoTeamRight = logoTeam;
			nameTeamRight = nameTeam;
			legend_rect_left = "pronos_stats_square_result_d";
			legend_rect_right = "pronos_stats_square_result_v";
		}
		
		var bet_type = "";
		var nb_bet_won = 0;
		var nb_bet_lose = 0;
		var nb_bet_draw = 0;
		var nbBetsTotal = 0;
		var betTeamLeft_score, betTeamRight_score;
		var pronos_event_id = event.id ;
		q_ajaxobjgetppty( "pronos" , currsvcid + "/" + div.id, "whole?eid=" + pronos_event_id , function( x ) {
			var theBets = x["whole?eid=" + pronos_event_id]; 
			
			if( theBets ) {
				var theBet;
				for ( theBet in theBets ) {
					bet_type = theBets[theBet].k;
					if( bet_type == "s" ) {
						betTeamLeft_score = theBets[theBet].p.split( " " )[ 0 ];
						betTeamRight_score = theBets[theBet].p.split( " " )[ 1 ];
						
						if( betTeamLeft_score != "" && betTeamRight_score != "" ) {
							betTeamLeft_score = parseInt( betTeamLeft_score );
							betTeamRight_score = parseInt( betTeamRight_score );
							
							if( betTeamLeft_score > betTeamRight_score ) {
								nb_bet_won++;
							} else if( betTeamLeft_score < betTeamRight_score ) {
								nb_bet_lose++;
							} else if( betTeamLeft_score == betTeamRight_score ) {
								nb_bet_draw++;
							}
						}
					} else {
						if( theBets[theBet].p == "1" ) {
							nb_bet_won++;
						} else if( theBets[theBet].p == "2" ) {
							nb_bet_lose++;
						} else {
							nb_bet_draw++;
						}
					}
					nbBetsTotal = nb_bet_won + nb_bet_lose + nb_bet_draw;
				}
			}
			
			if( matchAtHome != "0") {
				var tmp = nb_bet_won ;
				nb_bet_won = nb_bet_lose ;
				nb_bet_lose = tmp ;
			}

			var popup_html = "";
			popup_html += '<div class="pronos_popups ' + qsn_container_classstyle( r ) + '">';
			popup_html += '<div class="pronos_popup_tendances qsn2_qsn1 isdark_self">';
			popup_html += '<div class="pronos_menutitle qsn2_qsn1 bg_self__isdark_self qsn3_qsn2_qsn1 text_self_bw">';
			popup_html += '<img class="pronos_menutitle_gloss" src="/services/pronos/images/menu_bg.png" width="100%" height="25px" />';
			popup_html += '<div class="pronos_menutitle_txt">' + pronos_message[ "pronosTrends" ] + '</div>';
			popup_html += '<div class="pronos_btn_bg_close qsn2_qsn1 isdyndark_icon">';
			popup_html += '<div class="pronos_btn_bg qsn3_qsn2_qsn1 text_self_bw">';
			popup_html += '<div title="' + pronos_message[ "close" ] + '" class="pronos_btns pronos_close_btn pronos_icons" onclick="q_fsm_delete(); return false;"></div>';
			popup_html += '</div>';
			popup_html += '</div>';
			popup_html += '</div>';
			popup_html += '<div class="pronos_popup_container">';
			popup_html += '<table class="pronos_popup_tendances_teams">';
			popup_html += '<tr>';
			popup_html += '<td class="pronos_stats_legend_width">&nbsp;</td>';
			popup_html += '<td class="pronos_popup_tendances_teamLogo">';
			popup_html += '<div class="pronos_popup_stats_logo_bg pronos_cadreBlancLogoEquipe_bg">';
			popup_html += '<img width="33px" height="33px" src="' + escapeattribute(logoTeamLeft) + '" class="pronos_logoEquipe pronos_logoEquipeA" />';
			popup_html += '</div>';
			popup_html += '</td>';
			popup_html += '<td class="pronos_stats_legend_width">&nbsp;</td>';
			popup_html += '<td class="pronos_stats_legend_width">&nbsp;</td>';
			popup_html += '<td class="pronos_popup_tendances_teamLogo">';
			popup_html += '<div class="pronos_popup_stats_logo_bg pronos_cadreBlancLogoEquipe_bg">';
			popup_html += '<img width="33px" height="33px" src="' + escapeattribute(logoTeamRight) + '" class="pronos_logoEquipe pronos_logoEquipeA" />';
			popup_html += '</div>';
			popup_html += '</td>';
			popup_html += '<td class="pronos_stats_legend_width">&nbsp;</td>';
			popup_html += '</tr>';
			popup_html += '<tr>';
			
			popup_html += '<td class="pronos_stats_legend_width">&nbsp;</td>';
			popup_html += '<td class="pronos_stats_team_name_td">';
			popup_html += '<div class="pronos_stats_team_name_and_legend">';
			popup_html += '<div class="pronos_stats_square pronos_stats_square_left ' + legend_rect_left + '"></div>';
			popup_html += '<div class="pronos_stats_team_name qtxt1 font">' + escapeHTML(nameTeamLeft) + '</div>';
			popup_html += '</div>';
			popup_html += '</td>';
			popup_html += '<td class="pronos_stats_legend_width">&nbsp;</td>';
			popup_html += '<td class="pronos_stats_legend_width">&nbsp;</td>';
			
			popup_html += '<td class="pronos_stats_team_name_td">';
			popup_html += '<div class="pronos_stats_team_name_and_legend">';
			popup_html += '<div class="pronos_stats_team_name qtxt1 font">' + escapeHTML(nameTeamRight) + '</div>';
			popup_html += '<div class="pronos_stats_square pronos_stats_square_right ' + legend_rect_right + '"></div>';
			popup_html += '</div>';
			
			popup_html += '</td>';
			popup_html += '<td class="pronos_stats_legend_width">&nbsp;</td>';
			
			
			popup_html += '</tr>';
			popup_html += '</table>';
			
			popup_html += '<table class="pronos_allPerfs">';
			popup_html += '<tr>';
			if( nb_bet_won > 0 ) {
				popup_html += '<td class="pronos_stats_result_td"><div class="pronos_stats_result pronos_stats_result_v qtxt1 font">' + Math.round( 100*nb_bet_won/nbBetsTotal ) + '%</div></td>';
			}
			if( nb_bet_draw > 0 ) {
				popup_html += '<td class="pronos_stats_result_td"><div class="pronos_stats_result pronos_stats_result_n qtxt1 font">' + Math.round( 100*nb_bet_draw/nbBetsTotal ) + '%</div></td>';
			}
			if( nb_bet_lose > 0 ) {
				popup_html += '<td class="pronos_stats_result_td"><div class="pronos_stats_result pronos_stats_result_d qtxt1 font">' + Math.round( 100*nb_bet_lose/nbBetsTotal ) + '%</div></td>';
			}
			if( nb_bet_won == 0 && nb_bet_draw == 0 && nb_bet_lose ==  0 ) {
				popup_html += '<td class="pronos_stats_result_td"><div class="pronos_stats_result pronos_stats_result_n">Pas de pronostic pour ce match</div></td>';
			}
			popup_html += '</tr>';
			popup_html += '<tr>';
			if( nb_bet_won > 0 ) {
				popup_html += '<td width="' + Math.floor( 100*nb_bet_won/nbBetsTotal ) + '%" class="pronos_stats_case pronos_case_won"></td>';
			}
			if( nb_bet_draw > 0 ) {
				popup_html += '<td width="' + Math.floor( 100*nb_bet_draw/nbBetsTotal ) + '%" class="pronos_stats_case pronos_case_draw"></td>';
			}
			if( nb_bet_lose > 0 ) {
				popup_html += '<td width="' + Math.floor( 100*nb_bet_lose/nbBetsTotal ) + '%" class="pronos_stats_case pronos_case_lost"></td>';
			}
			popup_html += '</tr>';
			popup_html += '</table>';
			popup_html += '</div>';
			popup_html += '</div>';
			popup_html += '</div>';
			
			var $popup_html = $( popup_html ) ;
			
			
			q_fsm_reveal( {
				src: $popup_html.get( 0 ),
				hideheader: true,
				padding: 0,
				reveal_callback: function( div , json ){
					qsn_setcolors( [ div ] , noteid ) ;
					qsn_settextproperties( [div] , noteid );	
				}
			} );
		} );	
	} );
	
	$( ".pronos_rightArrow_btn", div ).unbind( "click" ).click( function() {
		$( div ).data( "pronos_rankingTitle_num", ( $( div ).data( "pronos_rankingTitle_num" ) + 1 ) );
		if( $( div ).data( "pronos_rankingTitle_num") == 3 ) {
			$( div ).data( "pronos_rankingTitle_num", 0 );
		}
		pronos_setPodium( noteid, pronos_rankings[ noteid ], $( div ).data( "pronos_rankingTitle_num" ) ) ;
		/*q_ajaxobjgetppty( "pronos" , currsvcid + "/" + noteid, "scoreboard?weekday=" + r.turningDay , function( x ) { 
			var theRanking = x["scoreboard?weekday=" + r.turningDay];
			pronos_setPodium( noteid, theRanking, $( div ).data( "pronos_rankingTitle_num") ) ;
		} );*/
	} );
	
	$( ".pronos_leftArrow_btn", div ).unbind( "click" ).click( function() {
		$( div ).data( "pronos_rankingTitle_num", ( $( div ).data( "pronos_rankingTitle_num" ) - 1 ) );
		if( $( div ).data( "pronos_rankingTitle_num") == -1 ) {
			$( div ).data( "pronos_rankingTitle_num", 2 );
		}
		pronos_setPodium( noteid, pronos_rankings[ noteid ], $( div ).data( "pronos_rankingTitle_num" ) ) ;
		/*q_ajaxobjgetppty( "pronos" , currsvcid + "/" + noteid, "scoreboard?weekday=" + r.turningDay , function( x ) { 
			var theRanking = x["scoreboard?weekday=" + r.turningDay];
			pronos_setPodium( noteid, theRanking, $( div ).data( "pronos_rankingTitle_num") ) ;
		} );*/	
	} );
	
	$( ".pronos_ranking_btn", div ).unbind( "click" ).click( function() {
		var startingRankingMemberPosInCol_arr = [0, 0, 0];
		$( div ).data( "startingRankingMemberPosInCol", startingRankingMemberPosInCol_arr );		
		pronos_createRankingsPopup( div );
	} );
}

function pronos_createRankingsPopup( div ) {
	var noteid = div.id ;
	var r = qsn_thenotes[ noteid ] ;
	
	var popupRankings_html = "";	
	popupRankings_html += '<div class="pronos_popups ' + qsn_container_classstyle( r ) + '">';
	popupRankings_html += '<table cellspacing="0" cellpadding="0" border="0"><tr>';

	for ( var rankingPeriod=0;rankingPeriod<pronos_rankingPeriod_arr.length;rankingPeriod++ ) {
		popupRankings_html += '<td class="tdtitle"><div class="qsn1 bg_self"><div class="qsn2_qsn1 bg_self__isdark_self">' ;//class="pronos_popup_rankings_titles pronos_popup_rankings">';
		//popupRankings_html += '<td class="qsn2_qsn1 bg_self__isdark_self">' ;//class="pronos_popup_rankings_titles pronos_popup_rankings">';

		popupRankings_html += '<div class="pronos_menutitle pronos_rankings_menutitle qsn2_qsn1 isdark_self qsn3_qsn2_qsn1 text_self_bw">';
		popupRankings_html += '<img class="pronos_menutitle_gloss" src="/services/pronos/images/menu_bg.png" width="100%" height="25px" />';
		popupRankings_html += '<div class="pronos_menutitle_txt">' + pronos_message[ "ranking" ] + pronos_message[ "ranking_" + pronos_rankingPeriod_arr[ rankingPeriod ]] + '</div>';
		
		if ( rankingPeriod == (pronos_rankingPeriod_arr.length - 1 ) ) {
			popupRankings_html += '<div class="pronos_btn_bg_close_rankings qsn2_qsn1 isdyndark_icon">';
			popupRankings_html += '<div class="pronos_btn_bg qsn3_qsn2_qsn1 text_self_bw">';
			popupRankings_html += '<div title="' + pronos_message[ "close" ] + '" class="pronos_btns pronos_close_btn pronos_icons" onclick="q_fsm_delete(); return false;"></div>';
			popupRankings_html += '</div>';
			popupRankings_html += '</div>';
		}
	
		popupRankings_html += '</div>';	
		popupRankings_html += '</div></div></td>';	
		//popupRankings_html += '</td>';	
	}
	popupRankings_html += '</tr></tr>';	
	for ( var rankingPeriod=0;rankingPeriod<pronos_rankingPeriod_arr.length;rankingPeriod++ ) {
		popupRankings_html += '<td valign="top" class="pronos_popup_rankings' + rankingPeriod + '">' ;
		popupRankings_html += pronos_setColumnRankings( rankingPeriod, div );
		popupRankings_html += '</td>' ;
	}
	popupRankings_html += '</tr></tr>';	
	for ( var rankingPeriod=0;rankingPeriod<pronos_rankingPeriod_arr.length;rankingPeriod++ ) {
		popupRankings_html += '<td class="pronos_popup_rankings_arrows_td' + rankingPeriod + ( ( rankingPeriod%2 == 0 ) ? ' pronos_rankings_td_bg_dark' : '' ) + '">' ;//class="pronos_popup_rankings pronos_popup_rankings_arrows_table">';
		//popupRankings_html += '<table class="pronos_popup_rankings pronos_popup_rankings_arrows_table">';
		/*if ( rankingPeriod%2 == 0 ) popupRankings_html += '<tr class="pronos_rankings_td_bg_dark">';
		else popupRankings_html += '<tr>';*/
		
		if ( $( div ).data( "nbPronosInCol" + rankingPeriod ) > pronos_memberGroup_nb ) {
			popupRankings_html += '<div class="pronos_btns pronos_arrows_btn pronos_arrows_btn' + rankingPeriod + ' pronos_arrowUp_btn" onclick=\'pronos_arrowUp_click( "' + noteid + '","' + rankingPeriod + '" ); return false;\'></div>';
			popupRankings_html += '<div class="pronos_btns pronos_arrows_btn pronos_arrowDown_btn" onclick=\'pronos_arrowDown_click( "' + noteid + '","' + rankingPeriod + '" ); return false;\'></div>';
		} else popupRankings_html += '<div class="pronos_no_arrow"></div>';

		popupRankings_html += '</td>';	
	}
	
	popupRankings_html += '</tr></table>';
	popupRankings_html += '</div>';
	
	q_fsm_reveal( {
		src: popupRankings_html,
		hideheader: true,
		padding: 0,
		reveal_callback: function( div , json ){
			$( ".pronos_popups td.tdtitle", div ).css( "background-color",  getpagebackgroundcolor( ) ) ;
			qsn_setcolors( [div] , noteid ) ;
			qsn_settextproperties( [div] , noteid );
			pronos_textShadowPrepare() ;
			$( ".pronos_rankings_pos", div ).textShadow();
		}
	} );
}

function pronos_setColumnRankings( rankingPeriod, div ) {
	var noteid = div.id ;
	var r = qsn_thenotes[ noteid ] ;
	
	var theUserColor;
	theUserColor = pronos_getColorUser( div, true );
	
	var popupRankings_html = "";
	popupRankings_html += '<table style="width:100%" class="pronos_popup_rankings pronos_popup_rankings' + rankingPeriod + '">';	
	
	var thePeriod = pronos_rankingPeriod_arr[ rankingPeriod ];
	
	if( q_emptyjson( pronos_rankings[ noteid ] ) ) {
		popupRankings_html += '<tr><td class="pronos_popup_rankings_arrows_td pronos_noRanking_td qtxt1 font">' + pronos_message["emptyRanking"] + '</td></tr>';
	}
	else {
		var memberPosEndingBound = 0;
		
		$( div ).data( "nbPronosInCol" + rankingPeriod, pronos_rankings[ noteid ][ thePeriod ][ 0 ].length );
		
		if( ($( div ).data( "startingRankingMemberPosInCol" )[ parseInt( rankingPeriod ) ] + pronos_memberGroup_nb ) > pronos_rankings[ noteid ][ thePeriod ][ 0 ].length ) {
			memberPosEndingBound = pronos_rankings[ noteid ][ thePeriod ][ 0 ].length;
			if( ($( div ).data( "startingRankingMemberPosInCol" )[ rankingPeriod ] ) > pronos_rankings[ noteid ][ thePeriod ][ 0 ].length ) {
				$( div ).data( "startingRankingMemberPosInCol" )[ rankingPeriod] -= pronos_memberGroup_nb;
			}
		} else if( $( div ).data( "startingRankingMemberPosInCol" )[ rankingPeriod ] < 0 ) {
			memberPosEndingBound = pronos_memberGroup_nb;
			$( div ).data( "startingRankingMemberPosInCol" )[ rankingPeriod ] = 0;
		} else {
			memberPosEndingBound = ( $( div ).data( "startingRankingMemberPosInCol" )[ rankingPeriod ] + pronos_memberGroup_nb );
		}
		//si aucun pari pendant la periode donnée
		if( pronos_rankings[ noteid ][ thePeriod ][ 0 ].length == 0 ) {
			popupRankings_html += '<tr><td class="pronos_popup_rankings_arrows_td pronos_noRanking_td qtxt1 font">' + pronos_message["emptyRanking"] + '</td></tr>';
		}
		var i;
		for ( i = $( div ).data( "startingRankingMemberPosInCol" )[ rankingPeriod ]; i < memberPosEndingBound; i++ ) {
			var theMemberInRanking = pronos_rankings[ noteid ][ thePeriod ][ 0 ][ i ];
			var theMemberPoints = pronos_rankings[ noteid ][ thePeriod ][ 1 ][ i ];
			var theMemberPointsYesterday = pronos_rankings[ noteid ][ thePeriod + "-1" ][ 1 ][ i ];
			var theMemberProgression = "";
			var thePosRanking = parseInt( i + 1 );
			var theMemberPict = "";
			var theMemberName = "";
			var ecusson_class = "";
			var bgCadrePicMembre_class = "";
			var bgCadrePicMembre_size = "";
			var pointsFontSize = "";
			var memberNameNumber_class = "";
			if( pronos_members && pronos_members[ theMemberInRanking ] && pronos_members[ theMemberInRanking ].pict ) {
				theMemberPict = q_fsbaseurl() + pronos_members[theMemberInRanking].pict;
			} else {
				theMemberPict = "/services/pronos/images/no-photo.gif";
			}
			if( $.inArray( theMemberInRanking , pronos_rankings[ noteid ][ thePeriod ][ 0 ] ) < $.inArray( theMemberInRanking , pronos_rankings[ noteid ][ thePeriod + "-1" ][ 0 ] ) ) {
				theMemberProgression = "_up";						
			} else if( $.inArray( theMemberInRanking , pronos_rankings[ noteid ][ thePeriod ][ 0 ] ) > $.inArray( theMemberInRanking , pronos_rankings[ noteid ][ thePeriod + "-1" ][ 0 ] ) ) {
				theMemberProgression = "_down";
			} else {
				theMemberProgression = "_circle";
			}
			
			if( rankingPeriod%2 == 0 ) {
				if( i%2 != 0 ) {
					popupRankings_html += '<tr class="pronos_rankings_td_bg_dark">';
				} else {
					popupRankings_html += '<tr>';
				}
			} else {
				if( i%2 == 0 ) {
					popupRankings_html += '<tr class="pronos_rankings_td_bg_dark">';
				} else {
					popupRankings_html += '<tr>';
				}
			}
			
			popupRankings_html += '<td class="pronos_rankings_pos_td" valign="top">' ;
			popupRankings_html += '<div class="pronos_rankings_pos" style="font-size:42px; line-height:42px;">' + thePosRanking + '</div>';
			popupRankings_html += '</td>';
			popupRankings_html += '<td>';
			popupRankings_html += '<table cellspacing="0" cellpadding="0" border="0" align="right">';
			popupRankings_html += '<tr>';
			popupRankings_html += '<td align="right">';
			
			var theMemberNameColored_style = "";
			if ( theMemberInRanking == memberid ) {
				theMemberNameColored_style = 'style="color:' + theUserColor + '"';
			} else {
				theMemberNameColored_style = "";
			}

			if ( pronos_members && pronos_members[ theMemberInRanking ] ) {				
				popupRankings_html += '<div title="' + escapeattribute( pronos_getMemberName( theMemberInRanking ) ) + '"   class="pronos_rankings_memberName ' + ' qtxt1 font" ' + theMemberNameColored_style + '>' + escapeHTML( pronos_getMemberName( theMemberInRanking ) ) + '</div>';
			}
			
			popupRankings_html += '</td>';
			popupRankings_html += '</tr>';
			popupRankings_html += '<tr>';
			popupRankings_html += '<td align="right">';
			popupRankings_html += '<div class="pronos_rankings_memberPoints" style="font-size:24px; color:' + theUserColor + '">' + theMemberPoints + '</div>';
			popupRankings_html += '</td>';
			popupRankings_html += '</tr>';
			popupRankings_html += '</table>';
			popupRankings_html += '</td>';
			popupRankings_html += '<td class="pronos_rankingsLogoMembre_td">';
			popupRankings_html += '<div class="pronos_rankingsMemberPictBox">';
			popupRankings_html += '<img width="34px" height="34px" src="' + theMemberPict + '" class="pronos_rankingsMemberPict" />';
			popupRankings_html += '</div>';
			popupRankings_html += '</td>';
			popupRankings_html += '<td  valign="middle">';
			popupRankings_html += '<div class="pronos_rankings_memberProgression pronos_rankings_memberProgression_' + theMemberProgression + '"></div>';
			popupRankings_html += '</td>';
		}
		popupRankings_html += '</tr>';
	}
	popupRankings_html += '</table>';
	return( popupRankings_html );
}

function pronos_arrowUp_click( noteid, columnid ) {
	var div = ge( noteid ) ;
	$( div ).data( "startingRankingMemberPosInCol" )[ columnid ] -= 5;
	$( ".pronos_popup_rankings" + columnid, q_fsm_currentblock() ).html( pronos_setColumnRankings( columnid, div ) );
	qsn_settextproperties( [div] , noteid );	
}

function pronos_arrowDown_click( noteid, columnid ) {
	var div = ge( noteid ) ;
	$( div ).data( "startingRankingMemberPosInCol" )[ columnid ] += 5;
	$( ".pronos_popup_rankings" + columnid, q_fsm_currentblock() ).html( pronos_setColumnRankings( columnid, div ) );
	qsn_settextproperties( [div] , noteid );
}


//parametrage de la fonction pronos_selectevents pour n'avoir que les équipes à sélectionner
function pronos_selectevents() {
	var div = qsn_edittarget;
	var r = qsn_thenotes[ div.id ];
	
	q_events_select( { 
		types : [ "match" ],
		fields : { "match" : [ "localteam" ] },
		values : r.eventstype,
		date : false,
		callback : function( x ) {
			r.eventstype = x;
		}
	} );
}

function pronos_get_ranking_request( turningDay ) {
	var pronos_todayDate = new Date();
	var pronos_todayDay = pronos_todayDate.getDate();
	var pronos_todayWeekDay = ( pronos_todayDate.getDay() + 6 ) % 7;
	var pronos_lastWeekLastDay_int = parseInt( pronos_todayDay ) - ( ( ( pronos_todayWeekDay - $.inArray( turningDay , pronos_week_arr ) + 7 ) % 7 ) + 1 ) ;
	var pronos_lastWeekLastDayDate = new Date();
	pronos_lastWeekLastDayDate.setDate( pronos_lastWeekLastDay_int );
	return "scoreboard?weekday=" + turningDay + "&date=" + $.datepicker.formatDate( "yy-mm-dd", pronos_lastWeekLastDayDate ) ;
}

function pronos_rendermatchs( noteid ) {
	var div = ge( noteid ) ;
	noteid = div.id ;
	var r = qsn_thenotes[ noteid ] ;

	$( div ).data( "pronos_rankingTitle_num", 0 );
	
	var pronos_ranking_request = pronos_get_ranking_request( r.turningDay ) ;
	
	q_ajaxobjgetppty( "pronos" , currsvcid + "/" + noteid, pronos_ranking_request, function( x ) { 
		pronos_rankings[noteid] = x[pronos_ranking_request];
		pronos_loadmembers( function() {
			pronos_setPodium( noteid, pronos_rankings[noteid], 0 );
		} ); 
	} );
	
	if( qsn_currstate != "edit" ) {
		if( q_pagemode() == "view" ) {
			q_ajaxobjgetppty( "pronos" , currsvcid + "/" + noteid, "whole?mid=" + memberid , function( x ) {
				var theBet = x["whole?mid=" + memberid];
				$( div ).data( "theBet", theBet );	
				pronos_rendermatchs_view( div, r , theBet ) ;
			} );
		} else {
			pronos_rendermatchs_view( div, r ) ;
		}
	}
}

function pronos_logourl( logo, mode ) {//mode = "local" || "vs"
	if ( ! logo ) return q_events_defaultlogo( mode ) ;
	return ( typeof logo == "object" ) ? ( q_fsbaseurl() + logo.logourl.formats.square33 ) : logo ;
}

function pronos_getstate( date ) {
	var pronos_todayDate = new Date() ;
	var pronos_todayDay = pronos_todayDate.getDate() ;
	var theMatchDate = q_events_parseDate( date, false ) ;
	var pronos_tomorrowDay_int = parseInt( pronos_todayDay ) + 1;
	var pronos_tomorrowDate = new Date() ;
	pronos_tomorrowDate.setDate( pronos_tomorrowDay_int ) ;
	var matchToday = false, matchDone = false, matchTomorrow = false ;
	
	if( theMatchDate.getFullYear() == pronos_todayDate.getFullYear() && theMatchDate.getMonth() == pronos_todayDate.getMonth() && theMatchDate.getDate() == pronos_todayDay ) {
		matchToday = true;
		matchDone = true;
	} else if( theMatchDate.getFullYear() == pronos_tomorrowDate.getFullYear() && theMatchDate.getMonth() == pronos_tomorrowDate.getMonth() && theMatchDate.getDate() == pronos_tomorrowDate.getDate() ) {
		matchTomorrow = true;
	} else {
		if ( theMatchDate < pronos_todayDate ) matchDone = true;
	}
	
	var o = {
		"matchdone" :  matchDone,
		"matchtoday" :  matchToday,
		"matchtomorrow": matchTomorrow
	} ;
	return o ;
}

function pronos_rendermatchs_view( div, r, theBet ) {
	var noteid = div.id ;
	var theTurningDay = $.inArray( r.turningDay , pronos_week_arr );	
	var pronos_todayDate = new Date();
	var pronos_todayDay = pronos_todayDate.getDate();
	var pronos_tomorrowDay_int = parseInt( pronos_todayDay ) + 1;
	var pronos_tomorrowDate = new Date();
	pronos_tomorrowDate.setDate( pronos_tomorrowDay_int );

	//var selmatchs = q_events_search( [ $.extend( { date : "w-" + theTurningDay } , r.eventstype[ 0 ] ) ] ) ;
	var selmatchs = div.calendar.events ;
	
	// matchs
	var theNameTeamA, theNameTeamB, theTime, theDate, theDateNonFormatted, theScoreA, theScoreB, theLogoTeamA, theLogoTeamB, theMatchAtHome, theLocalTeamID, theComment;
	var matchTomorrow = false;
	var matchToday = false;
	var matchDone = false;
	var theMatchPronoResult, theMatchPronoTeamLeft, theMatchPronoTeamRight;
	var dhtmls = [];
	var listdiv = $( ".pronos_matchslist", div ).empty();	
	
	var nbMatchs = selmatchs.length;
	if( nbMatchs == 0 ) {
		$( ".pronos_matchslist", div ).append( '<div class="pronos_nomatch text_bw qtxt1 font">' + pronos_message[ "noMatchThisWeek" ] + '</div>' );
	} else {
		var i;
		for ( i=0; i < nbMatchs; i++ ) {
			theLocalTeamID = theNameTeamA = theNameTeamB = theTime = theDate = theDateNonFormatted = theScoreA = theScoreB = "";
			matchTomorrow = matchToday = matchDone = false;
			theMatchPronoResult = theMatchPronoTeamLeft = theMatchPronoTeamRight = "";
			var id = selmatchs[ i ].id;
			
			//verif si pari effectué
			var theBetSaved
			for ( theBetSaved in theBet ) {
				if( theBet[theBetSaved] && theBet[theBetSaved].e == id ) {
					if( r.typePronos == "score" ) {
						if( theBet[theBetSaved].k == "s") {
							theMatchPronoTeamLeft = theBet[theBetSaved].p.split( " " )[ 0 ];
							theMatchPronoTeamRight = theBet[theBetSaved].p.split( " " )[ 1 ];
						} else {
							switch( theBet[theBetSaved].p ) {
								case "1" : 
									theMatchPronoTeamLeft = "1";
									theMatchPronoTeamRight = "0";
								break;
								case "N" : 
									theMatchPronoTeamLeft = "1";
									theMatchPronoTeamRight = "1";
								break;
								case "2" :
									theMatchPronoTeamLeft = "0";
									theMatchPronoTeamRight = "1";
								break;
							}
						}
					} else { //1-N-2 ou 1-2
						if( theBet[theBetSaved].k == "s") {
							theMatchPronoTeamLeft = theBet[theBetSaved].p.split( " " )[ 0 ];
							theMatchPronoTeamRight = theBet[theBetSaved].p.split( " " )[ 1 ];
							if( parseInt( theMatchPronoTeamLeft ) > parseInt( theMatchPronoTeamRight ) ) theMatchPronoResult = "1";
							else if( parseInt( theMatchPronoTeamLeft ) == parseInt( theMatchPronoTeamRight ) ) theMatchPronoResult = "N";
							else theMatchPronoResult = "2";
						} else {
							theMatchPronoResult = theBet[theBetSaved].p;
						}
					}
				}			
			}
			
			theLocalTeamID = selmatchs[ i ][ "__localteam" ] ;
			theMatchAtHome = selmatchs[ i ][ "__home" ] ;
			theTime = selmatchs[ i ][ "sel:time" ] ;
			if ( theTime == "00" ) theTime = "" ;
			theDateNonFormatted = selmatchs[ i ][ "date" ] ;
			theDate = $.datepicker.formatDate( "dd M yy", q_events_parseDate( theDateNonFormatted ) ) ;
			theNameTeamA = selmatchs[ i ][ "localteam" ].name;
			theLogoTeamA = pronos_logourl( selmatchs[ i ][ "localteam" ].logo, "local" ) ;
			theNameTeamB = selmatchs[ i ][ "vsteam" ].name;
			theLogoTeamB = pronos_logourl( selmatchs[ i ][ "vsteam" ].logo, "vs" ) ;
			theScoreA = selmatchs[ i ][ "homescore" ] ;
			theScoreB = selmatchs[ i ][ "vsscore" ] ;
			theComment = selmatchs[ i ][ "comment" ] ;
			
			var theDateTime = theDate + "<br />" + theTime;
			var theMatchDate = q_events_parseDate( theDateNonFormatted, false );
			var rowType_class = "";
			var rowTemplate_class = "";
			
			if( theMatchDate.getFullYear() == pronos_todayDate.getFullYear() && theMatchDate.getMonth() == pronos_todayDate.getMonth() && theMatchDate.getDate() == pronos_todayDay ) {
				rowTemplate_class = "pronos_matchDone";
				matchToday = true;
				matchDone = true;
			} else if( theMatchDate.getFullYear() == pronos_tomorrowDate.getFullYear() && theMatchDate.getMonth() == pronos_tomorrowDate.getMonth() && theMatchDate.getDate() == pronos_tomorrowDate.getDate() ) {
				rowTemplate_class = "pronos_matchToBet";
				matchTomorrow = true;
			} else {
				if( theMatchDate < pronos_todayDate ) {
					rowTemplate_class = "pronos_matchDone";
					matchDone = true;
				} else{
					rowTemplate_class = "pronos_matchToBet";
				}
			} if( i%2==0 ) {
				rowType_class = "pronos_table_match_odd";					
			} else {
				rowType_class = "pronos_table_match_even";	
			}
			
			var templateToClone_class = '#' + noteid + ' .pronos_templates .' + rowTemplate_class + '.' + rowType_class;
			
			var newline;
			newline = $(templateToClone_class)
				.clone()
				.removeClass(rowTemplate_class)
				.attr( "eid", id )
				.attr( "matchindex", ( i + 1 ) )
				.addClass(rowTemplate_class)
				.appendTo( listdiv )
				.show()
				.data( "event" , selmatchs[ i ] );
				
			var theSelectTeamPhrase;
			if( matchDone ) theSelectTeamPhrase = pronos_message[ "pronoNotPossible" ];
			else if( r.typePronos == "score" ) theSelectTeamPhrase = pronos_message[ "selectScoreTeam" ];
			else theSelectTeamPhrase = pronos_message[ "selectWinnerTeam" ];
			
			var theNameTeamLeft = ( theMatchAtHome == "0" ) ? theNameTeamA : theNameTeamB;
			var theNameTeamRight = ( theMatchAtHome == "0" ) ? theNameTeamB : theNameTeamA;
			var theLogoTeamLeft = ( theMatchAtHome == "0" ) ? theLogoTeamA : theLogoTeamB;
			var theLogoTeamRight = ( theMatchAtHome == "0" ) ? theLogoTeamB : theLogoTeamA;
			var theScoreLeft = ( theMatchAtHome == "0" ) ? theScoreA : theScoreB;
			var theScoreRight = ( theMatchAtHome == "0" ) ? theScoreB : theScoreA;
			var theSelectTeamPhraseDraw = matchDone ? pronos_message[ "pronoNotPossible" ] : pronos_message[ "draw" ];
			var theTitleTeamLeft = matchDone ? pronos_message[ "pronoNotPossible" ] : theSelectTeamPhrase  + theNameTeamLeft;
			var theTitleTeamRight = matchDone ? pronos_message[ "pronoNotPossible" ] : theSelectTeamPhrase  + theNameTeamRight;
			
			newline.find( "div.pronos_equipeA" ).html( theNameTeamLeft );
			newline.find( "div.pronos_equipeB" ).html( theNameTeamRight );
			newline.find( "img.pronos_logoEquipeA" ).attr( "src", theLogoTeamLeft );
			newline.find( "img.pronos_logoEquipeB" ).attr( "src", theLogoTeamRight );
			newline.find( "div.pronos_equipeA" ).attr( "title", theTitleTeamLeft );	
			newline.find( "div.pronos_equipeB" ).attr( "title", theTitleTeamRight );
			newline.find( "a.pronos_equipeA" ).attr( "title", theTitleTeamLeft );	
			newline.find( "a.pronos_equipeB" ).attr( "title", theTitleTeamRight );
			newline.find( ".pronos_tab1_btn" ).attr( "title", theTitleTeamLeft );	
			newline.find( ".pronos_tab2_btn" ).attr( "title", theTitleTeamRight );
			newline.find( ".pronos_tabN_btn" ).attr( "title", theSelectTeamPhraseDraw );
			newline.find( "div.pronos_equipeA" ).addClass( "qtxt1 font" );
			newline.find( "div.pronos_equipeB" ).addClass( "qtxt1 font" );
			
			newline.attr( "localTeam", theLocalTeamID );
			
			if( matchToday ) {
				newline.find( ".pronos_dateMatch" ).html( pronos_message[ "matchToday" ] + "<br />" + theTime );
				if( qsn_currstate != "edit"  && q_pagemode() == "view" ) {
					newline.find( ".pronos_td_small_left .pronos_small_content" ).addClass( "pronos_cadenas" ).show();
				}			
			} else {
				newline.find( ".pronos_td_small_left .pronos_small_content" ).removeClass( "pronos_cadenas" ); 
				
				if( matchTomorrow ) {
					var alarmClock_div = $( ".pronos_alarmClock", div ).eq(0).clone();
					newline.find( ".pronos_dateMatch" )
					.html( alarmClock_div );
					
					quomodo.events.addTimerListener( "clocktimer" , function( eventData , eventName ) { return pronos_countdown_update( theMatchDate, this, eventData.now ) } , div ) ;

					$( newline ).data( "dateTime" , theDateTime );
				} else {
					newline.find( ".pronos_dateMatch" ).html( theDateTime );
				}
			}
			
			if( r.typePronos == "score" ) {
				newline.find( ".pronos_tableauAffichage_left" ).find( ".pronos_score_txt" ).html( theMatchPronoTeamLeft );
				newline.find( ".pronos_tableauAffichage_left" ).find( ".pronos_tabScoreInput" ).val( theMatchPronoTeamLeft );
				newline.find( ".pronos_tableauAffichage_right" ).find( ".pronos_score_txt" ).html( theMatchPronoTeamRight );
				newline.find( ".pronos_tableauAffichage_right" ).find( ".pronos_tabScoreInput" ).val( theMatchPronoTeamRight );	
					
				if( matchDone ) {
					//if( theScoreLeft != "" && theScoreRight != "" ) { 
						if( qsn_currstate != "edit"  && q_pagemode() == "view" ) {
							newline.find( ".pronos_resultA" ).addClass( "pronos_tab_savedScore pronos_result_tab_savedScore" )
							.html( theMatchPronoTeamLeft )
							.css( "color", pronos_getColorUser( div, false ) );
							newline.find( ".pronos_resultB" ).addClass( "pronos_tab_savedScore pronos_result_tab_savedScore" )
							.html( theMatchPronoTeamRight )
							.css( "color", pronos_getColorUser( div, false ) );
							newline.find( ".pronos_td_small_left .pronos_small_content" ).removeClass( "pronos_cadenas" ); 
						}	
			
						var scoreLeft_arr = ( theScoreLeft == undefined ? "" : theScoreLeft ).split( "" );
						var scoreRight_arr = ( theScoreRight == undefined ? "" : theScoreRight ).split( "" );
						pronos_widthScoreMax = Math.max( pronos_widthScoreMax, 28 );
						
						function pronos_getTabScoreHtml( teamLetter, scoreX_arr ) {
							var htmlScoreX = "";
							var tabPosition = "";
							var widthScoreX = scoreX_arr.length;
							var tabWidth = 21 * 2 + 15 * ( widthScoreX - 2 );
							if( widthScoreX == 0 || widthScoreX == 1 ) tabWidth = 28;
							pronos_widthScoreMax = Math.max( pronos_widthScoreMax, tabWidth );
							var imgWidth = 0;
							var float_align = ( teamLetter == "A" ) ? "right" : "left";
							
							htmlScoreX +=  '<div class="pronos_tabScoreResult_severalTabs_container">';
							htmlScoreX +=  '<div class="pronos_tabScoreResult_severalTabs pronos_tabScoreResult' + teamLetter + '_severalTabs pronos_tabScore_float' + float_align + '" style="width:' + tabWidth + 'px">';
							
							if( widthScoreX == 0 ) htmlScoreX +=  '<img class="pronos_tabScoreResult pronos_tabScoreResult_one pronos_tabQuestdark_btn" src="/images/blank.gif" width="28px" height="39px" />';
							
							var i;
							for( i = 0; i < widthScoreX; i++ ) {
								if( i == 0 ) {
									tabPosition = "left";
									if( widthScoreX == 1 ) { 
										imgWidth = 28;
										tabPosition = "one";
									} else {
										imgWidth = 21;
										tabPosition = "left";
									}
								} else if( i == ( widthScoreX - 1 ) ) {
									tabPosition = "right";
									imgWidth = 21;
								}
								else {
									tabPosition = "center";
									imgWidth = 15;
								}
								htmlScoreX +=  '<img class="pronos_tabScoreResult pronos_tabScoreResult_' + tabPosition + ' pronos_tab' + scoreX_arr[i] + 'dark_btn" src="/images/blank.gif" width="' + imgWidth + 'px" height="39px" />';
							}
							
							htmlScoreX +=  '</div>';
							htmlScoreX +=  '</div>';
							
							return htmlScoreX;						
						}
												
						newline.find( ".pronos_tab_btn" ).removeClass( "pronos_btns pronos_tab_btn pronos_tabLocked pronos_tab1dark_btn pronos_tab2dark_btn pronos_tabScore pronos_tabScoring" );
						newline.find( ".pronos_tab1_btn" ).html( pronos_getTabScoreHtml( "A", scoreLeft_arr ) );
						newline.find( ".pronos_tab2_btn" ).html( pronos_getTabScoreHtml( "B", scoreRight_arr ) );
						newline.find( ".pronos_tableauAffichage_bg" ).css( "width", pronos_widthScoreMax + "px" );
						newline.find( ".pronos_tableauAffichage" ).width( pronos_widthScoreMax + "px" );
						newline.find( ".pronos_tabScoreResult_severalTabs_container" ).width( pronos_widthScoreMax + "px" );
						newline.find( ".pronos_tableauAffichage_left" ).addClass( "pronos_tableauAffichageScore_left" );
						newline.find( ".pronos_tableauAffichage_right" ).addClass( "pronos_tableauAffichageScore_right" );
						
						function pronos_setTabScoreHtml( newline, teamLetter, scoreX_arr ) {
							var widthScoreX = scoreX_arr.length;
							var align;
							var padding;
							var i;
							for( i = 0; i < widthScoreX; i++ ) {
								if( widthScoreX > 1 ) { 
									if ( i == 0 ) {
										align = "left";
										padding = 0;										
									}
									else if ( i == (widthScoreX - 1) ) {
										align = "right";
										padding = 7;
									}
									else {
										align = "center";
										padding = 6;
									}
									var bg_pos = newline.find( ".pronos_tabScoreResult" + teamLetter + "_severalTabs .pronos_tabScoreResult_" + align + ".pronos_tab" + scoreX_arr[i] + "dark_btn", div ).css( "background-position" ).split( "px" )[ 0 ] - padding + "px 0px" ;
									newline.find( ".pronos_tabScoreResult" + teamLetter + "_severalTabs .pronos_tabScoreResult_" + align + ".pronos_tab" + scoreX_arr[i] + "dark_btn", div ).css( "background-position", bg_pos );
								}
							}	
						}
						pronos_setTabScoreHtml( newline, "A", scoreLeft_arr );
						pronos_setTabScoreHtml( newline, "B", scoreRight_arr );						
					//}
				}
			} else {
				newline.find( ".pronos_resultA" )
				.html( theScoreLeft )
				.css( "color", pronos_getColorUser( div, false ) );							
				newline.find( ".pronos_resultB" )
				.html( theScoreRight )
				.css( "color", pronos_getColorUser( div, false ) );
				newline.find( ".pronos_td_small_left .pronos_small_content" ).removeClass( "pronos_cadenas" );
				
				if( theMatchPronoResult != "" ) {
					newline.find( ".pronos_tab_btn.pronos_tab" + theMatchPronoResult + "_btn" )
						.addClass( "pronos_betSaved" )
						.css( { 'border-width': '2px', 'border-color': pronos_getColorUser( div, false ), 'margin': '0px' } );
				}
				if( matchDone ) {
					if( theScoreLeft == "" || theScoreRight == "" ) {
						newline.find( ".pronos_tab_btn.pronos_tab_btn" )
							.addClass( "pronos_tabQuestdark_btn" );
					}
				}
			}
			if( !newline.find( ".pronos_td_small_left .pronos_small_content" ).hasClass( "pronos_cadenas" ) ) {	
				newline.find( ".pronos_resultA" ).addClass( "pronos_result" );
				newline.find( ".pronos_resultB" ).addClass( "pronos_result" );
			}
			
			if( !isNaN( parseInt( theScoreLeft ) ) && !isNaN( parseInt( theScoreRight ) ) ) {
				if( parseInt( theScoreLeft ) > parseInt( theScoreRight ) ) {
					newline.find( ".pronos_tab1_btn" )
						.removeClass( "pronos_tab1clear_btn" )
						.addClass( "pronos_tab1dark_btn" );
				} else if( parseInt( theScoreLeft ) == parseInt( theScoreRight ) ) {
					newline.find( ".pronos_tabN_btn" )
						.removeClass( "pronos_tabNclear_btn" )
						.addClass( "pronos_tabNdark_btn" );
				} else {
					newline.find( ".pronos_tab2_btn" )
						.removeClass( "pronos_tab2clear_btn" )
						.addClass( "pronos_tab2dark_btn" );
				}
			}	
			
			if ( ( q_getuserlevel( memberid ) == "admin" || hasCurrrights( "events" ) ) && q_pagemode() == "edit" ) {
				newline.find( ".pronos_td_small_left .pronos_small_content" ).removeClass( "pronos_cadenas" );
			}
			
			/*if( matchDone ) {
				newline.parent().append( '<div class="pronos_gray_rect" style="width:' + $( div ).width() + 'px"></div>' );
			}*/	
			newline.find( ".pronos_dateMatch" ).addClass( "qtxt1 font" );
			
			$( ".pronos_tableauAffichage_bg", div).width( pronos_widthScoreMax + "px" );
			$( ".pronos_tableauAffichage_bg", div).width( pronos_widthScoreMax + "px" );
			$( ".pronos_tableauAffichage", div).width( pronos_widthScoreMax + "px" );
			$( ".pronos_tableauAffichage", div).width( pronos_widthScoreMax + "px" );
		}
		
		switch(r.typePronos) {
			case "12" : 
				$( ".pronos_tableauAffichage_center .pronos_tableauAffichage_bg", div ).hide();
				$( ".pronos_tableauAffichage_center", div ).css( "width", "0px" );
				$( ".pronos_score_txt", div ).hide();
				break;
			case "1N2" :
				$( ".pronos_tableauAffichage_center", div ).css( "width", "30px" );
				$( ".pronos_tableauAffichage_center .pronos_tableauAffichage_bg", div ).show();
				$( ".pronos_score_txt", div ).hide();
				break;
			case "score" :
				$( ".pronos_tableauAffichage_center .pronos_tableauAffichage_bg", div ).hide();
				$( ".pronos_tableauAffichage_center", div ).css( "width", "0px" );
				$( ".pronos_tab_btn", div )
				.addClass( "pronos_tabScore pronos_tabScoring" );
				
				$( ".pronos_score_txt", div ).show();
				
				$( ".pronos_tabScore", div ).css( "color", pronos_getColorUser( div, true ) );	
				
				break;
			default :	
				//alert( "pronos_renderhtml - bug in switch" );	
		}
		
		qsn_setcolors( noteid ) ;
		qsn_settextproperties( noteid ) ;
	}
	$( ".pronos_matchslist", div ).show();
	pronos_manageButtons( noteid );
	$( ".pronos_wait", div ).hide();
	pronos_init( div ); 
	pronos_setResizable( div ) ;
	//q_changedwidth( div , parseInt( qsn_width( r.common.noteid ) , 10 ) ) ;
	q_changedwidth( div ) ;
	if ( qsn_currstate != "edit" ) qsn_updatenoteheight( div ) ;
}

function pronos_init( div ) {
	pronos_widthScoreMax = 28;
	//$( ".pronos_gray_rect", div ).width( $( div ).width() );
}

/*
function pronos_rgb2hex( rgb ) {
	rgb = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
	return "#" +
	("0" + parseInt(rgb[1],10).toString(16)).slice(-2) +
	("0" + parseInt(rgb[2],10).toString(16)).slice(-2) +
	("0" + parseInt(rgb[3],10).toString(16)).slice(-2);
}
*/

function pronos_getColorUser( div, whiteBg ) {
	var tabScore_color;
	if( rgb2brightness( qsn_getcolor( div.id, "qsn2_qsn1", "bg_self") ) < 50 ) {
		if( whiteBg ) tabScore_color = qsn_getcolor( div.id, "qsn2_qsn1", "bg_self");
		else {
			if( rgb2brightness( qsn_getcolor( div.id, "qsn1", "bg_self") ) < 50 ) tabScore_color = rgb2levelcolor( qsn_getcolor( div.id, "qsn2_qsn1", "bg_self"), 5 ); 
			else tabScore_color = qsn_getcolor( div.id, "qsn2_qsn1", "bg_self");
		}
	} else {
		if( whiteBg ) tabScore_color = rgb2levelcolor( qsn_getcolor( div.id, "qsn2_qsn1", "bg_self"), 3 );
		else {
			if( rgb2brightness( qsn_getcolor( div.id, "qsn1", "bg_self") ) < 50 ) tabScore_color = qsn_getcolor( div.id, "qsn2_qsn1", "bg_self");
			else tabScore_color = rgb2levelcolor( qsn_getcolor( div.id, "qsn2_qsn1", "bg_self"), 3 ); 
		}
	}
	return tabScore_color;		
}
//var theMatchDate = new Date(); //pour tester passage au lendemain
function pronos_countdown_update( matchDate, div ) {
	var theMatchDate = q_events_parseDate( matchDate, false );
	//theMatchDate.setMinutes(55); //pour tester passage au lendemain
	
	var remainingSeconds = Math.floor( ( theMatchDate - ( new Date() ).getTime() ) / 1000 );
	if( remainingSeconds <= 0 ) {			
		var tomorrowLine = $( ".pronos_alarmClock", div ).parents( ".pronos_table_match:eq(0)" );
		
		tomorrowLine
			.removeClass( "pronos_matchToBet" )
			.addClass( "pronos_matchDone" );
			//.after( '<div class="pronos_gray_rect" style="width:' + $( div ).width() + 'px"></div>' );
		tomorrowLine.find( ".pronos_td_bg_clear0" )
			.addClass( "pronos_td_bg_dark0" )	
			.removeClass( "pronos_td_bg_clear0" );
		tomorrowLine.find( ".pronos_td_bg_clear1" )
			.addClass( "pronos_td_bg_dark1" )	
			.removeClass( "pronos_td_bg_clear1" );
		tomorrowLine.find( ".pronos_td_bg_clear2" )
			.addClass( "pronos_td_bg_dark2" )	
			.removeClass( "pronos_td_bg_clear2" );
			
		tomorrowLine.find( ".pronos_tab_btn" ).addClass( "pronos_tabLocked" );	
		var thematchdate = tomorrowLine.data( "dateTime" );
		$( ".pronos_alarmClock", div ).parent().html( thematchdate );
		
		/*$( ".pronos_gray_rect", div ).mouseover( function() {
			$( this ).prev( ".pronos_table_match" ).mouseover();
		} )*/;
		
		/*$( ".pronos_gray_rect", div ).mouseout( function() {
			$( this ).prev( ".pronos_table_match" ).mouseout();
		} );*/
		
		
		return true;//kill the timer
	} else {
		$( ".pronos_alarmClockBg div", div ).html( pronos_countdown_timestring ( Math.abs(remainingSeconds) ) );
	}
}

function pronos_countdown_timestring( t ) {
	var s = twodigs( t % 60 ) ;
	t = Math.floor ( t / 60 ) ;
	
	if( t == 0 ) return "00:00:" + s ;
	s = twodigs( t % 60 ) + ":"  + s ;
	t = Math.floor ( t / 60 ) ;

	if( t == 0 ) return "00:" + s ;
	s = twodigs( t % 24 ) +  ":" + s ;
		
	return s ;
}

function pronos_showRules() {
	var noteid = qsn_edittarget.id;
	pronos_openRules( noteid );
} 

function pronos_openRules( noteid ) {
	var div = ge( noteid ) ;
	var r = qsn_thenotes[noteid];
	var theCustomrules = "";
	if( r.customrules != "" ) theCustomrules = "<br /><br />" + pronos_message[ "customRulesTitle" ] +  r.customrules;
	
	var popup_html = "";
	popup_html += '<div class="pronos_popups ' + qsn_container_classstyle( r ) + '">';
	popup_html += '<div class="pronos_popup_rules qsn2_qsn1 isdark_self">';
	popup_html += '<div class="pronos_menutitle qsn2_qsn1 bg_self__isdark_self qsn3_qsn2_qsn1 text_self_bw">';
	popup_html += '<img class="pronos_menutitle_gloss" src="/services/pronos/images/menu_bg.png" width="100%" height="25px" />';
	popup_html += '<div class="pronos_menutitle_txt">' + pronos_message[ "rulesTitle" ] + '</div>';
	popup_html += '<div class="pronos_btn_bg_close qsn2_qsn1 isdyndark_icon">';
	popup_html += '<div class="pronos_btn_bg qsn3_qsn2_qsn1 text_self_bw">';
	popup_html += '<div title="' + pronos_message[ "close" ] + '" class="pronos_btns pronos_close_btn pronos_icons" onclick="q_fsm_delete(); return false;"></div>';
	popup_html += '</div>';
	popup_html += '</div>';
	popup_html += '</div>';
	popup_html += '<div class="pronos_popup_container pronos_popup_container_rules qtxt1 font" onmousedown="q_stopPropagation( event )">';
	popup_html += pronos_message[ "defaultRules" ] + theCustomrules;
	popup_html += '</div>';
	popup_html += '</div>';
	popup_html += '</div>';
	
	q_fsm_reveal( {
		src: popup_html,
		hideheader: true,
		padding: 0,
		reveal_callback: function( div , json ){
			qsn_setcolors( [ div ] , noteid ) ;
			$( div ).data( "noteid", noteid );	
			qsn_settextproperties( [div] , noteid );	
		}
	} );	
}

function pronos_rules_showExample() {
	var noteid = $( q_fsm_currentblock() ).data( "noteid" );
	var r = qsn_thenotes[ noteid ] ;
	var popup_html = "";
	popup_html += '<div class="pronos_popups ' + qsn_container_classstyle( r ) + '">';
	popup_html += '<div class="pronos_popup_showExample qsn2_qsn1 isdark_self">';
	popup_html += '<div class="pronos_menutitle qsn2_qsn1 bg_self__isdark_self qsn3_qsn2_qsn1 text_self_bw">';
	popup_html += '<img class="pronos_menutitle_gloss" src="/services/pronos/images/menu_bg.png" width="100%" height="25px" />';
	popup_html += '<div class="pronos_menutitle_txt">' + pronos_message["exempleRulesTitle" ] + '</div>';
	popup_html += '<div class="pronos_btn_bg_close qsn2_qsn1 isdyndark_icon">';
	popup_html += '<div class="pronos_btn_bg qsn3_qsn2_qsn1 text_self_bw">';
	popup_html += '<div title="' + pronos_message[ "close" ] + '" class="pronos_btns pronos_close_btn pronos_icons" onclick="q_fsm_delete(); return false;"></div>';
	popup_html += '</div>';
	popup_html += '</div>';
	popup_html += '</div>';
	popup_html += '<div class="pronos_popup_container pronos_popup_container_rules pronos_popup_container_rulesExample qtxt1 font" onmousedown="q_stopPropagation( event )">';
	popup_html += pronos_message[ "exampleRules" ];
	popup_html += '</div>';
	popup_html += '</div>';
	popup_html += '</div>';
	
	q_fsm_reveal( {
		src: popup_html,
		hideheader: true,
		padding: 0,
		reveal_callback: function( div , json ){
			qsn_setcolors( [ div ] , noteid ) ;	
			qsn_settextproperties( [div] , noteid );	
		}
	} );
}

/*
function -
function TOOLBAR
*/
function pronos_toolbaroptions( elem ) {
	return qsn_toolbaroptions( elem , true ).concat( [ "razcounter" ] ) ;
}

function pronos_razcounternote( div ) {
	q_confirm( pronos_message[ "razcounter_confirm" ],  
		function() {	
			q_ajaxobjsetppty( "pronos", currsvcid + "/" + div.id, { "whole": 0 }, function( x ) {
				q_bubble( pronos_message[ "razcounter" ] ) ;
			} ) ;
		} 
	) ;
}

/*
function -
function EDIT
*/

function pronos_saveedit() {
	var r = qsn_thenotes[ qsn_edittarget.id ] ;

	var desc = $( ".pronos_desc", qsn_edittarget ).val();
	r.intro = ( desc && desc != pronos_message[ "notedescprompt" ] ) ? desc : "";
	
	var rules = $( ".pronos_gamerules", qsn_edittarget ).val();
	r.customrules = ( rules && rules != pronos_message[ "gamerulesprompt" ] ) ? rules : "";

	r.typePronos = $( ".pronos_typePronos:checked",qsn_edittarget ).attr( "value" );
		
	qsn_saveedit( true ) ;
}

function pronos_getMemberName( memberId ) {
	var res = [] ;
	var firstname = pronos_members[ memberId ].firstname ;
	if ( firstname ) res.push( firstname ) ;
	var username = ( pronos_members[ memberId ].username ) ? ( " " + pronos_members[ memberId ].username.charAt( 0 ) + "." ) : "" ;
	if ( username ) res.push( username ) ;
	return res.join( " " ) ;
}

var pronos_js_loaded = true ;
if( window.qdyn_loaded ) qdyn_loaded ( "pronos_js_loaded" ) ;

var photoboxes_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Planche photos" ,
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "Planche Photos_Créez une planche photos à partir de vos images." ,
"desc" : "La note Planche Photos propose une façon originale de présenter des photos, sous forme d'une planche photos.",
"upload_title" : "Importer des photos",
"upload_prompt" : "Cliquez sur OK pour sélectionner les photos à importer",
"thefile" : "Cliquez ici pour ouvrir le fichier ",
"nofiles" : "Vous devez sélectionner au moins une image avant de valider.",
"toomanyfiles" : "Trop de fichiers ! Afin de limiter le temps de chargement de la note, le nombre d'images est limité à %s. Merci d'enlever quelques images...",
"confirmdelete" : "Êtes-vous sûr de vouloir enlever cette image ?",
"suppressnote" : "Êtes-vous certain de vouloir supprimer cette note ?\n\nATTENTION : ceci ne supprime pas les images de votre espace de stockage. Pour libérer l'espace de stockage qui est occupé par vos images, ouvrez votre panneau « Fichiers chargés sur le site » et supprimez les images.",
"suppressnote_bubble" : "Pour libérer de l'espace de stockage, ouvrez votre panneau « Fichiers chargés sur le site ».",
"deletefilealt" : "Supprimer cette image", 
"imgratio0" : "Trés allongées" ,
"imgratio1" : "Allongées" ,
"imgratio2" : "Normales" ,
"imgratio3" : "Carrées" ,
"imgratio4" : "Etroites" ,
"imgratio5" : "Trés étroites" ,
"imgratio" : "Forme des images" ,
"taboptions" : "Options de la note",
"scale" : "Echelle des images : ", 
"fit" : "Adpater à la note",
"crop" : "Couper l'image", 
"noScale" : "Pas de mise à l'échelle",
"thumbwidth" : "Taille miniatures : ",
"thumbwidthmin" : "petites",
"thumbwidthmax" : "grandes",
"commentsandlinks" : "Commentaires et liens",
"downloadlinks" : "Remplir automatiquement les commentaires et liens avec ceux des images originales"
} ;

var photoboxes_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "photoboxes_msgs_fr_js_loaded" ) ;

var photoboxes_json_template = { version: 2 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "false", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, images : [], sortoptions : { target: "rank" , order: "down" } , imgratio : "2" , options : { scale : "crop", thumbwidth : 80, rsslink : "", downloadlinks : "false" } } ;

var photoboxes_colordesc = {
	"qmc3" : function( r ){
		if ( r.header.icon == "false" ) return "" ;
		return "/services/photoboxes/images/photoboxes48.png" ;
	}
} ; 
var photoboxes_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" } } ;

function photoboxes_upgradejson( r ) {
	if ( ! r.version ) r.version = 1 ;
	if ( r.version == photoboxes_json_template.version ) return r ;
	if ( r.version < 2 ) r = photoboxes_upgradejsontov2( r ) ;
	r.version = photoboxes_json_template.version ;
	return r ;
}

function photoboxes_upgradejsontov2( r ) {
	r.options.downloadlinks = "false";
	return r ;
}

function photoboxes_initforweb( id ) {
	photoboxes_renderplayer( ge( id ), qsn_thenotes[ id ] ) ;
}

function photoboxes_renderplayer( div, r ){
	if ( q_pagemode() == "makeweb" && ! q_currsvcisweb() ) return ;
	var thefilename =  $( div ).attr( "filename" ) ;
	if ( ! thefilename ) return ;
	var playerurl = "/services/photoboxes/player/photoboxes.swf";
	var flashvars = { XMLFile: thefilename };
	var params = { wmode: "transparent", allowFullScreen: "true", allowScriptAccess : "always"};

	if ( q_pagemode() != "makeweb" && ! swfobject.hasFlashPlayerVersion("1") ) {
		// check if SWF hasn't been removed, if this is the case, create a new alternative content container
		if ( ge( div.id + "_swfelem" ) ) swfobject.removeSWF( div.id + "_swfelem") ;
		if ( ! ! document.createElement('canvas').getContext ) {
			var $playerdiv = $( ".photoboxes_playerdiv:eq(0)", div ) ;
			if ( ! $( "#" + div.id + "_swfelem" ).length ) $playerdiv.append( '<div id="' + div.id + "_swfelem" + '"></div>' ) ;
			q_include( { urls : [ "/scripts/flashgallery.js" ] } , function(){
				$( "#" + div.id + "_swfelem" ).altgallery( { galleryName: "box", background: "transparent", config: thefilename, width: $playerdiv.css( "width" ), height: $playerdiv.css( "height" ) } ) ;
			} ) ;
		}
	} else {
		// check if SWF hasn't been removed, if this is the case, create a new alternative content container
		if ( ge( div.id + "_swfelem" ) ) {
			if ( ge( div.id + "_swfelem" ).childNodes.length > 0 ) return ; // 2013-05-21, vh : on évite de refaire le player s'il est déjà là
			else swfobject.removeSWF( div.id + "_swfelem") ;
		}
		gebcn( div, "photoboxes_playerdiv").appendChild( create_elem( "DIV", { id : div.id + "_swfelem" } ) );
		swfobject.embedSWF( playerurl, div.id + "_swfelem" ,"100%", "100%", "9.0.0", false, flashvars, params);
	}
}


var photoflow_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Photo flow" ,
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "Photo Flow_Créez un super effet façon iTunes® pour présenter vos photos." ,
"desc" : "La note Photo Flow propose de faire défiler vos photos comme les morceaux dans iTunes®.",
"upload_title" : "Importer des photos",
"upload_prompt" : "Cliquez sur OK pour sélectionner les photos à importer",
"thefile" : "Cliquez ici pour ouvrir le fichier ",
"nofiles" : "Vous devez sélectionner au moins une image avant de valider.",
"toomanyfiles" : "Trop de fichiers ! Afin de limiter le temps de chargement de la note, le nombre d'images est limité à %s. Merci d'enlever quelques images...",
"confirmdelete" : "Êtes-vous sûr de vouloir enlever cette image ?",
"suppressnote" : "Êtes-vous certain de vouloir supprimer cette note ?\n\nATTENTION : ceci ne supprime pas les images de votre espace de stockage. Pour libérer l'espace de stockage qui est occupé par vos images, ouvrez votre panneau « Fichiers chargés sur le site » et supprimez les images.",
"suppressnote_bubble" : "Pour libérer de l'espace de stockage, ouvrez votre panneau « Fichiers chargés sur le site ».",
"deletefilealt" : "Supprimer cette image", 
"imgratio0" : "Trés allongées" ,
"imgratio1" : "Allongées" ,
"imgratio2" : "Normales" ,
"imgratio3" : "Carrées" ,
"imgratio4" : "Etroites" ,
"imgratio5" : "Trés étroites" ,
"imgratio" : "Forme des images" ,
"taboptions" : "Options de la note",
"scale" : "Echelle des images : ", 
"fit" : "Adpater à la note",
"crop" : "Couper l'image", 
"noScale" : "Pas de mise à l'échelle",
"imageangle" : "Angle des images : ",
"imageanglemin" : "petit",
"imageanglemax" : "grand",
"slideshow" : "Lecture automatique", 
"slideshowdelay" : "Délai entre les images",
"showscrollbar" : "Afficher la barre de controle",
"commentsandlinks" : "Commentaires et liens",
"downloadlinks" : "Remplir automatiquement les commentaires et liens avec ceux des images originales",
"position" : "Position de départ",
"left" : "gauche",
"center" : "centre", 
"right" : "droite"
} ;

var photoflow_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "photoflow_msgs_fr_js_loaded" ) ;

//var photoflow_json_template = { version: 2 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "false", color: "c1", text : "" } , images : [] , options : { showscrollbar : "true", imageangle : 30, slideshow : "true", slideshowdelay : "2", xmlfile : "", position : "center" } } ;

var photoflow_json_template = { version: 3 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "false", text : "", icon: "false" } , images : [], sortoptions : { target: "rank" , order: "down" } , options : { showscrollbar : "true", imageangle : 30, slideshow : "true", slideshowdelay : "2", xmlfile : "", position : "center", downloadlinks : "false" } } ;

var photoflow_colordesc = { 
	"qmc3" : function( r ){
		if ( r.header.icon == "false" ) return "" ;
		return "/services/photoflow/images/photoflow48.png" ;
	}
} ; 

function photoflow_upgradejson( r ) {
	if ( r.version == photoflow_json_template.version ) return r ;
	if ( r.version < 2 ) r = photoflow_upgradejsontov2( r ) ;
	if ( r.version < 3 ) r = photoflow_upgradejsontov3( r ) ;
	r.version = photoflow_json_template.version ;
	return r ;
}

function photoflow_upgradejsontov2 ( r ) {
	r.options.position = "center";
	return r ;
}

function photoflow_upgradejsontov3( r ) {
	r.options.downloadlinks = "false";
	return r ;
}

function photoflow_initforweb( id ) {
	photoflow_renderplayer( ge( id ), qsn_thenotes[ id ] ) ;
}

function photoflow_renderplayer( div, r ){
	if ( q_pagemode() == "makeweb" && ! q_currsvcisweb() ) return ;
	if ( r.options.xmlfile && r.options.xmlfile != "undefined" ) var thefilename = r.options.xmlfile;
	else {
		var thefilename =  $( div ).attr( "filename" ) ;
		if ( ! thefilename ) return ;
	}
	var playerurl = "/services/photoflow/player/photoflow.swf";
	var flashvars = { XMLFile: thefilename };
	var params = { wmode: "transparent", allowFullScreen: "true", allowScriptAccess : "always"};
	
	if ( q_pagemode() != "makeweb" && ! swfobject.hasFlashPlayerVersion("1") ) {
		// check if SWF hasn't been removed, if this is the case, create a new alternative content container
		if ( ge( div.id + "_swfelem" ) ) swfobject.removeSWF( div.id + "_swfelem") ;
		if ( ! ! document.createElement('canvas').getContext ) {
			var $playerdiv = $( ".photoflow_playerdiv:eq(0)", div ) ;
			if ( ! $( "#" + div.id + "_swfelem" ).length ) $playerdiv.append( '<div id="' + div.id + "_swfelem" + '"></div>' ) ;
			q_include( { urls : [ "/scripts/flashgallery.js" ] } , function(){
				$( "#" + div.id + "_swfelem" ).altgallery( { galleryName: "photoflow", background: "transparent", config: thefilename, width: $playerdiv.css( "width" ), height: $playerdiv.css( "height" ) } ) ;
			} ) ;
		}
	} else {
		// check if SWF hasn't been removed, if this is the case, create a new alternative content container
		if ( ge( div.id + "_swfelem" ) ) {
			if ( ge( div.id + "_swfelem" ).childNodes.length > 0 ) return ; // 2013-05-21, vh : on évite de refaire le player s'il est déjà là
			else swfobject.removeSWF( div.id + "_swfelem") ;
		}
		gebcn( div, "photoflow_playerdiv").appendChild( create_elem( "DIV", { id : div.id + "_swfelem" } ) );
		swfobject.embedSWF( playerurl, div.id + "_swfelem" ,"100%", "100%", "9.0.0", false, flashvars, params);
	}
}
	

var photoslider_message = {
"newnoteprompt" : "Cliquez ici pour créer une nouvelle note Diapo Photos" ,
"notetitleprompt" : "Cliquez ici pour ajouter un titre." ,
"notedescprompt" : "Entrez ici votre description",
"plug" : "Diapo Photos_Créez un diaporama de photos pour les partager avec vos visiteurs." ,
"desc" : "La note Diapo Photos permet de créer un diaporama de photos à configurer comme vous le souhaitez",
"upload_title" : "Importer des photos",
"upload_prompt" : "Cliquez sur OK pour sélectionner les photos à importer",
"thefile" : "Cliquez ici pour ouvrir le fichier ",
"nofiles" : "Vous devez sélectionner au moins une image avant de valider.",
"toomanyfiles" : "Trop de fichiers ! Afin de limiter le temps de chargement de la note, le nombre d'images est limité à %s. Merci d'enlever quelques images...",
"confirmdelete" : "Êtes-vous sûr de vouloir enlever cette image ?",
"suppressnote" : "Êtes-vous certain de vouloir supprimer cette note ?\n\nATTENTION : ceci ne supprime pas les images de votre espace de stockage. Pour libérer l'espace de stockage qui est occupé par vos images, ouvrez votre panneau « Fichiers chargés sur le site » et supprimez les images.",
"suppressnote_bubble" : "Pour libérer de l'espace de stockage, ouvrez votre panneau « Fichiers chargés sur le site ».",
"deletefilealt" : "Supprimer cette image", 
"imgratio0" : "Trés allongées" ,
"imgratio1" : "Allongées" ,
"imgratio2" : "Normales" ,
"imgratio3" : "Carrées" ,
"imgratio4" : "Etroites" ,
"imgratio5" : "Trés étroites" ,
"imgratio" : "Forme des images" ,
"tabdiapooptions" : "Diaporama",
"tabthumbsoptions" : "Miniatures",
"autostart" : "Lecture automatique",
"downloadlinks" : "Remplir automatiquement les commentaires et liens avec ceux des images originales",
"loop" : "Lecture en boucle",
"showbuttons" : "Afficher les boutons", 
"scale" : "Echelle des images : ", 
"fit" : "L'image s'affiche en entier dans la note",
"fill" : "L'image remplit tout l'espace disponible", 
"noScale" : "Pas de mise à l'échelle",
"phototimer" : "Délai entre les images : ",
"thumbposition" : "Position des miniatures : ",
"nothumbs" : "Pas de miniatures", 
"left" : "A gauche", 
"right" : "A droite", 
"top" : "En haut", 
"bottom" : "En bas",
"center" : "Au centre",
"align" : "Alignement des images : ",
"thumbwidth" : "Taille : ",
"thumbwidthmin" : "petites",
"thumbwidthmax" : "grandes",
"thumbpreview" : "Afficher l'aperçu", 
"transition" : "Transition : ",
"fade" : "Fondu", 
"zoom" : "Zoom", 
"pixel" : "Pixel"
} ;

var photoslider_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "photoslider_msgs_fr_js_loaded" ) ;

var photoslider_json_template = { version: 2 ,  text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, images : [], sortoptions : { target: "rank" , order: "down" } , imgratio : "2" , options : { transition : "fade", autostart : "false", showbuttons : "true", loop : "true", scale : "fill", align : "center", phototimer : "5", thumbposition : "bottom", thumbwidth : 60, thumbpreview : "false", rsslink : "", downloadlinks : "false" } } ;

var photoslider_colordesc = {
	"qmc3" : function( r ){
		if ( r.header.icon == "false" ) return "" ;
		return "/services/photoslider/images/photoslider48.png" ;
	}
} ; 
var photoslider_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" } } ;

function photoslider_upgradejson( r ) {
	if ( ! r.version ) r.version = 1 ;
	if ( r.version == photoslider_json_template.version ) return r ;
	if ( r.version < 2 ) r = photoslider_upgradejsontov2( r ) ;
	r.version = photoslider_json_template.version ;
	return r ;
}

function photoslider_upgradejsontov2( r ) {
	r.options.downloadlinks = "false";
	return r ;
}

function photoslider_initforweb( id ) {
	photoslider_renderplayer( ge( id ), qsn_thenotes[ id ] ) ;
}

function photoslider_renderplayer( div, r ){
	if ( q_pagemode() == "makeweb" && ! q_currsvcisweb() ) return ;
	var thefilename =  $( div ).attr( "filename" ) ;
	if ( ! thefilename ) return ;
	var playerurl = "/services/photoslider/player/photoslider.swf";
	var flashvars = { XMLFile: $( div ).attr( "filename" ) };
	var params = { wmode: "transparent", allowFullScreen: "true", allowScriptAccess : "always", bgColor : rgb2hex( getrealcolor( r.color ) ) };
	
	if ( q_pagemode() != "makeweb" && ! swfobject.hasFlashPlayerVersion("1") ) {
		// check if SWF hasn't been removed, if this is the case, create a new alternative content container
		if ( ge( div.id + "_swfelem" ) ) swfobject.removeSWF( div.id + "_swfelem") ;
		if ( ! ! document.createElement('canvas').getContext ) {
			var $playerdiv = $( ".photoslider_playerdiv:eq(0)", div ) ;
			if ( ! $( "#" + div.id + "_swfelem" ).length ) $playerdiv.append( '<div id="' + div.id + "_swfelem" + '"></div>' ) ;
			q_include( { urls : [ "/scripts/flashgallery.js" ] } , function(){
				$( "#" + div.id + "_swfelem" ).altgallery( { galleryName: "art", background: rgb2hex( getrealcolor( r.color ) ), config: thefilename, width: $playerdiv.css( "width" ), height: $playerdiv.css( "height" ) } ) ;
			} ) ;
		}
	} else {
		// check if SWF hasn't been removed, if this is the case, create a new alternative content container
		if ( ge( div.id + "_swfelem" ) ) {
			if ( ge( div.id + "_swfelem" ).childNodes.length > 0 ) return ; // 2013-05-21, vh : on évite de refaire le player s'il est déjà là
			else swfobject.removeSWF( div.id + "_swfelem") ;
		}
		$( ".photoslider_playerdiv:eq(0)", div ).empty().append( '<div id="' + div.id + '_swfelem"></div>' );
		swfobject.embedSWF( playerurl, div.id + "_swfelem" ,"100%", "100%", "9.0.0", false, flashvars, params);
	}
}


var rss_message = {
"deleteprompt" : "Etes-vous sûr de vouloir supprimer ce fil RSS ?",
"notetitleprompt" : "Entrez le titre de la note",
"notedescprompt" : "Entrez ici votre description",
"exist" : "Ce fil RSS figure déjà dans la liste",
"howto" : "comment ça marche ?",
"chosenews" : "Choisissez votre groupe d'actualités",
"cancel" : "annuler",
"validate" : "ok" ,
"close" : "fermer",
"confirmdelete" : "Etes-vous sûr de vouloir supprimer ce flux RSS de votre liste : ",
"notyet" : "Cette fonction n'est pas encore disponible",
"plug" : "RSS_Affichez les infos de vos sites préférés avec leurs fils RSS." ,
"nourl" : "Veuillez rentrer une adresse pour le flux." , 
"norss" : "Veuillez renseigner au moins un flux RSS, ou cliquez sur annuler." , 
"taboptions" : "Options de la note" ,
"displayfeed" : "Afficher : ", 
"displaydesc" : "Le contenu des articles" ,
"displaydate" : "La date de chaque article" ,
"nbfeed" : "Nb d'articles par page : ", 
"clicknews" : "Clic sur une news...", 
"openswebsite" : "va directement sur le site", 
"invalidfeed" : "Cette adresse ne correspond pas à un flux RSS. Merci de réessayer avec une autre adresse.",
"addfeed" : "Ajouter un flux RSS à la liste" , 
"addfeed_title" : "Indiquez le titre du Flux : ",
"addfeed_url" : "Indiquez l'adresse (URL) du Flux : ",
"addfeed_preset" : "Sélectionnez un élément du menu ci-dessous, ou bien indiquez le titre et l'url du flux rss à ajouter :",
"addfeed_preset_select" : "Flux préselectionnés",
"addfeed_preset_choose" : "Sélectionnez un flux RSS", 
"addfeed_ownfeed" : "<u>Remarque :</u><br />Votre site aussi a son flux RSS (<span class=\"rss_ownfeed\"></span>), constitué avec le contenu des dernières notes \"Billet\" publiées. <br />Pensez à l'utiliser pour présenter les nouveautés de votre club, ou à le communiquer à vos membres."
} ;

/* la listes des RSS selon les sites
sport365.fr : http://www.sport365.fr/rss/liste.shtml
sport.fr : http://www.sport.fr/RSS.shtm
sport24.com : http://www.sport24.com/tous-les-rss
francetv.fr : http://sport.francetv.fr/rss
lequipe.fr : http://www.lequipe.fr/rss/
*/

var rss_default_feeds = { 
"Billard" : [
{ name : "FFBillard (Billard) - Info Fédé", url : "http://www.ffbillard.com/index.php?option=com_rss&feed=RSS2.0&no_html=1" }
],
"Boxe" : [
{ name : "Sport365 - Les Articles - Boxe", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1365" },
{ name : "Eurosport - Boxe", url : "http://www.eurosport.fr/boxe/rss-flash.xml" }
],
"Judo" : [
{ name : "Sport365 - Les Articles - Judo", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1371" }
],
"Tennis" : [
{ name : "Sport.fr - Tennis", url : "http://www.sport.fr/RSS/sport3.xml" },
{ name : "Sport.fr - Roland Garros", url : "http://www.sport.fr/rss/rss3.aspx?sport=2571" },
{ name : "Sport365 - Les Articles - Tennis", url : "http://sport365.feedsportal.com/c/356/f/599900/index.rss" },
{ name : "Sport24 - L'intégrale Tennis", url : "http://www.sport24.com/rssfeeds/sport24-tennis.xml" },
{ name : "Sport24 - Tennis - ATP", url : "www.sport24.com/layout/set/smilerss/content/view/smilerss/118" },
{ name : "Sport24 - Tennis - WTA", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/122" },
{ name : "Sport24 - Tennis - Coupe Davis", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/126" },
{ name : "Sport24 - Tennis - Fed Cup", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/128" },
{ name : "Sport24 - Tennis - Roland Garros", url : "www.sport24.com/layout/set/smilerss/content/view/smilerss/133" },
{ name : "Sport24 - Tennis - Open Australie", url : "www.sport24.com/layout/set/smilerss/content/view/smilerss/129" },
{ name : "Sport24 - Tennis - US Open", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/2186" },
{ name : "Sport24 - Tennis - Wimbledon", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/137" },
{ name : "Eurosport - Tennis", url : "http://www.eurosport.fr/tennis/rss-flash.xml" },
{ name : "L'équipe - Tennis", url : "http://www.lequipe.fr/Xml/Tennis/Titres/actu_rss_Tennis.xml" },
{ name : "FranceTV - Tennis", url : "http://feeds.feedburner.com/francetv-sports/tennis?format=xml" },
{ name : "Le Figaro - Tennis", url : "http://www.lefigaro.fr/rss/figaro_tennis.xml" }
],
"Basket" : [
{ name : "Sport.fr - Basket France/Europe", url : "www.sport.fr/RSS/sport4.xml" },
{ name : "Sport365 - Les Articles - Basket", url : "http://sport365.feedsportal.com/c/356/f/599889/index.rss" },
{ name : "Sport24 - L'intégrale Basket/NBA", url : "http://www.sport24.com/rssfeeds/sport24-basket.xml" },
{ name : "Sport24 - Basket Pro A", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/150" },
{ name : "Sport24 - Basket NBA", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/154" },
{ name : "Sport24 - Basket Euroligue", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/157" },
{ name : "Eurosport - Basket", url : "http://www.eurosport.fr/basketball/rss-flash.xml" },
{ name : "L'équipe - Basket", url : "http://www.lequipe.fr/Xml/Basket/Titres/actu_rss_Basket.xml" },
{ name : "FranceTV - Basket, Hand et Volley", url : "http://feeds.feedburner.com/francetv-sports/basket-hand-volley?format=xml" },
{ name : "Le Figaro - Basket", url : "http://www.lefigaro.fr/rss/figaro_basket.xml" },
{ name : "Google news - Basket", url : "http://news.google.com/news?ned=fr&hl=fr&ned=fr&q=basket&ie=UTF-8&output=rss" }
],
"Football" : [
{ name : "Sport.fr - Football", url : "http://www.sport.fr/RSS/sport1.xml" },
{ name : "Sport.fr - Ligue 1", url : "http://www.sport.fr/rss/rss3.aspx?sport=4221" },
{ name : "Sport.fr - Ligue des champions", url : "http://www.sport.fr/rss/rss3.aspx?sport=147" },
{ name : "Sport.fr - Equipe de France", url : "http://www.sport.fr/rss/rss3.aspx?sport=975" },
{ name : "Sport.fr - Euro 2008", url : "http://www.sport.fr/rss/rss3.aspx?sport=1184" },
{ name : "Sport365 - Les Articles - Football", url : "http://www.sport365.fr/rss/filinfo.xml?collection=33" },
{ name : "Sport24 - L'intégrale Football", url : "http://www.sport24.com/rssfeeds/sport24-football.xml" },
{ name : "Sport24 - Football - Ligue 1", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/60" },
{ name : "Sport24 - Football - Ligue 2", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/70" },
{ name : "Sport24 - Football - Coupe de France", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/78" },
{ name : "Sport24 - Football - Coupe de la Ligue", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/81" },
{ name : "Sport24 - Football - Championnats étrangers", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/84" },
{ name : "Sport24 - Football - Allemagne", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/995" },
{ name : "Sport24 - Football - Angleterre", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/996" },
{ name : "Sport24 - Football - Italie", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/1000" },
{ name : "Sport24 - Football - Espagne", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/999" },
{ name : "Sport24 - Football - Portugal", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/1002" },
{ name : "Sport24 - Football - Ligue des Champions", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/94" },
{ name : "Sport24 - Football - Coupe UEFA", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/101" },
{ name : "Sport24 - Football - Equipe de France", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/108" },
{ name : "Sport24 - Football - Euro 2008", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/4829" },
{ name : "Eurosport - Football", url : "http://www.eurosport.fr/football/rss-flash_sea70.xml" },
{ name : "L'équipe - Foot  ", url : "http://www.lequipe.fr/Xml/Football/Titres/actu_rss.xml" },
{ name : "FranceTV - Football", url : "http://feeds.feedburner.com/francetv-sports/football?format=xml" },
{ name : "Le Figaro - Football", url : "http://www.lefigaro.fr/rss/figaro_football.xml" }
],
"Handball" : [
{ name : "Sport.fr - Basket, Hand et Volley", url : "http://www.sport.fr/RSS/sport4.xml" },
{ name : "Sport365 - Les Articles - Handball", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1370" },
{ name : "Sport24 - L'intégrale Handball", url : "http://www.sport24.com/rssfeeds/sport24-handball.xml" },
{ name : "Sport24 - Handball - Division 1", url : "http://www.sport24.com/rssfeeds/sport24-handball.xml" },
{ name : "L'équipe - Handball", url : "http://www.lequipe.fr/Xml/Basket/Titres/actu_rss_Hand.xml" },
{ name : "FranceTV - Basket, Hand et Volley", url : "http://feeds.feedburner.com/francetv-sports/basket-hand-volley?format=xml" }
],
"Hockey sur Gazon" : [
{ name : "FFHockey (Hockey) - Info Fédé", url : "http://www.ffhockey.org/index2.php?option=com_rss&feed=RSS2.0&no_html=1" }
],
"Rugby" : [
{ name : "Sport.fr - Rugby", url : "http://www.sport.fr/RSS/sport2.xml" },
{ name : "Sport365 - Les Articles - Rugby", url : "http://rugby365.feedsportal.com/c/32983/f/532370/index.rss" },
{ name : "Sport24 - L'intégrale Rugby", url : "http://www.sport24.com/rssfeeds/sport24-rugby.xml" },
{ name : "Sport24 - Rugby - Top 14", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/169" },
{ name : "Sport24 - Rugby - H Cup", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/174" },
{ name : "Sport24 - Rugby - VI Nations", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/177" },
{ name : "RugbyRama - Rugby  ", url : "http://www.rugbyrama.fr/rugby/rss.xml" },
{ name : "RugbyRama - Top 14", url : "http://www.rugbyrama.fr/rugby/top-14/rss.xml" },
{ name : "RugbyRama - Coupe d'Europe", url : "http://www.rugbyrama.fr/rugby/coupe-d-europe/rss.xml" },
{ name : "RugbyRama - Six Nations", url : "http://www.rugbyrama.fr/rugby/6-nations/rss.xml" },
{ name : "RugbyRama - TriNation", url : "http://www.rugbyrama.fr/rugby/tri-nations/rss.xml" },
{ name : "L'équipe - Rugby", url : "http://www.lequipe.fr/Xml/Rugby/Titres/actu_rss.xml" },
{ name : "FranceTV - Rugby", url : "http://feeds.feedburner.com/francetv-sports/rugby?format=xml" },
{ name : "Le Figaro - Rugby", url : "http://www.lefigaro.fr/rss/figaro_rugby.xml" }
],
"Volleyball" : [
{ name : "Sport.fr - Volley", url : "http://www.sport.fr/RSS/sport4.xml" },
{ name : "Sport365 - Les Articles - Volley", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1378" },
{ name : "Sport24 - L'intégrale Volley", url : "http://www.sport24.com/rssfeeds/sport24-volley.xml" },
{ name : "Sport24 - Volley - Ligue A", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/274" },
{ name : "L'équipe - Volley", url : "http://www.lequipe.fr/Xml/Basket/Titres/actu_rss_Volley.xml" },
{ name : "FranceTV - Basket, Hand et Volley", url : "http://feeds.feedburner.com/francetv-sports/basket-hand-volley?format=xml" }
],
"Athlétisme" : [
{ name : "Sport365 - Les Articles - Athlétisme", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1364" },
{ name : "Sport24 - L'intégrale Athlétisme", url : "http://www.sport24.com/rssfeeds/sport24-athletisme.xml" },
{ name : "L'équipe - Athlé", url : "http://www.lequipe.fr/Xml/Aussi/Titres/actu_rss_Athletisme.xml" },
{ name : "FranceTV - Athlétisme", url : "http://feeds.feedburner.com/francetv-sports/athletisme?format=xml" }
],
"Cyclisme" : [
{ name : "Sport.fr - Cyclisme", url : "http://www.sport.fr/RSS/sport6.xml" },
{ name : "Sport.fr - Tour de France", url : "http://www.sport.fr/rss/rss3.aspx?sport=99" },
{ name : "Sport365 - Les Articles - Cyclisme", url : "http://www.sport365.fr/rss/filinfo.xml?collection=162" },
{ name : "Eurosport - Cyclisme", url : "http://www.eurosport.fr/cyclisme/rss-flash.xml" },
{ name : "L'équipe - Cyclisme", url : "http://www.lequipe.fr/Xml/Cyclisme/Titres/actu_rss.xml" },
{ name : "FranceTV - Cyclisme", url : "http://feeds.feedburner.com/francetv-sports/cyclisme?format=xml" },
{ name : "Le Figaro - Cyclisme", url : "http://www.lefigaro.fr/rss/figaro_cyclisme.xml" }
],
"Golf" : [
{ name : "Sport.fr - Golf", url : "http://www.sport.fr/RSS/sport7.xml" },
{ name : "Sport365 - Les Articles - Golf", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1368" },
{ name : "Eurosport - Golf", url : "http://www.eurosport.fr/golf/rss-flash.xml" },
{ name : "L'équipe - Golf", url : "http://www.lequipe.fr/Xml/Tennis/Titres/actu_rss_Golf.xml" },
{ name : "Le Figaro - Golf", url : "http://golf.lefigaro.fr/rss/rss_flash-golf.xml" },
{ name : "FFGolf (Golf) - Info Fédé", url : "http://www.ffgolf.org/rss.aspx?origine=rubrique&id=0" }
],
"Gymnastique" : [
{ name : "FFGym (Gymnastique) - Info Fédé", url : "http://www.ffgym.com/rss/feed/flash" }
],
"Natation" : [
{ name : "Sport365 - Les Articles - Natation", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1372" },
{ name : "Eurosport - Natation", url : "http://www.eurosport.fr/natation/rss-flash.xml" },
{ name : "FFN (Natation) - Général", url: "http://www.ffnatation.fr/media/news/0_rss.xml" }
],
"Aérostation (montgolfieres)" : [
{ name : "FFAerostation (Mongolfière) - Général", url : "http://www.ffaerostation.org/index.php?format=feed&type=rss" }
],
"Equitation" : [
{ name : "FFE (Fédé Equitation) - Général :", url : "http://www.1cheval.com/rss/rss.php" }
],
"Voile" : [
{ name : "Sport365 - Les Articles - Voile", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1377 " },
{ name : "Sport24 - Voile", url : "http://www.sport24.com/rssfeeds/sport24-voile.xml" },
{ name : "L'équipe - Voile", url : "http://www.lequipe.fr/Xml/Aussi/Titres/actu_rss_Voile.xml" },
{ name : "FranceTV - Voile", url : "http://feeds.feedburner.com/francetv-sports/voile?format=xml" },
{ name : "Le Figaro - Voile", url : "http://www.lefigaro.fr/rss/figaro_voile.xml" }
],
"Automobile" : [
{ name : "Sport.fr - Sports Auto", url : "http://www.sport.fr/RSS/sport5.xml" },
{ name : "Sport365 - Les Articles - Auto-Moto", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1356" },
{ name : "Sport24 - L'intégrale Auto/Moto", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/220" },
{ name : "TF1 - Auto-Moto", url : "http://www.tf1.fr/xml/rss/0,,538,00.xml" },
{ name : "Eurosport - Auto-moto", url : "http://www.eurosport.fr/automoto/rss-flash.xml" },
{ name : "L'équipe - Général Auto-Moto", url : "http://www.lequipe.fr/rss/actu_rss_Auto-Moto.xml" }
],
"Formule 1" : [
{ name : "Sport.fr - Formule 1", url : "http://www.sport.fr/rss/rss3.aspx?sport=3811" },
{ name : "Sport24 - Formule 1", url : "http://www.sport24.com/rssfeeds/sport24-formule1.xml" },
{ name : "L'équipe - F1", url : "http://www.lequipe.fr/Xml/Formule1/Titres/actu_rss_F1.xml" }
],
"Formule 3000" : [
{ name : "Sport.fr - Formule 1", url : "http://www.sport.fr/rss/rss3.aspx?sport=3811" },
{ name : "Sport24 - Formule 1", url : "http://www.sport24.com/rssfeeds/sport24-formule1.xml" },
{ name : "L'équipe - F1", url : "http://www.lequipe.fr/Xml/Formule1/Titres/actu_rss_F1.xml" }
],
"Moto" : [
{ name : "Sport.fr - Moto", url : "http://www.sport.fr/RSS/sport5.xml" },
{ name : "Sport365 - Les Articles - Auto-Moto", url : "http://www.sport365.fr/rss/filinfo.xml?collection=1356" },
{ name : "Sport24 - L'intégrale Auto/Moto", url : "http://www.sport24.com/layout/set/smilerss/content/view/smilerss/220" },
{ name : "Sport24 - Moto", url : "http://www.sport24.com/rssfeeds/sport24-moto.xml" },
{ name : "TF1 - Auto-Moto", url : "http://www.tf1.fr/xml/rss/0,,538,00.xml" },
{ name : "Eurosport - Auto-moto", url : "http://www.eurosport.fr/automoto/rss-flash.xml" },
{ name : "L'équipe - Général Auto-Moto", url : "http://www.lequipe.fr/rss/actu_rss_Auto-Moto.xml" },
{ name : "L'équipe - Moto", url : "http://www.lequipe.fr/rss/actu_rss_Moto.xml" }
],
"Rallye Auto" : [
{ name : "Sport.fr - Rallyes WRC", url : "http://www.sport.fr/rss/rss3.aspx?sport=4817" },
{ name : "Sport24 - Rallye", url : "http://www.sport24.com/rssfeeds/sport24-rallye.xml" },
{ name : "L'équipe - Rallye", url : "http://www.lequipe.fr/Xml/Formule1/Titres/actu_rss_Rallye.xml" }
],
"Ski" : [
{ name : "Sport.fr - Ski", url : "http://www.sport.fr/RSS/sport8.xml" },
{ name : "L'équipe - Ski  ", url : "http://www.lequipe.fr/Xml/Aussi/Titres/actu_rss_Ski.xml" },
{ name : "FFS (Ski) - Infos Fédérales", url : "http://www.ffs.fr/site/rss.php" },
{ name : "FFS (Ski) - Modif Calendrier", url : "http://www.ffs.fr/site/rss2.php" }
],
"Surf" : [
{ name : "SurfingFrance (Surf) - Info Fédé", url : "http://www.surfingfrance.com/actualites/RSS" }
]/*,
"Tennis de Table" : [
{ name : "Actualité Régionale Alsace", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=10&format=raw" } ,
{ name : "Actualité Régionale Aquitaine", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=11&format=raw" } ,
{ name : "Actualité Régionale Auvergne", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=12&format=raw" } ,
{ name : "Actualité Régionale Basse Normandie", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=13&format=raw" } ,
{ name : "Actualité Régionale Bourgogne", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=14&format=raw" } ,
{ name : "Actualité Régionale Bretagne", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=15&format=raw" } ,
{ name : "Actualité Régionale Centre", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=16&format=raw" } ,
{ name : "Actualité Régionale Champagne Ardenne", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=17&format=raw" } ,
{ name : "Actualité Régionale Corse", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=18&format=raw" } ,
{ name : "Actualité Régionale Franche Comté", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=19&format=raw" } ,
{ name : "Actualité Régionale Haute Normandie", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=22&format=raw" } ,
{ name : "Actualité Régionale Ile de France", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=23&format=raw" } ,
{ name : "Actualité Régionale Languedoc Roussillon", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=24&format=raw" } ,
{ name : "Actualité Régionale Limousin", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=25&format=raw" } ,
{ name : "Actualité Régionale Lorraine", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=26&format=raw" } ,
{ name : "Actualité Régionale Midi Pyrénées", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=30&format=raw" } ,
{ name : "Actualité Régionale Nord Pas de Calais", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=32&format=raw" } ,
{ name : "Actualité Régionale Pays de Loire", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=34&format=raw" } ,
{ name : "Actualité Régionale Picardie", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=35&format=raw" } ,
{ name : "Actualité Régionale Poitou Charentes", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=36&format=raw" } ,
{ name : "Actualité Régionale Provence Alpes Cote d'Azur", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=37&format=raw" } ,
{ name : "Actualité Régionale Rhone Alpes", url : "feed://www.tennis2table.com/index.php?option=com_ninjarsssyndicator&feed_id=39&format=raw" }
]*/
} ;

var rss_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "rss_msgs_fr_js_loaded" ) ;

var rss_json_template = { version : 6, color : "rgb(100%,100%,100%)", text : "", header : { display: "true", text : "", icon: "false" }, textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" }, title : "", keywords : [], pagesize : 5, rssfeeds : [] ,  rsstemp : [], displaycount : 5, rssItems : null , common : { width : 310 }, displaydesc : "false", displaydate : "true", openswebsite : "false" } ;

var rss_colordesc = {
	"qmc3" : function( r ) {
		if ( r.header.icon == "false" ) return "" ;
		return "/services/rss/images/rss48.png" ;
	}
} ; 
var rss_textdesc = { "qtxt1" : { "size" : "textstyles.size" , "font" : "textstyles.font" ,  "bold" : "textstyles.bold" , "center" : "textstyles.center" , "italic" : "textstyles.italic" } } ;


function rss_upgradejson( r ) {
	if ( ! r.version ) r.version = 1 ;
	if ( r.version == rss_json_template.version ) return r ;
	if ( r.version < 3 ) r = rss_upgradejsontov3( r ) ;
	if ( r.version < 4 ) r = rss_upgradejsontov4( r ) ;
	if ( r.version < 5 ) r = rss_upgradejsontov5( r ) ;
	if ( r.version < 6 ) r = rss_upgradejsontov6( r ) ;
	r.version = rss_json_template.version ;
	if ( ! r.displaydesc ) r.displaydesc = rss_json_template.displaydesc;
	return r ;
}

function rss_upgradejsontov3( r ) {
	r.headerdisplay = rss_json_template.headerdisplay ;
	r.header = rss_json_template.header ;
	r.color = 1 ;
	return r ;
}

function rss_upgradejsontov4( r ) {
	if ( r.headerdisplay) { 
		r.header.display = (r.headerdisplay == "1") ? "true" : "false";
		delete r.headerdisplay;
	}
	r.textstyles = { size : "1" , font : "-1" , bold : "false" , italic : "false" , center : "false" } ;
	r.displaydesc  = false ;
	return r ;
}

function rss_upgradejsontov5( r ) {
	r.displaydate  = "true" ;
	return r ;
}

function rss_upgradejsontov6( r ) {
	r.text = "";
	return r ;
}

var rss_timers = { };

function rss_initforweb( noteid ) {
	rss_refresh( noteid, true ) ;
}

function rss_refresh( noteid, forceRefresh ){
	if ( qsn_currstate == "edit" || ( ! forceRefresh && q_fsmpresent() ) ) return ;
	var div;
	var r;
	div = ge( noteid ) ;
	if ( isremoved( div ) ) return clearInterval(rss_timers[noteid]) ;
	hideshowblock(gebcn(div, "rss_content"), gebcn(div, "rss_loading"));	
	r = qsn_thenotes[div.id];
	rss_getitems( div, r, forceRefresh );
	hideblock(gebcn(div, "rss_filtered"));
}
	
function rss_getitems( div, r, forceRefresh ){
	div.rssPageContainer = div.rssContainer = null;
	var ar= [] ;
	for( var i=0; i<r.displaycount; i++) ar.push( null );
	
	hideshowblock( gebcn( div, "rss_content" ), gebcn( div, "rss_loading" ) );
	var rssChannel, request;
	rssfeedscopy = [].concat( r.rssfeeds ) ; 
	r.rsstemp = [].concat( tofeedswoname( rssfeedscopy ) );
	if ( r.rsstemp.length > 0 ) rss_load( r.rsstemp.pop() , div, forceRefresh ) ;
	else {
		hideshowblock( gebcn( div, "rss_loading" ), gebcn( div, "rss_content" ) );
		//rss_rendercount(div, 0);	
		rss_renderitems( div, ar );
	}	
}

function tofeedswoname(myArray){	
	var newArray = [];
	var myelem;
	while( myArray.length > 0 ){
		myelem = myArray.pop();
		if ( myelem.visible ) newArray.push( myelem.url ); 
	}
	return newArray;
}

function rss_rendercount(div, count){
	gebcn( div , 'rss_count').innerHTML = '(' + count + ')';
}

function rss_timeprefix( item ) {
	if ( ! item.Time ) return "" ;
	var t = item.Time ;
	return twodigs ( t.getDate() ) + "." + twodigs ( t.getMonth() + 1 ) + " " + twodigs ( t.getHours() ) + ":" + twodigs ( t.getMinutes() ) + " - " ;
}

function rss_renderitems( div, items){ //view mode
	var rss_debug = 0 ;
	try {
		if ( isremoved( div ) ) return ;
		var noteid = div.id;
		var list = gebcn( div , 'rss_items');
		if ( ! list ) {
			// debugmail( "rss_renderitems, got null list" ) ;
			div = ge( noteid ) ;
			if ( isremoved( div ) ) return ;
			list = gebcn( div , 'rss_items');
			if ( ! list ) return ; //2012-02-15, vh : ça arrive... alors pas besoin d'envoyer un mail debugmail( "rss_renderitems, could not fix null list" ) ;
		}
		if ( list.tagName == "UL" ) {
			var table = $( '<table cellspacing="0" cellpadding="0" border="0" width="100%" class="rss_items qsn1 text_contrast150__bd_bw"></table>' );
			$( list ).before( table ).remove();
			list = table ;
		}
		$( list ).empty();
		if ( !items ) { return; }
		
		rss_debug++;
		//var w = rss_resize_div_width( div ) ;
		rss_debug++;
		for (var i = 0; i < items.length; i++){
			var item = items[ i ];
			var tr = $( '<tr></tr>' ).appendTo( list );
			var td = $( '<td class="rss_item qsn1 bd_bw qtxt1 all"></td>' ).appendTo( tr );
			var myelem = $( '<div class="rss_div_resize"></div>' ) ;
			//var myelem = $( '<div class="rss_div_resize"></div>' ).css( "width", w + "px" );
			if ( item ) {
				td.hover( function( event ){ 
					this.className = "rss_item qtxt1 all qsn1 " + ( ( event.type == "mouseenter" ) ?  "bg_contrast9__bd_bw" : "bg_self__bd_bw " ); 
					qsn_setcolors( [ this ] ); 
				} );

				
				$( '<a class="rss_an_item qsn1 text_contrast150"></a>' )
					.attr( { "title": item.Site , "href" : item.Url, "target" : "_blank" } )
					.css( { "text-decoration" : "none", "display" : "block", "cursor": "pointer" } )
					.html( ( ( ! qsn_thenotes[ noteid ].displaydate || qsn_thenotes[ noteid ].displaydate == "false" ) ? "" :  rss_timeprefix( item ) ) +  item.Title.replace( /<[^>]+>?/g , "" ).replace( //g , "’" ) )
					.mousedown( function ( event ) { q_stopPropagation( event ) ; } )
					.click( function( event ){
						if ( qsn_thenotes[ noteid ].openswebsite == "true" ) return true ;//window.open( item.Url );
						rss_viewitem( this , event ) ;
						return false ;
					} )
					.data( "item", item )
					.appendTo( myelem );
				
				if ( qsn_thenotes[ noteid ].displaydesc == "true" ) {
					myelem.append( $( '<div class="rss_an_item_desc qsn1 text_bw" style="white-space:normal; padding: 15px 0px 0px 0px;"></div>' ).html( item.Content ) );
					$( "a", myelem ).addClass( "qsn1 text_contrast150" ) ;
				}
			} else myelem.append( '<a class="rss_an_item qsn1 text_contrast150" style="text-decoration:none; display:block; cursor:pointer;"> </a>' ) ;
			td.append( myelem ) ;
			myelem.get( 0 ).widthrule = function ( w ) { return Math.max( 0 , w-30-2 ) ; } ;
		}
		rss_debug++;
		var pc = div.rssPageContainer;
		if ( pc ){
			$( ".rss_pre, .rss_pre_new", div ).toggle( ! pc.IsFirstPage() ) ;
			$( ".rss_next, .rss_next_new", div ).toggle( ! pc.IsLastPage() ) ;
		} else $( ".rss_pre, .rss_next, .rss_pre_new, .rss_next_new", div ).hide();

		rss_debug++;
		qsn_setcolors( noteid ) ;
		rss_debug++;
		qsn_settextproperties( noteid ) ;
		rss_debug++ ;
		var noteid = div.id ;
		var r = qsn_thenotes[ noteid ] ;
		div.toresize = function () {
			var x = $( ".rss_div_resize" , this ).get() ;
			x = x.concat( qsn_container_toresize( this ) ) ;
			return x ;
		} ;
		q_changedwidth( div , parseInt( qsn_width( r.common.noteid ) , 10 ) ) ;
	} catch ( e ) { debugmail("in rss/rss_renderitems (debug v.2012-08-07) for " + noteid + " step " + rss_debug + " : " + e.message + "\r" + "club_menubariconsize=" + window.club_menubariconsize + " - club_sitecolorpalette=" +window.club_sitecolorpalette + " - club_siteelemscolor=" +window.club_siteelemscolor + " - qlub0_checked=" +window.qlub0_checked ); }
}

function rss_resize_div_width( div , wref ){
	var themaxwidth = wref || div.offsetWidth ;
	if ( qsn_currstate == "edit" ) return 0.6 * themaxwidth ;
	return Math.max( 0 , themaxwidth - 20 - 2 ) ;
}

function rss_resize_divs( div , wref ){
	$( ".rss_div_resize", div ).css( "width", Math.round( rss_resize_div_width( div , wref ) ) + "px" );
}

function rss_viewitem( elem , e ) {	
	if ( qsn_currstate != "view" ) return ;
	
	var item = $( elem ).data( "item" );
	var thehtml = $( '<div class="rss_viewer"></div>' )
		.append( $( '<div class="rss_item_title"></div>' )
			.append( $( '<a target="_blank"></a>' )
				.attr( "href", item.Url )
				.html( item.Title.replace( //g , "’" ) )
			)
		)
		.append( $( '<div class="rss_item_time" style="padding:3px 0 5px 3px;"></div>' ).html( item.Time.toLocaleString() ) )
		.append( $( '<div class="rss_item_content qtxt1 all" onmousedown="q_stopPropagation( event );"></div>' ).html( item.Content.replace( //g , "’" ) ) )
	q_fsm_reveal( { src : thehtml.get(0) , title : item.Site } ) ;
}

function rss_search( x , empty ){
	if ( qsn_currstate != "view" ) return ;
	var div = getContainer(x);
	var r = qsn_thenotes[div.id];
	if (empty) gebcn( div , 'rss_search_input').value  = "";
	gebcn(div, "rss_cancelbutton").style.display = (empty) ? "none" : "inline";
	gebcn(div, "rss_searchbutton").style.display = (empty) ? "inline" : "none";
	try{
		var txtKeywords = gebcn( div , 'rss_search_input').value;
		var keywords = rss_keywordize(txtKeywords);
		if (keywords.length > 0)  gebcn(div, "rss_filtered").style.display = "block";
		else gebcn(div, "rss_filtered").style.display = "none";
		var content = rss_filter(div.rssContainer, keywords);
		
		rss_sortbydate( content );
		// div.rssContainer = content;
		var pc;
		if (!div.rssPageContainer){
			pc = new PageContainer(content, r.displaycount);
			div.rssPageContainer = pc;
		}
		else{
			pc = div.rssPageContainer;
			pc.SetContent(content);
		}
		
		//rss_rendercount(div, pc.GetCount());	
		rss_renderitems(div, pc.GetFirstPage());
		}
	catch(e){ q_alert(e.message);}
	
	if ( r.rsstemp.length > 0 ) rss_load( r.rsstemp.pop() , div ) ;
	else hideshowblock(gebcn(div, "rss_loading"), gebcn(div, "rss_content"));
}

/*
function -
function OBJECTS AND METHODS
*/

function rss_load( url , div, forceRefresh ){
	if ( qsn_currstate == "edit" || ( ! forceRefresh && q_fsmpresent() ) ) return ;
	if ( isremoved( div ) ) return ;
	var noteid = div.id;
	var r = qsn_thenotes[noteid];
	if ( ! r ) r = qsn_thenotes[q_idalias[noteid]];

	rss_ajaxget( "/cgi-bin/cgixml?url="+ encodeURIComponent( url ) , function ( xml ) {
		//determination des bon descripteurs :
		var rss_conteneurs = ["item" , "entry" ];
		var rss_conteneur ;
		var rss_title = "title";
		var rss_description = [ "description" , "content"  , "summary"];
		var rss_link = "link";
		var rss_date = [ "pubDate" , "updated" , "dc:date" , "issued" , "modified" ];	
		for ( var i = 0 ; i < rss_conteneurs.length ; i++ ) {
			if ( $( rss_conteneurs[ i ] , xml ).length > 0 ) {
				rss_conteneur = rss_conteneurs[ i ] ;
				break;
			}
		}
		if ( rss_conteneur ) {
			var currmax = 0 ;
			var currindex = 0 ;
			for ( var i = 0 ; i < rss_description.length ; i++ ) {
				if ( $( rss_description[ i ] , xml ).length >= currmax ) {
					currindex = i ;
					currmax = $( rss_description[ i ] , xml ).length ;
				}
			}
			rss_description = rss_description[ currindex ] ;
			currmax = 0 ;
			currindex = 0 ;
			for ( var i = 0 ; i < rss_date.length ; i++ ) {
				if ( $( rss_date[ i ] , xml ).length >= currmax ) {
					currindex = i ;
					currmax = $( rss_date[ i ] , xml ).length ;
				}
			}
			rss_date = rss_date[ currindex ] ;
			
			var item, author, link, title, description, date, rssItem;
			var rss_debug = 0 ;
			try{
				if ( $( "title" , xml ).length > 0 ) author = rss_getcdata( $( "title" , xml ).get( 0 ) ) ;
				var items = $( rss_conteneur , xml );
				var rssItems = [];
				rss_debug++ ;
				$( rss_conteneur , xml ).each( function ( i , item ) {
					link = title = description = date = '';
					try { link = $( rss_link , item ).eq( 0 ).text() || $( rss_link , item ).eq( 0 ).attr( "href" ) ; } catch( e ) {}
					try{ title = rss_getcdata( $( rss_title , item ).get( 0 ) ); }catch( e ){}
					try{
						description = rss_getcdata( $( rss_description , item ).get( 0 ) );
						description = description.replace(/\r\n/,'<br />').replace(/\n/,'<br />');
					} catch( e ){}
					var date = ( $( rss_date , item ).length ) ? rss_extractdate( $( rss_date , item ).eq( 0 ).text() ) : new Date() ;
					rssItem = new RssItem(author, link ,title, description, date);
					rssItems.push(rssItem);
				} ) ;
				rss_debug++ ;
				if ( !div.rssContainer) div.rssContainer = rssItems;
				else div.rssContainer = div.rssContainer.concat(rssItems);
				rss_debug++ ;
				var content = rss_filter(div.rssContainer, r.keywords);
				rss_debug++ ;
				rss_sortbydate(content);
				var pc;
				if (!div.rssPageContainer) {
					pc = new PageContainer(content, r.displaycount);
					div.rssPageContainer = pc;
				} else {
					pc = div.rssPageContainer;
					pc.SetContent(content);
				}
				//rss_rendercount(div, pc.GetCount());	
				rss_debug++ ;
				rss_renderitems(div, pc.GetFirstPage());
				rss_debug++ ;
				if ( q_pagemode() == "makeweb" && r.makewebdisplay && $( div ).data( "resumepause" ) == 1 && window.ASresumepause_dec ) {
					$( div ).data( "resumepause" , 0 ) ;
					ASresumepause_dec() ;
				}
			}
			catch( e ){ debugmail("in rss/HandleXML for " + noteid + " step " + rss_debug + " : " + e.message);}
		}
	} ).complete( function () {
		if ( r.rsstemp && r.rsstemp.length > 0 ) rss_load( r.rsstemp.pop() , div, forceRefresh ) ;
		else hideshowblock(gebcn(div, "rss_loading"), gebcn(div, "rss_content"));
	} ) ;
};

function rss_getcdata(element){
	var s = '' ;
	function trim(myString){
		return myString.replace(/^\s+/g,'').replace(/\s+$/g,'');
	} 
	for (var i = 0; i < element.childNodes.length; i++){
		if ( element.childNodes[i].nodeType == 1 ) s += rss_getcdata(element.childNodes[i]);
		if ( element.childNodes[i].nodeName == '#cdata-section') s += element.childNodes[i].nodeValue;
		else if (element.childNodes[i].nodeName == '#text' && trim(element.childNodes[i].nodeValue) != "") s+= element.childNodes[i].nodeValue;
	 }
	return s;
}

function rss_extractdate( sdate ) {
	try {
		var date = q_isot2date( sdate ) ;
		if ( date != "Invalid Date" && date != new Date( null )  && ! isNaN( date ) ) return date ;
	} catch(e) {} ;
	var temp= sdate.replace(/^([0-9]{1,2})\/([0-9]{1,2})\/([0-9]{2,4})/g,'$2/$1/$3'); // transforme une date JJ/MM/AAAA en MM/JJ/AAAA pour new Date()
	temp = temp.replace( / [A-Z]+(\+|-| |)\d\d:\d\d$/ , "" ) ; // supprime EET-02:00
	var date = new Date(temp);
	if ( date == "Invalid Date" || date == new Date( null ) || isNaN( date ) ){
		try{
			var datetime = sdate.split(' ');
			var thedate = datetime[0].split(".");
			var month = thedate[1];
			thedate[1] =thedate[0];
			thedate[0] = month;
			date = new Date(thedate[0] + "/" + thedate[1] + "/" + thedate[2] + " " + datetime[1]);
			if ( date == "Invalid Date" || date == new Date( null ) ) date = q_isot2date( sdate ) ;
			if ( date == "Invalid Date" || date == new Date( null ) ) if ( sdate.substring( sdate.length - 3 ) == ":00" ) date = new Date( sdate.substring( 0 , sdate.length - 3 ) ) ;
		} catch(e){}
	}
	return date ;
}

function RssItem(site, url, title, content, time){
	this.Site = site;
	this.Url = url;
	this.Title = title;
	this.Content = content;
	this.Time = time;
}

/*PageContainer Start*/
function PageContainer(content,pageSize){
	this.PageIndex = 0;
	this.Content = content;
	this.PageSize = pageSize;
}
PageContainer.prototype.GetPageIndex = function(){return this.PageIndex;};
PageContainer.prototype.GetCount = function(){ return (this.Content == null) ? 0 : this.Content.length ; };
PageContainer.prototype.GetPageNum = function(){return Math.ceil(this.GetCount() / this.PageSize) ; };
PageContainer.prototype.IsLastPage = function(){ return this.PageIndex == ( this.GetPageNum() - 1 ) || this.GetPageNum() == 0 ; };
PageContainer.prototype.IsFirstPage = function(){ return this.PageIndex == 0 ; };
PageContainer.prototype.GetPage = function(index){
	if (index > this.GetPageNum() - 1 || index < 0) return null;
	this.PageIndex = index;
	if (index < this.GetPageNum() - 1){
		var result = [];
		for (var i = 0 ; i < this.PageSize ; i ++) result[i] = this.Content[this.PageIndex * this.PageSize + i] ;
		return result;
	} else {
		var result = [];
		for (var i = 0 ; i < this.Content.length - this.PageSize * index ; i ++) result[i] = this.Content[this.PageIndex * this.PageSize + i] ;
		for (var i = this.Content.length - this.PageSize * index ; i < this.PageSize ; i ++) result[i] = null;
		return result;
	}
};
PageContainer.prototype.GetFirstPage = function(){return this.GetPage(0);};
PageContainer.prototype.GetLastPage = function(){return this.GetPage(this.GetPageNum() - 1);};
PageContainer.prototype.GetNextPage = function(){return this.GetPage(this.PageIndex + 1);};
PageContainer.prototype.GetPrePage = function(){return this.GetPage(this.PageIndex - 1);};
PageContainer.prototype.GetCurrentPage = function(){return this.GetPage(this.PageIndex);};
PageContainer.prototype.SetPageSize = function(pageSize) {this.PageSize = pageSize;};
PageContainer.prototype.SetContent = function(content){this.Content = content;};
/*PageContainer End*/

function rss_ajaxget( url , callback ) {
	//correction de l'url pour du à safari (remplace http par feed)
	var re = new RegExp("feed://" , "g" ) ;
	url = url.replace( re , "http://" ) ;
/*
			var xml = jqXHR.responseXML ;
			if ( ! xml && ( /<\?xml/ ).test( jqXHR.responseText ) ) {
				var s = jqXHR.responseText.substring( 0 , 1 ) == '\n' ? jqXHR.responseText.substring ( 1 ) : jqXHR.responseText ;
				
				if ( window.DOMParser) {
					var parser=new DOMParser();
					xml=parser.parseFromString( s,"text/xml" );
				} else { // Internet Explorer
					xml=new ActiveXObject("Microsoft.XMLDOM");
					xml.async="false";
					xml.loadXML( s ); 
				}
			}
*/
	return $.get( url , function ( xml ) { callback.apply( this , [ xml ] ); } , "xml" ) ;
}

function rss_filter(items, keywords){
	if (!items || !items.length || !keywords || !keywords.length) return items;
	var temp = [];
	var i, j, k = 0;
	for (i = items.length - 1; i >= 0; i--){
		for (j = 0; j < keywords.length; j++){
			if (items[i].Title.toLowerCase().indexOf(keywords[j].toLowerCase()) >= 0 || items[i].Content.toLowerCase().indexOf(keywords[j].toLowerCase()) >= 0) break;
		}
		if (j < keywords.length) temp[k++] = items[i];
	}
	return temp;
}

function rss_sortbydate(items){
	if (!items)	return;

	var j,temp;
	var exchanged;
	for (var i = 0; i < items.length; i++){
		exchanged = false;
		for (j = 0; j < items.length - i - 1; j++){
			if (items[j].Time < items[j + 1].Time){
				temp = items[j];
				items[j] = items[j + 1];
				items[j + 1] = temp;
				exchanged = true;
			}
		}
		if (!exchanged) break;
	}
}

function rss_pre(x){
	if ( qsn_currstate != "view" ) return ;
	var div = getContainer(x);
	var pc = div.rssPageContainer;
	rss_renderitems(div, pc.GetPrePage());
}

function rss_next(x){
	if ( qsn_currstate != "view" ) return ;
	var div = getContainer(x);
	var pc = div.rssPageContainer;
	rss_renderitems(div, pc.GetNextPage());
}

function rss_keywordize(x){
	x =  x.split(' ');
	y = [];
	for ( var i =0; i < x.length ; i++) if (x[i] != "") y.push(x[i]);
	return y;
}


var slide_message = {
"lastimage" : "Il est impossible de supprimer la dernière image d'un diaporama.\n\nVous pouvez supprimer le diaporama." ,
"uploadtitle" : "Insérer des images" ,
"uploadprompt" : "Cliquez sur le bouton ci-dessous, puis sélectionnez une ou plusieurs images." ,
"fullscreen" : "Mode Plein écran" ,
"plug" : "Diaporama_La projection de diapos sur votre page web!" ,
"remove" : "supprimer" ,
"add" : "ajouter" ,
"photos" : "Photos" ,
"back" : "Retour"
}

var slide_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "slide_msgs_fr_js_loaded" ) ;


var slide_json_template = { version: 3 , lastphotoindex : 0, visible : true , color : "1",  tempo : 1 , reverse : false , common : { width : 300 } } ;

function slide_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == slide_json_template.version ) ) return r ;
	if ( r.version < 2 ) r.color = 1;
	if ( r.version < 3 ) {
		r.tempo = 1 ; 
		r.reverse = false ;
	}
	r.version = slide_json_template.version ;
	return r ;
}

function slide_initforweb( id ) {
	$.getScript( "/services/slide/scripts/slide_msgs_" + q_lang + ".js" , function () {
		$.getScript( "/services/slide/scripts/slide.js" , function () { slide_doinitforweb( id ) ; } );
	} );
}


var team_message = {
"snname" : "Note Equipe" ,
"plug" : "Equipe_Affichez la fiche détaillée des membres d'une de vos équipes.",
"desc" : "La note Equipe permet de présenter les membres d'une équipe avec photos et infos personnalisables", 
"notetitleprompt" : "Cliquez ici pour donner un titre à la note équipe." ,
"newnoteprompt" : "Cliquez ici pour ajouter une description de l'équipe." ,
"cardfields" : "Champs de la fiche" ,
"cardfieldsinfo" : "Vous pouvez modifier certains titres des champs de la fiche selon le sport de l'équipe." ,
"changecardfields" : "valider ces titres" ,
"colon" : " :" ,
"confirmdeletecard" : "Voulez-vous vraiment supprimer la fiche '%s' ?" ,
"confirmdeletephoto" : "Voulez-vous vraiment supprimer la photos de '%s' ?" ,
"addmemberphoto" : "Ajouter la photo d'un membre" ,
"selectphoto" : "Veuillez sélectionner une photo." ,
"noplayer" : "(Aucun joueur)",
"teamtimer" : "Temps d'affichage des fiches",

"importCSV" : "Ajouter une liste de joueurs depuis des données CSV (Excel)",
"importCSV_noselect_title" : "Informations concernant les joueurs", 
"importCSV_confirm" : "Vous pouvez, soit indiquer un fichier .csv (export Excel par exemple), soit procéder par copier-coller depuis Excel.<br/><br/>Colonnes : Nom, Prénom, Date de naissance, %s1 , %s2, %s3, %s4.<br/><br/>Cliquez sur OK pour poursuivre.",

"editcard_firstname" : "Prénom", 
"editcard_name" : "Nom", 
"editcard_birthdate" : "Date de naissance", 

"display" : "Affichage", 
"displaybirthdate" : "Afficher la date de naissance", 
"displayname" : "Afficher le nom de famille"
} ;

var team_cardfields = [ "Poste", "Numéro", "Poids", "Taille"] ;

var team_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "team_msgs_fr_js_loaded" ) ;


var team_json_template = { version : 3 , text : "" , color : "rgb(100%,100%,100%)" , header : { display: "true", text : "", icon: "false" } , textstyles: { size : "1" , font : "-1" , bold : "false" , italic : "false" }, common: { left : 20 , top : 0 , width : 450 }, cardfields: [ "?", "?", "?", "?" ], cards : [ { firstname: "", name: "?", birthdate: "", comment: "", other1: "", other2: "", other3: "", other4: "", photo : {} } ], display : { birthdate : "true", name : "true" }, timer : 3000 } ; 


function team_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == team_json_template.version ) ) return r ;
	if ( r.version<2 ) team_upgradejsontov2( r ) ;
	if ( r.version<3 ) team_upgradejsontov3( r ) ;
	r.version = team_json_template.version;
	return r ;
}

function team_upgradejsontov2( r ) {
	if ( ! r.display ) r.display = team_json_template.display ;
	return r ;
}

function team_upgradejsontov3( r ) {
	if ( ! r.timer ) r.timer = team_json_template.timer ;
	return r ;
}

/*
function -
function UTILES
*/

function team_mouseover( elem , ee ){
	team_pauseall();
	qsn_mouseover( elem , ee , true ) ;
}

function team_mouseout( elem , ee ){
	team_resumeall();
	qsn_mouseout( elem , ee , true ) ;
}

function team_initforweb( id ) {
	var div = ge( id ) ;
	if ( qsn_thenotes[ id ].cards.length > 1 ) team_program( div ) ;
	setTimeout( "q_addwindowfocushandlers( 'team_resumeall' ) ; q_addwindowblurhandlers( 'team_pauseall' ) ; " , 5000 ) ;
}

/*
function -
function TIMERS
*/

var team_timers = { } ;

function team_pauseall () {
	for ( var id in team_timers ) if ( team_timers [ id ] ) team_cleartimer( id ) ;
}

function team_resumeall () {
	if ( qsn_currstate == "edit" ) return ;
	for ( var id in team_timers ) if ( ge( id ) ) team_program( ge( id ) ) ;
}

function team_cleartimer( id ) {
	if ( ! team_timers[ id ] ) return ;
	clearTimeout( team_timers[ id ] ) ;
	team_timers[ id ] = null ;
}

function team_program( div , t ) {
	team_cleartimer( div.id ) ;
	if ( ! $( div ).data( "currentcard" ) ) $( div ).data( "currentcard" , 0 ) ;
	team_timers[ div.id ] = setTimeout( function() { team_doanim_card( div ) ; } , t ? t : qsn_thenotes[ div.id ].timer ) ;
}

/*
function -
function ANIM CARD
*/

function team_doanim_card( div ) {
	if ( isremoved ( div ) ) return ;
	if ( ! div.id || ! qsn_thenotes[ div.id ] ) return ;
	var r = qsn_thenotes[ div.id ];
	if ( qsn_currstate == "edit" || q_fsmpresent() ) return team_program( div ) ;
	var currtimer = team_timers[ div.id ] ;
	var d = $( ".team_viewcard:eq(0)", div ).fadeOut( 200, function(){
		if ( currtimer != team_timers[ div.id ] ) return ;
		var i = $( div ).data( "currentcard" ) ;
		var newselected = ( i + 1 ) % r.cards.length ;
		team_renderonecard( parseInt( newselected, 10 ) , div ) ;
		d.fadeIn( 200, function(){
			if ( currtimer != team_timers[ div.id ] ) return ;
			team_timers[ div.id ] = setTimeout( function(){ team_doanim_card( div ) ; }, r.timer ) ;
		} );
	} );
}

function team_renderonecard( x, div ) { // x : event, noeud ou index
	var target, cardindex, fromEvent = false ;
	if ( typeof x == "number" ) {
		target = div ;
		cardindex = x ;
	} else if ( ! x ) return ;
	else if ( x.tagName ) {
		target = x ;
		cardindex = $( target ).attr( "cardindex" ) ;
	} else {
		target = getElementFromEvent( x ) ;
		target = getContainer( target, "team_cardslist_item" ) ;
		cardindex = $( target ).attr( "cardindex") ;
		fromEvent = true ;
	}
	div = getContainer( target ) ;
	var cardlist = $( ".team_cardslist:eq(0)", div ) ;
	var r = qsn_thenotes[ div.id ] ;
	var rec = r.cards[ cardindex ] || r.cards[ 0 ] ;
	var d = $( ".team_viewcard:eq(0)", div ) ;
	var currentcard = $( div ).data( "currentcard" ) ;
	if ( currentcard != undefined ) $( ".team_cardslist_item[cardindex='" + currentcard + "'] .team_cardlistarrow", cardlist ).css( "visibility", "hidden" );

	$( div ).data( "currentcard", cardindex ) ;
	$( ".team_cardslist_item[cardindex='" + cardindex + "'] .team_cardlistarrow", cardlist ).css( "visibility", "visible" );
	
	for ( var p in rec ) {
		if ( p == "name" ) $( ".team_viewcard_name", d ).html( rec[ "firstname" ] + ( ( r.display.name == "true" )  ? ( " " + rec[ "name" ] ) : "" ) );
		else if ( p == "firstname" ) continue ;
		else if ( p == "photo" ) team_rendercardphoto( d, rec.photo.src, rec.photo.width, rec.photo.height ) ;
		else $( ".team_viewcard_" + p, d ).html( " " + rec[ p ] ) ;
	}
	if ( fromEvent ) team_program( div ) ;
}

function team_rendercardphoto( card, imgsrc, imgwidth, imgheight ) {
	var div = $( card ).parents( ".container:first" ).get(0);
	var r = qsn_thenotes[ div.id ] ;
	
	if ( ! ( imgsrc && imgwidth && imgheight ) ) {
		$( ".team_" + ( ( qsn_currstate == "edit" ) ? "edit" : "view" ) + "card_photo", card )
			.removeAttr( "imgwidth" )
			.removeAttr( "imgheight" )
			.removeAttr( "imgsrc" )
			.attr( "src", "/services/team/images/playerdefault.jpg" )
			.css( { "width" : "80px", "height" : "90px" } );
		if ( qsn_currstate == "edit" ) $(".team_suppress_photo_button", card ).hide() ;
	} else {
		var defaultwidth = 80;	
		$( ".team_" + ( ( qsn_currstate == "edit" ) ? "edit" : "view" ) + "card_photo", card )
			.attr( "imgwidth", imgwidth )
			.attr( "imgheight", imgheight )
			.attr( "imgsrc",  imgsrc )
			.attr( "src", q_spaceabsoluteurl( r.common.ownerid , imgsrc ) )
			.css( "width", defaultwidth + "px" )
			.css( "height", Math.round( defaultwidth * ( parseInt( imgheight, 10 ) / parseInt( imgwidth, 10 ) ) ) + "px" );
		if ( qsn_currstate == "edit" ) $(".team_suppress_photo_button", card ).show() ;
	}
}


var vc_message = {
"newnoteprompt" : "Cette page a été visitée %n fois !" ,
"visible_guest" : "Cette note affiche le nombre de visites de la page web" ,
"plug" : "Compteur_Affichez le nombre de visites d'une page sur celle-ci." ,
"plug_qlub" : "Compteur_Affichez le nombre de visites sur votre page web." ,
"emptynote" : "(aucun message)" ,
"desc" : "(...)",
"tabcolor" : "Fond de la note" ,
"titlecolorbg" : "Fond" ,
"tabstyle" : "Style" ,
"textfont" : "Lettres" ,
"bold" : "G" ,
"italic" : "I" ,
"uppercase" :"majusc." ,
"tip_edit" : "modifier la smartnote compteur",
"razcounter" : "Le compteur a été réinitialisé à 0",
"razcounter_confirm" : "Voulez-vous réinitialiser ce compteur à 0 ?"
}

var vc_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "vc_msgs_fr_js_loaded" ) ;


var vc_json_template = { version: 7 ,  text : "" , textsize : 14 , textfont : "-1" , textcolor : "-1" , textstyles: { bold : "false" , italic : "false" , uppercase : "false" } , textspacing : "1" , textalign : "0" , color : 1 , textmargin: 2 , textopacity : 1 } ;

function vc_upgradejson( r ) {
	if ( ! r.version ) r.version = 1 ;
	if ( r.version == vc_json_template.version ) return r ;
	if ( r.version < 2 ) r = vc_upgradejsontov2( r ) ;
	if ( r.version < 3 ) r = vc_upgradejsontov3( r ) ;
	if ( r.version < 4 ) r = vc_upgradejsontov4( r ) ;
	if ( r.version < 5) r = vc_upgradejsontov5( r ) ;
	if ( r.version < 6) r = vc_upgradejsontov6( r ) ;
	if ( r.version < 7) r = vc_upgradejsontov7( r ) ;
	r.version = vc_json_template.version ;
	return r ;
}
function vc_upgradejsontov2( r ) {
	r.textuppercase = "0" ;
	return r ;
}
function vc_upgradejsontov3( r ) {
	r.textspacing = "1" ;
	return r ;
}
function vc_upgradejsontov4( r ) {
	r.textalign = "0" ;
	return r ;
}
function vc_upgradejsontov5( r ) {
	r.color = -1 ;
	return r ;
}
function vc_upgradejsontov6( r ) {
	r.margin = "2" ;
	r.opacity = "4" ;
	return r ;
}

function vc_upgradejsontov7( r ) {
	r[ "textstyles" ] = { bold : String( r.textbold!="0" ) , uppercase : String( r.textuppercase!="0" ) , italic : String( r.textitalic!="0" ) } ;
	if ( parseInt( r.textfont , 10 ) > 0 ) r.textfont =  "" + ( parseInt( r.textfont , 10 ) - 1 ) ;
	r.textmargin = r.margin ;
	r.textopacity = r.opacity ;
	delete r.textbold ;
	delete r.textitalic ;
	delete r.uppercase ;
	delete r.margin ;
	r.version = vc_json_template.version;
	return r;
}

function vc_initforweb( id ) {
	vc_request( id );
}

function vc_request( noteid ){
	function callback( data ){
		gebcn(noteid, "textbackgroundtext").innerHTML = gebcn(noteid, "textforegroundtext").innerHTML = gebcn(noteid, "textforegroundtext").innerHTML.replace(/% *n/g, data.total ) ;
		showblock( gebcn( noteid, "textforegroundtext" ) ) ;
	}
	return q_ajaxcount( "bingetcount" , callback ) ;
	if ( window.client_bincounter ) return q_ajaxcount( "bingetcount" , callback ) ;
	$.get( "/cgi-bin/cgicounter" , { "data" : q_toplist( { mission:"getdata" , privatedomain : clubprivatedomain , page : currsvcid.replace( /[^0-9]/g , "" ) } ) } , function ( data ) {
		if ( ! data.ajaxerror ) callback( data ) ;
	} , "json" ) ;
}


var video_message = {
"newnoteprompt" : "cliquez ici pour ajouter une légende" ,
"pclocalnotvalidate" : "Vous n'avez pas validé le choix de votre image.\n\nCelle-ci ne va pas être enregistrée." ,
"fermer" : "fermer" ,
"film" : "Vidéo" ,
"audiostream" : "Flux audio" ,
"audio" : "Audio" ,
"seconds" : " secondes" ,
"validateimage" : "Veuillez valider l'image" ,
"plug" : "Video_Stockez, visionnez et montrez vos vidéos sur votre espace.",
"selectavideo" : "Choisissez la vidéo dans votre ordinateur:" ,
"uploadtitle" : "Chargement d'une vidéo (mpg, mpeg, mp4, mov)" ,
"desc" : "(...)",
"errqt" : "Erreur Plugin Quicktime "
} ;
var video_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "video_msgs_fr_js_loaded" ) ;


var video_json_template = { version: 3 , text : "" , video : { kind : "" } , color : 1 , textstyles:{ size : "2" , font : "1" , bold : "false" , center : "false" , italic : "false" } } ;

function video_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == video_json_template.version ) ) return r ;
	if(r.version<2) r.color = 1;
	if(r.version<3) {
		r.textstyles = { size:r.textsize , font:r.textfont, bold : String( r.textbold !=0 ) , center : String( r.textcenter != 0 ) , italic : String( r.textitalic !=0 ) } ;
		r.textsize = null ;
		r.textfont = null ;
		r.textbold = null ;
		r.textcenter = null ;
		r.textitalic = null ;
	}
	r.version = video_json_template.version ;
	return r ;
}

function video_initforweb( id ) {
	$.getScript( "/services/video/scripts/video_msgs_" + q_lang + ".js" , function () {
		$.getScript( "/services/video/scripts/video.js" );
	} );
}


var wsg_message = {
"notetitleprompt" : "Cliquez ici pour ajouter un titre..." ,
"validateimage" : "Veuillez valider l'image" ,
"suppressimage" : "Voulez-vous réellement supprimer l'image dans la note ?" ,
"pclocalnotvalidate" : "Vous n'avez pas validé le choix de votre image.\n\nCelle-ci ne va pas être enregistrée." ,
"selectanimage" : "Veuillez choisir une image sur votre ordinateur :" ,
"selectafile" : "Veuillez choisir un fichier sur votre ordinateur :" ,
"uploadtitlefile" : "Lien vers un fichier" ,
"uploadtitlenew" : "Afficher une image dans la note" ,
"uploadtitleedit" : "Changer l'image à afficher" ,
"selectpage" : "Veuillez d'abord sélectionner une page ou cliquer sur 'annuler'." ,
"plug" : "Billet_Réalisez des blocs de texte comme dans un traitement de texte.",
"desc" : "(...)",
"imgmargin_title" : "Marge autour de l'image", 
"imgmargin" : "appliquer la marge à l'image", 
"rss" : "RSS", 
"showrss" : "Afficher le contenu dans le flux RSS du site",
"sharelinks" : "Liens utiles",
"sharelinks_desc" : "Afficher les liens 'Envoyer par mail' et 'Imprimer'",
"sociallinks_desc" : "Afficher les liens 'Partager sur Facebook' et 'Partager sur Twitter'",
"sociallinks_notactive" : "Le partage ne fonctionne qu'en mode web. Pour tester le partage passez en mode visiteur, sans oublier de publier la page si nécessaire !",
"showsource" : "Source HTML",
"showsourcedesc" : "Vous pouvez modifiez ci-dessous le code HTML de la note.",
"insertfromword" : "Insérer depuis Word", 
"insertfromworddesc" : "Veuillez coller ci-dessous le texte copié dans Word.",
"insertlink_web" : "Insérer un lien vers un site web", 
"insertlink_web_prompt" : "Veuillez entrer l'adresse web de destination :", 
"insertlink_mailto" : "Insérer un lien vers une adresse électronique",
"insertlink_mailto_prompt" : "Veuillez entrer l'adresse e-mail de destination : ",
"insertlink_page" : "Insérer un lien vers une page du site",
"mailImgNotDisplayed" : "Désolés, mais comme cette page n'est pas publique, le mail partira sans l'image." , 
"mailTitle" : "Titre : %s<br/>" ,
"mailContent" : "Article :<br/>%s<br/>" ,
"mailPageurl" : "----<br/>Retrouvez cet article sur : <a href=\"%url\">%url</a><br/>",
"bodyalertreply" : "Un internaute partage cet article avec vous." ,
"zoomimage" : "Cliquez pour voir l'image en grand"
} ;

var wsg_msgs_fr_js_loaded = true ;
if ( window.qdyn_loaded ) qdyn_loaded ( "wsg_msgs_fr_js_loaded" ) ;

// quomodoclient.json_template[ "wsg" ] dans /clients/eps-building/custom.js
var wsg_json_template = { version : 4 ,  html : "<div><br/></div>" , color : "-1" , header : { display : "true", text : "" , icon : "" } , showsignature : "false" , img : { kind : "" , border : "0" , align : "left" , shrink : "50" } , common : { left : 20 , top : 0 , width : 600 } , palettesstatus : { imagepalette : false , textpalette : false , linkspalette : false }, showrss : "true", sharelinks : "true", sociallinks : "true", textmargin : 10, imgmargin : "true", linkdata : { kind: 0 }, enablezoom : false } ;

var wsg_oldjson_template = {
"1" :  { version : 1 ,  html : "<div><br/></div>" , color : "3" , header : { display : "true" , color: "0", text : "" , icon : "" } , showsignature : "false" , img : { kind : "" , border : "0" , align : "left" , shrink : "50" } , common : { left : 20 , top : 0 , width : 600 } , palettesstatus : { imagepalette : false , textpalette : false , linkspalette : false } },
"2" : { version : 2 ,  html : "<div><br/></div>" , color : "-1" , header : { display : "true" , color: "c1", text : "" , icon : "pushpin" } , showsignature : "false" , img : { kind : "" , border : "0" , align : "left" , shrink : "50" } , common : { left : 20 , top : 0 , width : 600 } , palettesstatus : { imagepalette : false , textpalette : false , linkspalette : false }, showrss : "true", textmargin : 10 },
"3" : { version : 3 ,  html : "<div><br/></div>" , color : "-1" , header : { display : "true", text : "" , icon : "" } , showsignature : "false" , img : { kind : "" , border : "0" , align : "left" , shrink : "50" } , common : { left : 20 , top : 0 , width : 600 } , palettesstatus : { imagepalette : false , textpalette : false , linkspalette : false }, showrss : "true", sharelinks : "true", sociallinks : "true", textmargin : 10, imgmargin : "true" }
} ;


function wsg_upgradejson( r ) {
	if ( ( r.version ) && ( r.version == wsg_json_template.version ) ) return r ;
	if ( r.version<2 ) r = wsg_upgradejsontov2( r ) ;
	if ( r.version<3 ) r = wsg_upgradejsontov3( r ) ;
	if ( r.version<4 ) r = wsg_upgradejsontov4( r ) ;
	r.version = wsg_json_template.version;
	return r ;
}

function wsg_upgradejsontov2( r ) {
	if ( ! r.showrss ) r.showrss = "true" ;
	return r ;
}

function wsg_upgradejsontov3( r ) {
	if ( ! r.sharelinks ) r.sharelinks = "false";
	if ( ! r.textmargin || isNaN( r.textmargin ) ) r.textmargin = wsg_json_template.textmargin;//non modifié lors du passage en v2 mais pose des problèmes pour le slider de la marge de la colonne de gauche (valeur non définie => bug IE7)
	return r ;
}

function wsg_upgradejsontov4( r ) {
	r.linkdata = { kind: 0 } ;
	r.enablezoom = false ;
	return r ;
}

function wsg_mouseoverimg( x ) {
	var div = getContainer( x ) ;
	var $img = $( x ).find( "img" ) ;
	var l = $img.position().left + parseInt( $img.css( "margin-left" ), 10 ) ;
	var t = $img.position().top + parseInt( $img.css( "margin-top" ), 10 ) ;
	$( x ).find( ".wsg_zoombutton" ).css( { "left": l + "px", "top": t + "px" } ).toggle( qsn_thenotes[ div.id ].enablezoom == true );
}

function wsg_mouseoutimg( x ) {
	var div = getContainer( x ) ;
	$( x ).find( ".wsg_zoombutton" ).toggle( false );
}

function wsg_renderimg_fsm( x ) {
	var r = qsn_thenotes[ getContainer( x ).id ] ;
	var src;
	if ( $( x ).attr( "screen" ) ) {
		var array = $( x ).attr( "screen" ).split( ":" );
		var key ;
		key = array[ 0 ] ;
		array.shift();
		path = array.join( ":" );
	
		if ( key && path ) {
			if ( key == "quomodo" ) 
				src = q_spaceabsoluteurl( r.common.ownerid, path );
			else if ( key == "web" ) 
				src = path;
		}
	} else {
		if ( ! r.img ) return ;
		if ( r.img.kind == "pc" ) src = r.img.src ;
		else src = q_spaceabsoluteurl( r.common.ownerid, r.img.src );
	}
	var fsm = ge( "q_fullscreenmask" ) ;
	showblock( "q_fullscreenmask" ) ;//pour que l'image soit réellement affichée et qu'on puisse en mesurer les dimensions
	var div = fsm.appendChild( create_elem( "DIV", { id: "wsg_fsm" } ) ) ;
	var img = div.appendChild( create_elem( "IMG", { title: wsg_message[ "clicktoclose" ] } ) ) ;
	div.style.visibility = "hidden" ;
	img.onclick = function() { wsg_removeimg_fsm( ); } ;
	q_hsetimgsrc( [ img , src ] , function( imgSize ) { wsg_renderimg_fsmfinish( src , imgSize ) ; } , [] , true ) ;
}

function wsg_renderimg_fsmfinish( src , imgSize ) {
	var div = ge( "wsg_fsm" ) ;
	var img = gebtn( div, "IMG" ) ;
	var imgw = ( imgSize ) ? imgSize.width : img.offsetWidth ;
	var imgh = ( imgSize ) ? imgSize.height : img.offsetHeight ;
	var ww = $( window ).width() ;
	if ( isie6() && ( window.pages_mode || pages_mode() != "edit" ) ) ww = Math.min( ( window.pages_maxwidthpage && pages_maxwidthpage() ) || 1002 , ww ) ;// vh : sur IE6 le fullscreenmask en mode view ne prend pas toute la largeur de la fenêtre.
	var wh = $( window ).height() ;
	var h = Math.round( wh * 0.9 ) ; // 90% de la hauteur de la fenêtre
	var w = Math.round( h * imgw / imgh ) ;
	if ( w > Math.round( ww * 0.9 ) ) {
		w = Math.round( ww * 0.9 ) ; // 90% de la largeur de la fenêtre
		h = Math.round( w * imgh / imgw ) ;
	}
	img.style.height = h + "px" ;
	img.style.width = w + "px" ;
	var m = 8 ; // padding
	div.style.top = ( wh - ( 2*m + h ) ) / 2 + "px" ;
	div.style.left = ( ww - ( 2*m + w ) ) / 2 + "px" ;
	div.style.visibility = "visible" ;
}

function wsg_removeimg_fsm( ) {
	rm( "wsg_fsm" ) ;
	hideblock( "q_fullscreenmask" ) ;
}


/*
function q_truncate( s , maxlength ) {
	if ( maxlength === null ) return s ;
	if ( maxlength < 0 ) return "" ;
	var rest = s.substring( maxlength ).split( "\n" )[0].split( "\r" )[0].split( " " )[0].split( "	" )[0] ;
	return s.substring( 0 , maxlength ) + rest ; 
}

function q_innerTextwithLinks( elem , maxlength ) { // [ appended , effective additional length ]
	var n = 0 ;
	var s = "" ;
	if ( maxlength && maxlength < 0 ) return [ "" , 0 ] ;
	if ( ! elem.getElementsByTagName || elem.getElementsByTagName( "A" ).length == 0 ) {
		var appended = q_truncate( ( elem.innerText || elem.nodeValue || "" ) , maxlength || null ) ;
		return [ appended.replace( /&/g , "&amp;" ).replace( /</g , "&lt;" ).replace( />/g , "&gt;" ) , appended.length ] ;
	}
	var children = elem.childNodes ;
	var x , res ;
	for ( var i = 0 ; i < children.length ; i++ ) {
		x = children[ i ] ;
		if ( x.tagName && x.tagName == "A" ) {
			var href = x.href ;
			if ( ! href ) res = q_innerTextwithLinks( x , maxlength ) ;
			else {
				if ( /_[0-9]+_page.html$/.test( href ) ) {
					var pagename = q_svcid2svcpage( "#" + ( href.replace( /^.*\/_([0-9]+)_page.html$/ , "$1" ) ) + "#artemapage@intl" ) ;
					if ( ! pagename ) pagename = href.replace( /^.*\/(_[0-9]+_page.html)$/ , "$1" ) ;
					href = "%qluburl" + pagename ;
				}
				else if ( /(http:\/\/)?(www\.quomodo\.com|beta2\.quomodo\.com|localhost)\/tmp\/.*$/.test( href ) ) href = "%qluburl" + href.replace( /(http:\/\/)?(www\.quomodo\.com|beta2\.quomodo\.com|localhost)\/tmp\// , "" ) ;
				else if ( /\/uploads\//.test( href ) ) href =  href.replace( /^.*\/(uploads\/.*)$/ , "%qluburl$1" ) ;
				res = q_innerTextwithLinks( x ) ;
				res[ 0 ] = "<a href='" + href + "' target='_blank' >" + res[ 0 ] + "</a>" ;
				//if ( maxlength && res[ 1 ] >maxlength ) res[ 0 ] += "..." ;
			}
		} else {
			res = q_innerTextwithLinks( x , maxlength ) ;
			if ( x.tagName && ( x.tagName == "DIV" || x.tagName == "BR" ) ) res[ 0 ] = res[ 0 ]  + "\n" ;
		}
		s += res[ 0 ] ;
		n += res[ 1 ] ;
		maxlength -= res[ 1 ] ;
		if ( maxlength && maxlength < 0 ) return ( ( s ) ? [ s , n ] : [ "" , 0 ] ) ;
	}
	return ( ( s ) ? [ s , n ] : [ "" , 0 ] ) ;
}
*/

/*
function -
function DISPLAY
*/

function wsg_print( elem ){
	var div = getContainer( elem );
	var r = qsn_thenotes[ div.id ];
	var div = $( '<div></div>' )
		.append( $( '<h1></h1>', { html : r.header.text } ) )
//		.append( $( '<h6></h6>', { html : "Article publié le : " + $.datepicker.formatDate( "dd/mm/yy", q_events_parseDate( r.common.date ) ) + ( ( $.inArray( q_pagemode(), [ "view", "edit" ] ) != -1 ) ? ( ", par " + ( members[ r.common.ownerid ].firstname || "" )+ " " + members[ r.common.ownerid ].username ) : "" ) } ) )
		.append( $( '<div></div>', { html : r.html } ) )
	q_printThis( $( '<div></div>' ).append( div ).html() );
}

function wsg_prepareNoteHTML( div , r , options ){
	var htmldiv = gebcn( div , "wsg_content_html" ) ;
	var host = "http://" + ( ( window.clubhost ) ? clubhost : window.location.host + "/" + window.clubprivatedomain ) + "/" ;
	if ( ! htmldiv ) var contentHTML = "" ;
	else {
		options = $.extend( { maxlength : 10000 , mode : "html" , href : function( href, svcid ){

			if ( /_[0-9]+_page.html$/.test( href ) && ! svcid ) svcid = "#" + ( href.replace( /^.*\/_([0-9]+)_page.html$/ , "$1" ) ) + "#artemapage@intl" ;
			if ( svcid ) {
				var hrefpath = q_svcid2hrefpath( svcid ) ;
				if ( hrefpath ) return host + hrefpath ;
				return href ;
			}
			if ( /\/uploads\//.test( href ) ) return host + href.replace( /^.*\/(uploads\/.*)$/ , "$1" ) ;
			return href ;
		} } , options ) ;
		var res = q_innerLightHTML( htmldiv , options ) ;
		var contentHTML = res[ 0 ] ;
	}
	if ( r.img && r.img.src ) {
		if ( ! q_currsvcisweb() ) {
			q_alert( wsg_message[ "mailImgNotDisplayed" ] ) ;
			return contentHTML ;
		}
		var tw = options.w || Math.min( 650 , div.offsetWidth ) ;
		function imgWidth(){
			return Math.floor( ( tw - 10 ) / 100 * parseInt( r.img.shrink , 10 ) ) ;
		}
		function imgSrc(){
			if ( r.img.kind == "web" ) return r.img.src ;
			//return host + r.img.src ;
			var formats = [ "quarterscreen" , "halfscreen" , "screen" ] ;
			var width = imgWidth() ;
			if ( width > 500 ) formats = [ "screen" , "halfscreen" , "quarterscreen" ] ;
			else if ( width > 250 ) formats = [ "halfscreen" , "screen" , "quarterscreen" ] ;
			if ( ! r.img.formats ) return host + ( r.img.downloadsrc || r.img.src ) ;
			var src = r.img.formats[ formats[ 0 ] ] ;
			if ( ! src ) src = r.img.formats[ formats[ 1 ] ] ;
			if ( ! src ) src = r.img.formats[ formats[ 2 ] ] ;
			return host + src ;
		}
		function imgAlign(){
			if ( r.img.shrink == "100" ) return "center" ;
			if ( r.img.align == "left" ) return "left" ;
			return "right" ;
		}
		var html = '<table cellspacing="12" width="' + tw + '"><tbody><tr>' ;
		var htmlimg = '<td align="' + imgAlign() + '" valign="top"><img width="' + imgWidth() + '" src="' + imgSrc() + '" /></td>' ;
		var htmltxt = ( contentHTML == "" ) ? '' : ( '<td valign="top">' + contentHTML + '</td>' ) ;
		html += ( r.img.shrink == "100" || r.img.align == "left" ) ? htmlimg : htmltxt ;
		if ( r.img.shrink == "100" ) html += '</tr><tr>' ;
		html += ( r.img.shrink == "100" || r.img.align == "left" ) ? htmltxt : htmlimg ;
		html += '</tr></tbody></table>' ;
		return html ;
	} else return contentHTML ;
}
function wsg_prepareMail( div , r , wantdefault ){
	if ( ! wantdefault && window.client_wsg_prepareMail ) return client_wsg_prepareMail( div , r ) ;
	var contentmail = "" ;
	if ( r.header.text ) contentmail += wsg_message[ "mailTitle" ].replace( /%s/ , "<b>" + r.header.text.replace( /\r/g , "\n" ).split( "\n" ).join( "</b><br/><b>" ) + "</b>" ) ;
	contentmail += wsg_message[ "mailContent" ].replace( /%s/ , wsg_prepareNoteHTML( div , r ) ) ;
	var mailPageurl = ( window.quomodoclient && quomodoclient.message && quomodoclient.message[ "mailPageurl" ] != undefined ) ? quomodoclient.message[ "mailPageurl" ] : wsg_message[ "mailPageurl" ] ;
	mailPageurl = mailPageurl.replace( /%name/g, ( window.spacexml && spacexml.infos && spacexml.infos.name ) || "" ) ;
	if ( q_pagemode() == "web" ) {
		contentmail += mailPageurl.replace( /%url/g , window.location.href ) ;
	} else if ( q_currsvcisweb() ) {
		var svc = q_currsvcjson() ;
		contentmail += mailPageurl.replace( /%url/g , "http://" + ( ( window.clubhost ) ? clubhost : window.location.host + "/" + window.clubprivatedomain ) + "/" + svc.weblink ) ;
	} else if ( ! q_currsvcisweb() ) {
		contentmail += mailPageurl.replace( /%url/g , q_privateurl( currsvcid, true ) ) ;
	}
	return { "content" : contentmail, "replyto_txt" : wsg_message[ "bodyalertreply" ] } ;
}
function wsg_mail( elem ){
	var div = getContainer( elem );
	var r = qsn_thenotes[ div.id ];
	qlub_openemailalert( "mailthis" , wsg_prepareMail( div , r ) );
}

function wsg_exportnl( id ) {
	if ( id == "note_000000002" ) return "" ;
	var r = qsn_thenotes[ id ] ;
	var div = ge( id ) ;
	var htmldiv = gebcn( div , "wsg_content_html" ) ;
	if ( ! htmldiv ) return "" ;
	var wsgitem = {} ;
	var thedate = q_isot2date( r.common.date ) ;
	var thecurrdate = new Date() ;
	if (thecurrdate<thedate) thedate = thecurrdate ;
	wsgitem.pubDate = q_date2isot( thedate ) ;
	var pagelink = q_svcid2svcpage( currsvcid ) + "#" + id ;
	wsgitem.link = "%%qluburl%%" + pagelink ; // inutile je pense ; sert exclusivement pour rss
	wsgitem.notekind = r.common.notekind ;
	wsgitem.id = ( document.mainform.q_space.value ) + "-" + currsvcid + "-" + id ;
	//var res = q_nl_innerTextwithLinks( htmldiv , null , null , "container" ) ;
	var res = q_innerLightHTML( htmldiv , { mode : "html" , href : function( href, svcid, s ){
		if ( /_[0-9]+_page.html$/.test( href ) && ! svcid ) svcid = "#" + ( href.replace( /^.*\/_([0-9]+)_page.html$/ , "$1" ) ) + "#artemapage@intl" ;
		if ( svcid ) {
			var hrefpath = q_svcid2hrefpath( svcid ) ;
			if ( hrefpath ) return "http://%%/qluburl%%" + hrefpath ;
			q_alert( qlub_nl_msgs[ "brokenlink" ].replace( /%linktext/ , s || "(???)" ) ) ;
			return href ;
		}
		var basehtml = window.location.href.replace( /\/[^/]*$/ , "/" ) ;
		var re = new RegExp( "^(" + basehtml + ")?uploads/" ) ;
		if ( re.test( href ) ) return href.replace( /^.*\/(uploads\/.*)$/ , "http://%%/qluburl%%" + "$1" ) ;
		return href ;
	} } ) ;
	var description = res[ 0 ] ;
	description = description.replace( / /g , " " ).replace( /\r/g , "\n" ).replace( /^([\s\t\r\n]*<br\/?>)+/ , "" ).replace( /(<br\/?>[\s\t\r\n]*)+$/ , "" ) ;
	wsgitem.image = r.img ;
	wsgitem.content = description ;
	wsgitem.rawtitle = ( r.header && r.header.display == "true" && r.header.text ) ? r.header.text : "" ;
	if ( r.header.text ) var title = r.header.text ;
	else {
		var maxtitlelength = 65 ;
		var i = 0 ;
		var title = "" ;
		try { title = /^[ \t]*([^ \t].+)/m.exec( description.replace( /<br\/?>/g , "\n" ).replace( /<[^>]+>/g, "" ) )[ 0 ] } catch( err ) { } ;
		title = q_nl_truncate( title , maxtitlelength ) ;
	}

	wsgitem.title = title ;
	var imgdesc = "" ;
	var hspacedesc = "" ;
	if ( r.img && r.img.src ) {
		var imgurl = r.img.src ;
		wsgitem.img = imgurl ;
		var w = ( window.client_nl_img_width || 120 ) ;
		var dims = qlub_nl_imgsDims[ qlub_nl_imgurl( r ) ] ;
		var dimAttributes = 'width="' + w + '" ' ;
		if ( dims.height && dims.width ) {
			dimAttributes += 'height="' + Math.round( w * dims.height / dims.width ) + '" ' ;
			hspacedesc = '<img src="http://www.quomodo.com/images/blank.gif" width="25" height="' + Math.round( w * dims.height / dims.width ) + '" align="left" vspace="15" />' ;
		}
		// if ( /\uploads\//.test( imgurl ) ) imgurl = "http://%%nlurlimg%%" + qsn_screenfilepath( r , 1 ) ;
		if ( r.img.kind && r.img.kind != "web" ) {
			imgurl = "http://%%nlurlimg%%" + qsn_screenfilepath( r , 1 ) ;
			qlub_nl_imgs.push( imgurl.replace( /http:\/\/%%nlurlimg%%/ , "" ) ) ;
		}
		imgdesc = '<img src="' + imgurl + '" ' + dimAttributes + 'alt="' + escapeattribute( title ) + '" align="left" vspace="15" />' ;
	}
	wsgitem.description = imgdesc + hspacedesc + "<br/>" + description ;
	return wsgitem ;
}

function wsg_facebook( elem ){
	var div = getContainer( elem );
	var r = qsn_thenotes[ div.id ];
	var noteid = div.id;
	
	if ( q_pagemode() == "web" ) {
		//var currentNote_url =  encodeURIComponent( "http://" + document.location.host + document.location.pathname + "?share=" + encodeURIComponent( spacexml.infos.privatedomain + "/" + currsvcid.replace( /[^0-9]/g, "" ) +"/" + noteid ) + "#" + noteid );

		var url = $( ".wsg_noteimage", div ).attr( "src" ) ;
		function share( size ) {
			var sizeQuery = "" ;			if ( size ) sizeQuery = "-w" + size.width + "-h" + size.height ;			var currentNote_url =  encodeURIComponent( "http://" + document.location.host + document.location.pathname + "?share=" + encodeURIComponent( currsvcid.replace( /[^0-9]/g, "" ) +"-" + noteid + "-" + spacexml.infos.privatedomain + "-" + r.common.date.replace( /[^0-9]/g, "" ) ) + sizeQuery + "#" + noteid );
			window.open( "https://www.facebook.com/share.php?u=" + currentNote_url );
		}
		if ( ! url ) return share() ;
		q_fsm_wait() ;		q_waitimgloaded( url, function( size ){ 
			q_fsm_delete() ;			share( size ) ;		}, null, true, function() {
			q_fsm_delete() ;
		} ) ;
	} else {
		q_alert( wsg_message[ "sociallinks_notactive" ] ) ;
	}
}
function wsg_twitter( elem ){
	var div = getContainer( elem );
	var r = qsn_thenotes[ div.id ];
	var noteid = div.id;
	
	if ( q_pagemode() == "web" ) {
		var currentNote_url = encodeURIComponent( document.location.href + "#" + noteid );
		
		var currentNote_title;
		var maxtitlelength = 120;
		if ( r.header.display != "false" && r.header.text ) {
			currentNote_title = r.header.text;
			if ( currentNote_title.length > maxtitlelength ) {
				var rest = currentNote_title.substring( maxtitlelength - 4 ).replace( /^([^ ]*) .*/ , "$1..." );
				currentNote_title = currentNote_title.substring( 0 , maxtitlelength-1 ) + rest; 
			}
		} else {
			currentNote_title = gebcn( div , "wsg_content_html" );
			var res = q_innerLightHTML( currentNote_title , { maxlength : 116 , href : function( href ){
				return false;
			} } ) ;
			currentNote_title = res[ 0 ].replace( / /g , " " ).replace( /\r/g , "\n" ) ; // vh pour virer les blancs collants -- e pour virer les CR
		}
		currentNote_title = encodeURIComponent( currentNote_title );
		window.open( "https://twitter.com/share?text=" + currentNote_title + "&url=" + currentNote_url );	
	} else {
		q_alert( wsg_message[ "sociallinks_notactive" ] ) ;
	}
}


